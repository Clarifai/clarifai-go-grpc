// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.6
// source: proto/clarifai/api/service.proto

package api

import (
	context "context"
	status "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	V2_ListConceptRelations_FullMethodName                  = "/clarifai.api.V2/ListConceptRelations"
	V2_PostConceptRelations_FullMethodName                  = "/clarifai.api.V2/PostConceptRelations"
	V2_DeleteConceptRelations_FullMethodName                = "/clarifai.api.V2/DeleteConceptRelations"
	V2_GetConceptCounts_FullMethodName                      = "/clarifai.api.V2/GetConceptCounts"
	V2_GetConcept_FullMethodName                            = "/clarifai.api.V2/GetConcept"
	V2_ListConcepts_FullMethodName                          = "/clarifai.api.V2/ListConcepts"
	V2_ListModelConcepts_FullMethodName                     = "/clarifai.api.V2/ListModelConcepts"
	V2_PostConceptsSearches_FullMethodName                  = "/clarifai.api.V2/PostConceptsSearches"
	V2_PostConcepts_FullMethodName                          = "/clarifai.api.V2/PostConcepts"
	V2_PatchConcepts_FullMethodName                         = "/clarifai.api.V2/PatchConcepts"
	V2_GetConceptLanguage_FullMethodName                    = "/clarifai.api.V2/GetConceptLanguage"
	V2_ListConceptLanguages_FullMethodName                  = "/clarifai.api.V2/ListConceptLanguages"
	V2_PostConceptLanguages_FullMethodName                  = "/clarifai.api.V2/PostConceptLanguages"
	V2_PatchConceptLanguages_FullMethodName                 = "/clarifai.api.V2/PatchConceptLanguages"
	V2_ListKnowledgeGraphs_FullMethodName                   = "/clarifai.api.V2/ListKnowledgeGraphs"
	V2_PostKnowledgeGraphs_FullMethodName                   = "/clarifai.api.V2/PostKnowledgeGraphs"
	V2_GetAnnotation_FullMethodName                         = "/clarifai.api.V2/GetAnnotation"
	V2_ListAnnotations_FullMethodName                       = "/clarifai.api.V2/ListAnnotations"
	V2_PostAnnotations_FullMethodName                       = "/clarifai.api.V2/PostAnnotations"
	V2_PatchAnnotations_FullMethodName                      = "/clarifai.api.V2/PatchAnnotations"
	V2_PatchAnnotationsStatus_FullMethodName                = "/clarifai.api.V2/PatchAnnotationsStatus"
	V2_DeleteAnnotation_FullMethodName                      = "/clarifai.api.V2/DeleteAnnotation"
	V2_DeleteAnnotations_FullMethodName                     = "/clarifai.api.V2/DeleteAnnotations"
	V2_ListAnnotationTracks_FullMethodName                  = "/clarifai.api.V2/ListAnnotationTracks"
	V2_PostAnnotationTracks_FullMethodName                  = "/clarifai.api.V2/PostAnnotationTracks"
	V2_PatchAnnotationTracks_FullMethodName                 = "/clarifai.api.V2/PatchAnnotationTracks"
	V2_DeleteAnnotationTracks_FullMethodName                = "/clarifai.api.V2/DeleteAnnotationTracks"
	V2_PatchAnnotationsSearches_FullMethodName              = "/clarifai.api.V2/PatchAnnotationsSearches"
	V2_PostAnnotationsSearches_FullMethodName               = "/clarifai.api.V2/PostAnnotationsSearches"
	V2_ListAnnotationWorkers_FullMethodName                 = "/clarifai.api.V2/ListAnnotationWorkers"
	V2_GetInputCount_FullMethodName                         = "/clarifai.api.V2/GetInputCount"
	V2_StreamInputs_FullMethodName                          = "/clarifai.api.V2/StreamInputs"
	V2_GetInputSamples_FullMethodName                       = "/clarifai.api.V2/GetInputSamples"
	V2_GetInput_FullMethodName                              = "/clarifai.api.V2/GetInput"
	V2_GetInputVideoManifest_FullMethodName                 = "/clarifai.api.V2/GetInputVideoManifest"
	V2_ListInputs_FullMethodName                            = "/clarifai.api.V2/ListInputs"
	V2_PostInputs_FullMethodName                            = "/clarifai.api.V2/PostInputs"
	V2_PatchInputs_FullMethodName                           = "/clarifai.api.V2/PatchInputs"
	V2_DeleteInput_FullMethodName                           = "/clarifai.api.V2/DeleteInput"
	V2_DeleteInputs_FullMethodName                          = "/clarifai.api.V2/DeleteInputs"
	V2_PatchInputsSearches_FullMethodName                   = "/clarifai.api.V2/PatchInputsSearches"
	V2_PostInputsSearches_FullMethodName                    = "/clarifai.api.V2/PostInputsSearches"
	V2_PostModelOutputs_FullMethodName                      = "/clarifai.api.V2/PostModelOutputs"
	V2_GenerateModelOutputs_FullMethodName                  = "/clarifai.api.V2/GenerateModelOutputs"
	V2_StreamModelOutputs_FullMethodName                    = "/clarifai.api.V2/StreamModelOutputs"
	V2_ListDatasets_FullMethodName                          = "/clarifai.api.V2/ListDatasets"
	V2_GetDataset_FullMethodName                            = "/clarifai.api.V2/GetDataset"
	V2_PostDatasets_FullMethodName                          = "/clarifai.api.V2/PostDatasets"
	V2_PatchDatasets_FullMethodName                         = "/clarifai.api.V2/PatchDatasets"
	V2_DeleteDatasets_FullMethodName                        = "/clarifai.api.V2/DeleteDatasets"
	V2_ListDatasetInputs_FullMethodName                     = "/clarifai.api.V2/ListDatasetInputs"
	V2_GetDatasetInput_FullMethodName                       = "/clarifai.api.V2/GetDatasetInput"
	V2_PostDatasetInputs_FullMethodName                     = "/clarifai.api.V2/PostDatasetInputs"
	V2_DeleteDatasetInputs_FullMethodName                   = "/clarifai.api.V2/DeleteDatasetInputs"
	V2_ListDatasetVersions_FullMethodName                   = "/clarifai.api.V2/ListDatasetVersions"
	V2_GetDatasetVersion_FullMethodName                     = "/clarifai.api.V2/GetDatasetVersion"
	V2_ListDatasetVersionMetricsGroups_FullMethodName       = "/clarifai.api.V2/ListDatasetVersionMetricsGroups"
	V2_PostDatasetVersions_FullMethodName                   = "/clarifai.api.V2/PostDatasetVersions"
	V2_PatchDatasetVersions_FullMethodName                  = "/clarifai.api.V2/PatchDatasetVersions"
	V2_DeleteDatasetVersions_FullMethodName                 = "/clarifai.api.V2/DeleteDatasetVersions"
	V2_PutDatasetVersionExports_FullMethodName              = "/clarifai.api.V2/PutDatasetVersionExports"
	V2_GetModelType_FullMethodName                          = "/clarifai.api.V2/GetModelType"
	V2_ListOpenSourceLicenses_FullMethodName                = "/clarifai.api.V2/ListOpenSourceLicenses"
	V2_ListModelTypes_FullMethodName                        = "/clarifai.api.V2/ListModelTypes"
	V2_GetModel_FullMethodName                              = "/clarifai.api.V2/GetModel"
	V2_GetModelOutputInfo_FullMethodName                    = "/clarifai.api.V2/GetModelOutputInfo"
	V2_ListModels_FullMethodName                            = "/clarifai.api.V2/ListModels"
	V2_GetResourceCounts_FullMethodName                     = "/clarifai.api.V2/GetResourceCounts"
	V2_PostModelsSearches_FullMethodName                    = "/clarifai.api.V2/PostModelsSearches"
	V2_PostModels_FullMethodName                            = "/clarifai.api.V2/PostModels"
	V2_PatchModels_FullMethodName                           = "/clarifai.api.V2/PatchModels"
	V2_PatchModelIds_FullMethodName                         = "/clarifai.api.V2/PatchModelIds"
	V2_DeleteModel_FullMethodName                           = "/clarifai.api.V2/DeleteModel"
	V2_DeleteModels_FullMethodName                          = "/clarifai.api.V2/DeleteModels"
	V2_PatchModelCheckConsents_FullMethodName               = "/clarifai.api.V2/PatchModelCheckConsents"
	V2_PatchModelToolkits_FullMethodName                    = "/clarifai.api.V2/PatchModelToolkits"
	V2_PatchModelUseCases_FullMethodName                    = "/clarifai.api.V2/PatchModelUseCases"
	V2_PatchModelLanguages_FullMethodName                   = "/clarifai.api.V2/PatchModelLanguages"
	V2_ListModelInputs_FullMethodName                       = "/clarifai.api.V2/ListModelInputs"
	V2_GetModelVersion_FullMethodName                       = "/clarifai.api.V2/GetModelVersion"
	V2_ListModelVersions_FullMethodName                     = "/clarifai.api.V2/ListModelVersions"
	V2_PostWorkflowVersionsUnPublish_FullMethodName         = "/clarifai.api.V2/PostWorkflowVersionsUnPublish"
	V2_PostWorkflowVersionsPublish_FullMethodName           = "/clarifai.api.V2/PostWorkflowVersionsPublish"
	V2_PostModelVersionsPublish_FullMethodName              = "/clarifai.api.V2/PostModelVersionsPublish"
	V2_PostModelVersionsUnPublish_FullMethodName            = "/clarifai.api.V2/PostModelVersionsUnPublish"
	V2_PostModelVersions_FullMethodName                     = "/clarifai.api.V2/PostModelVersions"
	V2_PatchModelVersions_FullMethodName                    = "/clarifai.api.V2/PatchModelVersions"
	V2_DeleteModelVersion_FullMethodName                    = "/clarifai.api.V2/DeleteModelVersion"
	V2_PostModelVersionsUpload_FullMethodName               = "/clarifai.api.V2/PostModelVersionsUpload"
	V2_PostModelMigration_FullMethodName                    = "/clarifai.api.V2/PostModelMigration"
	V2_PutModelVersionExports_FullMethodName                = "/clarifai.api.V2/PutModelVersionExports"
	V2_GetModelVersionExport_FullMethodName                 = "/clarifai.api.V2/GetModelVersionExport"
	V2_GetModelVersionMetrics_FullMethodName                = "/clarifai.api.V2/GetModelVersionMetrics"
	V2_PostModelVersionMetrics_FullMethodName               = "/clarifai.api.V2/PostModelVersionMetrics"
	V2_PostModelVersionEvaluations_FullMethodName           = "/clarifai.api.V2/PostModelVersionEvaluations"
	V2_ListModelVersionEvaluations_FullMethodName           = "/clarifai.api.V2/ListModelVersionEvaluations"
	V2_GetModelVersionEvaluation_FullMethodName             = "/clarifai.api.V2/GetModelVersionEvaluation"
	V2_PostEvaluations_FullMethodName                       = "/clarifai.api.V2/PostEvaluations"
	V2_ListEvaluations_FullMethodName                       = "/clarifai.api.V2/ListEvaluations"
	V2_GetEvaluation_FullMethodName                         = "/clarifai.api.V2/GetEvaluation"
	V2_ListModelReferences_FullMethodName                   = "/clarifai.api.V2/ListModelReferences"
	V2_GetModelVersionInputExample_FullMethodName           = "/clarifai.api.V2/GetModelVersionInputExample"
	V2_ListModelVersionInputExamples_FullMethodName         = "/clarifai.api.V2/ListModelVersionInputExamples"
	V2_GetWorkflow_FullMethodName                           = "/clarifai.api.V2/GetWorkflow"
	V2_ListWorkflows_FullMethodName                         = "/clarifai.api.V2/ListWorkflows"
	V2_PostWorkflows_FullMethodName                         = "/clarifai.api.V2/PostWorkflows"
	V2_PatchWorkflows_FullMethodName                        = "/clarifai.api.V2/PatchWorkflows"
	V2_PatchWorkflowIds_FullMethodName                      = "/clarifai.api.V2/PatchWorkflowIds"
	V2_DeleteWorkflow_FullMethodName                        = "/clarifai.api.V2/DeleteWorkflow"
	V2_DeleteWorkflows_FullMethodName                       = "/clarifai.api.V2/DeleteWorkflows"
	V2_PostWorkflowResults_FullMethodName                   = "/clarifai.api.V2/PostWorkflowResults"
	V2_ListWorkflowVersions_FullMethodName                  = "/clarifai.api.V2/ListWorkflowVersions"
	V2_GetWorkflowVersion_FullMethodName                    = "/clarifai.api.V2/GetWorkflowVersion"
	V2_DeleteWorkflowVersions_FullMethodName                = "/clarifai.api.V2/DeleteWorkflowVersions"
	V2_PatchWorkflowVersions_FullMethodName                 = "/clarifai.api.V2/PatchWorkflowVersions"
	V2_GetKey_FullMethodName                                = "/clarifai.api.V2/GetKey"
	V2_ListKeys_FullMethodName                              = "/clarifai.api.V2/ListKeys"
	V2_ListAppKeys_FullMethodName                           = "/clarifai.api.V2/ListAppKeys"
	V2_DeleteKey_FullMethodName                             = "/clarifai.api.V2/DeleteKey"
	V2_PostKeys_FullMethodName                              = "/clarifai.api.V2/PostKeys"
	V2_PatchKeys_FullMethodName                             = "/clarifai.api.V2/PatchKeys"
	V2_MyScopes_FullMethodName                              = "/clarifai.api.V2/MyScopes"
	V2_MyScopesUser_FullMethodName                          = "/clarifai.api.V2/MyScopesUser"
	V2_MyScopesRoot_FullMethodName                          = "/clarifai.api.V2/MyScopesRoot"
	V2_ListScopes_FullMethodName                            = "/clarifai.api.V2/ListScopes"
	V2_GetApp_FullMethodName                                = "/clarifai.api.V2/GetApp"
	V2_ListApps_FullMethodName                              = "/clarifai.api.V2/ListApps"
	V2_DeleteApp_FullMethodName                             = "/clarifai.api.V2/DeleteApp"
	V2_PostApps_FullMethodName                              = "/clarifai.api.V2/PostApps"
	V2_PatchApps_FullMethodName                             = "/clarifai.api.V2/PatchApps"
	V2_PatchAppsDetails_FullMethodName                      = "/clarifai.api.V2/PatchAppsDetails"
	V2_PatchAppsIds_FullMethodName                          = "/clarifai.api.V2/PatchAppsIds"
	V2_PatchApp_FullMethodName                              = "/clarifai.api.V2/PatchApp"
	V2_PostAppsSearches_FullMethodName                      = "/clarifai.api.V2/PostAppsSearches"
	V2_GetUser_FullMethodName                               = "/clarifai.api.V2/GetUser"
	V2_PostValidatePassword_FullMethodName                  = "/clarifai.api.V2/PostValidatePassword"
	V2_GetSearch_FullMethodName                             = "/clarifai.api.V2/GetSearch"
	V2_ListSearches_FullMethodName                          = "/clarifai.api.V2/ListSearches"
	V2_PatchSearches_FullMethodName                         = "/clarifai.api.V2/PatchSearches"
	V2_PostSearches_FullMethodName                          = "/clarifai.api.V2/PostSearches"
	V2_PostSearchesByID_FullMethodName                      = "/clarifai.api.V2/PostSearchesByID"
	V2_PostAnnotationSearchMetrics_FullMethodName           = "/clarifai.api.V2/PostAnnotationSearchMetrics"
	V2_GetAnnotationSearchMetrics_FullMethodName            = "/clarifai.api.V2/GetAnnotationSearchMetrics"
	V2_ListAnnotationSearchMetrics_FullMethodName           = "/clarifai.api.V2/ListAnnotationSearchMetrics"
	V2_DeleteAnnotationSearchMetrics_FullMethodName         = "/clarifai.api.V2/DeleteAnnotationSearchMetrics"
	V2_DeleteSearch_FullMethodName                          = "/clarifai.api.V2/DeleteSearch"
	V2_ListAnnotationFilters_FullMethodName                 = "/clarifai.api.V2/ListAnnotationFilters"
	V2_GetAnnotationFilter_FullMethodName                   = "/clarifai.api.V2/GetAnnotationFilter"
	V2_PostAnnotationFilters_FullMethodName                 = "/clarifai.api.V2/PostAnnotationFilters"
	V2_PatchAnnotationFilters_FullMethodName                = "/clarifai.api.V2/PatchAnnotationFilters"
	V2_DeleteAnnotationFilters_FullMethodName               = "/clarifai.api.V2/DeleteAnnotationFilters"
	V2_ListStatusCodes_FullMethodName                       = "/clarifai.api.V2/ListStatusCodes"
	V2_GetStatusCode_FullMethodName                         = "/clarifai.api.V2/GetStatusCode"
	V2_ListCollaborators_FullMethodName                     = "/clarifai.api.V2/ListCollaborators"
	V2_PostCollaborators_FullMethodName                     = "/clarifai.api.V2/PostCollaborators"
	V2_PatchCollaborators_FullMethodName                    = "/clarifai.api.V2/PatchCollaborators"
	V2_DeleteCollaborators_FullMethodName                   = "/clarifai.api.V2/DeleteCollaborators"
	V2_ListCollaborations_FullMethodName                    = "/clarifai.api.V2/ListCollaborations"
	V2_PostAppDuplications_FullMethodName                   = "/clarifai.api.V2/PostAppDuplications"
	V2_ListAppDuplications_FullMethodName                   = "/clarifai.api.V2/ListAppDuplications"
	V2_GetAppDuplication_FullMethodName                     = "/clarifai.api.V2/GetAppDuplication"
	V2_PostTasks_FullMethodName                             = "/clarifai.api.V2/PostTasks"
	V2_GetTaskAnnotationCount_FullMethodName                = "/clarifai.api.V2/GetTaskAnnotationCount"
	V2_GetTaskInputCount_FullMethodName                     = "/clarifai.api.V2/GetTaskInputCount"
	V2_GetTask_FullMethodName                               = "/clarifai.api.V2/GetTask"
	V2_ListTasks_FullMethodName                             = "/clarifai.api.V2/ListTasks"
	V2_PatchTasks_FullMethodName                            = "/clarifai.api.V2/PatchTasks"
	V2_DeleteTasks_FullMethodName                           = "/clarifai.api.V2/DeleteTasks"
	V2_PostLabelOrders_FullMethodName                       = "/clarifai.api.V2/PostLabelOrders"
	V2_GetLabelOrder_FullMethodName                         = "/clarifai.api.V2/GetLabelOrder"
	V2_ListLabelOrders_FullMethodName                       = "/clarifai.api.V2/ListLabelOrders"
	V2_PatchLabelOrders_FullMethodName                      = "/clarifai.api.V2/PatchLabelOrders"
	V2_DeleteLabelOrders_FullMethodName                     = "/clarifai.api.V2/DeleteLabelOrders"
	V2_PostCollectors_FullMethodName                        = "/clarifai.api.V2/PostCollectors"
	V2_GetCollector_FullMethodName                          = "/clarifai.api.V2/GetCollector"
	V2_ListCollectors_FullMethodName                        = "/clarifai.api.V2/ListCollectors"
	V2_PatchCollectors_FullMethodName                       = "/clarifai.api.V2/PatchCollectors"
	V2_DeleteCollectors_FullMethodName                      = "/clarifai.api.V2/DeleteCollectors"
	V2_PostStatValues_FullMethodName                        = "/clarifai.api.V2/PostStatValues"
	V2_PostStatValuesAggregate_FullMethodName               = "/clarifai.api.V2/PostStatValuesAggregate"
	V2_GetModule_FullMethodName                             = "/clarifai.api.V2/GetModule"
	V2_ListModules_FullMethodName                           = "/clarifai.api.V2/ListModules"
	V2_PostModules_FullMethodName                           = "/clarifai.api.V2/PostModules"
	V2_PatchModules_FullMethodName                          = "/clarifai.api.V2/PatchModules"
	V2_DeleteModules_FullMethodName                         = "/clarifai.api.V2/DeleteModules"
	V2_GetModuleVersion_FullMethodName                      = "/clarifai.api.V2/GetModuleVersion"
	V2_ListModuleVersions_FullMethodName                    = "/clarifai.api.V2/ListModuleVersions"
	V2_PostModuleVersions_FullMethodName                    = "/clarifai.api.V2/PostModuleVersions"
	V2_PatchModuleVersions_FullMethodName                   = "/clarifai.api.V2/PatchModuleVersions"
	V2_DeleteModuleVersions_FullMethodName                  = "/clarifai.api.V2/DeleteModuleVersions"
	V2_GetModuleVersionUsageCount_FullMethodName            = "/clarifai.api.V2/GetModuleVersionUsageCount"
	V2_GetInstalledModuleVersion_FullMethodName             = "/clarifai.api.V2/GetInstalledModuleVersion"
	V2_ListInstalledModuleVersions_FullMethodName           = "/clarifai.api.V2/ListInstalledModuleVersions"
	V2_PostInstalledModuleVersions_FullMethodName           = "/clarifai.api.V2/PostInstalledModuleVersions"
	V2_DeleteInstalledModuleVersions_FullMethodName         = "/clarifai.api.V2/DeleteInstalledModuleVersions"
	V2_PostInstalledModuleVersionsKey_FullMethodName        = "/clarifai.api.V2/PostInstalledModuleVersionsKey"
	V2_PostBulkOperations_FullMethodName                    = "/clarifai.api.V2/PostBulkOperations"
	V2_ListBulkOperations_FullMethodName                    = "/clarifai.api.V2/ListBulkOperations"
	V2_GetBulkOperation_FullMethodName                      = "/clarifai.api.V2/GetBulkOperation"
	V2_CancelBulkOperations_FullMethodName                  = "/clarifai.api.V2/CancelBulkOperations"
	V2_DeleteBulkOperations_FullMethodName                  = "/clarifai.api.V2/DeleteBulkOperations"
	V2_ListNextTaskAssignments_FullMethodName               = "/clarifai.api.V2/ListNextTaskAssignments"
	V2_PutTaskAssignments_FullMethodName                    = "/clarifai.api.V2/PutTaskAssignments"
	V2_ListInputsAddJobs_FullMethodName                     = "/clarifai.api.V2/ListInputsAddJobs"
	V2_GetInputsAddJob_FullMethodName                       = "/clarifai.api.V2/GetInputsAddJob"
	V2_CancelInputsAddJob_FullMethodName                    = "/clarifai.api.V2/CancelInputsAddJob"
	V2_PostUploads_FullMethodName                           = "/clarifai.api.V2/PostUploads"
	V2_PutUploadContentParts_FullMethodName                 = "/clarifai.api.V2/PutUploadContentParts"
	V2_GetUpload_FullMethodName                             = "/clarifai.api.V2/GetUpload"
	V2_ListUploads_FullMethodName                           = "/clarifai.api.V2/ListUploads"
	V2_DeleteUploads_FullMethodName                         = "/clarifai.api.V2/DeleteUploads"
	V2_PostInputsDataSources_FullMethodName                 = "/clarifai.api.V2/PostInputsDataSources"
	V2_GetInputsExtractionJob_FullMethodName                = "/clarifai.api.V2/GetInputsExtractionJob"
	V2_ListInputsExtractionJobs_FullMethodName              = "/clarifai.api.V2/ListInputsExtractionJobs"
	V2_CancelInputsExtractionJobs_FullMethodName            = "/clarifai.api.V2/CancelInputsExtractionJobs"
	V2_PostInputsUploads_FullMethodName                     = "/clarifai.api.V2/PostInputsUploads"
	V2_ListPipelineVersionRuns_FullMethodName               = "/clarifai.api.V2/ListPipelineVersionRuns"
	V2_GetRunner_FullMethodName                             = "/clarifai.api.V2/GetRunner"
	V2_ListRunners_FullMethodName                           = "/clarifai.api.V2/ListRunners"
	V2_PostRunners_FullMethodName                           = "/clarifai.api.V2/PostRunners"
	V2_PatchRunners_FullMethodName                          = "/clarifai.api.V2/PatchRunners"
	V2_DeleteRunners_FullMethodName                         = "/clarifai.api.V2/DeleteRunners"
	V2_ListRunnerItems_FullMethodName                       = "/clarifai.api.V2/ListRunnerItems"
	V2_PostRunnerItemOutputs_FullMethodName                 = "/clarifai.api.V2/PostRunnerItemOutputs"
	V2_ProcessRunnerItems_FullMethodName                    = "/clarifai.api.V2/ProcessRunnerItems"
	V2_PostModelVersionsTrainingTimeEstimate_FullMethodName = "/clarifai.api.V2/PostModelVersionsTrainingTimeEstimate"
	V2_ListCloudProviders_FullMethodName                    = "/clarifai.api.V2/ListCloudProviders"
	V2_ListCloudRegions_FullMethodName                      = "/clarifai.api.V2/ListCloudRegions"
	V2_ListInstanceTypes_FullMethodName                     = "/clarifai.api.V2/ListInstanceTypes"
	V2_GetComputeCluster_FullMethodName                     = "/clarifai.api.V2/GetComputeCluster"
	V2_ListComputeClusters_FullMethodName                   = "/clarifai.api.V2/ListComputeClusters"
	V2_PostComputeClusters_FullMethodName                   = "/clarifai.api.V2/PostComputeClusters"
	V2_DeleteComputeClusters_FullMethodName                 = "/clarifai.api.V2/DeleteComputeClusters"
	V2_GetNodepool_FullMethodName                           = "/clarifai.api.V2/GetNodepool"
	V2_ListNodepools_FullMethodName                         = "/clarifai.api.V2/ListNodepools"
	V2_PostNodepools_FullMethodName                         = "/clarifai.api.V2/PostNodepools"
	V2_PatchNodepools_FullMethodName                        = "/clarifai.api.V2/PatchNodepools"
	V2_DeleteNodepools_FullMethodName                       = "/clarifai.api.V2/DeleteNodepools"
	V2_GetDeployment_FullMethodName                         = "/clarifai.api.V2/GetDeployment"
	V2_ListDeployments_FullMethodName                       = "/clarifai.api.V2/ListDeployments"
	V2_PostDeployments_FullMethodName                       = "/clarifai.api.V2/PostDeployments"
	V2_PatchDeployments_FullMethodName                      = "/clarifai.api.V2/PatchDeployments"
	V2_DeleteDeployments_FullMethodName                     = "/clarifai.api.V2/DeleteDeployments"
	V2_PostAuditLogSearches_FullMethodName                  = "/clarifai.api.V2/PostAuditLogSearches"
	V2_ListWorkflowEvaluationTemplates_FullMethodName       = "/clarifai.api.V2/ListWorkflowEvaluationTemplates"
	V2_PostLogEntries_FullMethodName                        = "/clarifai.api.V2/PostLogEntries"
	V2_ListLogEntries_FullMethodName                        = "/clarifai.api.V2/ListLogEntries"
	V2_StreamLogEntries_FullMethodName                      = "/clarifai.api.V2/StreamLogEntries"
	V2_PostComputePlaneMetrics_FullMethodName               = "/clarifai.api.V2/PostComputePlaneMetrics"
	V2_PostWorkflowVersionEvaluations_FullMethodName        = "/clarifai.api.V2/PostWorkflowVersionEvaluations"
	V2_GetWorkflowVersionEvaluation_FullMethodName          = "/clarifai.api.V2/GetWorkflowVersionEvaluation"
	V2_ListWorkflowVersionEvaluations_FullMethodName        = "/clarifai.api.V2/ListWorkflowVersionEvaluations"
	V2_PatchWorkflowVersionEvaluations_FullMethodName       = "/clarifai.api.V2/PatchWorkflowVersionEvaluations"
	V2_ListWorkflowVersionEvaluationData_FullMethodName     = "/clarifai.api.V2/ListWorkflowVersionEvaluationData"
	V2_PostWorkflowVersionEvaluationData_FullMethodName     = "/clarifai.api.V2/PostWorkflowVersionEvaluationData"
	V2_PostPipelines_FullMethodName                         = "/clarifai.api.V2/PostPipelines"
	V2_GetPipeline_FullMethodName                           = "/clarifai.api.V2/GetPipeline"
	V2_ListPipelines_FullMethodName                         = "/clarifai.api.V2/ListPipelines"
	V2_PatchPipelines_FullMethodName                        = "/clarifai.api.V2/PatchPipelines"
	V2_DeletePipelines_FullMethodName                       = "/clarifai.api.V2/DeletePipelines"
	V2_GetPipelineVersion_FullMethodName                    = "/clarifai.api.V2/GetPipelineVersion"
	V2_ListPipelineVersions_FullMethodName                  = "/clarifai.api.V2/ListPipelineVersions"
	V2_PatchPipelineVersions_FullMethodName                 = "/clarifai.api.V2/PatchPipelineVersions"
	V2_DeletePipelineVersions_FullMethodName                = "/clarifai.api.V2/DeletePipelineVersions"
	V2_GetPipelineVersionRun_FullMethodName                 = "/clarifai.api.V2/GetPipelineVersionRun"
	V2_PostPipelineVersionRuns_FullMethodName               = "/clarifai.api.V2/PostPipelineVersionRuns"
	V2_PatchPipelineVersionRuns_FullMethodName              = "/clarifai.api.V2/PatchPipelineVersionRuns"
	V2_PostPipelineSteps_FullMethodName                     = "/clarifai.api.V2/PostPipelineSteps"
	V2_GetPipelineStep_FullMethodName                       = "/clarifai.api.V2/GetPipelineStep"
	V2_ListPipelineSteps_FullMethodName                     = "/clarifai.api.V2/ListPipelineSteps"
	V2_PostPipelineStepVersionsUpload_FullMethodName        = "/clarifai.api.V2/PostPipelineStepVersionsUpload"
	V2_ListPipelineStepVersions_FullMethodName              = "/clarifai.api.V2/ListPipelineStepVersions"
	V2_GetPipelineStepVersion_FullMethodName                = "/clarifai.api.V2/GetPipelineStepVersion"
	V2_GetSecret_FullMethodName                             = "/clarifai.api.V2/GetSecret"
	V2_ListSecrets_FullMethodName                           = "/clarifai.api.V2/ListSecrets"
	V2_PostSecrets_FullMethodName                           = "/clarifai.api.V2/PostSecrets"
	V2_PatchSecrets_FullMethodName                          = "/clarifai.api.V2/PatchSecrets"
	V2_DeleteSecrets_FullMethodName                         = "/clarifai.api.V2/DeleteSecrets"
	V2_PostMetricsQuery_FullMethodName                      = "/clarifai.api.V2/PostMetricsQuery"
	V2_ListMetricLabels_FullMethodName                      = "/clarifai.api.V2/ListMetricLabels"
)

// V2Client is the client API for V2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V2Client interface {
	// List concept relations between concepts in the platform.
	// MUST be above ListConcepts so that if concept_id is empty this will still match
	// /concepts/relations to list all the concept relations in the app.
	ListConceptRelations(ctx context.Context, in *ListConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	PostConceptRelations(ctx context.Context, in *PostConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	DeleteConceptRelations(ctx context.Context, in *DeleteConceptRelationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the concepts with their positive and negative counts
	GetConceptCounts(ctx context.Context, in *GetConceptCountsRequest, opts ...grpc.CallOption) (*MultiConceptCountResponse, error)
	// Get a specific concept from an app.
	GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*SingleConceptResponse, error)
	// List all the concepts.
	ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// List models concepts.
	ListModelConcepts(ctx context.Context, in *ListModelConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Search over the concepts to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostConceptsSearches(ctx context.Context, in *PostConceptsSearchesRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Add a concept to an app.
	PostConcepts(ctx context.Context, in *PostConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Patch one or more concepts.
	PatchConcepts(ctx context.Context, in *PatchConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Get a specific concept from an app.
	GetConceptLanguage(ctx context.Context, in *GetConceptLanguageRequest, opts ...grpc.CallOption) (*SingleConceptLanguageResponse, error)
	// List the concept in all the translated languages.
	ListConceptLanguages(ctx context.Context, in *ListConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// Add a new translation for this concept.
	PostConceptLanguages(ctx context.Context, in *PostConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// Patch the name for a given language names by passing in a list of concepts with the new names
	// for the languages.
	PatchConceptLanguages(ctx context.Context, in *PatchConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// List all domain graphs.
	ListKnowledgeGraphs(ctx context.Context, in *ListKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error)
	// Post domain graphs.
	PostKnowledgeGraphs(ctx context.Context, in *PostKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error)
	// Get a specific annotation from an app.
	GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*SingleAnnotationResponse, error)
	// List all the annotation.
	ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Post annotations.
	PostAnnotations(ctx context.Context, in *PostAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Patch one or more annotations.
	PatchAnnotations(ctx context.Context, in *PatchAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Patch annotations status by worker id and task id.
	// Deprecated: Use PutTaskAssignments to update task annotations.
	//
	//	For example, you can use PutTaskAssignments with action REVIEW_APPROVE
	//	to approve task assignments and associated annotations in bulk.
	PatchAnnotationsStatus(ctx context.Context, in *PatchAnnotationsStatusRequest, opts ...grpc.CallOption) (*PatchAnnotationsStatusResponse, error)
	// Delete a single annotation.
	DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple annotations in one request.
	DeleteAnnotations(ctx context.Context, in *DeleteAnnotationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the annotation tracks.
	ListAnnotationTracks(ctx context.Context, in *ListAnnotationTracksRequest, opts ...grpc.CallOption) (*MultiAnnotationTrackResponse, error)
	// Post annotation tracks.
	PostAnnotationTracks(ctx context.Context, in *PostAnnotationTracksRequest, opts ...grpc.CallOption) (*MultiAnnotationTrackResponse, error)
	// Patch one or more annotation tracks.
	PatchAnnotationTracks(ctx context.Context, in *PatchAnnotationTracksRequest, opts ...grpc.CallOption) (*MultiAnnotationTrackResponse, error)
	// Delete multiple annotation tracks in one request.
	DeleteAnnotationTracks(ctx context.Context, in *DeleteAnnotationTracksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch saved annotations searches by ids.
	PatchAnnotationsSearches(ctx context.Context, in *PatchAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a search over annotations
	PostAnnotationsSearches(ctx context.Context, in *PostAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// ListAnnotationWorkers lists users, models, and workflows (collectively
	// known as "workers") that have added annotations to the application.
	ListAnnotationWorkers(ctx context.Context, in *ListAnnotationWorkersRequest, opts ...grpc.CallOption) (*MultiWorkerResponse, error)
	// Get input count per status.
	GetInputCount(ctx context.Context, in *GetInputCountRequest, opts ...grpc.CallOption) (*SingleInputCountResponse, error)
	// Streams all the inputs starting from oldest assets.
	StreamInputs(ctx context.Context, in *StreamInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	GetInputSamples(ctx context.Context, in *GetInputSamplesRequest, opts ...grpc.CallOption) (*MultiInputAnnotationResponse, error)
	// Get a specific input from an app.
	GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*SingleInputResponse, error)
	// Get a MPEG-DASH manifest for video-type inputs that were added via PostInputs and successfully processed
	// Experimental. Manifest is used by browser and desktop clients that implement an efficient streaming playback
	// This means client can switch between low-resolution and high-resolution video streams
	// Depending on network bandwidth or user's preference
	// This also means that reencoded video streams are reencoded in a uniform way, not relying on original format
	// Alternative to MPEG-dash is to stream original file with byte-range header
	GetInputVideoManifest(ctx context.Context, in *GetVideoManifestRequest, opts ...grpc.CallOption) (*GetVideoManifestResponse, error)
	// List all the inputs.
	ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// PostInputs adds one or more inputs to the app.
	// Takes a list of image/video/audio/text URLs, image/video/audio bytes or raw text
	// Optionally, include concepts or dataset ids to link them
	// Optionally, include metadata for search
	// Note that inputs processing is asynchronous process
	// See ListInputs, StreamInputs or PostInputSearches to list results
	PostInputs(ctx context.Context, in *PostInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Patch one or more inputs.
	PatchInputs(ctx context.Context, in *PatchInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Delete a single input asynchronously.
	DeleteInput(ctx context.Context, in *DeleteInputRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple inputs in one request.
	// This call is asynchronous.
	DeleteInputs(ctx context.Context, in *DeleteInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch saved inputs searches by ids.
	PatchInputsSearches(ctx context.Context, in *PatchInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a search over inputs
	PostInputsSearches(ctx context.Context, in *PostInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Get predicted outputs from the model.
	PostModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (*MultiOutputResponse, error)
	// TODO(zeiler): will need to
	// Single request but streaming responses.
	GenerateModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (V2_GenerateModelOutputsClient, error)
	// Stream of requests and stream of responses
	StreamModelOutputs(ctx context.Context, opts ...grpc.CallOption) (V2_StreamModelOutputsClient, error)
	// List all the datasets.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Get a specific dataset.
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*SingleDatasetResponse, error)
	// Add datasets to an app.
	// The process is atomic, i.e. either all or no datasets are added.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PostDatasets(ctx context.Context, in *PostDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Patch one or more datasets.
	// The process is atomic, i.e. either all or no datasets are patched.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PatchDatasets(ctx context.Context, in *PatchDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Delete one or more datasets in a single request.
	DeleteDatasets(ctx context.Context, in *DeleteDatasetsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the dataset inputs in a dataset.
	ListDatasetInputs(ctx context.Context, in *ListDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error)
	// Get a specific dataset input.
	GetDatasetInput(ctx context.Context, in *GetDatasetInputRequest, opts ...grpc.CallOption) (*SingleDatasetInputResponse, error)
	// Add dataset inputs to a dataset.
	// The process is not atomic, i.e. if there are errors with some dataset
	// inputs, others might still be added. The response reports
	//   - SUCCESS if all dataset inputs were added,
	//   - MIXED_STATUS if only some dataset inputs were added, and
	//   - FAILURE if no dataset inputs were added.
	//
	// Each individual dataset input in the response has the status set to
	// indicate if it was successful or if there was an error.
	PostDatasetInputs(ctx context.Context, in *PostDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error)
	// Delete one or more dataset inputs in a single request.
	DeleteDatasetInputs(ctx context.Context, in *DeleteDatasetInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the dataset versions.
	ListDatasetVersions(ctx context.Context, in *ListDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Get a specific dataset version.
	GetDatasetVersion(ctx context.Context, in *GetDatasetVersionRequest, opts ...grpc.CallOption) (*SingleDatasetVersionResponse, error)
	ListDatasetVersionMetricsGroups(ctx context.Context, in *ListDatasetVersionMetricsGroupsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionMetricsGroupResponse, error)
	// Add dataset versions to a dataset.
	PostDatasetVersions(ctx context.Context, in *PostDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Patch one or more dataset versions.
	PatchDatasetVersions(ctx context.Context, in *PatchDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Delete one or more dataset versions in a single request.
	DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Create export of a dataset version.
	PutDatasetVersionExports(ctx context.Context, in *PutDatasetVersionExportsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionExportResponse, error)
	// Get a specific model type.
	GetModelType(ctx context.Context, in *GetModelTypeRequest, opts ...grpc.CallOption) (*SingleModelTypeResponse, error)
	// List all the supported open source licenses in the platform.
	ListOpenSourceLicenses(ctx context.Context, in *ListOpenSourceLicensesRequest, opts ...grpc.CallOption) (*ListOpenSourceLicensesResponse, error)
	// List all the model types available in the platform.
	// This MUST be above ListModels so that the /models/types endpoint takes precedence.
	ListModelTypes(ctx context.Context, in *ListModelTypesRequest, opts ...grpc.CallOption) (*MultiModelTypeResponse, error)
	// Get a specific model from an app.
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// Get a the output info for a given model_id or model_id/version_id
	// combo.
	GetModelOutputInfo(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// List all the models.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// List the resource counts for the app.
	GetResourceCounts(ctx context.Context, in *GetResourceCountsRequest, opts ...grpc.CallOption) (*GetResourceCountsResponse, error)
	// Search over the models to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostModelsSearches(ctx context.Context, in *PostModelsSearchesRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Add a models to an app.
	PostModels(ctx context.Context, in *PostModelsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// Patch one or more models.
	PatchModels(ctx context.Context, in *PatchModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Patch one or more models ids.
	PatchModelIds(ctx context.Context, in *PatchModelIdsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Delete a single model.
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple models in one request.
	DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Update model check consents
	PatchModelCheckConsents(ctx context.Context, in *PatchModelCheckConsentsRequest, opts ...grpc.CallOption) (*MultiModelCheckConsentResponse, error)
	// Update model toolkits tags
	PatchModelToolkits(ctx context.Context, in *PatchModelToolkitsRequest, opts ...grpc.CallOption) (*MultiModelToolkitResponse, error)
	// Update model use_cases tags
	PatchModelUseCases(ctx context.Context, in *PatchModelUseCasesRequest, opts ...grpc.CallOption) (*MultiModelUseCaseResponse, error)
	// Update model languages tags
	PatchModelLanguages(ctx context.Context, in *PatchModelLanguagesRequest, opts ...grpc.CallOption) (*MultiModelLanguageResponse, error)
	// Deprecated: Do not use.
	// Deprecated: Unmaintained and ideally replaced with usage of datasets
	//
	//	The server may refuse to accept requests to this endpoint.
	ListModelInputs(ctx context.Context, in *ListModelInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Get a specific model from an app.
	GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// List all the models.
	ListModelVersions(ctx context.Context, in *ListModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error)
	PostWorkflowVersionsUnPublish(ctx context.Context, in *PostWorkflowVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	PostWorkflowVersionsPublish(ctx context.Context, in *PostWorkflowVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostModelVersionsPublish
	PostModelVersionsPublish(ctx context.Context, in *PostModelVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostModelVersionsUnPublish
	PostModelVersionsUnPublish(ctx context.Context, in *PostModelVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Create a new model version to trigger training of the model.
	PostModelVersions(ctx context.Context, in *PostModelVersionsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// PatchModelVersions
	PatchModelVersions(ctx context.Context, in *PatchModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error)
	// Delete a single model.
	DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// This is a streaming endpoint, the request has a field, upload_data, which can either be the config for the upload or the actual data to upload.
	// The config must be sent first before the model_bytes can be uploaded.
	// Once the config has been sent, the server will respond with a confirmation containing the model_version_id.
	// This is so that if your upload is interrupted, you can resume the upload by sending the config again with the model_version_id specified for your model_version.
	// The actual upload will be done via a multipart upload, the latest successful part_id will be sent from the server in the response to the model_bytes.
	PostModelVersionsUpload(ctx context.Context, opts ...grpc.CallOption) (V2_PostModelVersionsUploadClient, error)
	// Kicks off conversion from the old Triton model format to the new Docker model format.
	PostModelMigration(ctx context.Context, in *PostModelMigrationRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// Export a model
	PutModelVersionExports(ctx context.Context, in *PutModelVersionExportsRequest, opts ...grpc.CallOption) (*SingleModelVersionExportResponse, error)
	// GetModelVersionExport
	GetModelVersionExport(ctx context.Context, in *GetModelVersionExportRequest, opts ...grpc.CallOption) (*SingleModelVersionExportResponse, error)
	// Get the evaluation metrics for a model version.
	// Deprecated: Use GetEvaluation instead
	//
	//	The server may refuse to accept requests to this endpoint.
	GetModelVersionMetrics(ctx context.Context, in *GetModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	// Run the evaluation metrics for a model version.
	PostModelVersionMetrics(ctx context.Context, in *PostModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	PostModelVersionEvaluations(ctx context.Context, in *PostModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// List the evaluation metrics for a model version.
	ListModelVersionEvaluations(ctx context.Context, in *ListModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// Get an evaluation metrics for a model version.
	GetModelVersionEvaluation(ctx context.Context, in *GetModelVersionEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error)
	PostEvaluations(ctx context.Context, in *PostEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	ListEvaluations(ctx context.Context, in *ListEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error)
	// Lists model references tied to a particular model id.
	ListModelReferences(ctx context.Context, in *ListModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error)
	// GetModelVersionInputExample
	GetModelVersionInputExample(ctx context.Context, in *GetModelVersionInputExampleRequest, opts ...grpc.CallOption) (*SingleModelVersionInputExampleResponse, error)
	// ListModelVersionInputExamples
	ListModelVersionInputExamples(ctx context.Context, in *ListModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error)
	// Get a specific workflow from an app.
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*SingleWorkflowResponse, error)
	// List all the workflows.
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Add a workflow to an app.
	// Note(zeiler): the order of the workflows that are returned from this endpoint
	// may be different than the order in which the user provides them. This is because
	// we reorder by a sort that optimizes for performance of the graph and its dependencies.
	// When using the workflow in any future call the order returned by this endpoint
	// will be used.
	PostWorkflows(ctx context.Context, in *PostWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Patch one or more workflows.
	PatchWorkflows(ctx context.Context, in *PatchWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Patch one or more workflows ids.
	PatchWorkflowIds(ctx context.Context, in *PatchWorkflowIdsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Delete a single workflow.
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple workflows in one request.
	DeleteWorkflows(ctx context.Context, in *DeleteWorkflowsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Predict using a workflow.
	PostWorkflowResults(ctx context.Context, in *PostWorkflowResultsRequest, opts ...grpc.CallOption) (*PostWorkflowResultsResponse, error)
	// List workflow versions.
	ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error)
	// Get single workflow version.
	GetWorkflowVersion(ctx context.Context, in *GetWorkflowVersionRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionResponse, error)
	// Delete workflow versions.
	DeleteWorkflowVersions(ctx context.Context, in *DeleteWorkflowVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch workflow versions.
	PatchWorkflowVersions(ctx context.Context, in *PatchWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error)
	// Get a specific key from an app.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error)
	// List all the keys.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// List keys by app_id
	ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// Search over the keys to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a key to an app.
	PostKeys(ctx context.Context, in *PostKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// Patch one or more keys.
	PatchKeys(ctx context.Context, in *PatchKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// API Keys in the public API -- request is itself Key authorized, and will tell
	// the user the scopes/access of the key/credential they're providing, as computed by
	// our authorizer:
	MyScopes(ctx context.Context, in *MyScopesRequest, opts ...grpc.CallOption) (*MultiScopeResponse, error)
	MyScopesUser(ctx context.Context, in *MyScopesUserRequest, opts ...grpc.CallOption) (*MultiScopeUserResponse, error)
	MyScopesRoot(ctx context.Context, in *MyScopesRootRequest, opts ...grpc.CallOption) (*MultiScopeRootResponse, error)
	// List all auth scopes available to me as a user.
	ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*MultiScopeDepsResponse, error)
	// Get a specific app from an app.
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error)
	// List all the apps.
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Search over the apps to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a app to an app.
	// This needs to load the default workflow to make a copy, validating all the models in it, and
	// then writing the new workflow back to this new app.
	PostApps(ctx context.Context, in *PostAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch one or more apps.
	PatchApps(ctx context.Context, in *PatchAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Allows to Patch only the below fields in one or more apps.
	// Allowed fields are notes, description and image
	PatchAppsDetails(ctx context.Context, in *PatchAppsDetailsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch apps ids.
	PatchAppsIds(ctx context.Context, in *PatchAppsIdsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch one app.
	PatchApp(ctx context.Context, in *PatchAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error)
	// Search over the applications to find one or more you're looking for.
	PostAppsSearches(ctx context.Context, in *PostAppsSearchesRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Get user information
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error)
	// Validate new password in real-time for a user
	PostValidatePassword(ctx context.Context, in *PostValidatePasswordRequest, opts ...grpc.CallOption) (*SinglePasswordValidationResponse, error)
	// Get a saved legacy search.
	GetSearch(ctx context.Context, in *GetSearchRequest, opts ...grpc.CallOption) (*SingleSearchResponse, error)
	// List all saved legacy searches.
	ListSearches(ctx context.Context, in *ListSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Patch saved legacy searches by ids.
	PatchSearches(ctx context.Context, in *PatchSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Deprecated: Do not use.
	// Execute a new search and optionally save it.
	//
	// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
	//
	//	The server may refuse to accept requests to this endpoint.
	PostSearches(ctx context.Context, in *PostSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a previously saved legacy search.
	PostSearchesByID(ctx context.Context, in *PostSearchesByIDRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Evaluate the results of two search requests
	PostAnnotationSearchMetrics(ctx context.Context, in *PostAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// Get the evaluation results between two search requests
	GetAnnotationSearchMetrics(ctx context.Context, in *GetAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// List the evaluation results between two search requests
	ListAnnotationSearchMetrics(ctx context.Context, in *ListAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// DeleteAnnotationSearchMetrics
	DeleteAnnotationSearchMetrics(ctx context.Context, in *DeleteAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete a saved search.
	DeleteSearch(ctx context.Context, in *DeleteSearchRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the annotation filters.
	ListAnnotationFilters(ctx context.Context, in *ListAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Get a specific annotation filter.
	GetAnnotationFilter(ctx context.Context, in *GetAnnotationFilterRequest, opts ...grpc.CallOption) (*SingleAnnotationFilterResponse, error)
	// Add annotation filters.
	PostAnnotationFilters(ctx context.Context, in *PostAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Patch one or more annotation filters.
	PatchAnnotationFilters(ctx context.Context, in *PatchAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Delete one or more annotation filters in a single request.
	DeleteAnnotationFilters(ctx context.Context, in *DeleteAnnotationFiltersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all status codes.
	ListStatusCodes(ctx context.Context, in *ListStatusCodesRequest, opts ...grpc.CallOption) (*MultiStatusCodeResponse, error)
	// Get more details for a status code.
	GetStatusCode(ctx context.Context, in *GetStatusCodeRequest, opts ...grpc.CallOption) (*SingleStatusCodeResponse, error)
	// owner list users who the app is shared with
	ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// add collaborators to an app.
	PostCollaborators(ctx context.Context, in *PostCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// Patch existing collaborators.
	PatchCollaborators(ctx context.Context, in *PatchCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// Delete existing collaborators.
	DeleteCollaborators(ctx context.Context, in *DeleteCollaboratorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Collaboration includes the app user are invitied to work on
	ListCollaborations(ctx context.Context, in *ListCollaborationsRequest, opts ...grpc.CallOption) (*MultiCollaborationsResponse, error)
	// PostAppDuplications starts async app duplication jobs which copy resources
	// (inputs, annotations, models etc) from one application to another. It can
	// also create the destination application if it does not exist, with fields
	// (description, metadata etc) copied from the source application.
	//
	// A duplication job can be started by any user that can read from the source
	// application (the target of this call) and can create and write to the
	// destination application. The duplication is associated with the user that
	// created it, so in order to read the status and progress of the job, that
	// user's ID has to be used in the call to GetAppDuplication, which might be
	// different to the source application owner ID in this call.
	PostAppDuplications(ctx context.Context, in *PostAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error)
	// ListAppDuplications lists all app duplication jobs created by the user.
	ListAppDuplications(ctx context.Context, in *ListAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error)
	// GetAppDuplication returns an app duplication job created by the user.
	GetAppDuplication(ctx context.Context, in *GetAppDuplicationRequest, opts ...grpc.CallOption) (*SingleAppDuplicationResponse, error)
	// Add tasks to an app.
	PostTasks(ctx context.Context, in *PostTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Task annotation count
	GetTaskAnnotationCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error)
	// Task Input count
	GetTaskInputCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error)
	// Get a specific task from an app.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*SingleTaskResponse, error)
	// List tasks from an app.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Patch one or more tasks.
	PatchTasks(ctx context.Context, in *PatchTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Delete multiple tasks in one request.
	DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add Label orders.
	PostLabelOrders(ctx context.Context, in *PostLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Get a label order.
	GetLabelOrder(ctx context.Context, in *GetLabelOrderRequest, opts ...grpc.CallOption) (*SingleLabelOrderResponse, error)
	// List label orders.
	ListLabelOrders(ctx context.Context, in *ListLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Patch one or more label orders.
	PatchLabelOrders(ctx context.Context, in *PatchLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Delete multiple label orders in one request.
	// this do not change task status
	DeleteLabelOrders(ctx context.Context, in *DeleteLabelOrdersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a list of Collectors to an app.
	// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
	// endpoint.
	// Those current scopes are listed here as a hard requirement.
	// They are needed when adding the collectors just so we now that you have permission with
	// that key at least to do the writing to this app with POST /inputs.
	PostCollectors(ctx context.Context, in *PostCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Get a specific collector from an app.
	GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*SingleCollectorResponse, error)
	// List all the collectors.
	ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Patch one or more collectors.
	PatchCollectors(ctx context.Context, in *PatchCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Delete multiple collectors in one request.
	// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
	DeleteCollectors(ctx context.Context, in *DeleteCollectorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostStatValues
	PostStatValues(ctx context.Context, in *PostStatValuesRequest, opts ...grpc.CallOption) (*MultiStatValueResponse, error)
	// PostStatValuesAggregate
	PostStatValuesAggregate(ctx context.Context, in *PostStatValuesAggregateRequest, opts ...grpc.CallOption) (*MultiStatValueAggregateResponse, error)
	// Get a specific module from an app.
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*SingleModuleResponse, error)
	// List all the modules in community, by user or by app.
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Add a modules to an app.
	PostModules(ctx context.Context, in *PostModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Patch one or more modules.
	PatchModules(ctx context.Context, in *PatchModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Delete multiple modules in one request.
	DeleteModules(ctx context.Context, in *DeleteModulesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a specific module version for a module.
	GetModuleVersion(ctx context.Context, in *GetModuleVersionRequest, opts ...grpc.CallOption) (*SingleModuleVersionResponse, error)
	// List all the modules versions for a given module.
	ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Create a new module version to trigger training of the module.
	PostModuleVersions(ctx context.Context, in *PostModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Modify details of an existing module version.
	PatchModuleVersions(ctx context.Context, in *PatchModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Delete a multiple module version.
	DeleteModuleVersions(ctx context.Context, in *DeleteModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get usage count for specific module version.
	GetModuleVersionUsageCount(ctx context.Context, in *GetModuleVersionUsageCountRequest, opts ...grpc.CallOption) (*SingleModuleVersionUsageCountResponse, error)
	// Get installed modules vesrions for an app.
	GetInstalledModuleVersion(ctx context.Context, in *GetInstalledModuleVersionRequest, opts ...grpc.CallOption) (*SingleInstalledModuleVersionResponse, error)
	// List installed modules vesrions for an app.
	ListInstalledModuleVersions(ctx context.Context, in *ListInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error)
	// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
	PostInstalledModuleVersions(ctx context.Context, in *PostInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error)
	// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
	// in the url.
	// This cleaned up any associated caller keys so needs the Keys_Delete scope.
	DeleteInstalledModuleVersions(ctx context.Context, in *DeleteInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Assign a key that the caller owns to be used when accessing this installed module version
	// If this endpoint is called with a different key then it overwrites what is there.
	PostInstalledModuleVersionsKey(ctx context.Context, in *PostInstalledModuleVersionsKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error)
	// Perform bulk operations on a list of inputs based on input source.
	// Operation include add, update, delete of concepts, metadata and geo data.
	// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
	PostBulkOperations(ctx context.Context, in *PostBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// List all the bulk operations
	ListBulkOperations(ctx context.Context, in *ListBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// Get the bulk operation details by ID
	GetBulkOperation(ctx context.Context, in *GetBulkOperationRequest, opts ...grpc.CallOption) (*SingleBulkOperationsResponse, error)
	// Cancel one or more bulk operations
	CancelBulkOperations(ctx context.Context, in *CancelBulkOperationRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// delete one or more terminated bulk operations
	DeleteBulkOperations(ctx context.Context, in *DeleteBulkOperationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Deprecated: Use PutTaskAssignments with action=LABEL_START.
	//
	//	This endpoint has initially been designed as a GET request,
	//	but has been re-designed to serve a PUT logic.
	//	In order to clearly highlight that this endpoint serves a PUT request,
	//	this endpoint has been deprecated and replaced by PutTaskAssignments with action=LABEL_START.
	ListNextTaskAssignments(ctx context.Context, in *ListNextTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// PutTaskAssignments performs an idempotent action for the task assignments in given task.
	// See PutTaskAssignmentsRequestAction for more details about possible actions.
	PutTaskAssignments(ctx context.Context, in *PutTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiTaskAssignmentResponse, error)
	// List all the inputs add jobs
	ListInputsAddJobs(ctx context.Context, in *ListInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// Get the input add job details by ID
	GetInputsAddJob(ctx context.Context, in *GetInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error)
	// cancel the input add job by ID
	CancelInputsAddJob(ctx context.Context, in *CancelInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error)
	// PostUploads is used to upload files. Note that this does not create inputs.
	// returns job with uploadID, job has UPLOAD_IN_PROGRESS status
	// Actual upload content can be done in multiple calls with PutUploadContentParts
	// You can get status of upload with GetUpload or ListUploads endpoints
	// See also PostInputsUploads
	PostUploads(ctx context.Context, in *PostUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error)
	// Upload a part of a multipart upload.
	// Behaviour on completion depends on the endpoint that was used to initiate the upload.
	PutUploadContentParts(ctx context.Context, in *PutUploadContentPartsRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error)
	GetUpload(ctx context.Context, in *GetUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error)
	ListUploads(ctx context.Context, in *ListUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error)
	DeleteUploads(ctx context.Context, in *DeleteUploadsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Initiates retrieval of inputs from cloud storage from a user provided data source.
	// Will create and return an inputs-add-job for tracking progress.
	// Archives will be extracted and their contents will be processed as inputs.
	//
	// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
	// files in the images_folder beginning with abc or in a subfolder beginning with abc.
	// For example:
	// bucket/images_folder/abcImage.png
	// bucket/images_folder/abc-1/Data.zip
	//
	// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
	// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
	// in which case it only requires rights to access that particular file.
	PostInputsDataSources(ctx context.Context, in *PostInputsDataSourcesRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// Get the input extraction job details by ID
	GetInputsExtractionJob(ctx context.Context, in *GetInputsExtractionJobRequest, opts ...grpc.CallOption) (*SingleInputsExtractionJobResponse, error)
	// List all the input extraction jobs
	ListInputsExtractionJobs(ctx context.Context, in *ListInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error)
	CancelInputsExtractionJobs(ctx context.Context, in *CancelInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error)
	// Create new upload job with a file archive containing inputs (images, videos, text, audio)
	// Actual file upload happens in next steps by calling `PutUploadContentParts` endpoint
	// and providing the file content in the request body.
	// This endpoint creates and return an inputs-add-job which contains an upload id needed for upload and further status tracking
	// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
	// See also GetInputsAddJob and then GetInputsExtractionJob
	PostInputsUploads(ctx context.Context, in *PostInputsUploadsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// putting above the Get Nodepool endpoint to make it appear above the other one
	ListPipelineVersionRuns(ctx context.Context, in *ListPipelineVersionRunsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionRunResponse, error)
	// Get a specific runner.
	// TODO(zeiler): runner_id is a UUID so can list globally as well.
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*SingleRunnerResponse, error)
	// List all the runners for the user.
	ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error)
	// Add a runners to a user.
	PostRunners(ctx context.Context, in *PostRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error)
	// Patch runners of a user.
	PatchRunners(ctx context.Context, in *PatchRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error)
	// Delete multiple runners in one request.
	DeleteRunners(ctx context.Context, in *DeleteRunnersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List items for the remote runner to work on.
	// since the runner_id is a UUID we can access it directly too.
	ListRunnerItems(ctx context.Context, in *ListRunnerItemsRequest, opts ...grpc.CallOption) (*MultiRunnerItemResponse, error)
	// Post back outputs from remote runners
	// since the runner_id is a UUID we can access it directly too.
	PostRunnerItemOutputs(ctx context.Context, in *PostRunnerItemOutputsRequest, opts ...grpc.CallOption) (*MultiRunnerItemOutputResponse, error)
	// This maintains a single request for asking the API if there is any work to be done, processing
	// it and streaming back results.
	// To do that first handshake the MultiRunnerItemOutputResponse will have RUNNER_STREAM_START
	// status filled in so that the API knows to respond with a MultiRunnerItemResponse.
	// For now there will only be one of those if the model prediction only has one request.
	// NOTE(zeiler): downside of this is you can't use HTTP REST requests to do runner work.
	ProcessRunnerItems(ctx context.Context, opts ...grpc.CallOption) (V2_ProcessRunnerItemsClient, error)
	// Get the training time estimate based off train request and estimated input count.
	PostModelVersionsTrainingTimeEstimate(ctx context.Context, in *PostModelVersionsTrainingTimeEstimateRequest, opts ...grpc.CallOption) (*MultiTrainingTimeEstimateResponse, error)
	// List Available Cloud Providers
	ListCloudProviders(ctx context.Context, in *ListCloudProvidersRequest, opts ...grpc.CallOption) (*MultiCloudProviderResponse, error)
	// List Regions for given Cloud Provider
	ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...grpc.CallOption) (*MultiCloudRegionResponse, error)
	// Get InstanceTypes given Cloud Provider and Region
	ListInstanceTypes(ctx context.Context, in *ListInstanceTypesRequest, opts ...grpc.CallOption) (*MultiInstanceTypeResponse, error)
	// ComputeCluster CRUD
	GetComputeCluster(ctx context.Context, in *GetComputeClusterRequest, opts ...grpc.CallOption) (*SingleComputeClusterResponse, error)
	ListComputeClusters(ctx context.Context, in *ListComputeClustersRequest, opts ...grpc.CallOption) (*MultiComputeClusterResponse, error)
	PostComputeClusters(ctx context.Context, in *PostComputeClustersRequest, opts ...grpc.CallOption) (*MultiComputeClusterResponse, error)
	// Delete multiple compute_clusters in one request.
	DeleteComputeClusters(ctx context.Context, in *DeleteComputeClustersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Nodepools CRUD
	GetNodepool(ctx context.Context, in *GetNodepoolRequest, opts ...grpc.CallOption) (*SingleNodepoolResponse, error)
	ListNodepools(ctx context.Context, in *ListNodepoolsRequest, opts ...grpc.CallOption) (*MultiNodepoolResponse, error)
	PostNodepools(ctx context.Context, in *PostNodepoolsRequest, opts ...grpc.CallOption) (*MultiNodepoolResponse, error)
	PatchNodepools(ctx context.Context, in *PatchNodepoolsRequest, opts ...grpc.CallOption) (*MultiNodepoolResponse, error)
	// Delete multiple nodepools in one request.
	DeleteNodepools(ctx context.Context, in *DeleteNodepoolsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Deployments CRUD
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*SingleDeploymentResponse, error)
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*MultiDeploymentResponse, error)
	PostDeployments(ctx context.Context, in *PostDeploymentsRequest, opts ...grpc.CallOption) (*MultiDeploymentResponse, error)
	PatchDeployments(ctx context.Context, in *PatchDeploymentsRequest, opts ...grpc.CallOption) (*MultiDeploymentResponse, error)
	// Delete multiple deployments in one request.
	DeleteDeployments(ctx context.Context, in *DeleteDeploymentsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	PostAuditLogSearches(ctx context.Context, in *PostAuditLogSearchesRequest, opts ...grpc.CallOption) (*MultiAuditLogEntryResponse, error)
	ListWorkflowEvaluationTemplates(ctx context.Context, in *ListWorkflowEvaluationTemplatesRequest, opts ...grpc.CallOption) (*MultiWorkflowEvaluationTemplateResponse, error)
	PostLogEntries(ctx context.Context, in *PostLogEntriesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	ListLogEntries(ctx context.Context, in *ListLogEntriesRequest, opts ...grpc.CallOption) (*MultiLogEntryResponse, error)
	StreamLogEntries(ctx context.Context, in *StreamLogEntriesRequest, opts ...grpc.CallOption) (V2_StreamLogEntriesClient, error)
	PostComputePlaneMetrics(ctx context.Context, in *PostComputePlaneMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	PostWorkflowVersionEvaluations(ctx context.Context, in *PostWorkflowVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionEvaluationResponse, error)
	GetWorkflowVersionEvaluation(ctx context.Context, in *GetWorkflowVersionEvaluationRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionEvaluationResponse, error)
	ListWorkflowVersionEvaluations(ctx context.Context, in *ListWorkflowVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionEvaluationResponse, error)
	PatchWorkflowVersionEvaluations(ctx context.Context, in *PatchWorkflowVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionEvaluationResponse, error)
	ListWorkflowVersionEvaluationData(ctx context.Context, in *ListWorkflowVersionEvaluationDataRequest, opts ...grpc.CallOption) (*MultiListWorkflowVersionEvaluationDataResponse, error)
	PostWorkflowVersionEvaluationData(ctx context.Context, in *PostWorkflowVersionEvaluationDataRequest, opts ...grpc.CallOption) (*MultiListWorkflowVersionEvaluationDataResponse, error)
	PostPipelines(ctx context.Context, in *PostPipelinesRequest, opts ...grpc.CallOption) (*MultiPipelineResponse, error)
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*SinglePipelineResponse, error)
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*MultiPipelineResponse, error)
	PatchPipelines(ctx context.Context, in *PatchPipelinesRequest, opts ...grpc.CallOption) (*MultiPipelineResponse, error)
	DeletePipelines(ctx context.Context, in *DeletePipelinesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	GetPipelineVersion(ctx context.Context, in *GetPipelineVersionRequest, opts ...grpc.CallOption) (*SinglePipelineVersionResponse, error)
	ListPipelineVersions(ctx context.Context, in *ListPipelineVersionsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionResponse, error)
	PatchPipelineVersions(ctx context.Context, in *PatchPipelineVersionsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionResponse, error)
	DeletePipelineVersions(ctx context.Context, in *DeletePipelineVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	GetPipelineVersionRun(ctx context.Context, in *GetPipelineVersionRunRequest, opts ...grpc.CallOption) (*SinglePipelineVersionRunResponse, error)
	PostPipelineVersionRuns(ctx context.Context, in *PostPipelineVersionRunsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionRunResponse, error)
	PatchPipelineVersionRuns(ctx context.Context, in *PatchPipelineVersionRunsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionRunResponse, error)
	PostPipelineSteps(ctx context.Context, in *PostPipelineStepsRequest, opts ...grpc.CallOption) (*MultiPipelineStepResponse, error)
	GetPipelineStep(ctx context.Context, in *GetPipelineStepRequest, opts ...grpc.CallOption) (*SinglePipelineStepResponse, error)
	ListPipelineSteps(ctx context.Context, in *ListPipelineStepsRequest, opts ...grpc.CallOption) (*MultiPipelineStepResponse, error)
	// This is a streaming endpoint, the request has a field, upload_data, which can either be the config for the upload or the actual data to upload.
	// The config must be sent first before the pipeline_step_bytes can be uploaded.
	// Once the config has been sent, the server will respond with a confirmation containing the pipeline_step_version_id.
	// This is so that if your upload is interrupted, you can resume the upload by sending the config again with the pipeline_step_version_id specified for your pipeline_step_version.
	// The actual upload will be done via a multipart upload, the latest successful part_id will be sent from the server in the response to the pipeline_step_bytes.
	PostPipelineStepVersionsUpload(ctx context.Context, opts ...grpc.CallOption) (V2_PostPipelineStepVersionsUploadClient, error)
	ListPipelineStepVersions(ctx context.Context, in *ListPipelineStepVersionsRequest, opts ...grpc.CallOption) (*MultiPipelineStepVersionResponse, error)
	GetPipelineStepVersion(ctx context.Context, in *GetPipelineStepVersionRequest, opts ...grpc.CallOption) (*SinglePipelineStepVersionResponse, error)
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*SingleSecretResponse, error)
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error)
	PostSecrets(ctx context.Context, in *PostSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error)
	PatchSecrets(ctx context.Context, in *PatchSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error)
	DeleteSecrets(ctx context.Context, in *DeleteSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error)
	PostMetricsQuery(ctx context.Context, in *PostMetricsQueryRequest, opts ...grpc.CallOption) (*MetricsQueryResponse, error)
	ListMetricLabels(ctx context.Context, in *ListMetricLabelsRequest, opts ...grpc.CallOption) (*MultiMetricLabelsResponse, error)
}

type v2Client struct {
	cc grpc.ClientConnInterface
}

func NewV2Client(cc grpc.ClientConnInterface) V2Client {
	return &v2Client{cc}
}

func (c *v2Client) ListConceptRelations(ctx context.Context, in *ListConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptRelationResponse)
	err := c.cc.Invoke(ctx, V2_ListConceptRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptRelations(ctx context.Context, in *PostConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptRelationResponse)
	err := c.cc.Invoke(ctx, V2_PostConceptRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteConceptRelations(ctx context.Context, in *DeleteConceptRelationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteConceptRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConceptCounts(ctx context.Context, in *GetConceptCountsRequest, opts ...grpc.CallOption) (*MultiConceptCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptCountResponse)
	err := c.cc.Invoke(ctx, V2_GetConceptCounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*SingleConceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleConceptResponse)
	err := c.cc.Invoke(ctx, V2_GetConcept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, V2_ListConcepts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelConcepts(ctx context.Context, in *ListModelConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, V2_ListModelConcepts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptsSearches(ctx context.Context, in *PostConceptsSearchesRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, V2_PostConceptsSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConcepts(ctx context.Context, in *PostConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, V2_PostConcepts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchConcepts(ctx context.Context, in *PatchConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, V2_PatchConcepts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConceptLanguage(ctx context.Context, in *GetConceptLanguageRequest, opts ...grpc.CallOption) (*SingleConceptLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleConceptLanguageResponse)
	err := c.cc.Invoke(ctx, V2_GetConceptLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConceptLanguages(ctx context.Context, in *ListConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, V2_ListConceptLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptLanguages(ctx context.Context, in *PostConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, V2_PostConceptLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchConceptLanguages(ctx context.Context, in *PatchConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, V2_PatchConceptLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListKnowledgeGraphs(ctx context.Context, in *ListKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiKnowledgeGraphResponse)
	err := c.cc.Invoke(ctx, V2_ListKnowledgeGraphs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostKnowledgeGraphs(ctx context.Context, in *PostKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiKnowledgeGraphResponse)
	err := c.cc.Invoke(ctx, V2_PostKnowledgeGraphs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*SingleAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleAnnotationResponse)
	err := c.cc.Invoke(ctx, V2_GetAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, V2_ListAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotations(ctx context.Context, in *PostAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, V2_PostAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotations(ctx context.Context, in *PatchAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, V2_PatchAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationsStatus(ctx context.Context, in *PatchAnnotationsStatusRequest, opts ...grpc.CallOption) (*PatchAnnotationsStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchAnnotationsStatusResponse)
	err := c.cc.Invoke(ctx, V2_PatchAnnotationsStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotations(ctx context.Context, in *DeleteAnnotationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationTracks(ctx context.Context, in *ListAnnotationTracksRequest, opts ...grpc.CallOption) (*MultiAnnotationTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationTrackResponse)
	err := c.cc.Invoke(ctx, V2_ListAnnotationTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationTracks(ctx context.Context, in *PostAnnotationTracksRequest, opts ...grpc.CallOption) (*MultiAnnotationTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationTrackResponse)
	err := c.cc.Invoke(ctx, V2_PostAnnotationTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationTracks(ctx context.Context, in *PatchAnnotationTracksRequest, opts ...grpc.CallOption) (*MultiAnnotationTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationTrackResponse)
	err := c.cc.Invoke(ctx, V2_PatchAnnotationTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotationTracks(ctx context.Context, in *DeleteAnnotationTracksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteAnnotationTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationsSearches(ctx context.Context, in *PatchAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_PatchAnnotationsSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationsSearches(ctx context.Context, in *PostAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_PostAnnotationsSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationWorkers(ctx context.Context, in *ListAnnotationWorkersRequest, opts ...grpc.CallOption) (*MultiWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkerResponse)
	err := c.cc.Invoke(ctx, V2_ListAnnotationWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputCount(ctx context.Context, in *GetInputCountRequest, opts ...grpc.CallOption) (*SingleInputCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleInputCountResponse)
	err := c.cc.Invoke(ctx, V2_GetInputCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) StreamInputs(ctx context.Context, in *StreamInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, V2_StreamInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputSamples(ctx context.Context, in *GetInputSamplesRequest, opts ...grpc.CallOption) (*MultiInputAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputAnnotationResponse)
	err := c.cc.Invoke(ctx, V2_GetInputSamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*SingleInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleInputResponse)
	err := c.cc.Invoke(ctx, V2_GetInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputVideoManifest(ctx context.Context, in *GetVideoManifestRequest, opts ...grpc.CallOption) (*GetVideoManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoManifestResponse)
	err := c.cc.Invoke(ctx, V2_GetInputVideoManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, V2_ListInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputs(ctx context.Context, in *PostInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, V2_PostInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchInputs(ctx context.Context, in *PatchInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, V2_PatchInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInput(ctx context.Context, in *DeleteInputRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInputs(ctx context.Context, in *DeleteInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchInputsSearches(ctx context.Context, in *PatchInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_PatchInputsSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsSearches(ctx context.Context, in *PostInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_PostInputsSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (*MultiOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiOutputResponse)
	err := c.cc.Invoke(ctx, V2_PostModelOutputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GenerateModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (V2_GenerateModelOutputsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V2_ServiceDesc.Streams[0], V2_GenerateModelOutputs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &v2GenerateModelOutputsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V2_GenerateModelOutputsClient interface {
	Recv() (*MultiOutputResponse, error)
	grpc.ClientStream
}

type v2GenerateModelOutputsClient struct {
	grpc.ClientStream
}

func (x *v2GenerateModelOutputsClient) Recv() (*MultiOutputResponse, error) {
	m := new(MultiOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v2Client) StreamModelOutputs(ctx context.Context, opts ...grpc.CallOption) (V2_StreamModelOutputsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V2_ServiceDesc.Streams[1], V2_StreamModelOutputs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &v2StreamModelOutputsClient{ClientStream: stream}
	return x, nil
}

type V2_StreamModelOutputsClient interface {
	Send(*PostModelOutputsRequest) error
	Recv() (*MultiOutputResponse, error)
	grpc.ClientStream
}

type v2StreamModelOutputsClient struct {
	grpc.ClientStream
}

func (x *v2StreamModelOutputsClient) Send(m *PostModelOutputsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v2StreamModelOutputsClient) Recv() (*MultiOutputResponse, error) {
	m := new(MultiOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v2Client) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, V2_ListDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*SingleDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleDatasetResponse)
	err := c.cc.Invoke(ctx, V2_GetDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasets(ctx context.Context, in *PostDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, V2_PostDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDatasets(ctx context.Context, in *PatchDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, V2_PatchDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasets(ctx context.Context, in *DeleteDatasetsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetInputs(ctx context.Context, in *ListDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetInputResponse)
	err := c.cc.Invoke(ctx, V2_ListDatasetInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDatasetInput(ctx context.Context, in *GetDatasetInputRequest, opts ...grpc.CallOption) (*SingleDatasetInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleDatasetInputResponse)
	err := c.cc.Invoke(ctx, V2_GetDatasetInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasetInputs(ctx context.Context, in *PostDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetInputResponse)
	err := c.cc.Invoke(ctx, V2_PostDatasetInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasetInputs(ctx context.Context, in *DeleteDatasetInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteDatasetInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetVersions(ctx context.Context, in *ListDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, V2_ListDatasetVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDatasetVersion(ctx context.Context, in *GetDatasetVersionRequest, opts ...grpc.CallOption) (*SingleDatasetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleDatasetVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetDatasetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetVersionMetricsGroups(ctx context.Context, in *ListDatasetVersionMetricsGroupsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionMetricsGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetVersionMetricsGroupResponse)
	err := c.cc.Invoke(ctx, V2_ListDatasetVersionMetricsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasetVersions(ctx context.Context, in *PostDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, V2_PostDatasetVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDatasetVersions(ctx context.Context, in *PatchDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, V2_PatchDatasetVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteDatasetVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutDatasetVersionExports(ctx context.Context, in *PutDatasetVersionExportsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDatasetVersionExportResponse)
	err := c.cc.Invoke(ctx, V2_PutDatasetVersionExports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelType(ctx context.Context, in *GetModelTypeRequest, opts ...grpc.CallOption) (*SingleModelTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelTypeResponse)
	err := c.cc.Invoke(ctx, V2_GetModelType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOpenSourceLicenses(ctx context.Context, in *ListOpenSourceLicensesRequest, opts ...grpc.CallOption) (*ListOpenSourceLicensesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOpenSourceLicensesResponse)
	err := c.cc.Invoke(ctx, V2_ListOpenSourceLicenses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelTypes(ctx context.Context, in *ListModelTypesRequest, opts ...grpc.CallOption) (*MultiModelTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelTypeResponse)
	err := c.cc.Invoke(ctx, V2_ListModelTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, V2_GetModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelOutputInfo(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, V2_GetModelOutputInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, V2_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetResourceCounts(ctx context.Context, in *GetResourceCountsRequest, opts ...grpc.CallOption) (*GetResourceCountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceCountsResponse)
	err := c.cc.Invoke(ctx, V2_GetResourceCounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelsSearches(ctx context.Context, in *PostModelsSearchesRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, V2_PostModelsSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModels(ctx context.Context, in *PostModelsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, V2_PostModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModels(ctx context.Context, in *PatchModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, V2_PatchModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelIds(ctx context.Context, in *PatchModelIdsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, V2_PatchModelIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelCheckConsents(ctx context.Context, in *PatchModelCheckConsentsRequest, opts ...grpc.CallOption) (*MultiModelCheckConsentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelCheckConsentResponse)
	err := c.cc.Invoke(ctx, V2_PatchModelCheckConsents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelToolkits(ctx context.Context, in *PatchModelToolkitsRequest, opts ...grpc.CallOption) (*MultiModelToolkitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelToolkitResponse)
	err := c.cc.Invoke(ctx, V2_PatchModelToolkits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelUseCases(ctx context.Context, in *PatchModelUseCasesRequest, opts ...grpc.CallOption) (*MultiModelUseCaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelUseCaseResponse)
	err := c.cc.Invoke(ctx, V2_PatchModelUseCases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelLanguages(ctx context.Context, in *PatchModelLanguagesRequest, opts ...grpc.CallOption) (*MultiModelLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelLanguageResponse)
	err := c.cc.Invoke(ctx, V2_PatchModelLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *v2Client) ListModelInputs(ctx context.Context, in *ListModelInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, V2_ListModelInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetModelVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersions(ctx context.Context, in *ListModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelVersionResponse)
	err := c.cc.Invoke(ctx, V2_ListModelVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionsUnPublish(ctx context.Context, in *PostWorkflowVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_PostWorkflowVersionsUnPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionsPublish(ctx context.Context, in *PostWorkflowVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_PostWorkflowVersionsPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsPublish(ctx context.Context, in *PostModelVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_PostModelVersionsPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsUnPublish(ctx context.Context, in *PostModelVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_PostModelVersionsUnPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersions(ctx context.Context, in *PostModelVersionsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, V2_PostModelVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelVersions(ctx context.Context, in *PatchModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelVersionResponse)
	err := c.cc.Invoke(ctx, V2_PatchModelVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteModelVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsUpload(ctx context.Context, opts ...grpc.CallOption) (V2_PostModelVersionsUploadClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V2_ServiceDesc.Streams[2], V2_PostModelVersionsUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &v2PostModelVersionsUploadClient{ClientStream: stream}
	return x, nil
}

type V2_PostModelVersionsUploadClient interface {
	Send(*PostModelVersionsUploadRequest) error
	Recv() (*PostModelVersionsUploadResponse, error)
	grpc.ClientStream
}

type v2PostModelVersionsUploadClient struct {
	grpc.ClientStream
}

func (x *v2PostModelVersionsUploadClient) Send(m *PostModelVersionsUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v2PostModelVersionsUploadClient) Recv() (*PostModelVersionsUploadResponse, error) {
	m := new(PostModelVersionsUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v2Client) PostModelMigration(ctx context.Context, in *PostModelMigrationRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, V2_PostModelMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutModelVersionExports(ctx context.Context, in *PutModelVersionExportsRequest, opts ...grpc.CallOption) (*SingleModelVersionExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelVersionExportResponse)
	err := c.cc.Invoke(ctx, V2_PutModelVersionExports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionExport(ctx context.Context, in *GetModelVersionExportRequest, opts ...grpc.CallOption) (*SingleModelVersionExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelVersionExportResponse)
	err := c.cc.Invoke(ctx, V2_GetModelVersionExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionMetrics(ctx context.Context, in *GetModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetModelVersionMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionMetrics(ctx context.Context, in *PostModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, V2_PostModelVersionMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionEvaluations(ctx context.Context, in *PostModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, V2_PostModelVersionEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersionEvaluations(ctx context.Context, in *ListModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, V2_ListModelVersionEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionEvaluation(ctx context.Context, in *GetModelVersionEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleEvalMetricsResponse)
	err := c.cc.Invoke(ctx, V2_GetModelVersionEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostEvaluations(ctx context.Context, in *PostEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, V2_PostEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListEvaluations(ctx context.Context, in *ListEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, V2_ListEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleEvalMetricsResponse)
	err := c.cc.Invoke(ctx, V2_GetEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelReferences(ctx context.Context, in *ListModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelReferenceResponse)
	err := c.cc.Invoke(ctx, V2_ListModelReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionInputExample(ctx context.Context, in *GetModelVersionInputExampleRequest, opts ...grpc.CallOption) (*SingleModelVersionInputExampleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModelVersionInputExampleResponse)
	err := c.cc.Invoke(ctx, V2_GetModelVersionInputExample_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersionInputExamples(ctx context.Context, in *ListModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModelVersionInputExampleResponse)
	err := c.cc.Invoke(ctx, V2_ListModelVersionInputExamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*SingleWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleWorkflowResponse)
	err := c.cc.Invoke(ctx, V2_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, V2_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflows(ctx context.Context, in *PostWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, V2_PostWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflows(ctx context.Context, in *PatchWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, V2_PatchWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflowIds(ctx context.Context, in *PatchWorkflowIdsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, V2_PatchWorkflowIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflows(ctx context.Context, in *DeleteWorkflowsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowResults(ctx context.Context, in *PostWorkflowResultsRequest, opts ...grpc.CallOption) (*PostWorkflowResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostWorkflowResultsResponse)
	err := c.cc.Invoke(ctx, V2_PostWorkflowResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, V2_ListWorkflowVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflowVersion(ctx context.Context, in *GetWorkflowVersionRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetWorkflowVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflowVersions(ctx context.Context, in *DeleteWorkflowVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteWorkflowVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflowVersions(ctx context.Context, in *PatchWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, V2_PatchWorkflowVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleKeyResponse)
	err := c.cc.Invoke(ctx, V2_GetKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, V2_ListKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, V2_ListAppKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostKeys(ctx context.Context, in *PostKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, V2_PostKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchKeys(ctx context.Context, in *PatchKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, V2_PatchKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopes(ctx context.Context, in *MyScopesRequest, opts ...grpc.CallOption) (*MultiScopeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiScopeResponse)
	err := c.cc.Invoke(ctx, V2_MyScopes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopesUser(ctx context.Context, in *MyScopesUserRequest, opts ...grpc.CallOption) (*MultiScopeUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiScopeUserResponse)
	err := c.cc.Invoke(ctx, V2_MyScopesUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopesRoot(ctx context.Context, in *MyScopesRootRequest, opts ...grpc.CallOption) (*MultiScopeRootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiScopeRootResponse)
	err := c.cc.Invoke(ctx, V2_MyScopesRoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*MultiScopeDepsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiScopeDepsResponse)
	err := c.cc.Invoke(ctx, V2_ListScopes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleAppResponse)
	err := c.cc.Invoke(ctx, V2_GetApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, V2_ListApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostApps(ctx context.Context, in *PostAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, V2_PostApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchApps(ctx context.Context, in *PatchAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, V2_PatchApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAppsDetails(ctx context.Context, in *PatchAppsDetailsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, V2_PatchAppsDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAppsIds(ctx context.Context, in *PatchAppsIdsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, V2_PatchAppsIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchApp(ctx context.Context, in *PatchAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleAppResponse)
	err := c.cc.Invoke(ctx, V2_PatchApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAppsSearches(ctx context.Context, in *PostAppsSearchesRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, V2_PostAppsSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleUserResponse)
	err := c.cc.Invoke(ctx, V2_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostValidatePassword(ctx context.Context, in *PostValidatePasswordRequest, opts ...grpc.CallOption) (*SinglePasswordValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SinglePasswordValidationResponse)
	err := c.cc.Invoke(ctx, V2_PostValidatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetSearch(ctx context.Context, in *GetSearchRequest, opts ...grpc.CallOption) (*SingleSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleSearchResponse)
	err := c.cc.Invoke(ctx, V2_GetSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListSearches(ctx context.Context, in *ListSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_ListSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchSearches(ctx context.Context, in *PatchSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_PatchSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *v2Client) PostSearches(ctx context.Context, in *PostSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_PostSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostSearchesByID(ctx context.Context, in *PostSearchesByIDRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, V2_PostSearchesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationSearchMetrics(ctx context.Context, in *PostAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, V2_PostAnnotationSearchMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotationSearchMetrics(ctx context.Context, in *GetAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, V2_GetAnnotationSearchMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationSearchMetrics(ctx context.Context, in *ListAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, V2_ListAnnotationSearchMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotationSearchMetrics(ctx context.Context, in *DeleteAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteAnnotationSearchMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteSearch(ctx context.Context, in *DeleteSearchRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationFilters(ctx context.Context, in *ListAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, V2_ListAnnotationFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotationFilter(ctx context.Context, in *GetAnnotationFilterRequest, opts ...grpc.CallOption) (*SingleAnnotationFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, V2_GetAnnotationFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationFilters(ctx context.Context, in *PostAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, V2_PostAnnotationFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationFilters(ctx context.Context, in *PatchAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, V2_PatchAnnotationFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotationFilters(ctx context.Context, in *DeleteAnnotationFiltersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteAnnotationFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListStatusCodes(ctx context.Context, in *ListStatusCodesRequest, opts ...grpc.CallOption) (*MultiStatusCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiStatusCodeResponse)
	err := c.cc.Invoke(ctx, V2_ListStatusCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetStatusCode(ctx context.Context, in *GetStatusCodeRequest, opts ...grpc.CallOption) (*SingleStatusCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleStatusCodeResponse)
	err := c.cc.Invoke(ctx, V2_GetStatusCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, V2_ListCollaborators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCollaborators(ctx context.Context, in *PostCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, V2_PostCollaborators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchCollaborators(ctx context.Context, in *PatchCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, V2_PatchCollaborators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteCollaborators(ctx context.Context, in *DeleteCollaboratorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteCollaborators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollaborations(ctx context.Context, in *ListCollaborationsRequest, opts ...grpc.CallOption) (*MultiCollaborationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCollaborationsResponse)
	err := c.cc.Invoke(ctx, V2_ListCollaborations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAppDuplications(ctx context.Context, in *PostAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppDuplicationsResponse)
	err := c.cc.Invoke(ctx, V2_PostAppDuplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAppDuplications(ctx context.Context, in *ListAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAppDuplicationsResponse)
	err := c.cc.Invoke(ctx, V2_ListAppDuplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAppDuplication(ctx context.Context, in *GetAppDuplicationRequest, opts ...grpc.CallOption) (*SingleAppDuplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleAppDuplicationResponse)
	err := c.cc.Invoke(ctx, V2_GetAppDuplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTasks(ctx context.Context, in *PostTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, V2_PostTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTaskAnnotationCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleTaskCountResponse)
	err := c.cc.Invoke(ctx, V2_GetTaskAnnotationCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTaskInputCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleTaskCountResponse)
	err := c.cc.Invoke(ctx, V2_GetTaskInputCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*SingleTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleTaskResponse)
	err := c.cc.Invoke(ctx, V2_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, V2_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchTasks(ctx context.Context, in *PatchTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, V2_PatchTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostLabelOrders(ctx context.Context, in *PostLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, V2_PostLabelOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetLabelOrder(ctx context.Context, in *GetLabelOrderRequest, opts ...grpc.CallOption) (*SingleLabelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleLabelOrderResponse)
	err := c.cc.Invoke(ctx, V2_GetLabelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListLabelOrders(ctx context.Context, in *ListLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, V2_ListLabelOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchLabelOrders(ctx context.Context, in *PatchLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, V2_PatchLabelOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteLabelOrders(ctx context.Context, in *DeleteLabelOrdersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteLabelOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCollectors(ctx context.Context, in *PostCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, V2_PostCollectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*SingleCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleCollectorResponse)
	err := c.cc.Invoke(ctx, V2_GetCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, V2_ListCollectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchCollectors(ctx context.Context, in *PatchCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, V2_PatchCollectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteCollectors(ctx context.Context, in *DeleteCollectorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteCollectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostStatValues(ctx context.Context, in *PostStatValuesRequest, opts ...grpc.CallOption) (*MultiStatValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiStatValueResponse)
	err := c.cc.Invoke(ctx, V2_PostStatValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostStatValuesAggregate(ctx context.Context, in *PostStatValuesAggregateRequest, opts ...grpc.CallOption) (*MultiStatValueAggregateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiStatValueAggregateResponse)
	err := c.cc.Invoke(ctx, V2_PostStatValuesAggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*SingleModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModuleResponse)
	err := c.cc.Invoke(ctx, V2_GetModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, V2_ListModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModules(ctx context.Context, in *PostModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, V2_PostModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModules(ctx context.Context, in *PatchModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, V2_PatchModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModules(ctx context.Context, in *DeleteModulesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModuleVersion(ctx context.Context, in *GetModuleVersionRequest, opts ...grpc.CallOption) (*SingleModuleVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModuleVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetModuleVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, V2_ListModuleVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModuleVersions(ctx context.Context, in *PostModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, V2_PostModuleVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModuleVersions(ctx context.Context, in *PatchModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, V2_PatchModuleVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModuleVersions(ctx context.Context, in *DeleteModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteModuleVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModuleVersionUsageCount(ctx context.Context, in *GetModuleVersionUsageCountRequest, opts ...grpc.CallOption) (*SingleModuleVersionUsageCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleModuleVersionUsageCountResponse)
	err := c.cc.Invoke(ctx, V2_GetModuleVersionUsageCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInstalledModuleVersion(ctx context.Context, in *GetInstalledModuleVersionRequest, opts ...grpc.CallOption) (*SingleInstalledModuleVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetInstalledModuleVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInstalledModuleVersions(ctx context.Context, in *ListInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, V2_ListInstalledModuleVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInstalledModuleVersions(ctx context.Context, in *PostInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, V2_PostInstalledModuleVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInstalledModuleVersions(ctx context.Context, in *DeleteInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteInstalledModuleVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInstalledModuleVersionsKey(ctx context.Context, in *PostInstalledModuleVersionsKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleKeyResponse)
	err := c.cc.Invoke(ctx, V2_PostInstalledModuleVersionsKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostBulkOperations(ctx context.Context, in *PostBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, V2_PostBulkOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListBulkOperations(ctx context.Context, in *ListBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, V2_ListBulkOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetBulkOperation(ctx context.Context, in *GetBulkOperationRequest, opts ...grpc.CallOption) (*SingleBulkOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleBulkOperationsResponse)
	err := c.cc.Invoke(ctx, V2_GetBulkOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelBulkOperations(ctx context.Context, in *CancelBulkOperationRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, V2_CancelBulkOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteBulkOperations(ctx context.Context, in *DeleteBulkOperationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteBulkOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListNextTaskAssignments(ctx context.Context, in *ListNextTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, V2_ListNextTaskAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutTaskAssignments(ctx context.Context, in *PutTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiTaskAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiTaskAssignmentResponse)
	err := c.cc.Invoke(ctx, V2_PutTaskAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputsAddJobs(ctx context.Context, in *ListInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, V2_ListInputsAddJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputsAddJob(ctx context.Context, in *GetInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleInputsAddJobResponse)
	err := c.cc.Invoke(ctx, V2_GetInputsAddJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelInputsAddJob(ctx context.Context, in *CancelInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleInputsAddJobResponse)
	err := c.cc.Invoke(ctx, V2_CancelInputsAddJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostUploads(ctx context.Context, in *PostUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiUploadResponse)
	err := c.cc.Invoke(ctx, V2_PostUploads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutUploadContentParts(ctx context.Context, in *PutUploadContentPartsRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleUploadResponse)
	err := c.cc.Invoke(ctx, V2_PutUploadContentParts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUpload(ctx context.Context, in *GetUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleUploadResponse)
	err := c.cc.Invoke(ctx, V2_GetUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUploads(ctx context.Context, in *ListUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiUploadResponse)
	err := c.cc.Invoke(ctx, V2_ListUploads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteUploads(ctx context.Context, in *DeleteUploadsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteUploads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsDataSources(ctx context.Context, in *PostInputsDataSourcesRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, V2_PostInputsDataSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputsExtractionJob(ctx context.Context, in *GetInputsExtractionJobRequest, opts ...grpc.CallOption) (*SingleInputsExtractionJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleInputsExtractionJobResponse)
	err := c.cc.Invoke(ctx, V2_GetInputsExtractionJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputsExtractionJobs(ctx context.Context, in *ListInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputsExtractionJobResponse)
	err := c.cc.Invoke(ctx, V2_ListInputsExtractionJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelInputsExtractionJobs(ctx context.Context, in *CancelInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputsExtractionJobResponse)
	err := c.cc.Invoke(ctx, V2_CancelInputsExtractionJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsUploads(ctx context.Context, in *PostInputsUploadsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, V2_PostInputsUploads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListPipelineVersionRuns(ctx context.Context, in *ListPipelineVersionRunsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineVersionRunResponse)
	err := c.cc.Invoke(ctx, V2_ListPipelineVersionRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*SingleRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleRunnerResponse)
	err := c.cc.Invoke(ctx, V2_GetRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiRunnerResponse)
	err := c.cc.Invoke(ctx, V2_ListRunners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostRunners(ctx context.Context, in *PostRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiRunnerResponse)
	err := c.cc.Invoke(ctx, V2_PostRunners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchRunners(ctx context.Context, in *PatchRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiRunnerResponse)
	err := c.cc.Invoke(ctx, V2_PatchRunners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteRunners(ctx context.Context, in *DeleteRunnersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteRunners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListRunnerItems(ctx context.Context, in *ListRunnerItemsRequest, opts ...grpc.CallOption) (*MultiRunnerItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiRunnerItemResponse)
	err := c.cc.Invoke(ctx, V2_ListRunnerItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostRunnerItemOutputs(ctx context.Context, in *PostRunnerItemOutputsRequest, opts ...grpc.CallOption) (*MultiRunnerItemOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiRunnerItemOutputResponse)
	err := c.cc.Invoke(ctx, V2_PostRunnerItemOutputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ProcessRunnerItems(ctx context.Context, opts ...grpc.CallOption) (V2_ProcessRunnerItemsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V2_ServiceDesc.Streams[3], V2_ProcessRunnerItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &v2ProcessRunnerItemsClient{ClientStream: stream}
	return x, nil
}

type V2_ProcessRunnerItemsClient interface {
	Send(*PostRunnerItemOutputsRequest) error
	Recv() (*MultiRunnerItemResponse, error)
	grpc.ClientStream
}

type v2ProcessRunnerItemsClient struct {
	grpc.ClientStream
}

func (x *v2ProcessRunnerItemsClient) Send(m *PostRunnerItemOutputsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v2ProcessRunnerItemsClient) Recv() (*MultiRunnerItemResponse, error) {
	m := new(MultiRunnerItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v2Client) PostModelVersionsTrainingTimeEstimate(ctx context.Context, in *PostModelVersionsTrainingTimeEstimateRequest, opts ...grpc.CallOption) (*MultiTrainingTimeEstimateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiTrainingTimeEstimateResponse)
	err := c.cc.Invoke(ctx, V2_PostModelVersionsTrainingTimeEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCloudProviders(ctx context.Context, in *ListCloudProvidersRequest, opts ...grpc.CallOption) (*MultiCloudProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCloudProviderResponse)
	err := c.cc.Invoke(ctx, V2_ListCloudProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...grpc.CallOption) (*MultiCloudRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiCloudRegionResponse)
	err := c.cc.Invoke(ctx, V2_ListCloudRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInstanceTypes(ctx context.Context, in *ListInstanceTypesRequest, opts ...grpc.CallOption) (*MultiInstanceTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiInstanceTypeResponse)
	err := c.cc.Invoke(ctx, V2_ListInstanceTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetComputeCluster(ctx context.Context, in *GetComputeClusterRequest, opts ...grpc.CallOption) (*SingleComputeClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleComputeClusterResponse)
	err := c.cc.Invoke(ctx, V2_GetComputeCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListComputeClusters(ctx context.Context, in *ListComputeClustersRequest, opts ...grpc.CallOption) (*MultiComputeClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiComputeClusterResponse)
	err := c.cc.Invoke(ctx, V2_ListComputeClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostComputeClusters(ctx context.Context, in *PostComputeClustersRequest, opts ...grpc.CallOption) (*MultiComputeClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiComputeClusterResponse)
	err := c.cc.Invoke(ctx, V2_PostComputeClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteComputeClusters(ctx context.Context, in *DeleteComputeClustersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteComputeClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetNodepool(ctx context.Context, in *GetNodepoolRequest, opts ...grpc.CallOption) (*SingleNodepoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleNodepoolResponse)
	err := c.cc.Invoke(ctx, V2_GetNodepool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListNodepools(ctx context.Context, in *ListNodepoolsRequest, opts ...grpc.CallOption) (*MultiNodepoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiNodepoolResponse)
	err := c.cc.Invoke(ctx, V2_ListNodepools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostNodepools(ctx context.Context, in *PostNodepoolsRequest, opts ...grpc.CallOption) (*MultiNodepoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiNodepoolResponse)
	err := c.cc.Invoke(ctx, V2_PostNodepools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchNodepools(ctx context.Context, in *PatchNodepoolsRequest, opts ...grpc.CallOption) (*MultiNodepoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiNodepoolResponse)
	err := c.cc.Invoke(ctx, V2_PatchNodepools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteNodepools(ctx context.Context, in *DeleteNodepoolsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteNodepools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*SingleDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleDeploymentResponse)
	err := c.cc.Invoke(ctx, V2_GetDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*MultiDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDeploymentResponse)
	err := c.cc.Invoke(ctx, V2_ListDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDeployments(ctx context.Context, in *PostDeploymentsRequest, opts ...grpc.CallOption) (*MultiDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDeploymentResponse)
	err := c.cc.Invoke(ctx, V2_PostDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDeployments(ctx context.Context, in *PatchDeploymentsRequest, opts ...grpc.CallOption) (*MultiDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiDeploymentResponse)
	err := c.cc.Invoke(ctx, V2_PatchDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDeployments(ctx context.Context, in *DeleteDeploymentsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeleteDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAuditLogSearches(ctx context.Context, in *PostAuditLogSearchesRequest, opts ...grpc.CallOption) (*MultiAuditLogEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiAuditLogEntryResponse)
	err := c.cc.Invoke(ctx, V2_PostAuditLogSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflowEvaluationTemplates(ctx context.Context, in *ListWorkflowEvaluationTemplatesRequest, opts ...grpc.CallOption) (*MultiWorkflowEvaluationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowEvaluationTemplateResponse)
	err := c.cc.Invoke(ctx, V2_ListWorkflowEvaluationTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostLogEntries(ctx context.Context, in *PostLogEntriesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_PostLogEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListLogEntries(ctx context.Context, in *ListLogEntriesRequest, opts ...grpc.CallOption) (*MultiLogEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiLogEntryResponse)
	err := c.cc.Invoke(ctx, V2_ListLogEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) StreamLogEntries(ctx context.Context, in *StreamLogEntriesRequest, opts ...grpc.CallOption) (V2_StreamLogEntriesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V2_ServiceDesc.Streams[4], V2_StreamLogEntries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &v2StreamLogEntriesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V2_StreamLogEntriesClient interface {
	Recv() (*MultiLogEntryResponse, error)
	grpc.ClientStream
}

type v2StreamLogEntriesClient struct {
	grpc.ClientStream
}

func (x *v2StreamLogEntriesClient) Recv() (*MultiLogEntryResponse, error) {
	m := new(MultiLogEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v2Client) PostComputePlaneMetrics(ctx context.Context, in *PostComputePlaneMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_PostComputePlaneMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionEvaluations(ctx context.Context, in *PostWorkflowVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowVersionEvaluationResponse)
	err := c.cc.Invoke(ctx, V2_PostWorkflowVersionEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflowVersionEvaluation(ctx context.Context, in *GetWorkflowVersionEvaluationRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleWorkflowVersionEvaluationResponse)
	err := c.cc.Invoke(ctx, V2_GetWorkflowVersionEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflowVersionEvaluations(ctx context.Context, in *ListWorkflowVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowVersionEvaluationResponse)
	err := c.cc.Invoke(ctx, V2_ListWorkflowVersionEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflowVersionEvaluations(ctx context.Context, in *PatchWorkflowVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiWorkflowVersionEvaluationResponse)
	err := c.cc.Invoke(ctx, V2_PatchWorkflowVersionEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflowVersionEvaluationData(ctx context.Context, in *ListWorkflowVersionEvaluationDataRequest, opts ...grpc.CallOption) (*MultiListWorkflowVersionEvaluationDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiListWorkflowVersionEvaluationDataResponse)
	err := c.cc.Invoke(ctx, V2_ListWorkflowVersionEvaluationData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionEvaluationData(ctx context.Context, in *PostWorkflowVersionEvaluationDataRequest, opts ...grpc.CallOption) (*MultiListWorkflowVersionEvaluationDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiListWorkflowVersionEvaluationDataResponse)
	err := c.cc.Invoke(ctx, V2_PostWorkflowVersionEvaluationData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostPipelines(ctx context.Context, in *PostPipelinesRequest, opts ...grpc.CallOption) (*MultiPipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineResponse)
	err := c.cc.Invoke(ctx, V2_PostPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*SinglePipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SinglePipelineResponse)
	err := c.cc.Invoke(ctx, V2_GetPipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*MultiPipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineResponse)
	err := c.cc.Invoke(ctx, V2_ListPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchPipelines(ctx context.Context, in *PatchPipelinesRequest, opts ...grpc.CallOption) (*MultiPipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineResponse)
	err := c.cc.Invoke(ctx, V2_PatchPipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeletePipelines(ctx context.Context, in *DeletePipelinesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeletePipelines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetPipelineVersion(ctx context.Context, in *GetPipelineVersionRequest, opts ...grpc.CallOption) (*SinglePipelineVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SinglePipelineVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetPipelineVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListPipelineVersions(ctx context.Context, in *ListPipelineVersionsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineVersionResponse)
	err := c.cc.Invoke(ctx, V2_ListPipelineVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchPipelineVersions(ctx context.Context, in *PatchPipelineVersionsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineVersionResponse)
	err := c.cc.Invoke(ctx, V2_PatchPipelineVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeletePipelineVersions(ctx context.Context, in *DeletePipelineVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, V2_DeletePipelineVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetPipelineVersionRun(ctx context.Context, in *GetPipelineVersionRunRequest, opts ...grpc.CallOption) (*SinglePipelineVersionRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SinglePipelineVersionRunResponse)
	err := c.cc.Invoke(ctx, V2_GetPipelineVersionRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostPipelineVersionRuns(ctx context.Context, in *PostPipelineVersionRunsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineVersionRunResponse)
	err := c.cc.Invoke(ctx, V2_PostPipelineVersionRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchPipelineVersionRuns(ctx context.Context, in *PatchPipelineVersionRunsRequest, opts ...grpc.CallOption) (*MultiPipelineVersionRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineVersionRunResponse)
	err := c.cc.Invoke(ctx, V2_PatchPipelineVersionRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostPipelineSteps(ctx context.Context, in *PostPipelineStepsRequest, opts ...grpc.CallOption) (*MultiPipelineStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineStepResponse)
	err := c.cc.Invoke(ctx, V2_PostPipelineSteps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetPipelineStep(ctx context.Context, in *GetPipelineStepRequest, opts ...grpc.CallOption) (*SinglePipelineStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SinglePipelineStepResponse)
	err := c.cc.Invoke(ctx, V2_GetPipelineStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListPipelineSteps(ctx context.Context, in *ListPipelineStepsRequest, opts ...grpc.CallOption) (*MultiPipelineStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineStepResponse)
	err := c.cc.Invoke(ctx, V2_ListPipelineSteps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostPipelineStepVersionsUpload(ctx context.Context, opts ...grpc.CallOption) (V2_PostPipelineStepVersionsUploadClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V2_ServiceDesc.Streams[5], V2_PostPipelineStepVersionsUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &v2PostPipelineStepVersionsUploadClient{ClientStream: stream}
	return x, nil
}

type V2_PostPipelineStepVersionsUploadClient interface {
	Send(*PostPipelineStepVersionsUploadRequest) error
	Recv() (*PostPipelineStepVersionsUploadResponse, error)
	grpc.ClientStream
}

type v2PostPipelineStepVersionsUploadClient struct {
	grpc.ClientStream
}

func (x *v2PostPipelineStepVersionsUploadClient) Send(m *PostPipelineStepVersionsUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v2PostPipelineStepVersionsUploadClient) Recv() (*PostPipelineStepVersionsUploadResponse, error) {
	m := new(PostPipelineStepVersionsUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v2Client) ListPipelineStepVersions(ctx context.Context, in *ListPipelineStepVersionsRequest, opts ...grpc.CallOption) (*MultiPipelineStepVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiPipelineStepVersionResponse)
	err := c.cc.Invoke(ctx, V2_ListPipelineStepVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetPipelineStepVersion(ctx context.Context, in *GetPipelineStepVersionRequest, opts ...grpc.CallOption) (*SinglePipelineStepVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SinglePipelineStepVersionResponse)
	err := c.cc.Invoke(ctx, V2_GetPipelineStepVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*SingleSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleSecretResponse)
	err := c.cc.Invoke(ctx, V2_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSecretResponse)
	err := c.cc.Invoke(ctx, V2_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostSecrets(ctx context.Context, in *PostSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSecretResponse)
	err := c.cc.Invoke(ctx, V2_PostSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchSecrets(ctx context.Context, in *PatchSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSecretResponse)
	err := c.cc.Invoke(ctx, V2_PatchSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteSecrets(ctx context.Context, in *DeleteSecretsRequest, opts ...grpc.CallOption) (*MultiSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSecretResponse)
	err := c.cc.Invoke(ctx, V2_DeleteSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostMetricsQuery(ctx context.Context, in *PostMetricsQueryRequest, opts ...grpc.CallOption) (*MetricsQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsQueryResponse)
	err := c.cc.Invoke(ctx, V2_PostMetricsQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListMetricLabels(ctx context.Context, in *ListMetricLabelsRequest, opts ...grpc.CallOption) (*MultiMetricLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiMetricLabelsResponse)
	err := c.cc.Invoke(ctx, V2_ListMetricLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V2Server is the server API for V2 service.
// All implementations must embed UnimplementedV2Server
// for forward compatibility
type V2Server interface {
	// List concept relations between concepts in the platform.
	// MUST be above ListConcepts so that if concept_id is empty this will still match
	// /concepts/relations to list all the concept relations in the app.
	ListConceptRelations(context.Context, *ListConceptRelationsRequest) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	PostConceptRelations(context.Context, *PostConceptRelationsRequest) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	DeleteConceptRelations(context.Context, *DeleteConceptRelationsRequest) (*status.BaseResponse, error)
	// List all the concepts with their positive and negative counts
	GetConceptCounts(context.Context, *GetConceptCountsRequest) (*MultiConceptCountResponse, error)
	// Get a specific concept from an app.
	GetConcept(context.Context, *GetConceptRequest) (*SingleConceptResponse, error)
	// List all the concepts.
	ListConcepts(context.Context, *ListConceptsRequest) (*MultiConceptResponse, error)
	// List models concepts.
	ListModelConcepts(context.Context, *ListModelConceptsRequest) (*MultiConceptResponse, error)
	// Search over the concepts to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostConceptsSearches(context.Context, *PostConceptsSearchesRequest) (*MultiConceptResponse, error)
	// Add a concept to an app.
	PostConcepts(context.Context, *PostConceptsRequest) (*MultiConceptResponse, error)
	// Patch one or more concepts.
	PatchConcepts(context.Context, *PatchConceptsRequest) (*MultiConceptResponse, error)
	// Get a specific concept from an app.
	GetConceptLanguage(context.Context, *GetConceptLanguageRequest) (*SingleConceptLanguageResponse, error)
	// List the concept in all the translated languages.
	ListConceptLanguages(context.Context, *ListConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// Add a new translation for this concept.
	PostConceptLanguages(context.Context, *PostConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// Patch the name for a given language names by passing in a list of concepts with the new names
	// for the languages.
	PatchConceptLanguages(context.Context, *PatchConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// List all domain graphs.
	ListKnowledgeGraphs(context.Context, *ListKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error)
	// Post domain graphs.
	PostKnowledgeGraphs(context.Context, *PostKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error)
	// Get a specific annotation from an app.
	GetAnnotation(context.Context, *GetAnnotationRequest) (*SingleAnnotationResponse, error)
	// List all the annotation.
	ListAnnotations(context.Context, *ListAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Post annotations.
	PostAnnotations(context.Context, *PostAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Patch one or more annotations.
	PatchAnnotations(context.Context, *PatchAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Patch annotations status by worker id and task id.
	// Deprecated: Use PutTaskAssignments to update task annotations.
	//
	//	For example, you can use PutTaskAssignments with action REVIEW_APPROVE
	//	to approve task assignments and associated annotations in bulk.
	PatchAnnotationsStatus(context.Context, *PatchAnnotationsStatusRequest) (*PatchAnnotationsStatusResponse, error)
	// Delete a single annotation.
	DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*status.BaseResponse, error)
	// Delete multiple annotations in one request.
	DeleteAnnotations(context.Context, *DeleteAnnotationsRequest) (*status.BaseResponse, error)
	// List all the annotation tracks.
	ListAnnotationTracks(context.Context, *ListAnnotationTracksRequest) (*MultiAnnotationTrackResponse, error)
	// Post annotation tracks.
	PostAnnotationTracks(context.Context, *PostAnnotationTracksRequest) (*MultiAnnotationTrackResponse, error)
	// Patch one or more annotation tracks.
	PatchAnnotationTracks(context.Context, *PatchAnnotationTracksRequest) (*MultiAnnotationTrackResponse, error)
	// Delete multiple annotation tracks in one request.
	DeleteAnnotationTracks(context.Context, *DeleteAnnotationTracksRequest) (*status.BaseResponse, error)
	// Patch saved annotations searches by ids.
	PatchAnnotationsSearches(context.Context, *PatchAnnotationsSearchesRequest) (*MultiSearchResponse, error)
	// Execute a search over annotations
	PostAnnotationsSearches(context.Context, *PostAnnotationsSearchesRequest) (*MultiSearchResponse, error)
	// ListAnnotationWorkers lists users, models, and workflows (collectively
	// known as "workers") that have added annotations to the application.
	ListAnnotationWorkers(context.Context, *ListAnnotationWorkersRequest) (*MultiWorkerResponse, error)
	// Get input count per status.
	GetInputCount(context.Context, *GetInputCountRequest) (*SingleInputCountResponse, error)
	// Streams all the inputs starting from oldest assets.
	StreamInputs(context.Context, *StreamInputsRequest) (*MultiInputResponse, error)
	GetInputSamples(context.Context, *GetInputSamplesRequest) (*MultiInputAnnotationResponse, error)
	// Get a specific input from an app.
	GetInput(context.Context, *GetInputRequest) (*SingleInputResponse, error)
	// Get a MPEG-DASH manifest for video-type inputs that were added via PostInputs and successfully processed
	// Experimental. Manifest is used by browser and desktop clients that implement an efficient streaming playback
	// This means client can switch between low-resolution and high-resolution video streams
	// Depending on network bandwidth or user's preference
	// This also means that reencoded video streams are reencoded in a uniform way, not relying on original format
	// Alternative to MPEG-dash is to stream original file with byte-range header
	GetInputVideoManifest(context.Context, *GetVideoManifestRequest) (*GetVideoManifestResponse, error)
	// List all the inputs.
	ListInputs(context.Context, *ListInputsRequest) (*MultiInputResponse, error)
	// PostInputs adds one or more inputs to the app.
	// Takes a list of image/video/audio/text URLs, image/video/audio bytes or raw text
	// Optionally, include concepts or dataset ids to link them
	// Optionally, include metadata for search
	// Note that inputs processing is asynchronous process
	// See ListInputs, StreamInputs or PostInputSearches to list results
	PostInputs(context.Context, *PostInputsRequest) (*MultiInputResponse, error)
	// Patch one or more inputs.
	PatchInputs(context.Context, *PatchInputsRequest) (*MultiInputResponse, error)
	// Delete a single input asynchronously.
	DeleteInput(context.Context, *DeleteInputRequest) (*status.BaseResponse, error)
	// Delete multiple inputs in one request.
	// This call is asynchronous.
	DeleteInputs(context.Context, *DeleteInputsRequest) (*status.BaseResponse, error)
	// Patch saved inputs searches by ids.
	PatchInputsSearches(context.Context, *PatchInputsSearchesRequest) (*MultiSearchResponse, error)
	// Execute a search over inputs
	PostInputsSearches(context.Context, *PostInputsSearchesRequest) (*MultiSearchResponse, error)
	// Get predicted outputs from the model.
	PostModelOutputs(context.Context, *PostModelOutputsRequest) (*MultiOutputResponse, error)
	// TODO(zeiler): will need to
	// Single request but streaming responses.
	GenerateModelOutputs(*PostModelOutputsRequest, V2_GenerateModelOutputsServer) error
	// Stream of requests and stream of responses
	StreamModelOutputs(V2_StreamModelOutputsServer) error
	// List all the datasets.
	ListDatasets(context.Context, *ListDatasetsRequest) (*MultiDatasetResponse, error)
	// Get a specific dataset.
	GetDataset(context.Context, *GetDatasetRequest) (*SingleDatasetResponse, error)
	// Add datasets to an app.
	// The process is atomic, i.e. either all or no datasets are added.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PostDatasets(context.Context, *PostDatasetsRequest) (*MultiDatasetResponse, error)
	// Patch one or more datasets.
	// The process is atomic, i.e. either all or no datasets are patched.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PatchDatasets(context.Context, *PatchDatasetsRequest) (*MultiDatasetResponse, error)
	// Delete one or more datasets in a single request.
	DeleteDatasets(context.Context, *DeleteDatasetsRequest) (*status.BaseResponse, error)
	// List all the dataset inputs in a dataset.
	ListDatasetInputs(context.Context, *ListDatasetInputsRequest) (*MultiDatasetInputResponse, error)
	// Get a specific dataset input.
	GetDatasetInput(context.Context, *GetDatasetInputRequest) (*SingleDatasetInputResponse, error)
	// Add dataset inputs to a dataset.
	// The process is not atomic, i.e. if there are errors with some dataset
	// inputs, others might still be added. The response reports
	//   - SUCCESS if all dataset inputs were added,
	//   - MIXED_STATUS if only some dataset inputs were added, and
	//   - FAILURE if no dataset inputs were added.
	//
	// Each individual dataset input in the response has the status set to
	// indicate if it was successful or if there was an error.
	PostDatasetInputs(context.Context, *PostDatasetInputsRequest) (*MultiDatasetInputResponse, error)
	// Delete one or more dataset inputs in a single request.
	DeleteDatasetInputs(context.Context, *DeleteDatasetInputsRequest) (*status.BaseResponse, error)
	// List all the dataset versions.
	ListDatasetVersions(context.Context, *ListDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Get a specific dataset version.
	GetDatasetVersion(context.Context, *GetDatasetVersionRequest) (*SingleDatasetVersionResponse, error)
	ListDatasetVersionMetricsGroups(context.Context, *ListDatasetVersionMetricsGroupsRequest) (*MultiDatasetVersionMetricsGroupResponse, error)
	// Add dataset versions to a dataset.
	PostDatasetVersions(context.Context, *PostDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Patch one or more dataset versions.
	PatchDatasetVersions(context.Context, *PatchDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Delete one or more dataset versions in a single request.
	DeleteDatasetVersions(context.Context, *DeleteDatasetVersionsRequest) (*status.BaseResponse, error)
	// Create export of a dataset version.
	PutDatasetVersionExports(context.Context, *PutDatasetVersionExportsRequest) (*MultiDatasetVersionExportResponse, error)
	// Get a specific model type.
	GetModelType(context.Context, *GetModelTypeRequest) (*SingleModelTypeResponse, error)
	// List all the supported open source licenses in the platform.
	ListOpenSourceLicenses(context.Context, *ListOpenSourceLicensesRequest) (*ListOpenSourceLicensesResponse, error)
	// List all the model types available in the platform.
	// This MUST be above ListModels so that the /models/types endpoint takes precedence.
	ListModelTypes(context.Context, *ListModelTypesRequest) (*MultiModelTypeResponse, error)
	// Get a specific model from an app.
	GetModel(context.Context, *GetModelRequest) (*SingleModelResponse, error)
	// Get a the output info for a given model_id or model_id/version_id
	// combo.
	GetModelOutputInfo(context.Context, *GetModelRequest) (*SingleModelResponse, error)
	// List all the models.
	ListModels(context.Context, *ListModelsRequest) (*MultiModelResponse, error)
	// List the resource counts for the app.
	GetResourceCounts(context.Context, *GetResourceCountsRequest) (*GetResourceCountsResponse, error)
	// Search over the models to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostModelsSearches(context.Context, *PostModelsSearchesRequest) (*MultiModelResponse, error)
	// Add a models to an app.
	PostModels(context.Context, *PostModelsRequest) (*SingleModelResponse, error)
	// Patch one or more models.
	PatchModels(context.Context, *PatchModelsRequest) (*MultiModelResponse, error)
	// Patch one or more models ids.
	PatchModelIds(context.Context, *PatchModelIdsRequest) (*MultiModelResponse, error)
	// Delete a single model.
	DeleteModel(context.Context, *DeleteModelRequest) (*status.BaseResponse, error)
	// Delete multiple models in one request.
	DeleteModels(context.Context, *DeleteModelsRequest) (*status.BaseResponse, error)
	// Update model check consents
	PatchModelCheckConsents(context.Context, *PatchModelCheckConsentsRequest) (*MultiModelCheckConsentResponse, error)
	// Update model toolkits tags
	PatchModelToolkits(context.Context, *PatchModelToolkitsRequest) (*MultiModelToolkitResponse, error)
	// Update model use_cases tags
	PatchModelUseCases(context.Context, *PatchModelUseCasesRequest) (*MultiModelUseCaseResponse, error)
	// Update model languages tags
	PatchModelLanguages(context.Context, *PatchModelLanguagesRequest) (*MultiModelLanguageResponse, error)
	// Deprecated: Do not use.
	// Deprecated: Unmaintained and ideally replaced with usage of datasets
	//
	//	The server may refuse to accept requests to this endpoint.
	ListModelInputs(context.Context, *ListModelInputsRequest) (*MultiInputResponse, error)
	// Get a specific model from an app.
	GetModelVersion(context.Context, *GetModelVersionRequest) (*SingleModelVersionResponse, error)
	// List all the models.
	ListModelVersions(context.Context, *ListModelVersionsRequest) (*MultiModelVersionResponse, error)
	PostWorkflowVersionsUnPublish(context.Context, *PostWorkflowVersionsUnPublishRequest) (*status.BaseResponse, error)
	PostWorkflowVersionsPublish(context.Context, *PostWorkflowVersionsPublishRequest) (*status.BaseResponse, error)
	// PostModelVersionsPublish
	PostModelVersionsPublish(context.Context, *PostModelVersionsPublishRequest) (*status.BaseResponse, error)
	// PostModelVersionsUnPublish
	PostModelVersionsUnPublish(context.Context, *PostModelVersionsUnPublishRequest) (*status.BaseResponse, error)
	// Create a new model version to trigger training of the model.
	PostModelVersions(context.Context, *PostModelVersionsRequest) (*SingleModelResponse, error)
	// PatchModelVersions
	PatchModelVersions(context.Context, *PatchModelVersionsRequest) (*MultiModelVersionResponse, error)
	// Delete a single model.
	DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*status.BaseResponse, error)
	// This is a streaming endpoint, the request has a field, upload_data, which can either be the config for the upload or the actual data to upload.
	// The config must be sent first before the model_bytes can be uploaded.
	// Once the config has been sent, the server will respond with a confirmation containing the model_version_id.
	// This is so that if your upload is interrupted, you can resume the upload by sending the config again with the model_version_id specified for your model_version.
	// The actual upload will be done via a multipart upload, the latest successful part_id will be sent from the server in the response to the model_bytes.
	PostModelVersionsUpload(V2_PostModelVersionsUploadServer) error
	// Kicks off conversion from the old Triton model format to the new Docker model format.
	PostModelMigration(context.Context, *PostModelMigrationRequest) (*SingleModelResponse, error)
	// Export a model
	PutModelVersionExports(context.Context, *PutModelVersionExportsRequest) (*SingleModelVersionExportResponse, error)
	// GetModelVersionExport
	GetModelVersionExport(context.Context, *GetModelVersionExportRequest) (*SingleModelVersionExportResponse, error)
	// Get the evaluation metrics for a model version.
	// Deprecated: Use GetEvaluation instead
	//
	//	The server may refuse to accept requests to this endpoint.
	GetModelVersionMetrics(context.Context, *GetModelVersionMetricsRequest) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	// Run the evaluation metrics for a model version.
	PostModelVersionMetrics(context.Context, *PostModelVersionMetricsRequest) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	PostModelVersionEvaluations(context.Context, *PostModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// List the evaluation metrics for a model version.
	ListModelVersionEvaluations(context.Context, *ListModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// Get an evaluation metrics for a model version.
	GetModelVersionEvaluation(context.Context, *GetModelVersionEvaluationRequest) (*SingleEvalMetricsResponse, error)
	PostEvaluations(context.Context, *PostEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	ListEvaluations(context.Context, *ListEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	GetEvaluation(context.Context, *GetEvaluationRequest) (*SingleEvalMetricsResponse, error)
	// Lists model references tied to a particular model id.
	ListModelReferences(context.Context, *ListModelReferencesRequest) (*MultiModelReferenceResponse, error)
	// GetModelVersionInputExample
	GetModelVersionInputExample(context.Context, *GetModelVersionInputExampleRequest) (*SingleModelVersionInputExampleResponse, error)
	// ListModelVersionInputExamples
	ListModelVersionInputExamples(context.Context, *ListModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error)
	// Get a specific workflow from an app.
	GetWorkflow(context.Context, *GetWorkflowRequest) (*SingleWorkflowResponse, error)
	// List all the workflows.
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Add a workflow to an app.
	// Note(zeiler): the order of the workflows that are returned from this endpoint
	// may be different than the order in which the user provides them. This is because
	// we reorder by a sort that optimizes for performance of the graph and its dependencies.
	// When using the workflow in any future call the order returned by this endpoint
	// will be used.
	PostWorkflows(context.Context, *PostWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Patch one or more workflows.
	PatchWorkflows(context.Context, *PatchWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Patch one or more workflows ids.
	PatchWorkflowIds(context.Context, *PatchWorkflowIdsRequest) (*MultiWorkflowResponse, error)
	// Delete a single workflow.
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*status.BaseResponse, error)
	// Delete multiple workflows in one request.
	DeleteWorkflows(context.Context, *DeleteWorkflowsRequest) (*status.BaseResponse, error)
	// Predict using a workflow.
	PostWorkflowResults(context.Context, *PostWorkflowResultsRequest) (*PostWorkflowResultsResponse, error)
	// List workflow versions.
	ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error)
	// Get single workflow version.
	GetWorkflowVersion(context.Context, *GetWorkflowVersionRequest) (*SingleWorkflowVersionResponse, error)
	// Delete workflow versions.
	DeleteWorkflowVersions(context.Context, *DeleteWorkflowVersionsRequest) (*status.BaseResponse, error)
	// Patch workflow versions.
	PatchWorkflowVersions(context.Context, *PatchWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error)
	// Get a specific key from an app.
	GetKey(context.Context, *GetKeyRequest) (*SingleKeyResponse, error)
	// List all the keys.
	ListKeys(context.Context, *ListKeysRequest) (*MultiKeyResponse, error)
	// List keys by app_id
	ListAppKeys(context.Context, *ListAppKeysRequest) (*MultiKeyResponse, error)
	// Search over the keys to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteKey(context.Context, *DeleteKeyRequest) (*status.BaseResponse, error)
	// Add a key to an app.
	PostKeys(context.Context, *PostKeysRequest) (*MultiKeyResponse, error)
	// Patch one or more keys.
	PatchKeys(context.Context, *PatchKeysRequest) (*MultiKeyResponse, error)
	// API Keys in the public API -- request is itself Key authorized, and will tell
	// the user the scopes/access of the key/credential they're providing, as computed by
	// our authorizer:
	MyScopes(context.Context, *MyScopesRequest) (*MultiScopeResponse, error)
	MyScopesUser(context.Context, *MyScopesUserRequest) (*MultiScopeUserResponse, error)
	MyScopesRoot(context.Context, *MyScopesRootRequest) (*MultiScopeRootResponse, error)
	// List all auth scopes available to me as a user.
	ListScopes(context.Context, *ListScopesRequest) (*MultiScopeDepsResponse, error)
	// Get a specific app from an app.
	GetApp(context.Context, *GetAppRequest) (*SingleAppResponse, error)
	// List all the apps.
	ListApps(context.Context, *ListAppsRequest) (*MultiAppResponse, error)
	// Search over the apps to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteApp(context.Context, *DeleteAppRequest) (*status.BaseResponse, error)
	// Add a app to an app.
	// This needs to load the default workflow to make a copy, validating all the models in it, and
	// then writing the new workflow back to this new app.
	PostApps(context.Context, *PostAppsRequest) (*MultiAppResponse, error)
	// Patch one or more apps.
	PatchApps(context.Context, *PatchAppsRequest) (*MultiAppResponse, error)
	// Allows to Patch only the below fields in one or more apps.
	// Allowed fields are notes, description and image
	PatchAppsDetails(context.Context, *PatchAppsDetailsRequest) (*MultiAppResponse, error)
	// Patch apps ids.
	PatchAppsIds(context.Context, *PatchAppsIdsRequest) (*MultiAppResponse, error)
	// Patch one app.
	PatchApp(context.Context, *PatchAppRequest) (*SingleAppResponse, error)
	// Search over the applications to find one or more you're looking for.
	PostAppsSearches(context.Context, *PostAppsSearchesRequest) (*MultiAppResponse, error)
	// Get user information
	GetUser(context.Context, *GetUserRequest) (*SingleUserResponse, error)
	// Validate new password in real-time for a user
	PostValidatePassword(context.Context, *PostValidatePasswordRequest) (*SinglePasswordValidationResponse, error)
	// Get a saved legacy search.
	GetSearch(context.Context, *GetSearchRequest) (*SingleSearchResponse, error)
	// List all saved legacy searches.
	ListSearches(context.Context, *ListSearchesRequest) (*MultiSearchResponse, error)
	// Patch saved legacy searches by ids.
	PatchSearches(context.Context, *PatchSearchesRequest) (*MultiSearchResponse, error)
	// Deprecated: Do not use.
	// Execute a new search and optionally save it.
	//
	// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
	//
	//	The server may refuse to accept requests to this endpoint.
	PostSearches(context.Context, *PostSearchesRequest) (*MultiSearchResponse, error)
	// Execute a previously saved legacy search.
	PostSearchesByID(context.Context, *PostSearchesByIDRequest) (*MultiSearchResponse, error)
	// Evaluate the results of two search requests
	PostAnnotationSearchMetrics(context.Context, *PostAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// Get the evaluation results between two search requests
	GetAnnotationSearchMetrics(context.Context, *GetAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// List the evaluation results between two search requests
	ListAnnotationSearchMetrics(context.Context, *ListAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// DeleteAnnotationSearchMetrics
	DeleteAnnotationSearchMetrics(context.Context, *DeleteAnnotationSearchMetricsRequest) (*status.BaseResponse, error)
	// Delete a saved search.
	DeleteSearch(context.Context, *DeleteSearchRequest) (*status.BaseResponse, error)
	// List all the annotation filters.
	ListAnnotationFilters(context.Context, *ListAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Get a specific annotation filter.
	GetAnnotationFilter(context.Context, *GetAnnotationFilterRequest) (*SingleAnnotationFilterResponse, error)
	// Add annotation filters.
	PostAnnotationFilters(context.Context, *PostAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Patch one or more annotation filters.
	PatchAnnotationFilters(context.Context, *PatchAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Delete one or more annotation filters in a single request.
	DeleteAnnotationFilters(context.Context, *DeleteAnnotationFiltersRequest) (*status.BaseResponse, error)
	// List all status codes.
	ListStatusCodes(context.Context, *ListStatusCodesRequest) (*MultiStatusCodeResponse, error)
	// Get more details for a status code.
	GetStatusCode(context.Context, *GetStatusCodeRequest) (*SingleStatusCodeResponse, error)
	// owner list users who the app is shared with
	ListCollaborators(context.Context, *ListCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// add collaborators to an app.
	PostCollaborators(context.Context, *PostCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// Patch existing collaborators.
	PatchCollaborators(context.Context, *PatchCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// Delete existing collaborators.
	DeleteCollaborators(context.Context, *DeleteCollaboratorsRequest) (*status.BaseResponse, error)
	// Collaboration includes the app user are invitied to work on
	ListCollaborations(context.Context, *ListCollaborationsRequest) (*MultiCollaborationsResponse, error)
	// PostAppDuplications starts async app duplication jobs which copy resources
	// (inputs, annotations, models etc) from one application to another. It can
	// also create the destination application if it does not exist, with fields
	// (description, metadata etc) copied from the source application.
	//
	// A duplication job can be started by any user that can read from the source
	// application (the target of this call) and can create and write to the
	// destination application. The duplication is associated with the user that
	// created it, so in order to read the status and progress of the job, that
	// user's ID has to be used in the call to GetAppDuplication, which might be
	// different to the source application owner ID in this call.
	PostAppDuplications(context.Context, *PostAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error)
	// ListAppDuplications lists all app duplication jobs created by the user.
	ListAppDuplications(context.Context, *ListAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error)
	// GetAppDuplication returns an app duplication job created by the user.
	GetAppDuplication(context.Context, *GetAppDuplicationRequest) (*SingleAppDuplicationResponse, error)
	// Add tasks to an app.
	PostTasks(context.Context, *PostTasksRequest) (*MultiTaskResponse, error)
	// Task annotation count
	GetTaskAnnotationCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error)
	// Task Input count
	GetTaskInputCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error)
	// Get a specific task from an app.
	GetTask(context.Context, *GetTaskRequest) (*SingleTaskResponse, error)
	// List tasks from an app.
	ListTasks(context.Context, *ListTasksRequest) (*MultiTaskResponse, error)
	// Patch one or more tasks.
	PatchTasks(context.Context, *PatchTasksRequest) (*MultiTaskResponse, error)
	// Delete multiple tasks in one request.
	DeleteTasks(context.Context, *DeleteTasksRequest) (*status.BaseResponse, error)
	// Add Label orders.
	PostLabelOrders(context.Context, *PostLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Get a label order.
	GetLabelOrder(context.Context, *GetLabelOrderRequest) (*SingleLabelOrderResponse, error)
	// List label orders.
	ListLabelOrders(context.Context, *ListLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Patch one or more label orders.
	PatchLabelOrders(context.Context, *PatchLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Delete multiple label orders in one request.
	// this do not change task status
	DeleteLabelOrders(context.Context, *DeleteLabelOrdersRequest) (*status.BaseResponse, error)
	// Add a list of Collectors to an app.
	// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
	// endpoint.
	// Those current scopes are listed here as a hard requirement.
	// They are needed when adding the collectors just so we now that you have permission with
	// that key at least to do the writing to this app with POST /inputs.
	PostCollectors(context.Context, *PostCollectorsRequest) (*MultiCollectorResponse, error)
	// Get a specific collector from an app.
	GetCollector(context.Context, *GetCollectorRequest) (*SingleCollectorResponse, error)
	// List all the collectors.
	ListCollectors(context.Context, *ListCollectorsRequest) (*MultiCollectorResponse, error)
	// Patch one or more collectors.
	PatchCollectors(context.Context, *PatchCollectorsRequest) (*MultiCollectorResponse, error)
	// Delete multiple collectors in one request.
	// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
	DeleteCollectors(context.Context, *DeleteCollectorsRequest) (*status.BaseResponse, error)
	// PostStatValues
	PostStatValues(context.Context, *PostStatValuesRequest) (*MultiStatValueResponse, error)
	// PostStatValuesAggregate
	PostStatValuesAggregate(context.Context, *PostStatValuesAggregateRequest) (*MultiStatValueAggregateResponse, error)
	// Get a specific module from an app.
	GetModule(context.Context, *GetModuleRequest) (*SingleModuleResponse, error)
	// List all the modules in community, by user or by app.
	ListModules(context.Context, *ListModulesRequest) (*MultiModuleResponse, error)
	// Add a modules to an app.
	PostModules(context.Context, *PostModulesRequest) (*MultiModuleResponse, error)
	// Patch one or more modules.
	PatchModules(context.Context, *PatchModulesRequest) (*MultiModuleResponse, error)
	// Delete multiple modules in one request.
	DeleteModules(context.Context, *DeleteModulesRequest) (*status.BaseResponse, error)
	// Get a specific module version for a module.
	GetModuleVersion(context.Context, *GetModuleVersionRequest) (*SingleModuleVersionResponse, error)
	// List all the modules versions for a given module.
	ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Create a new module version to trigger training of the module.
	PostModuleVersions(context.Context, *PostModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Modify details of an existing module version.
	PatchModuleVersions(context.Context, *PatchModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Delete a multiple module version.
	DeleteModuleVersions(context.Context, *DeleteModuleVersionsRequest) (*status.BaseResponse, error)
	// Get usage count for specific module version.
	GetModuleVersionUsageCount(context.Context, *GetModuleVersionUsageCountRequest) (*SingleModuleVersionUsageCountResponse, error)
	// Get installed modules vesrions for an app.
	GetInstalledModuleVersion(context.Context, *GetInstalledModuleVersionRequest) (*SingleInstalledModuleVersionResponse, error)
	// List installed modules vesrions for an app.
	ListInstalledModuleVersions(context.Context, *ListInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error)
	// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
	PostInstalledModuleVersions(context.Context, *PostInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error)
	// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
	// in the url.
	// This cleaned up any associated caller keys so needs the Keys_Delete scope.
	DeleteInstalledModuleVersions(context.Context, *DeleteInstalledModuleVersionsRequest) (*status.BaseResponse, error)
	// Assign a key that the caller owns to be used when accessing this installed module version
	// If this endpoint is called with a different key then it overwrites what is there.
	PostInstalledModuleVersionsKey(context.Context, *PostInstalledModuleVersionsKeyRequest) (*SingleKeyResponse, error)
	// Perform bulk operations on a list of inputs based on input source.
	// Operation include add, update, delete of concepts, metadata and geo data.
	// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
	PostBulkOperations(context.Context, *PostBulkOperationsRequest) (*MultiBulkOperationsResponse, error)
	// List all the bulk operations
	ListBulkOperations(context.Context, *ListBulkOperationsRequest) (*MultiBulkOperationsResponse, error)
	// Get the bulk operation details by ID
	GetBulkOperation(context.Context, *GetBulkOperationRequest) (*SingleBulkOperationsResponse, error)
	// Cancel one or more bulk operations
	CancelBulkOperations(context.Context, *CancelBulkOperationRequest) (*MultiBulkOperationsResponse, error)
	// delete one or more terminated bulk operations
	DeleteBulkOperations(context.Context, *DeleteBulkOperationRequest) (*status.BaseResponse, error)
	// Deprecated: Use PutTaskAssignments with action=LABEL_START.
	//
	//	This endpoint has initially been designed as a GET request,
	//	but has been re-designed to serve a PUT logic.
	//	In order to clearly highlight that this endpoint serves a PUT request,
	//	this endpoint has been deprecated and replaced by PutTaskAssignments with action=LABEL_START.
	ListNextTaskAssignments(context.Context, *ListNextTaskAssignmentsRequest) (*MultiInputResponse, error)
	// PutTaskAssignments performs an idempotent action for the task assignments in given task.
	// See PutTaskAssignmentsRequestAction for more details about possible actions.
	PutTaskAssignments(context.Context, *PutTaskAssignmentsRequest) (*MultiTaskAssignmentResponse, error)
	// List all the inputs add jobs
	ListInputsAddJobs(context.Context, *ListInputsAddJobsRequest) (*MultiInputsAddJobResponse, error)
	// Get the input add job details by ID
	GetInputsAddJob(context.Context, *GetInputsAddJobRequest) (*SingleInputsAddJobResponse, error)
	// cancel the input add job by ID
	CancelInputsAddJob(context.Context, *CancelInputsAddJobRequest) (*SingleInputsAddJobResponse, error)
	// PostUploads is used to upload files. Note that this does not create inputs.
	// returns job with uploadID, job has UPLOAD_IN_PROGRESS status
	// Actual upload content can be done in multiple calls with PutUploadContentParts
	// You can get status of upload with GetUpload or ListUploads endpoints
	// See also PostInputsUploads
	PostUploads(context.Context, *PostUploadsRequest) (*MultiUploadResponse, error)
	// Upload a part of a multipart upload.
	// Behaviour on completion depends on the endpoint that was used to initiate the upload.
	PutUploadContentParts(context.Context, *PutUploadContentPartsRequest) (*SingleUploadResponse, error)
	GetUpload(context.Context, *GetUploadRequest) (*SingleUploadResponse, error)
	ListUploads(context.Context, *ListUploadsRequest) (*MultiUploadResponse, error)
	DeleteUploads(context.Context, *DeleteUploadsRequest) (*status.BaseResponse, error)
	// Initiates retrieval of inputs from cloud storage from a user provided data source.
	// Will create and return an inputs-add-job for tracking progress.
	// Archives will be extracted and their contents will be processed as inputs.
	//
	// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
	// files in the images_folder beginning with abc or in a subfolder beginning with abc.
	// For example:
	// bucket/images_folder/abcImage.png
	// bucket/images_folder/abc-1/Data.zip
	//
	// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
	// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
	// in which case it only requires rights to access that particular file.
	PostInputsDataSources(context.Context, *PostInputsDataSourcesRequest) (*MultiInputsAddJobResponse, error)
	// Get the input extraction job details by ID
	GetInputsExtractionJob(context.Context, *GetInputsExtractionJobRequest) (*SingleInputsExtractionJobResponse, error)
	// List all the input extraction jobs
	ListInputsExtractionJobs(context.Context, *ListInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error)
	CancelInputsExtractionJobs(context.Context, *CancelInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error)
	// Create new upload job with a file archive containing inputs (images, videos, text, audio)
	// Actual file upload happens in next steps by calling `PutUploadContentParts` endpoint
	// and providing the file content in the request body.
	// This endpoint creates and return an inputs-add-job which contains an upload id needed for upload and further status tracking
	// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
	// See also GetInputsAddJob and then GetInputsExtractionJob
	PostInputsUploads(context.Context, *PostInputsUploadsRequest) (*MultiInputsAddJobResponse, error)
	// putting above the Get Nodepool endpoint to make it appear above the other one
	ListPipelineVersionRuns(context.Context, *ListPipelineVersionRunsRequest) (*MultiPipelineVersionRunResponse, error)
	// Get a specific runner.
	// TODO(zeiler): runner_id is a UUID so can list globally as well.
	GetRunner(context.Context, *GetRunnerRequest) (*SingleRunnerResponse, error)
	// List all the runners for the user.
	ListRunners(context.Context, *ListRunnersRequest) (*MultiRunnerResponse, error)
	// Add a runners to a user.
	PostRunners(context.Context, *PostRunnersRequest) (*MultiRunnerResponse, error)
	// Patch runners of a user.
	PatchRunners(context.Context, *PatchRunnersRequest) (*MultiRunnerResponse, error)
	// Delete multiple runners in one request.
	DeleteRunners(context.Context, *DeleteRunnersRequest) (*status.BaseResponse, error)
	// List items for the remote runner to work on.
	// since the runner_id is a UUID we can access it directly too.
	ListRunnerItems(context.Context, *ListRunnerItemsRequest) (*MultiRunnerItemResponse, error)
	// Post back outputs from remote runners
	// since the runner_id is a UUID we can access it directly too.
	PostRunnerItemOutputs(context.Context, *PostRunnerItemOutputsRequest) (*MultiRunnerItemOutputResponse, error)
	// This maintains a single request for asking the API if there is any work to be done, processing
	// it and streaming back results.
	// To do that first handshake the MultiRunnerItemOutputResponse will have RUNNER_STREAM_START
	// status filled in so that the API knows to respond with a MultiRunnerItemResponse.
	// For now there will only be one of those if the model prediction only has one request.
	// NOTE(zeiler): downside of this is you can't use HTTP REST requests to do runner work.
	ProcessRunnerItems(V2_ProcessRunnerItemsServer) error
	// Get the training time estimate based off train request and estimated input count.
	PostModelVersionsTrainingTimeEstimate(context.Context, *PostModelVersionsTrainingTimeEstimateRequest) (*MultiTrainingTimeEstimateResponse, error)
	// List Available Cloud Providers
	ListCloudProviders(context.Context, *ListCloudProvidersRequest) (*MultiCloudProviderResponse, error)
	// List Regions for given Cloud Provider
	ListCloudRegions(context.Context, *ListCloudRegionsRequest) (*MultiCloudRegionResponse, error)
	// Get InstanceTypes given Cloud Provider and Region
	ListInstanceTypes(context.Context, *ListInstanceTypesRequest) (*MultiInstanceTypeResponse, error)
	// ComputeCluster CRUD
	GetComputeCluster(context.Context, *GetComputeClusterRequest) (*SingleComputeClusterResponse, error)
	ListComputeClusters(context.Context, *ListComputeClustersRequest) (*MultiComputeClusterResponse, error)
	PostComputeClusters(context.Context, *PostComputeClustersRequest) (*MultiComputeClusterResponse, error)
	// Delete multiple compute_clusters in one request.
	DeleteComputeClusters(context.Context, *DeleteComputeClustersRequest) (*status.BaseResponse, error)
	// Nodepools CRUD
	GetNodepool(context.Context, *GetNodepoolRequest) (*SingleNodepoolResponse, error)
	ListNodepools(context.Context, *ListNodepoolsRequest) (*MultiNodepoolResponse, error)
	PostNodepools(context.Context, *PostNodepoolsRequest) (*MultiNodepoolResponse, error)
	PatchNodepools(context.Context, *PatchNodepoolsRequest) (*MultiNodepoolResponse, error)
	// Delete multiple nodepools in one request.
	DeleteNodepools(context.Context, *DeleteNodepoolsRequest) (*status.BaseResponse, error)
	// Deployments CRUD
	GetDeployment(context.Context, *GetDeploymentRequest) (*SingleDeploymentResponse, error)
	ListDeployments(context.Context, *ListDeploymentsRequest) (*MultiDeploymentResponse, error)
	PostDeployments(context.Context, *PostDeploymentsRequest) (*MultiDeploymentResponse, error)
	PatchDeployments(context.Context, *PatchDeploymentsRequest) (*MultiDeploymentResponse, error)
	// Delete multiple deployments in one request.
	DeleteDeployments(context.Context, *DeleteDeploymentsRequest) (*status.BaseResponse, error)
	PostAuditLogSearches(context.Context, *PostAuditLogSearchesRequest) (*MultiAuditLogEntryResponse, error)
	ListWorkflowEvaluationTemplates(context.Context, *ListWorkflowEvaluationTemplatesRequest) (*MultiWorkflowEvaluationTemplateResponse, error)
	PostLogEntries(context.Context, *PostLogEntriesRequest) (*status.BaseResponse, error)
	ListLogEntries(context.Context, *ListLogEntriesRequest) (*MultiLogEntryResponse, error)
	StreamLogEntries(*StreamLogEntriesRequest, V2_StreamLogEntriesServer) error
	PostComputePlaneMetrics(context.Context, *PostComputePlaneMetricsRequest) (*status.BaseResponse, error)
	PostWorkflowVersionEvaluations(context.Context, *PostWorkflowVersionEvaluationsRequest) (*MultiWorkflowVersionEvaluationResponse, error)
	GetWorkflowVersionEvaluation(context.Context, *GetWorkflowVersionEvaluationRequest) (*SingleWorkflowVersionEvaluationResponse, error)
	ListWorkflowVersionEvaluations(context.Context, *ListWorkflowVersionEvaluationsRequest) (*MultiWorkflowVersionEvaluationResponse, error)
	PatchWorkflowVersionEvaluations(context.Context, *PatchWorkflowVersionEvaluationsRequest) (*MultiWorkflowVersionEvaluationResponse, error)
	ListWorkflowVersionEvaluationData(context.Context, *ListWorkflowVersionEvaluationDataRequest) (*MultiListWorkflowVersionEvaluationDataResponse, error)
	PostWorkflowVersionEvaluationData(context.Context, *PostWorkflowVersionEvaluationDataRequest) (*MultiListWorkflowVersionEvaluationDataResponse, error)
	PostPipelines(context.Context, *PostPipelinesRequest) (*MultiPipelineResponse, error)
	GetPipeline(context.Context, *GetPipelineRequest) (*SinglePipelineResponse, error)
	ListPipelines(context.Context, *ListPipelinesRequest) (*MultiPipelineResponse, error)
	PatchPipelines(context.Context, *PatchPipelinesRequest) (*MultiPipelineResponse, error)
	DeletePipelines(context.Context, *DeletePipelinesRequest) (*status.BaseResponse, error)
	GetPipelineVersion(context.Context, *GetPipelineVersionRequest) (*SinglePipelineVersionResponse, error)
	ListPipelineVersions(context.Context, *ListPipelineVersionsRequest) (*MultiPipelineVersionResponse, error)
	PatchPipelineVersions(context.Context, *PatchPipelineVersionsRequest) (*MultiPipelineVersionResponse, error)
	DeletePipelineVersions(context.Context, *DeletePipelineVersionsRequest) (*status.BaseResponse, error)
	GetPipelineVersionRun(context.Context, *GetPipelineVersionRunRequest) (*SinglePipelineVersionRunResponse, error)
	PostPipelineVersionRuns(context.Context, *PostPipelineVersionRunsRequest) (*MultiPipelineVersionRunResponse, error)
	PatchPipelineVersionRuns(context.Context, *PatchPipelineVersionRunsRequest) (*MultiPipelineVersionRunResponse, error)
	PostPipelineSteps(context.Context, *PostPipelineStepsRequest) (*MultiPipelineStepResponse, error)
	GetPipelineStep(context.Context, *GetPipelineStepRequest) (*SinglePipelineStepResponse, error)
	ListPipelineSteps(context.Context, *ListPipelineStepsRequest) (*MultiPipelineStepResponse, error)
	// This is a streaming endpoint, the request has a field, upload_data, which can either be the config for the upload or the actual data to upload.
	// The config must be sent first before the pipeline_step_bytes can be uploaded.
	// Once the config has been sent, the server will respond with a confirmation containing the pipeline_step_version_id.
	// This is so that if your upload is interrupted, you can resume the upload by sending the config again with the pipeline_step_version_id specified for your pipeline_step_version.
	// The actual upload will be done via a multipart upload, the latest successful part_id will be sent from the server in the response to the pipeline_step_bytes.
	PostPipelineStepVersionsUpload(V2_PostPipelineStepVersionsUploadServer) error
	ListPipelineStepVersions(context.Context, *ListPipelineStepVersionsRequest) (*MultiPipelineStepVersionResponse, error)
	GetPipelineStepVersion(context.Context, *GetPipelineStepVersionRequest) (*SinglePipelineStepVersionResponse, error)
	GetSecret(context.Context, *GetSecretRequest) (*SingleSecretResponse, error)
	ListSecrets(context.Context, *ListSecretsRequest) (*MultiSecretResponse, error)
	PostSecrets(context.Context, *PostSecretsRequest) (*MultiSecretResponse, error)
	PatchSecrets(context.Context, *PatchSecretsRequest) (*MultiSecretResponse, error)
	DeleteSecrets(context.Context, *DeleteSecretsRequest) (*MultiSecretResponse, error)
	PostMetricsQuery(context.Context, *PostMetricsQueryRequest) (*MetricsQueryResponse, error)
	ListMetricLabels(context.Context, *ListMetricLabelsRequest) (*MultiMetricLabelsResponse, error)
	mustEmbedUnimplementedV2Server()
}

// UnimplementedV2Server must be embedded to have forward compatible implementations.
type UnimplementedV2Server struct {
}

func (UnimplementedV2Server) ListConceptRelations(context.Context, *ListConceptRelationsRequest) (*MultiConceptRelationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptRelations not implemented")
}
func (UnimplementedV2Server) PostConceptRelations(context.Context, *PostConceptRelationsRequest) (*MultiConceptRelationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptRelations not implemented")
}
func (UnimplementedV2Server) DeleteConceptRelations(context.Context, *DeleteConceptRelationsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteConceptRelations not implemented")
}
func (UnimplementedV2Server) GetConceptCounts(context.Context, *GetConceptCountsRequest) (*MultiConceptCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConceptCounts not implemented")
}
func (UnimplementedV2Server) GetConcept(context.Context, *GetConceptRequest) (*SingleConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConcept not implemented")
}
func (UnimplementedV2Server) ListConcepts(context.Context, *ListConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConcepts not implemented")
}
func (UnimplementedV2Server) ListModelConcepts(context.Context, *ListModelConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelConcepts not implemented")
}
func (UnimplementedV2Server) PostConceptsSearches(context.Context, *PostConceptsSearchesRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptsSearches not implemented")
}
func (UnimplementedV2Server) PostConcepts(context.Context, *PostConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConcepts not implemented")
}
func (UnimplementedV2Server) PatchConcepts(context.Context, *PatchConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchConcepts not implemented")
}
func (UnimplementedV2Server) GetConceptLanguage(context.Context, *GetConceptLanguageRequest) (*SingleConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConceptLanguage not implemented")
}
func (UnimplementedV2Server) ListConceptLanguages(context.Context, *ListConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptLanguages not implemented")
}
func (UnimplementedV2Server) PostConceptLanguages(context.Context, *PostConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptLanguages not implemented")
}
func (UnimplementedV2Server) PatchConceptLanguages(context.Context, *PatchConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchConceptLanguages not implemented")
}
func (UnimplementedV2Server) ListKnowledgeGraphs(context.Context, *ListKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKnowledgeGraphs not implemented")
}
func (UnimplementedV2Server) PostKnowledgeGraphs(context.Context, *PostKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostKnowledgeGraphs not implemented")
}
func (UnimplementedV2Server) GetAnnotation(context.Context, *GetAnnotationRequest) (*SingleAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotation not implemented")
}
func (UnimplementedV2Server) ListAnnotations(context.Context, *ListAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotations not implemented")
}
func (UnimplementedV2Server) PostAnnotations(context.Context, *PostAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotations(context.Context, *PatchAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotationsStatus(context.Context, *PatchAnnotationsStatusRequest) (*PatchAnnotationsStatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationsStatus not implemented")
}
func (UnimplementedV2Server) DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotation not implemented")
}
func (UnimplementedV2Server) DeleteAnnotations(context.Context, *DeleteAnnotationsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotations not implemented")
}
func (UnimplementedV2Server) ListAnnotationTracks(context.Context, *ListAnnotationTracksRequest) (*MultiAnnotationTrackResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationTracks not implemented")
}
func (UnimplementedV2Server) PostAnnotationTracks(context.Context, *PostAnnotationTracksRequest) (*MultiAnnotationTrackResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationTracks not implemented")
}
func (UnimplementedV2Server) PatchAnnotationTracks(context.Context, *PatchAnnotationTracksRequest) (*MultiAnnotationTrackResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationTracks not implemented")
}
func (UnimplementedV2Server) DeleteAnnotationTracks(context.Context, *DeleteAnnotationTracksRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotationTracks not implemented")
}
func (UnimplementedV2Server) PatchAnnotationsSearches(context.Context, *PatchAnnotationsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationsSearches not implemented")
}
func (UnimplementedV2Server) PostAnnotationsSearches(context.Context, *PostAnnotationsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationsSearches not implemented")
}
func (UnimplementedV2Server) ListAnnotationWorkers(context.Context, *ListAnnotationWorkersRequest) (*MultiWorkerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationWorkers not implemented")
}
func (UnimplementedV2Server) GetInputCount(context.Context, *GetInputCountRequest) (*SingleInputCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputCount not implemented")
}
func (UnimplementedV2Server) StreamInputs(context.Context, *StreamInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StreamInputs not implemented")
}
func (UnimplementedV2Server) GetInputSamples(context.Context, *GetInputSamplesRequest) (*MultiInputAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputSamples not implemented")
}
func (UnimplementedV2Server) GetInput(context.Context, *GetInputRequest) (*SingleInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInput not implemented")
}
func (UnimplementedV2Server) GetInputVideoManifest(context.Context, *GetVideoManifestRequest) (*GetVideoManifestResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputVideoManifest not implemented")
}
func (UnimplementedV2Server) ListInputs(context.Context, *ListInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputs not implemented")
}
func (UnimplementedV2Server) PostInputs(context.Context, *PostInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputs not implemented")
}
func (UnimplementedV2Server) PatchInputs(context.Context, *PatchInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchInputs not implemented")
}
func (UnimplementedV2Server) DeleteInput(context.Context, *DeleteInputRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInput not implemented")
}
func (UnimplementedV2Server) DeleteInputs(context.Context, *DeleteInputsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInputs not implemented")
}
func (UnimplementedV2Server) PatchInputsSearches(context.Context, *PatchInputsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchInputsSearches not implemented")
}
func (UnimplementedV2Server) PostInputsSearches(context.Context, *PostInputsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsSearches not implemented")
}
func (UnimplementedV2Server) PostModelOutputs(context.Context, *PostModelOutputsRequest) (*MultiOutputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelOutputs not implemented")
}
func (UnimplementedV2Server) GenerateModelOutputs(*PostModelOutputsRequest, V2_GenerateModelOutputsServer) error {
	return status1.Errorf(codes.Unimplemented, "method GenerateModelOutputs not implemented")
}
func (UnimplementedV2Server) StreamModelOutputs(V2_StreamModelOutputsServer) error {
	return status1.Errorf(codes.Unimplemented, "method StreamModelOutputs not implemented")
}
func (UnimplementedV2Server) ListDatasets(context.Context, *ListDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedV2Server) GetDataset(context.Context, *GetDatasetRequest) (*SingleDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedV2Server) PostDatasets(context.Context, *PostDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasets not implemented")
}
func (UnimplementedV2Server) PatchDatasets(context.Context, *PatchDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDatasets not implemented")
}
func (UnimplementedV2Server) DeleteDatasets(context.Context, *DeleteDatasetsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasets not implemented")
}
func (UnimplementedV2Server) ListDatasetInputs(context.Context, *ListDatasetInputsRequest) (*MultiDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetInputs not implemented")
}
func (UnimplementedV2Server) GetDatasetInput(context.Context, *GetDatasetInputRequest) (*SingleDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetInput not implemented")
}
func (UnimplementedV2Server) PostDatasetInputs(context.Context, *PostDatasetInputsRequest) (*MultiDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasetInputs not implemented")
}
func (UnimplementedV2Server) DeleteDatasetInputs(context.Context, *DeleteDatasetInputsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasetInputs not implemented")
}
func (UnimplementedV2Server) ListDatasetVersions(context.Context, *ListDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetVersions not implemented")
}
func (UnimplementedV2Server) GetDatasetVersion(context.Context, *GetDatasetVersionRequest) (*SingleDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetVersion not implemented")
}
func (UnimplementedV2Server) ListDatasetVersionMetricsGroups(context.Context, *ListDatasetVersionMetricsGroupsRequest) (*MultiDatasetVersionMetricsGroupResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetVersionMetricsGroups not implemented")
}
func (UnimplementedV2Server) PostDatasetVersions(context.Context, *PostDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasetVersions not implemented")
}
func (UnimplementedV2Server) PatchDatasetVersions(context.Context, *PatchDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDatasetVersions not implemented")
}
func (UnimplementedV2Server) DeleteDatasetVersions(context.Context, *DeleteDatasetVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasetVersions not implemented")
}
func (UnimplementedV2Server) PutDatasetVersionExports(context.Context, *PutDatasetVersionExportsRequest) (*MultiDatasetVersionExportResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutDatasetVersionExports not implemented")
}
func (UnimplementedV2Server) GetModelType(context.Context, *GetModelTypeRequest) (*SingleModelTypeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelType not implemented")
}
func (UnimplementedV2Server) ListOpenSourceLicenses(context.Context, *ListOpenSourceLicensesRequest) (*ListOpenSourceLicensesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOpenSourceLicenses not implemented")
}
func (UnimplementedV2Server) ListModelTypes(context.Context, *ListModelTypesRequest) (*MultiModelTypeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelTypes not implemented")
}
func (UnimplementedV2Server) GetModel(context.Context, *GetModelRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedV2Server) GetModelOutputInfo(context.Context, *GetModelRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelOutputInfo not implemented")
}
func (UnimplementedV2Server) ListModels(context.Context, *ListModelsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedV2Server) GetResourceCounts(context.Context, *GetResourceCountsRequest) (*GetResourceCountsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetResourceCounts not implemented")
}
func (UnimplementedV2Server) PostModelsSearches(context.Context, *PostModelsSearchesRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelsSearches not implemented")
}
func (UnimplementedV2Server) PostModels(context.Context, *PostModelsRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModels not implemented")
}
func (UnimplementedV2Server) PatchModels(context.Context, *PatchModelsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModels not implemented")
}
func (UnimplementedV2Server) PatchModelIds(context.Context, *PatchModelIdsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelIds not implemented")
}
func (UnimplementedV2Server) DeleteModel(context.Context, *DeleteModelRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedV2Server) DeleteModels(context.Context, *DeleteModelsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModels not implemented")
}
func (UnimplementedV2Server) PatchModelCheckConsents(context.Context, *PatchModelCheckConsentsRequest) (*MultiModelCheckConsentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelCheckConsents not implemented")
}
func (UnimplementedV2Server) PatchModelToolkits(context.Context, *PatchModelToolkitsRequest) (*MultiModelToolkitResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelToolkits not implemented")
}
func (UnimplementedV2Server) PatchModelUseCases(context.Context, *PatchModelUseCasesRequest) (*MultiModelUseCaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelUseCases not implemented")
}
func (UnimplementedV2Server) PatchModelLanguages(context.Context, *PatchModelLanguagesRequest) (*MultiModelLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelLanguages not implemented")
}
func (UnimplementedV2Server) ListModelInputs(context.Context, *ListModelInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelInputs not implemented")
}
func (UnimplementedV2Server) GetModelVersion(context.Context, *GetModelVersionRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersion not implemented")
}
func (UnimplementedV2Server) ListModelVersions(context.Context, *ListModelVersionsRequest) (*MultiModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersions not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionsUnPublish(context.Context, *PostWorkflowVersionsUnPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionsUnPublish not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionsPublish(context.Context, *PostWorkflowVersionsPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionsPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersionsPublish(context.Context, *PostModelVersionsPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersionsUnPublish(context.Context, *PostModelVersionsUnPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsUnPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersions(context.Context, *PostModelVersionsRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersions not implemented")
}
func (UnimplementedV2Server) PatchModelVersions(context.Context, *PatchModelVersionsRequest) (*MultiModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelVersions not implemented")
}
func (UnimplementedV2Server) DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModelVersion not implemented")
}
func (UnimplementedV2Server) PostModelVersionsUpload(V2_PostModelVersionsUploadServer) error {
	return status1.Errorf(codes.Unimplemented, "method PostModelVersionsUpload not implemented")
}
func (UnimplementedV2Server) PostModelMigration(context.Context, *PostModelMigrationRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelMigration not implemented")
}
func (UnimplementedV2Server) PutModelVersionExports(context.Context, *PutModelVersionExportsRequest) (*SingleModelVersionExportResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutModelVersionExports not implemented")
}
func (UnimplementedV2Server) GetModelVersionExport(context.Context, *GetModelVersionExportRequest) (*SingleModelVersionExportResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionExport not implemented")
}
func (UnimplementedV2Server) GetModelVersionMetrics(context.Context, *GetModelVersionMetricsRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionMetrics not implemented")
}
func (UnimplementedV2Server) PostModelVersionMetrics(context.Context, *PostModelVersionMetricsRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionMetrics not implemented")
}
func (UnimplementedV2Server) PostModelVersionEvaluations(context.Context, *PostModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionEvaluations not implemented")
}
func (UnimplementedV2Server) ListModelVersionEvaluations(context.Context, *ListModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersionEvaluations not implemented")
}
func (UnimplementedV2Server) GetModelVersionEvaluation(context.Context, *GetModelVersionEvaluationRequest) (*SingleEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionEvaluation not implemented")
}
func (UnimplementedV2Server) PostEvaluations(context.Context, *PostEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostEvaluations not implemented")
}
func (UnimplementedV2Server) ListEvaluations(context.Context, *ListEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListEvaluations not implemented")
}
func (UnimplementedV2Server) GetEvaluation(context.Context, *GetEvaluationRequest) (*SingleEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetEvaluation not implemented")
}
func (UnimplementedV2Server) ListModelReferences(context.Context, *ListModelReferencesRequest) (*MultiModelReferenceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelReferences not implemented")
}
func (UnimplementedV2Server) GetModelVersionInputExample(context.Context, *GetModelVersionInputExampleRequest) (*SingleModelVersionInputExampleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionInputExample not implemented")
}
func (UnimplementedV2Server) ListModelVersionInputExamples(context.Context, *ListModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersionInputExamples not implemented")
}
func (UnimplementedV2Server) GetWorkflow(context.Context, *GetWorkflowRequest) (*SingleWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedV2Server) ListWorkflows(context.Context, *ListWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedV2Server) PostWorkflows(context.Context, *PostWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflows not implemented")
}
func (UnimplementedV2Server) PatchWorkflows(context.Context, *PatchWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflows not implemented")
}
func (UnimplementedV2Server) PatchWorkflowIds(context.Context, *PatchWorkflowIdsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflowIds not implemented")
}
func (UnimplementedV2Server) DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedV2Server) DeleteWorkflows(context.Context, *DeleteWorkflowsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflows not implemented")
}
func (UnimplementedV2Server) PostWorkflowResults(context.Context, *PostWorkflowResultsRequest) (*PostWorkflowResultsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowResults not implemented")
}
func (UnimplementedV2Server) ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflowVersions not implemented")
}
func (UnimplementedV2Server) GetWorkflowVersion(context.Context, *GetWorkflowVersionRequest) (*SingleWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflowVersion not implemented")
}
func (UnimplementedV2Server) DeleteWorkflowVersions(context.Context, *DeleteWorkflowVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflowVersions not implemented")
}
func (UnimplementedV2Server) PatchWorkflowVersions(context.Context, *PatchWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflowVersions not implemented")
}
func (UnimplementedV2Server) GetKey(context.Context, *GetKeyRequest) (*SingleKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedV2Server) ListKeys(context.Context, *ListKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedV2Server) ListAppKeys(context.Context, *ListAppKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAppKeys not implemented")
}
func (UnimplementedV2Server) DeleteKey(context.Context, *DeleteKeyRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedV2Server) PostKeys(context.Context, *PostKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostKeys not implemented")
}
func (UnimplementedV2Server) PatchKeys(context.Context, *PatchKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchKeys not implemented")
}
func (UnimplementedV2Server) MyScopes(context.Context, *MyScopesRequest) (*MultiScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopes not implemented")
}
func (UnimplementedV2Server) MyScopesUser(context.Context, *MyScopesUserRequest) (*MultiScopeUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopesUser not implemented")
}
func (UnimplementedV2Server) MyScopesRoot(context.Context, *MyScopesRootRequest) (*MultiScopeRootResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopesRoot not implemented")
}
func (UnimplementedV2Server) ListScopes(context.Context, *ListScopesRequest) (*MultiScopeDepsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedV2Server) GetApp(context.Context, *GetAppRequest) (*SingleAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedV2Server) ListApps(context.Context, *ListAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedV2Server) DeleteApp(context.Context, *DeleteAppRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedV2Server) PostApps(context.Context, *PostAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostApps not implemented")
}
func (UnimplementedV2Server) PatchApps(context.Context, *PatchAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchApps not implemented")
}
func (UnimplementedV2Server) PatchAppsDetails(context.Context, *PatchAppsDetailsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAppsDetails not implemented")
}
func (UnimplementedV2Server) PatchAppsIds(context.Context, *PatchAppsIdsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAppsIds not implemented")
}
func (UnimplementedV2Server) PatchApp(context.Context, *PatchAppRequest) (*SingleAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchApp not implemented")
}
func (UnimplementedV2Server) PostAppsSearches(context.Context, *PostAppsSearchesRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAppsSearches not implemented")
}
func (UnimplementedV2Server) GetUser(context.Context, *GetUserRequest) (*SingleUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedV2Server) PostValidatePassword(context.Context, *PostValidatePasswordRequest) (*SinglePasswordValidationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostValidatePassword not implemented")
}
func (UnimplementedV2Server) GetSearch(context.Context, *GetSearchRequest) (*SingleSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSearch not implemented")
}
func (UnimplementedV2Server) ListSearches(context.Context, *ListSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSearches not implemented")
}
func (UnimplementedV2Server) PatchSearches(context.Context, *PatchSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchSearches not implemented")
}
func (UnimplementedV2Server) PostSearches(context.Context, *PostSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSearches not implemented")
}
func (UnimplementedV2Server) PostSearchesByID(context.Context, *PostSearchesByIDRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSearchesByID not implemented")
}
func (UnimplementedV2Server) PostAnnotationSearchMetrics(context.Context, *PostAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) GetAnnotationSearchMetrics(context.Context, *GetAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) ListAnnotationSearchMetrics(context.Context, *ListAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) DeleteAnnotationSearchMetrics(context.Context, *DeleteAnnotationSearchMetricsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) DeleteSearch(context.Context, *DeleteSearchRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSearch not implemented")
}
func (UnimplementedV2Server) ListAnnotationFilters(context.Context, *ListAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationFilters not implemented")
}
func (UnimplementedV2Server) GetAnnotationFilter(context.Context, *GetAnnotationFilterRequest) (*SingleAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotationFilter not implemented")
}
func (UnimplementedV2Server) PostAnnotationFilters(context.Context, *PostAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationFilters not implemented")
}
func (UnimplementedV2Server) PatchAnnotationFilters(context.Context, *PatchAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationFilters not implemented")
}
func (UnimplementedV2Server) DeleteAnnotationFilters(context.Context, *DeleteAnnotationFiltersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotationFilters not implemented")
}
func (UnimplementedV2Server) ListStatusCodes(context.Context, *ListStatusCodesRequest) (*MultiStatusCodeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListStatusCodes not implemented")
}
func (UnimplementedV2Server) GetStatusCode(context.Context, *GetStatusCodeRequest) (*SingleStatusCodeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetStatusCode not implemented")
}
func (UnimplementedV2Server) ListCollaborators(context.Context, *ListCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollaborators not implemented")
}
func (UnimplementedV2Server) PostCollaborators(context.Context, *PostCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCollaborators not implemented")
}
func (UnimplementedV2Server) PatchCollaborators(context.Context, *PatchCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchCollaborators not implemented")
}
func (UnimplementedV2Server) DeleteCollaborators(context.Context, *DeleteCollaboratorsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCollaborators not implemented")
}
func (UnimplementedV2Server) ListCollaborations(context.Context, *ListCollaborationsRequest) (*MultiCollaborationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollaborations not implemented")
}
func (UnimplementedV2Server) PostAppDuplications(context.Context, *PostAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAppDuplications not implemented")
}
func (UnimplementedV2Server) ListAppDuplications(context.Context, *ListAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAppDuplications not implemented")
}
func (UnimplementedV2Server) GetAppDuplication(context.Context, *GetAppDuplicationRequest) (*SingleAppDuplicationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAppDuplication not implemented")
}
func (UnimplementedV2Server) PostTasks(context.Context, *PostTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTasks not implemented")
}
func (UnimplementedV2Server) GetTaskAnnotationCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTaskAnnotationCount not implemented")
}
func (UnimplementedV2Server) GetTaskInputCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTaskInputCount not implemented")
}
func (UnimplementedV2Server) GetTask(context.Context, *GetTaskRequest) (*SingleTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedV2Server) ListTasks(context.Context, *ListTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedV2Server) PatchTasks(context.Context, *PatchTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchTasks not implemented")
}
func (UnimplementedV2Server) DeleteTasks(context.Context, *DeleteTasksRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTasks not implemented")
}
func (UnimplementedV2Server) PostLabelOrders(context.Context, *PostLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostLabelOrders not implemented")
}
func (UnimplementedV2Server) GetLabelOrder(context.Context, *GetLabelOrderRequest) (*SingleLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLabelOrder not implemented")
}
func (UnimplementedV2Server) ListLabelOrders(context.Context, *ListLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListLabelOrders not implemented")
}
func (UnimplementedV2Server) PatchLabelOrders(context.Context, *PatchLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchLabelOrders not implemented")
}
func (UnimplementedV2Server) DeleteLabelOrders(context.Context, *DeleteLabelOrdersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteLabelOrders not implemented")
}
func (UnimplementedV2Server) PostCollectors(context.Context, *PostCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCollectors not implemented")
}
func (UnimplementedV2Server) GetCollector(context.Context, *GetCollectorRequest) (*SingleCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCollector not implemented")
}
func (UnimplementedV2Server) ListCollectors(context.Context, *ListCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollectors not implemented")
}
func (UnimplementedV2Server) PatchCollectors(context.Context, *PatchCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchCollectors not implemented")
}
func (UnimplementedV2Server) DeleteCollectors(context.Context, *DeleteCollectorsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCollectors not implemented")
}
func (UnimplementedV2Server) PostStatValues(context.Context, *PostStatValuesRequest) (*MultiStatValueResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostStatValues not implemented")
}
func (UnimplementedV2Server) PostStatValuesAggregate(context.Context, *PostStatValuesAggregateRequest) (*MultiStatValueAggregateResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostStatValuesAggregate not implemented")
}
func (UnimplementedV2Server) GetModule(context.Context, *GetModuleRequest) (*SingleModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedV2Server) ListModules(context.Context, *ListModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedV2Server) PostModules(context.Context, *PostModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModules not implemented")
}
func (UnimplementedV2Server) PatchModules(context.Context, *PatchModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModules not implemented")
}
func (UnimplementedV2Server) DeleteModules(context.Context, *DeleteModulesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModules not implemented")
}
func (UnimplementedV2Server) GetModuleVersion(context.Context, *GetModuleVersionRequest) (*SingleModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModuleVersion not implemented")
}
func (UnimplementedV2Server) ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModuleVersions not implemented")
}
func (UnimplementedV2Server) PostModuleVersions(context.Context, *PostModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModuleVersions not implemented")
}
func (UnimplementedV2Server) PatchModuleVersions(context.Context, *PatchModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModuleVersions not implemented")
}
func (UnimplementedV2Server) DeleteModuleVersions(context.Context, *DeleteModuleVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModuleVersions not implemented")
}
func (UnimplementedV2Server) GetModuleVersionUsageCount(context.Context, *GetModuleVersionUsageCountRequest) (*SingleModuleVersionUsageCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModuleVersionUsageCount not implemented")
}
func (UnimplementedV2Server) GetInstalledModuleVersion(context.Context, *GetInstalledModuleVersionRequest) (*SingleInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInstalledModuleVersion not implemented")
}
func (UnimplementedV2Server) ListInstalledModuleVersions(context.Context, *ListInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) PostInstalledModuleVersions(context.Context, *PostInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) DeleteInstalledModuleVersions(context.Context, *DeleteInstalledModuleVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) PostInstalledModuleVersionsKey(context.Context, *PostInstalledModuleVersionsKeyRequest) (*SingleKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInstalledModuleVersionsKey not implemented")
}
func (UnimplementedV2Server) PostBulkOperations(context.Context, *PostBulkOperationsRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostBulkOperations not implemented")
}
func (UnimplementedV2Server) ListBulkOperations(context.Context, *ListBulkOperationsRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListBulkOperations not implemented")
}
func (UnimplementedV2Server) GetBulkOperation(context.Context, *GetBulkOperationRequest) (*SingleBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetBulkOperation not implemented")
}
func (UnimplementedV2Server) CancelBulkOperations(context.Context, *CancelBulkOperationRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelBulkOperations not implemented")
}
func (UnimplementedV2Server) DeleteBulkOperations(context.Context, *DeleteBulkOperationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteBulkOperations not implemented")
}
func (UnimplementedV2Server) ListNextTaskAssignments(context.Context, *ListNextTaskAssignmentsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNextTaskAssignments not implemented")
}
func (UnimplementedV2Server) PutTaskAssignments(context.Context, *PutTaskAssignmentsRequest) (*MultiTaskAssignmentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutTaskAssignments not implemented")
}
func (UnimplementedV2Server) ListInputsAddJobs(context.Context, *ListInputsAddJobsRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputsAddJobs not implemented")
}
func (UnimplementedV2Server) GetInputsAddJob(context.Context, *GetInputsAddJobRequest) (*SingleInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputsAddJob not implemented")
}
func (UnimplementedV2Server) CancelInputsAddJob(context.Context, *CancelInputsAddJobRequest) (*SingleInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelInputsAddJob not implemented")
}
func (UnimplementedV2Server) PostUploads(context.Context, *PostUploadsRequest) (*MultiUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostUploads not implemented")
}
func (UnimplementedV2Server) PutUploadContentParts(context.Context, *PutUploadContentPartsRequest) (*SingleUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutUploadContentParts not implemented")
}
func (UnimplementedV2Server) GetUpload(context.Context, *GetUploadRequest) (*SingleUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUpload not implemented")
}
func (UnimplementedV2Server) ListUploads(context.Context, *ListUploadsRequest) (*MultiUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUploads not implemented")
}
func (UnimplementedV2Server) DeleteUploads(context.Context, *DeleteUploadsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUploads not implemented")
}
func (UnimplementedV2Server) PostInputsDataSources(context.Context, *PostInputsDataSourcesRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsDataSources not implemented")
}
func (UnimplementedV2Server) GetInputsExtractionJob(context.Context, *GetInputsExtractionJobRequest) (*SingleInputsExtractionJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputsExtractionJob not implemented")
}
func (UnimplementedV2Server) ListInputsExtractionJobs(context.Context, *ListInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputsExtractionJobs not implemented")
}
func (UnimplementedV2Server) CancelInputsExtractionJobs(context.Context, *CancelInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelInputsExtractionJobs not implemented")
}
func (UnimplementedV2Server) PostInputsUploads(context.Context, *PostInputsUploadsRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsUploads not implemented")
}
func (UnimplementedV2Server) ListPipelineVersionRuns(context.Context, *ListPipelineVersionRunsRequest) (*MultiPipelineVersionRunResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPipelineVersionRuns not implemented")
}
func (UnimplementedV2Server) GetRunner(context.Context, *GetRunnerRequest) (*SingleRunnerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedV2Server) ListRunners(context.Context, *ListRunnersRequest) (*MultiRunnerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRunners not implemented")
}
func (UnimplementedV2Server) PostRunners(context.Context, *PostRunnersRequest) (*MultiRunnerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostRunners not implemented")
}
func (UnimplementedV2Server) PatchRunners(context.Context, *PatchRunnersRequest) (*MultiRunnerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchRunners not implemented")
}
func (UnimplementedV2Server) DeleteRunners(context.Context, *DeleteRunnersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRunners not implemented")
}
func (UnimplementedV2Server) ListRunnerItems(context.Context, *ListRunnerItemsRequest) (*MultiRunnerItemResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRunnerItems not implemented")
}
func (UnimplementedV2Server) PostRunnerItemOutputs(context.Context, *PostRunnerItemOutputsRequest) (*MultiRunnerItemOutputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostRunnerItemOutputs not implemented")
}
func (UnimplementedV2Server) ProcessRunnerItems(V2_ProcessRunnerItemsServer) error {
	return status1.Errorf(codes.Unimplemented, "method ProcessRunnerItems not implemented")
}
func (UnimplementedV2Server) PostModelVersionsTrainingTimeEstimate(context.Context, *PostModelVersionsTrainingTimeEstimateRequest) (*MultiTrainingTimeEstimateResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsTrainingTimeEstimate not implemented")
}
func (UnimplementedV2Server) ListCloudProviders(context.Context, *ListCloudProvidersRequest) (*MultiCloudProviderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCloudProviders not implemented")
}
func (UnimplementedV2Server) ListCloudRegions(context.Context, *ListCloudRegionsRequest) (*MultiCloudRegionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCloudRegions not implemented")
}
func (UnimplementedV2Server) ListInstanceTypes(context.Context, *ListInstanceTypesRequest) (*MultiInstanceTypeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInstanceTypes not implemented")
}
func (UnimplementedV2Server) GetComputeCluster(context.Context, *GetComputeClusterRequest) (*SingleComputeClusterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetComputeCluster not implemented")
}
func (UnimplementedV2Server) ListComputeClusters(context.Context, *ListComputeClustersRequest) (*MultiComputeClusterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListComputeClusters not implemented")
}
func (UnimplementedV2Server) PostComputeClusters(context.Context, *PostComputeClustersRequest) (*MultiComputeClusterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostComputeClusters not implemented")
}
func (UnimplementedV2Server) DeleteComputeClusters(context.Context, *DeleteComputeClustersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteComputeClusters not implemented")
}
func (UnimplementedV2Server) GetNodepool(context.Context, *GetNodepoolRequest) (*SingleNodepoolResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNodepool not implemented")
}
func (UnimplementedV2Server) ListNodepools(context.Context, *ListNodepoolsRequest) (*MultiNodepoolResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodepools not implemented")
}
func (UnimplementedV2Server) PostNodepools(context.Context, *PostNodepoolsRequest) (*MultiNodepoolResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostNodepools not implemented")
}
func (UnimplementedV2Server) PatchNodepools(context.Context, *PatchNodepoolsRequest) (*MultiNodepoolResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchNodepools not implemented")
}
func (UnimplementedV2Server) DeleteNodepools(context.Context, *DeleteNodepoolsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNodepools not implemented")
}
func (UnimplementedV2Server) GetDeployment(context.Context, *GetDeploymentRequest) (*SingleDeploymentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedV2Server) ListDeployments(context.Context, *ListDeploymentsRequest) (*MultiDeploymentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedV2Server) PostDeployments(context.Context, *PostDeploymentsRequest) (*MultiDeploymentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDeployments not implemented")
}
func (UnimplementedV2Server) PatchDeployments(context.Context, *PatchDeploymentsRequest) (*MultiDeploymentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDeployments not implemented")
}
func (UnimplementedV2Server) DeleteDeployments(context.Context, *DeleteDeploymentsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDeployments not implemented")
}
func (UnimplementedV2Server) PostAuditLogSearches(context.Context, *PostAuditLogSearchesRequest) (*MultiAuditLogEntryResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAuditLogSearches not implemented")
}
func (UnimplementedV2Server) ListWorkflowEvaluationTemplates(context.Context, *ListWorkflowEvaluationTemplatesRequest) (*MultiWorkflowEvaluationTemplateResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflowEvaluationTemplates not implemented")
}
func (UnimplementedV2Server) PostLogEntries(context.Context, *PostLogEntriesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostLogEntries not implemented")
}
func (UnimplementedV2Server) ListLogEntries(context.Context, *ListLogEntriesRequest) (*MultiLogEntryResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListLogEntries not implemented")
}
func (UnimplementedV2Server) StreamLogEntries(*StreamLogEntriesRequest, V2_StreamLogEntriesServer) error {
	return status1.Errorf(codes.Unimplemented, "method StreamLogEntries not implemented")
}
func (UnimplementedV2Server) PostComputePlaneMetrics(context.Context, *PostComputePlaneMetricsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostComputePlaneMetrics not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionEvaluations(context.Context, *PostWorkflowVersionEvaluationsRequest) (*MultiWorkflowVersionEvaluationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionEvaluations not implemented")
}
func (UnimplementedV2Server) GetWorkflowVersionEvaluation(context.Context, *GetWorkflowVersionEvaluationRequest) (*SingleWorkflowVersionEvaluationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflowVersionEvaluation not implemented")
}
func (UnimplementedV2Server) ListWorkflowVersionEvaluations(context.Context, *ListWorkflowVersionEvaluationsRequest) (*MultiWorkflowVersionEvaluationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflowVersionEvaluations not implemented")
}
func (UnimplementedV2Server) PatchWorkflowVersionEvaluations(context.Context, *PatchWorkflowVersionEvaluationsRequest) (*MultiWorkflowVersionEvaluationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflowVersionEvaluations not implemented")
}
func (UnimplementedV2Server) ListWorkflowVersionEvaluationData(context.Context, *ListWorkflowVersionEvaluationDataRequest) (*MultiListWorkflowVersionEvaluationDataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflowVersionEvaluationData not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionEvaluationData(context.Context, *PostWorkflowVersionEvaluationDataRequest) (*MultiListWorkflowVersionEvaluationDataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionEvaluationData not implemented")
}
func (UnimplementedV2Server) PostPipelines(context.Context, *PostPipelinesRequest) (*MultiPipelineResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostPipelines not implemented")
}
func (UnimplementedV2Server) GetPipeline(context.Context, *GetPipelineRequest) (*SinglePipelineResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedV2Server) ListPipelines(context.Context, *ListPipelinesRequest) (*MultiPipelineResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedV2Server) PatchPipelines(context.Context, *PatchPipelinesRequest) (*MultiPipelineResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchPipelines not implemented")
}
func (UnimplementedV2Server) DeletePipelines(context.Context, *DeletePipelinesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePipelines not implemented")
}
func (UnimplementedV2Server) GetPipelineVersion(context.Context, *GetPipelineVersionRequest) (*SinglePipelineVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPipelineVersion not implemented")
}
func (UnimplementedV2Server) ListPipelineVersions(context.Context, *ListPipelineVersionsRequest) (*MultiPipelineVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPipelineVersions not implemented")
}
func (UnimplementedV2Server) PatchPipelineVersions(context.Context, *PatchPipelineVersionsRequest) (*MultiPipelineVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchPipelineVersions not implemented")
}
func (UnimplementedV2Server) DeletePipelineVersions(context.Context, *DeletePipelineVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePipelineVersions not implemented")
}
func (UnimplementedV2Server) GetPipelineVersionRun(context.Context, *GetPipelineVersionRunRequest) (*SinglePipelineVersionRunResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPipelineVersionRun not implemented")
}
func (UnimplementedV2Server) PostPipelineVersionRuns(context.Context, *PostPipelineVersionRunsRequest) (*MultiPipelineVersionRunResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostPipelineVersionRuns not implemented")
}
func (UnimplementedV2Server) PatchPipelineVersionRuns(context.Context, *PatchPipelineVersionRunsRequest) (*MultiPipelineVersionRunResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchPipelineVersionRuns not implemented")
}
func (UnimplementedV2Server) PostPipelineSteps(context.Context, *PostPipelineStepsRequest) (*MultiPipelineStepResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostPipelineSteps not implemented")
}
func (UnimplementedV2Server) GetPipelineStep(context.Context, *GetPipelineStepRequest) (*SinglePipelineStepResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPipelineStep not implemented")
}
func (UnimplementedV2Server) ListPipelineSteps(context.Context, *ListPipelineStepsRequest) (*MultiPipelineStepResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPipelineSteps not implemented")
}
func (UnimplementedV2Server) PostPipelineStepVersionsUpload(V2_PostPipelineStepVersionsUploadServer) error {
	return status1.Errorf(codes.Unimplemented, "method PostPipelineStepVersionsUpload not implemented")
}
func (UnimplementedV2Server) ListPipelineStepVersions(context.Context, *ListPipelineStepVersionsRequest) (*MultiPipelineStepVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPipelineStepVersions not implemented")
}
func (UnimplementedV2Server) GetPipelineStepVersion(context.Context, *GetPipelineStepVersionRequest) (*SinglePipelineStepVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPipelineStepVersion not implemented")
}
func (UnimplementedV2Server) GetSecret(context.Context, *GetSecretRequest) (*SingleSecretResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedV2Server) ListSecrets(context.Context, *ListSecretsRequest) (*MultiSecretResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedV2Server) PostSecrets(context.Context, *PostSecretsRequest) (*MultiSecretResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSecrets not implemented")
}
func (UnimplementedV2Server) PatchSecrets(context.Context, *PatchSecretsRequest) (*MultiSecretResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchSecrets not implemented")
}
func (UnimplementedV2Server) DeleteSecrets(context.Context, *DeleteSecretsRequest) (*MultiSecretResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSecrets not implemented")
}
func (UnimplementedV2Server) PostMetricsQuery(context.Context, *PostMetricsQueryRequest) (*MetricsQueryResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostMetricsQuery not implemented")
}
func (UnimplementedV2Server) ListMetricLabels(context.Context, *ListMetricLabelsRequest) (*MultiMetricLabelsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMetricLabels not implemented")
}
func (UnimplementedV2Server) mustEmbedUnimplementedV2Server() {}

// UnsafeV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V2Server will
// result in compilation errors.
type UnsafeV2Server interface {
	mustEmbedUnimplementedV2Server()
}

func RegisterV2Server(s grpc.ServiceRegistrar, srv V2Server) {
	s.RegisterService(&V2_ServiceDesc, srv)
}

func _V2_ListConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListConceptRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptRelations(ctx, req.(*ListConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostConceptRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptRelations(ctx, req.(*PostConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteConceptRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteConceptRelations(ctx, req.(*DeleteConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConceptCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConceptCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetConceptCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConceptCounts(ctx, req.(*GetConceptCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetConcept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConcept(ctx, req.(*GetConceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListConcepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConcepts(ctx, req.(*ListConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModelConcepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelConcepts(ctx, req.(*ListModelConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostConceptsSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptsSearches(ctx, req.(*PostConceptsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostConcepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConcepts(ctx, req.(*PostConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchConcepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchConcepts(ctx, req.(*PatchConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConceptLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConceptLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetConceptLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConceptLanguage(ctx, req.(*GetConceptLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListConceptLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptLanguages(ctx, req.(*ListConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostConceptLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptLanguages(ctx, req.(*PostConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchConceptLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchConceptLanguages(ctx, req.(*PatchConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListKnowledgeGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnowledgeGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListKnowledgeGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListKnowledgeGraphs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListKnowledgeGraphs(ctx, req.(*ListKnowledgeGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostKnowledgeGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostKnowledgeGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostKnowledgeGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostKnowledgeGraphs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostKnowledgeGraphs(ctx, req.(*PostKnowledgeGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotation(ctx, req.(*GetAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotations(ctx, req.(*ListAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotations(ctx, req.(*PostAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotations(ctx, req.(*PatchAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchAnnotationsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationsStatus(ctx, req.(*PatchAnnotationsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotation(ctx, req.(*DeleteAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotations(ctx, req.(*DeleteAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListAnnotationTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationTracks(ctx, req.(*ListAnnotationTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAnnotationTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationTracks(ctx, req.(*PostAnnotationTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchAnnotationTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationTracks(ctx, req.(*PatchAnnotationTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotationTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotationTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteAnnotationTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotationTracks(ctx, req.(*DeleteAnnotationTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchAnnotationsSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationsSearches(ctx, req.(*PatchAnnotationsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAnnotationsSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationsSearches(ctx, req.(*PostAnnotationsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListAnnotationWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationWorkers(ctx, req.(*ListAnnotationWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetInputCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputCount(ctx, req.(*GetInputCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_StreamInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).StreamInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_StreamInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).StreamInputs(ctx, req.(*StreamInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetInputSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputSamples(ctx, req.(*GetInputSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInput(ctx, req.(*GetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputVideoManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputVideoManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetInputVideoManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputVideoManifest(ctx, req.(*GetVideoManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputs(ctx, req.(*ListInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputs(ctx, req.(*PostInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchInputs(ctx, req.(*PatchInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInput(ctx, req.(*DeleteInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInputs(ctx, req.(*DeleteInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchInputsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInputsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchInputsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchInputsSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchInputsSearches(ctx, req.(*PatchInputsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostInputsSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsSearches(ctx, req.(*PostInputsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelOutputs(ctx, req.(*PostModelOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GenerateModelOutputs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PostModelOutputsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V2Server).GenerateModelOutputs(m, &v2GenerateModelOutputsServer{ServerStream: stream})
}

type V2_GenerateModelOutputsServer interface {
	Send(*MultiOutputResponse) error
	grpc.ServerStream
}

type v2GenerateModelOutputsServer struct {
	grpc.ServerStream
}

func (x *v2GenerateModelOutputsServer) Send(m *MultiOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _V2_StreamModelOutputs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V2Server).StreamModelOutputs(&v2StreamModelOutputsServer{ServerStream: stream})
}

type V2_StreamModelOutputsServer interface {
	Send(*MultiOutputResponse) error
	Recv() (*PostModelOutputsRequest, error)
	grpc.ServerStream
}

type v2StreamModelOutputsServer struct {
	grpc.ServerStream
}

func (x *v2StreamModelOutputsServer) Send(m *MultiOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v2StreamModelOutputsServer) Recv() (*PostModelOutputsRequest, error) {
	m := new(PostModelOutputsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _V2_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasets(ctx, req.(*PostDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDatasets(ctx, req.(*PatchDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasets(ctx, req.(*DeleteDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListDatasetInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetInputs(ctx, req.(*ListDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDatasetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDatasetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetDatasetInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDatasetInput(ctx, req.(*GetDatasetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostDatasetInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasetInputs(ctx, req.(*PostDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteDatasetInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasetInputs(ctx, req.(*DeleteDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListDatasetVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetVersions(ctx, req.(*ListDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetDatasetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDatasetVersion(ctx, req.(*GetDatasetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetVersionMetricsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetVersionMetricsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetVersionMetricsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListDatasetVersionMetricsGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetVersionMetricsGroups(ctx, req.(*ListDatasetVersionMetricsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostDatasetVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasetVersions(ctx, req.(*PostDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchDatasetVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDatasetVersions(ctx, req.(*PatchDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteDatasetVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasetVersions(ctx, req.(*DeleteDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutDatasetVersionExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDatasetVersionExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutDatasetVersionExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PutDatasetVersionExports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutDatasetVersionExports(ctx, req.(*PutDatasetVersionExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModelType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelType(ctx, req.(*GetModelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOpenSourceLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpenSourceLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOpenSourceLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListOpenSourceLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOpenSourceLicenses(ctx, req.(*ListOpenSourceLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModelTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelTypes(ctx, req.(*ListModelTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelOutputInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelOutputInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModelOutputInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelOutputInfo(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetResourceCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetResourceCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetResourceCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetResourceCounts(ctx, req.(*GetResourceCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelsSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelsSearches(ctx, req.(*PostModelsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModels(ctx, req.(*PostModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModels(ctx, req.(*PatchModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModelIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelIds(ctx, req.(*PatchModelIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModels(ctx, req.(*DeleteModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelCheckConsents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelCheckConsentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelCheckConsents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModelCheckConsents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelCheckConsents(ctx, req.(*PatchModelCheckConsentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelToolkits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelToolkitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelToolkits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModelToolkits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelToolkits(ctx, req.(*PatchModelToolkitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelUseCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelUseCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelUseCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModelUseCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelUseCases(ctx, req.(*PatchModelUseCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModelLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelLanguages(ctx, req.(*PatchModelLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModelInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelInputs(ctx, req.(*ListModelInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModelVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersion(ctx, req.(*GetModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModelVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersions(ctx, req.(*ListModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionsUnPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionsUnPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionsUnPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostWorkflowVersionsUnPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionsUnPublish(ctx, req.(*PostWorkflowVersionsUnPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionsPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionsPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionsPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostWorkflowVersionsPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionsPublish(ctx, req.(*PostWorkflowVersionsPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelVersionsPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsPublish(ctx, req.(*PostModelVersionsPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsUnPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsUnPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsUnPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelVersionsUnPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsUnPublish(ctx, req.(*PostModelVersionsUnPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersions(ctx, req.(*PostModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModelVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelVersions(ctx, req.(*PatchModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteModelVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModelVersion(ctx, req.(*DeleteModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V2Server).PostModelVersionsUpload(&v2PostModelVersionsUploadServer{ServerStream: stream})
}

type V2_PostModelVersionsUploadServer interface {
	Send(*PostModelVersionsUploadResponse) error
	Recv() (*PostModelVersionsUploadRequest, error)
	grpc.ServerStream
}

type v2PostModelVersionsUploadServer struct {
	grpc.ServerStream
}

func (x *v2PostModelVersionsUploadServer) Send(m *PostModelVersionsUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v2PostModelVersionsUploadServer) Recv() (*PostModelVersionsUploadRequest, error) {
	m := new(PostModelVersionsUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _V2_PostModelMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelMigration(ctx, req.(*PostModelMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutModelVersionExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutModelVersionExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutModelVersionExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PutModelVersionExports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutModelVersionExports(ctx, req.(*PutModelVersionExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModelVersionExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionExport(ctx, req.(*GetModelVersionExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModelVersionMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionMetrics(ctx, req.(*GetModelVersionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelVersionMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionMetrics(ctx, req.(*PostModelVersionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelVersionEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionEvaluations(ctx, req.(*PostModelVersionEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersionEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersionEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModelVersionEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersionEvaluations(ctx, req.(*ListModelVersionEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModelVersionEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionEvaluation(ctx, req.(*GetModelVersionEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostEvaluations(ctx, req.(*PostEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListEvaluations(ctx, req.(*ListEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetEvaluation(ctx, req.(*GetEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModelReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelReferences(ctx, req.(*ListModelReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionInputExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionInputExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionInputExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModelVersionInputExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionInputExample(ctx, req.(*GetModelVersionInputExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersionInputExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionInputExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersionInputExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModelVersionInputExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersionInputExamples(ctx, req.(*ListModelVersionInputExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflows(ctx, req.(*PostWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflows(ctx, req.(*PatchWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflowIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflowIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchWorkflowIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflowIds(ctx, req.(*PatchWorkflowIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflows(ctx, req.(*DeleteWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostWorkflowResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowResults(ctx, req.(*PostWorkflowResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListWorkflowVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflowVersions(ctx, req.(*ListWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetWorkflowVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflowVersion(ctx, req.(*GetWorkflowVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteWorkflowVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflowVersions(ctx, req.(*DeleteWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchWorkflowVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflowVersions(ctx, req.(*PatchWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAppKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAppKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListAppKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAppKeys(ctx, req.(*ListAppKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostKeys(ctx, req.(*PostKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchKeys(ctx, req.(*PatchKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_MyScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopes(ctx, req.(*MyScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopesUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopesUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_MyScopesUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopesUser(ctx, req.(*MyScopesUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopesRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopesRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_MyScopesRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopesRoot(ctx, req.(*MyScopesRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListScopes(ctx, req.(*ListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostApps(ctx, req.(*PostAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchApps(ctx, req.(*PatchAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAppsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppsDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAppsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchAppsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAppsDetails(ctx, req.(*PatchAppsDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAppsIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppsIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAppsIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchAppsIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAppsIds(ctx, req.(*PatchAppsIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchApp(ctx, req.(*PatchAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAppsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAppsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAppsSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAppsSearches(ctx, req.(*PostAppsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostValidatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostValidatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostValidatePassword(ctx, req.(*PostValidatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetSearch(ctx, req.(*GetSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListSearches(ctx, req.(*ListSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchSearches(ctx, req.(*PatchSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSearches(ctx, req.(*PostSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSearchesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearchesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSearchesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostSearchesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSearchesByID(ctx, req.(*PostSearchesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAnnotationSearchMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationSearchMetrics(ctx, req.(*PostAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetAnnotationSearchMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotationSearchMetrics(ctx, req.(*GetAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListAnnotationSearchMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationSearchMetrics(ctx, req.(*ListAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteAnnotationSearchMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotationSearchMetrics(ctx, req.(*DeleteAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteSearch(ctx, req.(*DeleteSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListAnnotationFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationFilters(ctx, req.(*ListAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotationFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotationFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetAnnotationFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotationFilter(ctx, req.(*GetAnnotationFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAnnotationFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationFilters(ctx, req.(*PostAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchAnnotationFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationFilters(ctx, req.(*PatchAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteAnnotationFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotationFilters(ctx, req.(*DeleteAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListStatusCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListStatusCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListStatusCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListStatusCodes(ctx, req.(*ListStatusCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetStatusCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetStatusCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetStatusCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetStatusCode(ctx, req.(*GetStatusCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListCollaborators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollaborators(ctx, req.(*ListCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostCollaborators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCollaborators(ctx, req.(*PostCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchCollaborators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchCollaborators(ctx, req.(*PatchCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteCollaborators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteCollaborators(ctx, req.(*DeleteCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollaborations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollaborationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollaborations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListCollaborations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollaborations(ctx, req.(*ListCollaborationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAppDuplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppDuplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAppDuplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAppDuplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAppDuplications(ctx, req.(*PostAppDuplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAppDuplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppDuplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAppDuplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListAppDuplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAppDuplications(ctx, req.(*ListAppDuplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAppDuplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDuplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAppDuplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetAppDuplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAppDuplication(ctx, req.(*GetAppDuplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTasks(ctx, req.(*PostTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTaskAnnotationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTaskAnnotationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetTaskAnnotationCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTaskAnnotationCount(ctx, req.(*GetTaskCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTaskInputCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTaskInputCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetTaskInputCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTaskInputCount(ctx, req.(*GetTaskCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchTasks(ctx, req.(*PatchTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteTasks(ctx, req.(*DeleteTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostLabelOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostLabelOrders(ctx, req.(*PostLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetLabelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetLabelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetLabelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetLabelOrder(ctx, req.(*GetLabelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListLabelOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListLabelOrders(ctx, req.(*ListLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchLabelOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchLabelOrders(ctx, req.(*PatchLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteLabelOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteLabelOrders(ctx, req.(*DeleteLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostCollectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCollectors(ctx, req.(*PostCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetCollector(ctx, req.(*GetCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListCollectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollectors(ctx, req.(*ListCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchCollectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchCollectors(ctx, req.(*PatchCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteCollectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteCollectors(ctx, req.(*DeleteCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostStatValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostStatValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostStatValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostStatValues(ctx, req.(*PostStatValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostStatValuesAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatValuesAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostStatValuesAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostStatValuesAggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostStatValuesAggregate(ctx, req.(*PostStatValuesAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModules(ctx, req.(*PostModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModules(ctx, req.(*PatchModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModules(ctx, req.(*DeleteModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModuleVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModuleVersion(ctx, req.(*GetModuleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModuleVersions(ctx, req.(*ListModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModuleVersions(ctx, req.(*PostModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModuleVersions(ctx, req.(*PatchModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModuleVersions(ctx, req.(*DeleteModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModuleVersionUsageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleVersionUsageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModuleVersionUsageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetModuleVersionUsageCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModuleVersionUsageCount(ctx, req.(*GetModuleVersionUsageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInstalledModuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstalledModuleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInstalledModuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetInstalledModuleVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInstalledModuleVersion(ctx, req.(*GetInstalledModuleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListInstalledModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInstalledModuleVersions(ctx, req.(*ListInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostInstalledModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInstalledModuleVersions(ctx, req.(*PostInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteInstalledModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInstalledModuleVersions(ctx, req.(*DeleteInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInstalledModuleVersionsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstalledModuleVersionsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInstalledModuleVersionsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostInstalledModuleVersionsKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInstalledModuleVersionsKey(ctx, req.(*PostInstalledModuleVersionsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBulkOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostBulkOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostBulkOperations(ctx, req.(*PostBulkOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBulkOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListBulkOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListBulkOperations(ctx, req.(*ListBulkOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetBulkOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetBulkOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetBulkOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetBulkOperation(ctx, req.(*GetBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_CancelBulkOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelBulkOperations(ctx, req.(*CancelBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteBulkOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteBulkOperations(ctx, req.(*DeleteBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListNextTaskAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextTaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListNextTaskAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListNextTaskAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListNextTaskAssignments(ctx, req.(*ListNextTaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutTaskAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutTaskAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PutTaskAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutTaskAssignments(ctx, req.(*PutTaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputsAddJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsAddJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputsAddJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListInputsAddJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputsAddJobs(ctx, req.(*ListInputsAddJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputsAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputsAddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputsAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetInputsAddJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputsAddJob(ctx, req.(*GetInputsAddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelInputsAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInputsAddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelInputsAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_CancelInputsAddJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelInputsAddJob(ctx, req.(*CancelInputsAddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostUploads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostUploads(ctx, req.(*PostUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutUploadContentParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUploadContentPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutUploadContentParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PutUploadContentParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutUploadContentParts(ctx, req.(*PutUploadContentPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUpload(ctx, req.(*GetUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListUploads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUploads(ctx, req.(*ListUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteUploads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteUploads(ctx, req.(*DeleteUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostInputsDataSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsDataSources(ctx, req.(*PostInputsDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputsExtractionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputsExtractionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputsExtractionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetInputsExtractionJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputsExtractionJob(ctx, req.(*GetInputsExtractionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputsExtractionJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsExtractionJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputsExtractionJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListInputsExtractionJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputsExtractionJobs(ctx, req.(*ListInputsExtractionJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelInputsExtractionJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInputsExtractionJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelInputsExtractionJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_CancelInputsExtractionJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelInputsExtractionJobs(ctx, req.(*CancelInputsExtractionJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostInputsUploads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsUploads(ctx, req.(*PostInputsUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListPipelineVersionRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineVersionRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPipelineVersionRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListPipelineVersionRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPipelineVersionRuns(ctx, req.(*ListPipelineVersionRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListRunners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListRunners(ctx, req.(*ListRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostRunners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostRunners(ctx, req.(*PostRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchRunners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchRunners(ctx, req.(*PatchRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteRunners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteRunners(ctx, req.(*DeleteRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListRunnerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListRunnerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListRunnerItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListRunnerItems(ctx, req.(*ListRunnerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostRunnerItemOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRunnerItemOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostRunnerItemOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostRunnerItemOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostRunnerItemOutputs(ctx, req.(*PostRunnerItemOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ProcessRunnerItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V2Server).ProcessRunnerItems(&v2ProcessRunnerItemsServer{ServerStream: stream})
}

type V2_ProcessRunnerItemsServer interface {
	Send(*MultiRunnerItemResponse) error
	Recv() (*PostRunnerItemOutputsRequest, error)
	grpc.ServerStream
}

type v2ProcessRunnerItemsServer struct {
	grpc.ServerStream
}

func (x *v2ProcessRunnerItemsServer) Send(m *MultiRunnerItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v2ProcessRunnerItemsServer) Recv() (*PostRunnerItemOutputsRequest, error) {
	m := new(PostRunnerItemOutputsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _V2_PostModelVersionsTrainingTimeEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsTrainingTimeEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsTrainingTimeEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostModelVersionsTrainingTimeEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsTrainingTimeEstimate(ctx, req.(*PostModelVersionsTrainingTimeEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCloudProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCloudProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListCloudProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCloudProviders(ctx, req.(*ListCloudProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCloudRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCloudRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListCloudRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCloudRegions(ctx, req.(*ListCloudRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInstanceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInstanceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListInstanceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInstanceTypes(ctx, req.(*ListInstanceTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetComputeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetComputeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetComputeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetComputeCluster(ctx, req.(*GetComputeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListComputeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComputeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListComputeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListComputeClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListComputeClusters(ctx, req.(*ListComputeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostComputeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostComputeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostComputeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostComputeClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostComputeClusters(ctx, req.(*PostComputeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteComputeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComputeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteComputeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteComputeClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteComputeClusters(ctx, req.(*DeleteComputeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetNodepool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodepoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetNodepool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetNodepool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetNodepool(ctx, req.(*GetNodepoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListNodepools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodepoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListNodepools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListNodepools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListNodepools(ctx, req.(*ListNodepoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostNodepools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostNodepoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostNodepools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostNodepools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostNodepools(ctx, req.(*PostNodepoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchNodepools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchNodepoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchNodepools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchNodepools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchNodepools(ctx, req.(*PatchNodepoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteNodepools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodepoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteNodepools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteNodepools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteNodepools(ctx, req.(*DeleteNodepoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDeployments(ctx, req.(*PostDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDeployments(ctx, req.(*PatchDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDeployments(ctx, req.(*DeleteDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAuditLogSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuditLogSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAuditLogSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostAuditLogSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAuditLogSearches(ctx, req.(*PostAuditLogSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflowEvaluationTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowEvaluationTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflowEvaluationTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListWorkflowEvaluationTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflowEvaluationTemplates(ctx, req.(*ListWorkflowEvaluationTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostLogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostLogEntries(ctx, req.(*PostLogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListLogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListLogEntries(ctx, req.(*ListLogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_StreamLogEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V2Server).StreamLogEntries(m, &v2StreamLogEntriesServer{ServerStream: stream})
}

type V2_StreamLogEntriesServer interface {
	Send(*MultiLogEntryResponse) error
	grpc.ServerStream
}

type v2StreamLogEntriesServer struct {
	grpc.ServerStream
}

func (x *v2StreamLogEntriesServer) Send(m *MultiLogEntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _V2_PostComputePlaneMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostComputePlaneMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostComputePlaneMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostComputePlaneMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostComputePlaneMetrics(ctx, req.(*PostComputePlaneMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostWorkflowVersionEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionEvaluations(ctx, req.(*PostWorkflowVersionEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflowVersionEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowVersionEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflowVersionEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetWorkflowVersionEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflowVersionEvaluation(ctx, req.(*GetWorkflowVersionEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflowVersionEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowVersionEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflowVersionEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListWorkflowVersionEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflowVersionEvaluations(ctx, req.(*ListWorkflowVersionEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflowVersionEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowVersionEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflowVersionEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchWorkflowVersionEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflowVersionEvaluations(ctx, req.(*PatchWorkflowVersionEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflowVersionEvaluationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowVersionEvaluationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflowVersionEvaluationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListWorkflowVersionEvaluationData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflowVersionEvaluationData(ctx, req.(*ListWorkflowVersionEvaluationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionEvaluationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionEvaluationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionEvaluationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostWorkflowVersionEvaluationData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionEvaluationData(ctx, req.(*PostWorkflowVersionEvaluationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostPipelines(ctx, req.(*PostPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchPipelines(ctx, req.(*PatchPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeletePipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeletePipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeletePipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeletePipelines(ctx, req.(*DeletePipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetPipelineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetPipelineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetPipelineVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetPipelineVersion(ctx, req.(*GetPipelineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListPipelineVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPipelineVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListPipelineVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPipelineVersions(ctx, req.(*ListPipelineVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchPipelineVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPipelineVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchPipelineVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchPipelineVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchPipelineVersions(ctx, req.(*PatchPipelineVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeletePipelineVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeletePipelineVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeletePipelineVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeletePipelineVersions(ctx, req.(*DeletePipelineVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetPipelineVersionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineVersionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetPipelineVersionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetPipelineVersionRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetPipelineVersionRun(ctx, req.(*GetPipelineVersionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostPipelineVersionRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPipelineVersionRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostPipelineVersionRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostPipelineVersionRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostPipelineVersionRuns(ctx, req.(*PostPipelineVersionRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchPipelineVersionRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPipelineVersionRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchPipelineVersionRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchPipelineVersionRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchPipelineVersionRuns(ctx, req.(*PatchPipelineVersionRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostPipelineSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPipelineStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostPipelineSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostPipelineSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostPipelineSteps(ctx, req.(*PostPipelineStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetPipelineStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetPipelineStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetPipelineStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetPipelineStep(ctx, req.(*GetPipelineStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListPipelineSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPipelineSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListPipelineSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPipelineSteps(ctx, req.(*ListPipelineStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostPipelineStepVersionsUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V2Server).PostPipelineStepVersionsUpload(&v2PostPipelineStepVersionsUploadServer{ServerStream: stream})
}

type V2_PostPipelineStepVersionsUploadServer interface {
	Send(*PostPipelineStepVersionsUploadResponse) error
	Recv() (*PostPipelineStepVersionsUploadRequest, error)
	grpc.ServerStream
}

type v2PostPipelineStepVersionsUploadServer struct {
	grpc.ServerStream
}

func (x *v2PostPipelineStepVersionsUploadServer) Send(m *PostPipelineStepVersionsUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v2PostPipelineStepVersionsUploadServer) Recv() (*PostPipelineStepVersionsUploadRequest, error) {
	m := new(PostPipelineStepVersionsUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _V2_ListPipelineStepVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineStepVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPipelineStepVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListPipelineStepVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPipelineStepVersions(ctx, req.(*ListPipelineStepVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetPipelineStepVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineStepVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetPipelineStepVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetPipelineStepVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetPipelineStepVersion(ctx, req.(*GetPipelineStepVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSecrets(ctx, req.(*PostSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PatchSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchSecrets(ctx, req.(*PatchSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_DeleteSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteSecrets(ctx, req.(*DeleteSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostMetricsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMetricsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostMetricsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_PostMetricsQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostMetricsQuery(ctx, req.(*PostMetricsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListMetricLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListMetricLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_ListMetricLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListMetricLabels(ctx, req.(*ListMetricLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V2_ServiceDesc is the grpc.ServiceDesc for V2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clarifai.api.V2",
	HandlerType: (*V2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConceptRelations",
			Handler:    _V2_ListConceptRelations_Handler,
		},
		{
			MethodName: "PostConceptRelations",
			Handler:    _V2_PostConceptRelations_Handler,
		},
		{
			MethodName: "DeleteConceptRelations",
			Handler:    _V2_DeleteConceptRelations_Handler,
		},
		{
			MethodName: "GetConceptCounts",
			Handler:    _V2_GetConceptCounts_Handler,
		},
		{
			MethodName: "GetConcept",
			Handler:    _V2_GetConcept_Handler,
		},
		{
			MethodName: "ListConcepts",
			Handler:    _V2_ListConcepts_Handler,
		},
		{
			MethodName: "ListModelConcepts",
			Handler:    _V2_ListModelConcepts_Handler,
		},
		{
			MethodName: "PostConceptsSearches",
			Handler:    _V2_PostConceptsSearches_Handler,
		},
		{
			MethodName: "PostConcepts",
			Handler:    _V2_PostConcepts_Handler,
		},
		{
			MethodName: "PatchConcepts",
			Handler:    _V2_PatchConcepts_Handler,
		},
		{
			MethodName: "GetConceptLanguage",
			Handler:    _V2_GetConceptLanguage_Handler,
		},
		{
			MethodName: "ListConceptLanguages",
			Handler:    _V2_ListConceptLanguages_Handler,
		},
		{
			MethodName: "PostConceptLanguages",
			Handler:    _V2_PostConceptLanguages_Handler,
		},
		{
			MethodName: "PatchConceptLanguages",
			Handler:    _V2_PatchConceptLanguages_Handler,
		},
		{
			MethodName: "ListKnowledgeGraphs",
			Handler:    _V2_ListKnowledgeGraphs_Handler,
		},
		{
			MethodName: "PostKnowledgeGraphs",
			Handler:    _V2_PostKnowledgeGraphs_Handler,
		},
		{
			MethodName: "GetAnnotation",
			Handler:    _V2_GetAnnotation_Handler,
		},
		{
			MethodName: "ListAnnotations",
			Handler:    _V2_ListAnnotations_Handler,
		},
		{
			MethodName: "PostAnnotations",
			Handler:    _V2_PostAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotations",
			Handler:    _V2_PatchAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotationsStatus",
			Handler:    _V2_PatchAnnotationsStatus_Handler,
		},
		{
			MethodName: "DeleteAnnotation",
			Handler:    _V2_DeleteAnnotation_Handler,
		},
		{
			MethodName: "DeleteAnnotations",
			Handler:    _V2_DeleteAnnotations_Handler,
		},
		{
			MethodName: "ListAnnotationTracks",
			Handler:    _V2_ListAnnotationTracks_Handler,
		},
		{
			MethodName: "PostAnnotationTracks",
			Handler:    _V2_PostAnnotationTracks_Handler,
		},
		{
			MethodName: "PatchAnnotationTracks",
			Handler:    _V2_PatchAnnotationTracks_Handler,
		},
		{
			MethodName: "DeleteAnnotationTracks",
			Handler:    _V2_DeleteAnnotationTracks_Handler,
		},
		{
			MethodName: "PatchAnnotationsSearches",
			Handler:    _V2_PatchAnnotationsSearches_Handler,
		},
		{
			MethodName: "PostAnnotationsSearches",
			Handler:    _V2_PostAnnotationsSearches_Handler,
		},
		{
			MethodName: "ListAnnotationWorkers",
			Handler:    _V2_ListAnnotationWorkers_Handler,
		},
		{
			MethodName: "GetInputCount",
			Handler:    _V2_GetInputCount_Handler,
		},
		{
			MethodName: "StreamInputs",
			Handler:    _V2_StreamInputs_Handler,
		},
		{
			MethodName: "GetInputSamples",
			Handler:    _V2_GetInputSamples_Handler,
		},
		{
			MethodName: "GetInput",
			Handler:    _V2_GetInput_Handler,
		},
		{
			MethodName: "GetInputVideoManifest",
			Handler:    _V2_GetInputVideoManifest_Handler,
		},
		{
			MethodName: "ListInputs",
			Handler:    _V2_ListInputs_Handler,
		},
		{
			MethodName: "PostInputs",
			Handler:    _V2_PostInputs_Handler,
		},
		{
			MethodName: "PatchInputs",
			Handler:    _V2_PatchInputs_Handler,
		},
		{
			MethodName: "DeleteInput",
			Handler:    _V2_DeleteInput_Handler,
		},
		{
			MethodName: "DeleteInputs",
			Handler:    _V2_DeleteInputs_Handler,
		},
		{
			MethodName: "PatchInputsSearches",
			Handler:    _V2_PatchInputsSearches_Handler,
		},
		{
			MethodName: "PostInputsSearches",
			Handler:    _V2_PostInputsSearches_Handler,
		},
		{
			MethodName: "PostModelOutputs",
			Handler:    _V2_PostModelOutputs_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _V2_ListDatasets_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _V2_GetDataset_Handler,
		},
		{
			MethodName: "PostDatasets",
			Handler:    _V2_PostDatasets_Handler,
		},
		{
			MethodName: "PatchDatasets",
			Handler:    _V2_PatchDatasets_Handler,
		},
		{
			MethodName: "DeleteDatasets",
			Handler:    _V2_DeleteDatasets_Handler,
		},
		{
			MethodName: "ListDatasetInputs",
			Handler:    _V2_ListDatasetInputs_Handler,
		},
		{
			MethodName: "GetDatasetInput",
			Handler:    _V2_GetDatasetInput_Handler,
		},
		{
			MethodName: "PostDatasetInputs",
			Handler:    _V2_PostDatasetInputs_Handler,
		},
		{
			MethodName: "DeleteDatasetInputs",
			Handler:    _V2_DeleteDatasetInputs_Handler,
		},
		{
			MethodName: "ListDatasetVersions",
			Handler:    _V2_ListDatasetVersions_Handler,
		},
		{
			MethodName: "GetDatasetVersion",
			Handler:    _V2_GetDatasetVersion_Handler,
		},
		{
			MethodName: "ListDatasetVersionMetricsGroups",
			Handler:    _V2_ListDatasetVersionMetricsGroups_Handler,
		},
		{
			MethodName: "PostDatasetVersions",
			Handler:    _V2_PostDatasetVersions_Handler,
		},
		{
			MethodName: "PatchDatasetVersions",
			Handler:    _V2_PatchDatasetVersions_Handler,
		},
		{
			MethodName: "DeleteDatasetVersions",
			Handler:    _V2_DeleteDatasetVersions_Handler,
		},
		{
			MethodName: "PutDatasetVersionExports",
			Handler:    _V2_PutDatasetVersionExports_Handler,
		},
		{
			MethodName: "GetModelType",
			Handler:    _V2_GetModelType_Handler,
		},
		{
			MethodName: "ListOpenSourceLicenses",
			Handler:    _V2_ListOpenSourceLicenses_Handler,
		},
		{
			MethodName: "ListModelTypes",
			Handler:    _V2_ListModelTypes_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _V2_GetModel_Handler,
		},
		{
			MethodName: "GetModelOutputInfo",
			Handler:    _V2_GetModelOutputInfo_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _V2_ListModels_Handler,
		},
		{
			MethodName: "GetResourceCounts",
			Handler:    _V2_GetResourceCounts_Handler,
		},
		{
			MethodName: "PostModelsSearches",
			Handler:    _V2_PostModelsSearches_Handler,
		},
		{
			MethodName: "PostModels",
			Handler:    _V2_PostModels_Handler,
		},
		{
			MethodName: "PatchModels",
			Handler:    _V2_PatchModels_Handler,
		},
		{
			MethodName: "PatchModelIds",
			Handler:    _V2_PatchModelIds_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _V2_DeleteModel_Handler,
		},
		{
			MethodName: "DeleteModels",
			Handler:    _V2_DeleteModels_Handler,
		},
		{
			MethodName: "PatchModelCheckConsents",
			Handler:    _V2_PatchModelCheckConsents_Handler,
		},
		{
			MethodName: "PatchModelToolkits",
			Handler:    _V2_PatchModelToolkits_Handler,
		},
		{
			MethodName: "PatchModelUseCases",
			Handler:    _V2_PatchModelUseCases_Handler,
		},
		{
			MethodName: "PatchModelLanguages",
			Handler:    _V2_PatchModelLanguages_Handler,
		},
		{
			MethodName: "ListModelInputs",
			Handler:    _V2_ListModelInputs_Handler,
		},
		{
			MethodName: "GetModelVersion",
			Handler:    _V2_GetModelVersion_Handler,
		},
		{
			MethodName: "ListModelVersions",
			Handler:    _V2_ListModelVersions_Handler,
		},
		{
			MethodName: "PostWorkflowVersionsUnPublish",
			Handler:    _V2_PostWorkflowVersionsUnPublish_Handler,
		},
		{
			MethodName: "PostWorkflowVersionsPublish",
			Handler:    _V2_PostWorkflowVersionsPublish_Handler,
		},
		{
			MethodName: "PostModelVersionsPublish",
			Handler:    _V2_PostModelVersionsPublish_Handler,
		},
		{
			MethodName: "PostModelVersionsUnPublish",
			Handler:    _V2_PostModelVersionsUnPublish_Handler,
		},
		{
			MethodName: "PostModelVersions",
			Handler:    _V2_PostModelVersions_Handler,
		},
		{
			MethodName: "PatchModelVersions",
			Handler:    _V2_PatchModelVersions_Handler,
		},
		{
			MethodName: "DeleteModelVersion",
			Handler:    _V2_DeleteModelVersion_Handler,
		},
		{
			MethodName: "PostModelMigration",
			Handler:    _V2_PostModelMigration_Handler,
		},
		{
			MethodName: "PutModelVersionExports",
			Handler:    _V2_PutModelVersionExports_Handler,
		},
		{
			MethodName: "GetModelVersionExport",
			Handler:    _V2_GetModelVersionExport_Handler,
		},
		{
			MethodName: "GetModelVersionMetrics",
			Handler:    _V2_GetModelVersionMetrics_Handler,
		},
		{
			MethodName: "PostModelVersionMetrics",
			Handler:    _V2_PostModelVersionMetrics_Handler,
		},
		{
			MethodName: "PostModelVersionEvaluations",
			Handler:    _V2_PostModelVersionEvaluations_Handler,
		},
		{
			MethodName: "ListModelVersionEvaluations",
			Handler:    _V2_ListModelVersionEvaluations_Handler,
		},
		{
			MethodName: "GetModelVersionEvaluation",
			Handler:    _V2_GetModelVersionEvaluation_Handler,
		},
		{
			MethodName: "PostEvaluations",
			Handler:    _V2_PostEvaluations_Handler,
		},
		{
			MethodName: "ListEvaluations",
			Handler:    _V2_ListEvaluations_Handler,
		},
		{
			MethodName: "GetEvaluation",
			Handler:    _V2_GetEvaluation_Handler,
		},
		{
			MethodName: "ListModelReferences",
			Handler:    _V2_ListModelReferences_Handler,
		},
		{
			MethodName: "GetModelVersionInputExample",
			Handler:    _V2_GetModelVersionInputExample_Handler,
		},
		{
			MethodName: "ListModelVersionInputExamples",
			Handler:    _V2_ListModelVersionInputExamples_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _V2_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _V2_ListWorkflows_Handler,
		},
		{
			MethodName: "PostWorkflows",
			Handler:    _V2_PostWorkflows_Handler,
		},
		{
			MethodName: "PatchWorkflows",
			Handler:    _V2_PatchWorkflows_Handler,
		},
		{
			MethodName: "PatchWorkflowIds",
			Handler:    _V2_PatchWorkflowIds_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _V2_DeleteWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflows",
			Handler:    _V2_DeleteWorkflows_Handler,
		},
		{
			MethodName: "PostWorkflowResults",
			Handler:    _V2_PostWorkflowResults_Handler,
		},
		{
			MethodName: "ListWorkflowVersions",
			Handler:    _V2_ListWorkflowVersions_Handler,
		},
		{
			MethodName: "GetWorkflowVersion",
			Handler:    _V2_GetWorkflowVersion_Handler,
		},
		{
			MethodName: "DeleteWorkflowVersions",
			Handler:    _V2_DeleteWorkflowVersions_Handler,
		},
		{
			MethodName: "PatchWorkflowVersions",
			Handler:    _V2_PatchWorkflowVersions_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _V2_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _V2_ListKeys_Handler,
		},
		{
			MethodName: "ListAppKeys",
			Handler:    _V2_ListAppKeys_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _V2_DeleteKey_Handler,
		},
		{
			MethodName: "PostKeys",
			Handler:    _V2_PostKeys_Handler,
		},
		{
			MethodName: "PatchKeys",
			Handler:    _V2_PatchKeys_Handler,
		},
		{
			MethodName: "MyScopes",
			Handler:    _V2_MyScopes_Handler,
		},
		{
			MethodName: "MyScopesUser",
			Handler:    _V2_MyScopesUser_Handler,
		},
		{
			MethodName: "MyScopesRoot",
			Handler:    _V2_MyScopesRoot_Handler,
		},
		{
			MethodName: "ListScopes",
			Handler:    _V2_ListScopes_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _V2_GetApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _V2_ListApps_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _V2_DeleteApp_Handler,
		},
		{
			MethodName: "PostApps",
			Handler:    _V2_PostApps_Handler,
		},
		{
			MethodName: "PatchApps",
			Handler:    _V2_PatchApps_Handler,
		},
		{
			MethodName: "PatchAppsDetails",
			Handler:    _V2_PatchAppsDetails_Handler,
		},
		{
			MethodName: "PatchAppsIds",
			Handler:    _V2_PatchAppsIds_Handler,
		},
		{
			MethodName: "PatchApp",
			Handler:    _V2_PatchApp_Handler,
		},
		{
			MethodName: "PostAppsSearches",
			Handler:    _V2_PostAppsSearches_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _V2_GetUser_Handler,
		},
		{
			MethodName: "PostValidatePassword",
			Handler:    _V2_PostValidatePassword_Handler,
		},
		{
			MethodName: "GetSearch",
			Handler:    _V2_GetSearch_Handler,
		},
		{
			MethodName: "ListSearches",
			Handler:    _V2_ListSearches_Handler,
		},
		{
			MethodName: "PatchSearches",
			Handler:    _V2_PatchSearches_Handler,
		},
		{
			MethodName: "PostSearches",
			Handler:    _V2_PostSearches_Handler,
		},
		{
			MethodName: "PostSearchesByID",
			Handler:    _V2_PostSearchesByID_Handler,
		},
		{
			MethodName: "PostAnnotationSearchMetrics",
			Handler:    _V2_PostAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "GetAnnotationSearchMetrics",
			Handler:    _V2_GetAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "ListAnnotationSearchMetrics",
			Handler:    _V2_ListAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "DeleteAnnotationSearchMetrics",
			Handler:    _V2_DeleteAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "DeleteSearch",
			Handler:    _V2_DeleteSearch_Handler,
		},
		{
			MethodName: "ListAnnotationFilters",
			Handler:    _V2_ListAnnotationFilters_Handler,
		},
		{
			MethodName: "GetAnnotationFilter",
			Handler:    _V2_GetAnnotationFilter_Handler,
		},
		{
			MethodName: "PostAnnotationFilters",
			Handler:    _V2_PostAnnotationFilters_Handler,
		},
		{
			MethodName: "PatchAnnotationFilters",
			Handler:    _V2_PatchAnnotationFilters_Handler,
		},
		{
			MethodName: "DeleteAnnotationFilters",
			Handler:    _V2_DeleteAnnotationFilters_Handler,
		},
		{
			MethodName: "ListStatusCodes",
			Handler:    _V2_ListStatusCodes_Handler,
		},
		{
			MethodName: "GetStatusCode",
			Handler:    _V2_GetStatusCode_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _V2_ListCollaborators_Handler,
		},
		{
			MethodName: "PostCollaborators",
			Handler:    _V2_PostCollaborators_Handler,
		},
		{
			MethodName: "PatchCollaborators",
			Handler:    _V2_PatchCollaborators_Handler,
		},
		{
			MethodName: "DeleteCollaborators",
			Handler:    _V2_DeleteCollaborators_Handler,
		},
		{
			MethodName: "ListCollaborations",
			Handler:    _V2_ListCollaborations_Handler,
		},
		{
			MethodName: "PostAppDuplications",
			Handler:    _V2_PostAppDuplications_Handler,
		},
		{
			MethodName: "ListAppDuplications",
			Handler:    _V2_ListAppDuplications_Handler,
		},
		{
			MethodName: "GetAppDuplication",
			Handler:    _V2_GetAppDuplication_Handler,
		},
		{
			MethodName: "PostTasks",
			Handler:    _V2_PostTasks_Handler,
		},
		{
			MethodName: "GetTaskAnnotationCount",
			Handler:    _V2_GetTaskAnnotationCount_Handler,
		},
		{
			MethodName: "GetTaskInputCount",
			Handler:    _V2_GetTaskInputCount_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _V2_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _V2_ListTasks_Handler,
		},
		{
			MethodName: "PatchTasks",
			Handler:    _V2_PatchTasks_Handler,
		},
		{
			MethodName: "DeleteTasks",
			Handler:    _V2_DeleteTasks_Handler,
		},
		{
			MethodName: "PostLabelOrders",
			Handler:    _V2_PostLabelOrders_Handler,
		},
		{
			MethodName: "GetLabelOrder",
			Handler:    _V2_GetLabelOrder_Handler,
		},
		{
			MethodName: "ListLabelOrders",
			Handler:    _V2_ListLabelOrders_Handler,
		},
		{
			MethodName: "PatchLabelOrders",
			Handler:    _V2_PatchLabelOrders_Handler,
		},
		{
			MethodName: "DeleteLabelOrders",
			Handler:    _V2_DeleteLabelOrders_Handler,
		},
		{
			MethodName: "PostCollectors",
			Handler:    _V2_PostCollectors_Handler,
		},
		{
			MethodName: "GetCollector",
			Handler:    _V2_GetCollector_Handler,
		},
		{
			MethodName: "ListCollectors",
			Handler:    _V2_ListCollectors_Handler,
		},
		{
			MethodName: "PatchCollectors",
			Handler:    _V2_PatchCollectors_Handler,
		},
		{
			MethodName: "DeleteCollectors",
			Handler:    _V2_DeleteCollectors_Handler,
		},
		{
			MethodName: "PostStatValues",
			Handler:    _V2_PostStatValues_Handler,
		},
		{
			MethodName: "PostStatValuesAggregate",
			Handler:    _V2_PostStatValuesAggregate_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _V2_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _V2_ListModules_Handler,
		},
		{
			MethodName: "PostModules",
			Handler:    _V2_PostModules_Handler,
		},
		{
			MethodName: "PatchModules",
			Handler:    _V2_PatchModules_Handler,
		},
		{
			MethodName: "DeleteModules",
			Handler:    _V2_DeleteModules_Handler,
		},
		{
			MethodName: "GetModuleVersion",
			Handler:    _V2_GetModuleVersion_Handler,
		},
		{
			MethodName: "ListModuleVersions",
			Handler:    _V2_ListModuleVersions_Handler,
		},
		{
			MethodName: "PostModuleVersions",
			Handler:    _V2_PostModuleVersions_Handler,
		},
		{
			MethodName: "PatchModuleVersions",
			Handler:    _V2_PatchModuleVersions_Handler,
		},
		{
			MethodName: "DeleteModuleVersions",
			Handler:    _V2_DeleteModuleVersions_Handler,
		},
		{
			MethodName: "GetModuleVersionUsageCount",
			Handler:    _V2_GetModuleVersionUsageCount_Handler,
		},
		{
			MethodName: "GetInstalledModuleVersion",
			Handler:    _V2_GetInstalledModuleVersion_Handler,
		},
		{
			MethodName: "ListInstalledModuleVersions",
			Handler:    _V2_ListInstalledModuleVersions_Handler,
		},
		{
			MethodName: "PostInstalledModuleVersions",
			Handler:    _V2_PostInstalledModuleVersions_Handler,
		},
		{
			MethodName: "DeleteInstalledModuleVersions",
			Handler:    _V2_DeleteInstalledModuleVersions_Handler,
		},
		{
			MethodName: "PostInstalledModuleVersionsKey",
			Handler:    _V2_PostInstalledModuleVersionsKey_Handler,
		},
		{
			MethodName: "PostBulkOperations",
			Handler:    _V2_PostBulkOperations_Handler,
		},
		{
			MethodName: "ListBulkOperations",
			Handler:    _V2_ListBulkOperations_Handler,
		},
		{
			MethodName: "GetBulkOperation",
			Handler:    _V2_GetBulkOperation_Handler,
		},
		{
			MethodName: "CancelBulkOperations",
			Handler:    _V2_CancelBulkOperations_Handler,
		},
		{
			MethodName: "DeleteBulkOperations",
			Handler:    _V2_DeleteBulkOperations_Handler,
		},
		{
			MethodName: "ListNextTaskAssignments",
			Handler:    _V2_ListNextTaskAssignments_Handler,
		},
		{
			MethodName: "PutTaskAssignments",
			Handler:    _V2_PutTaskAssignments_Handler,
		},
		{
			MethodName: "ListInputsAddJobs",
			Handler:    _V2_ListInputsAddJobs_Handler,
		},
		{
			MethodName: "GetInputsAddJob",
			Handler:    _V2_GetInputsAddJob_Handler,
		},
		{
			MethodName: "CancelInputsAddJob",
			Handler:    _V2_CancelInputsAddJob_Handler,
		},
		{
			MethodName: "PostUploads",
			Handler:    _V2_PostUploads_Handler,
		},
		{
			MethodName: "PutUploadContentParts",
			Handler:    _V2_PutUploadContentParts_Handler,
		},
		{
			MethodName: "GetUpload",
			Handler:    _V2_GetUpload_Handler,
		},
		{
			MethodName: "ListUploads",
			Handler:    _V2_ListUploads_Handler,
		},
		{
			MethodName: "DeleteUploads",
			Handler:    _V2_DeleteUploads_Handler,
		},
		{
			MethodName: "PostInputsDataSources",
			Handler:    _V2_PostInputsDataSources_Handler,
		},
		{
			MethodName: "GetInputsExtractionJob",
			Handler:    _V2_GetInputsExtractionJob_Handler,
		},
		{
			MethodName: "ListInputsExtractionJobs",
			Handler:    _V2_ListInputsExtractionJobs_Handler,
		},
		{
			MethodName: "CancelInputsExtractionJobs",
			Handler:    _V2_CancelInputsExtractionJobs_Handler,
		},
		{
			MethodName: "PostInputsUploads",
			Handler:    _V2_PostInputsUploads_Handler,
		},
		{
			MethodName: "ListPipelineVersionRuns",
			Handler:    _V2_ListPipelineVersionRuns_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _V2_GetRunner_Handler,
		},
		{
			MethodName: "ListRunners",
			Handler:    _V2_ListRunners_Handler,
		},
		{
			MethodName: "PostRunners",
			Handler:    _V2_PostRunners_Handler,
		},
		{
			MethodName: "PatchRunners",
			Handler:    _V2_PatchRunners_Handler,
		},
		{
			MethodName: "DeleteRunners",
			Handler:    _V2_DeleteRunners_Handler,
		},
		{
			MethodName: "ListRunnerItems",
			Handler:    _V2_ListRunnerItems_Handler,
		},
		{
			MethodName: "PostRunnerItemOutputs",
			Handler:    _V2_PostRunnerItemOutputs_Handler,
		},
		{
			MethodName: "PostModelVersionsTrainingTimeEstimate",
			Handler:    _V2_PostModelVersionsTrainingTimeEstimate_Handler,
		},
		{
			MethodName: "ListCloudProviders",
			Handler:    _V2_ListCloudProviders_Handler,
		},
		{
			MethodName: "ListCloudRegions",
			Handler:    _V2_ListCloudRegions_Handler,
		},
		{
			MethodName: "ListInstanceTypes",
			Handler:    _V2_ListInstanceTypes_Handler,
		},
		{
			MethodName: "GetComputeCluster",
			Handler:    _V2_GetComputeCluster_Handler,
		},
		{
			MethodName: "ListComputeClusters",
			Handler:    _V2_ListComputeClusters_Handler,
		},
		{
			MethodName: "PostComputeClusters",
			Handler:    _V2_PostComputeClusters_Handler,
		},
		{
			MethodName: "DeleteComputeClusters",
			Handler:    _V2_DeleteComputeClusters_Handler,
		},
		{
			MethodName: "GetNodepool",
			Handler:    _V2_GetNodepool_Handler,
		},
		{
			MethodName: "ListNodepools",
			Handler:    _V2_ListNodepools_Handler,
		},
		{
			MethodName: "PostNodepools",
			Handler:    _V2_PostNodepools_Handler,
		},
		{
			MethodName: "PatchNodepools",
			Handler:    _V2_PatchNodepools_Handler,
		},
		{
			MethodName: "DeleteNodepools",
			Handler:    _V2_DeleteNodepools_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _V2_GetDeployment_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _V2_ListDeployments_Handler,
		},
		{
			MethodName: "PostDeployments",
			Handler:    _V2_PostDeployments_Handler,
		},
		{
			MethodName: "PatchDeployments",
			Handler:    _V2_PatchDeployments_Handler,
		},
		{
			MethodName: "DeleteDeployments",
			Handler:    _V2_DeleteDeployments_Handler,
		},
		{
			MethodName: "PostAuditLogSearches",
			Handler:    _V2_PostAuditLogSearches_Handler,
		},
		{
			MethodName: "ListWorkflowEvaluationTemplates",
			Handler:    _V2_ListWorkflowEvaluationTemplates_Handler,
		},
		{
			MethodName: "PostLogEntries",
			Handler:    _V2_PostLogEntries_Handler,
		},
		{
			MethodName: "ListLogEntries",
			Handler:    _V2_ListLogEntries_Handler,
		},
		{
			MethodName: "PostComputePlaneMetrics",
			Handler:    _V2_PostComputePlaneMetrics_Handler,
		},
		{
			MethodName: "PostWorkflowVersionEvaluations",
			Handler:    _V2_PostWorkflowVersionEvaluations_Handler,
		},
		{
			MethodName: "GetWorkflowVersionEvaluation",
			Handler:    _V2_GetWorkflowVersionEvaluation_Handler,
		},
		{
			MethodName: "ListWorkflowVersionEvaluations",
			Handler:    _V2_ListWorkflowVersionEvaluations_Handler,
		},
		{
			MethodName: "PatchWorkflowVersionEvaluations",
			Handler:    _V2_PatchWorkflowVersionEvaluations_Handler,
		},
		{
			MethodName: "ListWorkflowVersionEvaluationData",
			Handler:    _V2_ListWorkflowVersionEvaluationData_Handler,
		},
		{
			MethodName: "PostWorkflowVersionEvaluationData",
			Handler:    _V2_PostWorkflowVersionEvaluationData_Handler,
		},
		{
			MethodName: "PostPipelines",
			Handler:    _V2_PostPipelines_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _V2_GetPipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _V2_ListPipelines_Handler,
		},
		{
			MethodName: "PatchPipelines",
			Handler:    _V2_PatchPipelines_Handler,
		},
		{
			MethodName: "DeletePipelines",
			Handler:    _V2_DeletePipelines_Handler,
		},
		{
			MethodName: "GetPipelineVersion",
			Handler:    _V2_GetPipelineVersion_Handler,
		},
		{
			MethodName: "ListPipelineVersions",
			Handler:    _V2_ListPipelineVersions_Handler,
		},
		{
			MethodName: "PatchPipelineVersions",
			Handler:    _V2_PatchPipelineVersions_Handler,
		},
		{
			MethodName: "DeletePipelineVersions",
			Handler:    _V2_DeletePipelineVersions_Handler,
		},
		{
			MethodName: "GetPipelineVersionRun",
			Handler:    _V2_GetPipelineVersionRun_Handler,
		},
		{
			MethodName: "PostPipelineVersionRuns",
			Handler:    _V2_PostPipelineVersionRuns_Handler,
		},
		{
			MethodName: "PatchPipelineVersionRuns",
			Handler:    _V2_PatchPipelineVersionRuns_Handler,
		},
		{
			MethodName: "PostPipelineSteps",
			Handler:    _V2_PostPipelineSteps_Handler,
		},
		{
			MethodName: "GetPipelineStep",
			Handler:    _V2_GetPipelineStep_Handler,
		},
		{
			MethodName: "ListPipelineSteps",
			Handler:    _V2_ListPipelineSteps_Handler,
		},
		{
			MethodName: "ListPipelineStepVersions",
			Handler:    _V2_ListPipelineStepVersions_Handler,
		},
		{
			MethodName: "GetPipelineStepVersion",
			Handler:    _V2_GetPipelineStepVersion_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _V2_GetSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _V2_ListSecrets_Handler,
		},
		{
			MethodName: "PostSecrets",
			Handler:    _V2_PostSecrets_Handler,
		},
		{
			MethodName: "PatchSecrets",
			Handler:    _V2_PatchSecrets_Handler,
		},
		{
			MethodName: "DeleteSecrets",
			Handler:    _V2_DeleteSecrets_Handler,
		},
		{
			MethodName: "PostMetricsQuery",
			Handler:    _V2_PostMetricsQuery_Handler,
		},
		{
			MethodName: "ListMetricLabels",
			Handler:    _V2_ListMetricLabels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateModelOutputs",
			Handler:       _V2_GenerateModelOutputs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamModelOutputs",
			Handler:       _V2_StreamModelOutputs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostModelVersionsUpload",
			Handler:       _V2_PostModelVersionsUpload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessRunnerItems",
			Handler:       _V2_ProcessRunnerItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLogEntries",
			Handler:       _V2_StreamLogEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostPipelineStepVersionsUpload",
			Handler:       _V2_PostPipelineStepVersionsUpload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/clarifai/api/service.proto",
}
