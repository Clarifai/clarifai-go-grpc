// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: proto/clarifai/api/service.proto

package api

import (
	status "clarifai/api/status"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V2Client is the client API for V2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V2Client interface {
	// Common echo example.
	Echo(ctx context.Context, in *TestMessage, opts ...grpc.CallOption) (*TestMessage, error)
	// List concept relations between concepts in the platform.
	// MUST be above ListConcepts so that if concept_id is empty this will still match
	// /concepts/relations to list all the concept relations in the app.
	ListConceptRelations(ctx context.Context, in *ListConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	PostConceptRelations(ctx context.Context, in *PostConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	DeleteConceptRelations(ctx context.Context, in *DeleteConceptRelationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the concepts with their positive and negative counts
	GetConceptCounts(ctx context.Context, in *GetConceptCountsRequest, opts ...grpc.CallOption) (*MultiConceptCountResponse, error)
	// Get a specific concept from an app.
	GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*SingleConceptResponse, error)
	// List all the concepts.
	ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// List models concepts.
	ListModelConcepts(ctx context.Context, in *ListModelConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Search over the concepts to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostConceptsSearches(ctx context.Context, in *PostConceptsSearchesRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Add a concept to an app.
	PostConcepts(ctx context.Context, in *PostConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Patch one or more concepts.
	PatchConcepts(ctx context.Context, in *PatchConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Get a specific vocab from an app.
	GetVocab(ctx context.Context, in *GetVocabRequest, opts ...grpc.CallOption) (*SingleVocabResponse, error)
	// List all the vocabs.
	ListVocabs(ctx context.Context, in *ListVocabsRequest, opts ...grpc.CallOption) (*MultiVocabResponse, error)
	// Add a vocab to an app.
	PostVocabs(ctx context.Context, in *PostVocabsRequest, opts ...grpc.CallOption) (*MultiVocabResponse, error)
	// Patch one or more vocabs.
	PatchVocabs(ctx context.Context, in *PatchVocabsRequest, opts ...grpc.CallOption) (*MultiVocabResponse, error)
	// Delete a single vocab.
	DeleteVocab(ctx context.Context, in *DeleteVocabRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple vocabs in one request.
	DeleteVocabs(ctx context.Context, in *DeleteVocabsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the vocabs.
	ListVocabConcepts(ctx context.Context, in *ListVocabConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Add a vocab to an app.
	PostVocabConcepts(ctx context.Context, in *PostVocabConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Delete a single concept from a vocab.
	DeleteVocabConcept(ctx context.Context, in *DeleteVocabConceptRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple concepts from a vocab in one request.
	DeleteVocabConcepts(ctx context.Context, in *DeleteVocabConceptsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a specific concept from an app.
	GetConceptLanguage(ctx context.Context, in *GetConceptLanguageRequest, opts ...grpc.CallOption) (*SingleConceptLanguageResponse, error)
	// List the concept in all the translated languages.
	ListConceptLanguages(ctx context.Context, in *ListConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// Add a new translation for this concept.
	PostConceptLanguages(ctx context.Context, in *PostConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// Patch the name for a given language names by passing in a list of concepts with the new names
	// for the languages.
	PatchConceptLanguages(ctx context.Context, in *PatchConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// List the concept in all the outside sources where we found these concepts.
	ListConceptReferences(ctx context.Context, in *ListConceptReferencesRequest, opts ...grpc.CallOption) (*MultiConceptReferenceResponse, error)
	// List all domain graphs.
	ListKnowledgeGraphs(ctx context.Context, in *ListKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error)
	// Post domain graphs.
	PostKnowledgeGraphs(ctx context.Context, in *PostKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error)
	// Start concept mapping jobs.
	PostConceptMappingJobs(ctx context.Context, in *PostConceptMappingJobsRequest, opts ...grpc.CallOption) (*MultiConceptMappingJobResponse, error)
	// List all concept mappings for a given concept id.
	ListConceptMappings(ctx context.Context, in *ListConceptMappingsRequest, opts ...grpc.CallOption) (*MultiConceptMappingResponse, error)
	// Post concept mappings.
	PostConceptMappings(ctx context.Context, in *PostConceptMappingsRequest, opts ...grpc.CallOption) (*MultiConceptMappingResponse, error)
	// Get a specific annotation from an app.
	GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*SingleAnnotationResponse, error)
	// List all the annotation.
	ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Post annotations.
	PostAnnotations(ctx context.Context, in *PostAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Patch one or more annotations.
	PatchAnnotations(ctx context.Context, in *PatchAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Patch annotations status by worker id and task id.
	PatchAnnotationsStatus(ctx context.Context, in *PatchAnnotationsStatusRequest, opts ...grpc.CallOption) (*PatchAnnotationsStatusResponse, error)
	// Delete a single annotation.
	DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple annotations in one request.
	DeleteAnnotations(ctx context.Context, in *DeleteAnnotationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch saved annotations searches by ids.
	PatchAnnotationsSearches(ctx context.Context, in *PatchAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a search over annotations
	PostAnnotationsSearches(ctx context.Context, in *PostAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Get input count per status.
	GetInputCount(ctx context.Context, in *GetInputCountRequest, opts ...grpc.CallOption) (*SingleInputCountResponse, error)
	// Streams all the inputs starting from oldest assets.
	StreamInputs(ctx context.Context, in *StreamInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Get a specific input from an app.
	GetInputSamples(ctx context.Context, in *GetInputSamplesRequest, opts ...grpc.CallOption) (*MultiInputAnnotationResponse, error)
	// Get a specific input from an app.
	GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*SingleInputResponse, error)
	// List all the inputs.
	ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Add an input (or set of inputs) to an app.
	// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
	// it is asynchronous.
	PostInputs(ctx context.Context, in *PostInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Add an input (or set of inputs) to an app via a file.
	// This is asynchronous.
	PostInputsFile(ctx context.Context, in *PostInputsFileRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Add an input or set of inputs to an app designed for NiFi integration.
	PostInputsNiFi(ctx context.Context, in *PostInputsNiFiRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Add an input or set of inputs to an app designed for Document integration.
	PostInputsDocument(ctx context.Context, in *PostInputsDocumentRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Patch one or more inputs.
	PatchInputs(ctx context.Context, in *PatchInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Delete a single input asynchronously.
	DeleteInput(ctx context.Context, in *DeleteInputRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple inputs in one request.
	// This call is asynchronous.
	DeleteInputs(ctx context.Context, in *DeleteInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch saved inputs searches by ids.
	PatchInputsSearches(ctx context.Context, in *PatchInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a search over inputs
	PostInputsSearches(ctx context.Context, in *PostInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Get predicted outputs from the model.
	PostModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (*MultiOutputResponse, error)
	// List all the datasets.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Get a specific dataset.
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*SingleDatasetResponse, error)
	// Add datasets to an app.
	// The process is atomic, i.e. either all or no datasets are added.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PostDatasets(ctx context.Context, in *PostDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Patch one or more datasets.
	// The process is atomic, i.e. either all or no datasets are patched.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PatchDatasets(ctx context.Context, in *PatchDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Patch one or more dataset ids.
	PatchDatasetIds(ctx context.Context, in *PatchDatasetIdsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Delete one or more datasets in a single request.
	DeleteDatasets(ctx context.Context, in *DeleteDatasetsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the dataset inputs in a dataset.
	ListDatasetInputs(ctx context.Context, in *ListDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error)
	// Get a specific dataset input.
	GetDatasetInput(ctx context.Context, in *GetDatasetInputRequest, opts ...grpc.CallOption) (*SingleDatasetInputResponse, error)
	// Add dataset inputs to a dataset.
	// The process is not atomic, i.e. if there are errors with some dataset
	// inputs, others might still be added. The response reports
	//   - SUCCESS if all dataset inputs were added,
	//   - MIXED_STATUS if only some dataset inputs were added, and
	//   - FAILURE if no dataset inputs were added.
	// Each individual dataset input in the response has the status set to
	// indicate if it was successful or if there was an error.
	PostDatasetInputs(ctx context.Context, in *PostDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error)
	// Delete one or more dataset inputs in a single request.
	DeleteDatasetInputs(ctx context.Context, in *DeleteDatasetInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the dataset versions.
	ListDatasetVersions(ctx context.Context, in *ListDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Get a specific dataset version.
	GetDatasetVersion(ctx context.Context, in *GetDatasetVersionRequest, opts ...grpc.CallOption) (*SingleDatasetVersionResponse, error)
	ListDatasetVersionMetricsGroups(ctx context.Context, in *ListDatasetVersionMetricsGroupsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionMetricsGroupResponse, error)
	// Add dataset versions to a dataset.
	PostDatasetVersions(ctx context.Context, in *PostDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Patch one or more dataset versions.
	PatchDatasetVersions(ctx context.Context, in *PatchDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Delete one or more dataset versions in a single request.
	DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Create export of a dataset version.
	PutDatasetVersionExports(ctx context.Context, in *PutDatasetVersionExportsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionExportResponse, error)
	// Get a specific model type.
	GetModelType(ctx context.Context, in *GetModelTypeRequest, opts ...grpc.CallOption) (*SingleModelTypeResponse, error)
	// List all the supported open source licenses in the platform.
	ListOpenSourceLicenses(ctx context.Context, in *ListOpenSourceLicensesRequest, opts ...grpc.CallOption) (*ListOpenSourceLicensesResponse, error)
	// List all the model types available in the platform.
	// This MUST be above ListModels so that the /models/types endpoint takes precedence.
	ListModelTypes(ctx context.Context, in *ListModelTypesRequest, opts ...grpc.CallOption) (*MultiModelTypeResponse, error)
	// Get a specific model from an app.
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// Get a the output info for a given model_id or model_id/version_id
	// combo.
	GetModelOutputInfo(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// List all the models.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Search over the models to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostModelsSearches(ctx context.Context, in *PostModelsSearchesRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Add a models to an app.
	PostModels(ctx context.Context, in *PostModelsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// Patch one or more models.
	PatchModels(ctx context.Context, in *PatchModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Patch one or more models ids.
	PatchModelIds(ctx context.Context, in *PatchModelIdsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Delete a single model.
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple models in one request.
	DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Update model check consents
	PatchModelCheckConsents(ctx context.Context, in *PatchModelCheckConsentsRequest, opts ...grpc.CallOption) (*MultiModelCheckConsentResponse, error)
	// Update model toolkits tags
	PatchModelToolkits(ctx context.Context, in *PatchModelToolkitsRequest, opts ...grpc.CallOption) (*MultiModelToolkitResponse, error)
	// Update model use_cases tags
	PatchModelUseCases(ctx context.Context, in *PatchModelUseCasesRequest, opts ...grpc.CallOption) (*MultiModelUseCaseResponse, error)
	// Update model languages tags
	PatchModelLanguages(ctx context.Context, in *PatchModelLanguagesRequest, opts ...grpc.CallOption) (*MultiModelLanguageResponse, error)
	// List all the inputs.
	ListModelInputs(ctx context.Context, in *ListModelInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Get a specific model from an app.
	GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// List all the models.
	ListModelVersions(ctx context.Context, in *ListModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error)
	PostWorkflowVersionsUnPublish(ctx context.Context, in *PostWorkflowVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	PostWorkflowVersionsPublish(ctx context.Context, in *PostWorkflowVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostModelVersionsPublish
	PostModelVersionsPublish(ctx context.Context, in *PostModelVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostModelVersionsUnPublish
	PostModelVersionsUnPublish(ctx context.Context, in *PostModelVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Create a new model version to trigger training of the model.
	PostModelVersions(ctx context.Context, in *PostModelVersionsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// PatchModelVersions
	PatchModelVersions(ctx context.Context, in *PatchModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error)
	// Delete a single model.
	DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get the evaluation metrics for a model version.
	GetModelVersionMetrics(ctx context.Context, in *GetModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// Run the evaluation metrics for a model version.
	PostModelVersionMetrics(ctx context.Context, in *PostModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// Lists model references tied to a particular model id.
	ListModelReferences(ctx context.Context, in *ListModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error)
	// Add new reference(s) to a particular model
	PostModelReferences(ctx context.Context, in *PostModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error)
	// Delete model references tied to a model id by reference id.
	DeleteModelReferences(ctx context.Context, in *DeleteModelReferencesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// GetModelVersionInputExample
	GetModelVersionInputExample(ctx context.Context, in *GetModelVersionInputExampleRequest, opts ...grpc.CallOption) (*SingleModelVersionInputExampleResponse, error)
	// ListModelVersionInputExamples
	ListModelVersionInputExamples(ctx context.Context, in *ListModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error)
	// PostModelVersionInputExamples
	PostModelVersionInputExamples(ctx context.Context, in *PostModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error)
	// DeleteModelVersionInputExamples
	DeleteModelVersionInputExamples(ctx context.Context, in *DeleteModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Star a model
	PostModelStars(ctx context.Context, in *PostModelStarsRequest, opts ...grpc.CallOption) (*MultiModelStarResponse, error)
	//Un-star a model
	DeleteModelStars(ctx context.Context, in *DeleteModelStarsRequest, opts ...grpc.CallOption) (*DeleteModelStarsResponse, error)
	// Star a user
	PostUserStars(ctx context.Context, in *PostUserStarsRequest, opts ...grpc.CallOption) (*MultiUserStarResponse, error)
	// Un-star a user
	DeleteUserStars(ctx context.Context, in *DeleteUserStarsRequest, opts ...grpc.CallOption) (*DeleteUserStarsResponse, error)
	// Star a workflow
	PostWorkflowStars(ctx context.Context, in *PostWorkflowStarsRequest, opts ...grpc.CallOption) (*MultiWorkflowStarResponse, error)
	// Un-star a workflow
	DeleteWorkflowStars(ctx context.Context, in *DeleteWorkflowStarsRequest, opts ...grpc.CallOption) (*DeleteWorkflowStarsResponse, error)
	// Star an app
	PostAppStars(ctx context.Context, in *PostAppStarsRequest, opts ...grpc.CallOption) (*MultiAppStarResponse, error)
	// Un-star an app
	DeleteAppStars(ctx context.Context, in *DeleteAppStarsRequest, opts ...grpc.CallOption) (*DeleteAppStarsResponse, error)
	// Get a specific workflow from an app.
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*SingleWorkflowResponse, error)
	// List all the workflows.
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// List all public workflows.
	ListPublicWorkflows(ctx context.Context, in *ListPublicWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Add a workflow to an app.
	PostWorkflows(ctx context.Context, in *PostWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Patch one or more workflows.
	PatchWorkflows(ctx context.Context, in *PatchWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Patch one or more workflows ids.
	PatchWorkflowIds(ctx context.Context, in *PatchWorkflowIdsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Delete a single workflow.
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple workflows in one request.
	DeleteWorkflows(ctx context.Context, in *DeleteWorkflowsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Predict using a workflow.
	PostWorkflowResults(ctx context.Context, in *PostWorkflowResultsRequest, opts ...grpc.CallOption) (*PostWorkflowResultsResponse, error)
	// Compare embeddings distances using a workflow
	PostWorkflowResultsSimilarity(ctx context.Context, in *PostWorkflowResultsSimilarityRequest, opts ...grpc.CallOption) (*PostWorkflowResultsSimilarityResponse, error)
	// List workflow versions.
	ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error)
	// Get single workflow version.
	GetWorkflowVersion(ctx context.Context, in *GetWorkflowVersionRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionResponse, error)
	// Delete workflow versions.
	DeleteWorkflowVersions(ctx context.Context, in *DeleteWorkflowVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch workflow versions.
	PatchWorkflowVersions(ctx context.Context, in *PatchWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error)
	// Evaluate all the nodes in the workflow.
	PostWorkflowMetrics(ctx context.Context, in *PostWorkflowMetricsRequest, opts ...grpc.CallOption) (*MultiWorkflowMetricsResponse, error)
	// Get workflow evaluation data.
	GetWorkflowMetrics(ctx context.Context, in *GetWorkflowMetricsRequest, opts ...grpc.CallOption) (*SingleWorkflowMetricsResponse, error)
	// GetWorkflowNodeMetrics
	GetWorkflowNodeMetrics(ctx context.Context, in *GetWorkflowNodeMetricsRequest, opts ...grpc.CallOption) (*SingleWorkflowNodeMetricsResponse, error)
	// ListWorkflowMetrics
	ListWorkflowMetrics(ctx context.Context, in *ListWorkflowMetricsRequest, opts ...grpc.CallOption) (*MultiWorkflowMetricsResponse, error)
	// Delete one or more workflow metrics.
	DeleteWorkflowMetrics(ctx context.Context, in *DeleteWorkflowMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a specific key from an app.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error)
	// List all the keys.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// List keys by app_id
	ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// Search over the keys to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a key to an app.
	PostKeys(ctx context.Context, in *PostKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// Patch one or more keys.
	PatchKeys(ctx context.Context, in *PatchKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// API Keys in the public API -- request is itself Key authorized, and will tell
	// the user the scopes/access of the key/credential they're providing, as computed by
	// our authorizer:
	MyScopes(ctx context.Context, in *MyScopesRequest, opts ...grpc.CallOption) (*MultiScopeResponse, error)
	MyScopesUser(ctx context.Context, in *MyScopesUserRequest, opts ...grpc.CallOption) (*MultiScopeUserResponse, error)
	MyScopesRoot(ctx context.Context, in *MyScopesRootRequest, opts ...grpc.CallOption) (*MultiScopeRootResponse, error)
	// List all auth scopes available to me as a user.
	ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*MultiScopeDepsResponse, error)
	// Get a specific app from an app.
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error)
	// List all the apps.
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Search over the apps to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a app to an app.
	// This needs to load the default workflow to make a copy, validating all the models in it, and
	// then writing the new workflow back to this new app.
	PostApps(ctx context.Context, in *PostAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch one or more apps.
	PatchApps(ctx context.Context, in *PatchAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch apps ids.
	PatchAppsIds(ctx context.Context, in *PatchAppsIdsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch one app.
	PatchApp(ctx context.Context, in *PatchAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error)
	// Patch app owner.
	// The new app owner can only be an org, and the original owner must be a member of that org.
	PatchAppOwner(ctx context.Context, in *PatchAppOwnerRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Search over the applications to find one or more you're looking for.
	PostAppsSearches(ctx context.Context, in *PostAppsSearchesRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Get current user information
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error)
	// List users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*MultiUserResponse, error)
	// Update gdpr fields of current user.
	PostUserConsent(ctx context.Context, in *PostUserConsentRequest, opts ...grpc.CallOption) (*SingleUserResponse, error)
	// Patch information of current user or another user in the same organisation
	PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error)
	// Post user access request
	PostUserAccess(ctx context.Context, in *PostUserAccessRequest, opts ...grpc.CallOption) (*MultiUserAccessResponse, error)
	// Get user access request
	GetUserAccess(ctx context.Context, in *GetUserAccessRequest, opts ...grpc.CallOption) (*SingleUserAccessResponse, error)
	////////////////////////////////////////
	// Email
	////////////////////////////////////////
	// Add Email
	PostEmails(ctx context.Context, in *PostEmailsRequest, opts ...grpc.CallOption) (*MultipleEmailResponse, error)
	// List emails
	ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*MultipleEmailResponse, error)
	// For sending another verification email.
	PostResendVerifyEmail(ctx context.Context, in *PostResendVerifyRequest, opts ...grpc.CallOption) (*SingleResendVerifyResponse, error)
	// Deleting an email.
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Create primate email.
	PostPrimaryEmail(ctx context.Context, in *PostPrimaryEmailRequest, opts ...grpc.CallOption) (*SingleEmailResponse, error)
	// Validate new password in real-time for a user
	PostValidatePassword(ctx context.Context, in *PostValidatePasswordRequest, opts ...grpc.CallOption) (*SinglePasswordValidationResponse, error)
	// Get global policy
	ListGlobalPasswordPolicies(ctx context.Context, in *ListGlobalPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error)
	// Get a specific set of password policies attached to a user.
	ListPasswordPolicies(ctx context.Context, in *ListPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error)
	// Create a specific set of password policies attached to a user or an organization.
	PostPasswordPolicies(ctx context.Context, in *PostPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error)
	// Update a specific set of password policies attached to a user or an organization.
	PatchPasswordPolicies(ctx context.Context, in *PatchPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error)
	// DeletePasswordPolicies
	DeletePasswordPolicies(ctx context.Context, in *DeletePasswordPoliciesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get user feature config
	GetUserFeatureConfig(ctx context.Context, in *UserFeatureConfigRequest, opts ...grpc.CallOption) (*SingleUserFeatureConfigResponse, error)
	// Add organizations
	PostOrganizations(ctx context.Context, in *PostOrganizationsRequest, opts ...grpc.CallOption) (*MultiOrganizationResponse, error)
	// List the provided user's organizations with their roles
	ListUsersOrganizations(ctx context.Context, in *ListUsersOrganizationsRequest, opts ...grpc.CallOption) (*MultiUsersOrganizationsResponse, error)
	// List multiple organizations
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*MultiOrganizationResponse, error)
	// Get single organization
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*SingleOrganizationResponse, error)
	// Patch an organization
	PatchOrganization(ctx context.Context, in *PatchOrganizationRequest, opts ...grpc.CallOption) (*SingleOrganizationResponse, error)
	// Delete an organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List organization members
	ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*MultiOrganizationMemberResponse, error)
	// ListOrganizationAppMembers
	ListOrganizationAppMembers(ctx context.Context, in *ListOrganizationAppMembersRequest, opts ...grpc.CallOption) (*MultiOrganizationMemberResponse, error)
	// Add new member to organization
	PostOrganizationMember(ctx context.Context, in *PostOrganizationMemberRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PatchOrganizationMember
	PatchOrganizationMember(ctx context.Context, in *PatchOrganizationMembersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Remove a member from organization
	DeleteOrganizationMember(ctx context.Context, in *DeleteOrganizationMemberRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Organization invites
	PostOrganizationInvitations(ctx context.Context, in *PostOrganizationInvitationsRequest, opts ...grpc.CallOption) (*MultiOrganizationInvitationResponse, error)
	// PatchOrganizationInvitations
	PatchOrganizationInvitations(ctx context.Context, in *PatchOrganizationInvitationsRequest, opts ...grpc.CallOption) (*MultiOrganizationInvitationResponse, error)
	// ListOrganizationInvitations
	ListOrganizationInvitations(ctx context.Context, in *ListOrganizationInvitationsRequest, opts ...grpc.CallOption) (*MultiOrganizationInvitationResponse, error)
	// GetOrganizationInvitation
	GetOrganizationInvitation(ctx context.Context, in *GetOrganizationInvitationRequest, opts ...grpc.CallOption) (*SingleOrganizationInvitationResponse, error)
	// PostDeclineOrganizationInvitation
	PostDeclineOrganizationInvitation(ctx context.Context, in *PostDeclineOrganizationInvitationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostAcceptOrganizationInvitation
	PostAcceptOrganizationInvitation(ctx context.Context, in *PostAcceptOrganizationInvitationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// GetOrganizationInvitationPublic
	GetOrganizationInvitationPublic(ctx context.Context, in *GetOrganizationInvitationPublicRequest, opts ...grpc.CallOption) (*SingleOrganizationInvitationResponse, error)
	// Leave an organization
	DeleteRequestingUserFromOrganization(ctx context.Context, in *DeleteRequestingUserFromOrganizationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add IdentityProviders
	PostIdentityProviders(ctx context.Context, in *PostIdentityProvidersRequest, opts ...grpc.CallOption) (*MultiIdentityProviderResponse, error)
	// List multiple IdentityProviders
	ListIdentityProviders(ctx context.Context, in *ListIdentityProvidersRequest, opts ...grpc.CallOption) (*MultiIdentityProviderResponse, error)
	// Get single IdentityProvider
	GetIdentityProvider(ctx context.Context, in *GetIdentityProviderRequest, opts ...grpc.CallOption) (*SingleIdentityProviderResponse, error)
	// Patch multiple IdentityProviders
	PatchIdentityProviders(ctx context.Context, in *PatchIdentityProvidersRequest, opts ...grpc.CallOption) (*MultiIdentityProviderResponse, error)
	// Delete multiple IdentityProviders
	DeleteIdentityProviders(ctx context.Context, in *DeleteIdentityProvidersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add teams
	PostTeams(ctx context.Context, in *PostTeamsRequest, opts ...grpc.CallOption) (*MultiTeamResponse, error)
	// List multiple teams
	ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*MultiTeamResponse, error)
	// Get single team
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*SingleTeamResponse, error)
	// Patch multiple teams
	PatchTeams(ctx context.Context, in *PatchTeamsRequest, opts ...grpc.CallOption) (*MultiTeamResponse, error)
	// Delete multiple teams
	DeleteTeams(ctx context.Context, in *DeleteTeamsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add users to a team
	PostTeamUsers(ctx context.Context, in *PostTeamUsersRequest, opts ...grpc.CallOption) (*MultiTeamUserResponse, error)
	// List team users
	ListTeamUsers(ctx context.Context, in *ListTeamUsersRequest, opts ...grpc.CallOption) (*MultiTeamUserResponse, error)
	// Delete users from a team
	DeleteTeamUsers(ctx context.Context, in *DeleteTeamUsersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add applications to team
	PostTeamApps(ctx context.Context, in *PostTeamAppsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List team applications
	ListTeamApps(ctx context.Context, in *ListTeamAppsRequest, opts ...grpc.CallOption) (*MultiTeamAppsResponse, error)
	// Remove applications from team
	DeleteTeamApps(ctx context.Context, in *DeleteTeamAppsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List multiple roles
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*MultiRoleResponse, error)
	// Get single role
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*SingleRoleResponse, error)
	// Get a saved legacy search.
	GetSearch(ctx context.Context, in *GetSearchRequest, opts ...grpc.CallOption) (*SingleSearchResponse, error)
	// List all saved legacy searches.
	ListSearches(ctx context.Context, in *ListSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Patch saved legacy searches by ids.
	PatchSearches(ctx context.Context, in *PatchSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Deprecated: Do not use.
	// Execute a new search and optionally save it.
	//
	// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
	PostSearches(ctx context.Context, in *PostSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a previously saved legacy search.
	PostSearchesByID(ctx context.Context, in *PostSearchesByIDRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Evaluate the results of two search requests
	PostAnnotationSearchMetrics(ctx context.Context, in *PostAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// Get the evaluation results between two search requests
	GetAnnotationSearchMetrics(ctx context.Context, in *GetAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// List the evaluation results between two search requests
	ListAnnotationSearchMetrics(ctx context.Context, in *ListAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// DeleteAnnotationSearchMetrics
	DeleteAnnotationSearchMetrics(ctx context.Context, in *DeleteAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete a saved search.
	DeleteSearch(ctx context.Context, in *DeleteSearchRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Execute an attribute search.
	PostAttributeSearch(ctx context.Context, in *PostAttributeSearchRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// List all the annotation filters.
	ListAnnotationFilters(ctx context.Context, in *ListAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Get a specific annotation filter.
	GetAnnotationFilter(ctx context.Context, in *GetAnnotationFilterRequest, opts ...grpc.CallOption) (*SingleAnnotationFilterResponse, error)
	// Add annotation filters.
	PostAnnotationFilters(ctx context.Context, in *PostAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Patch one or more annotation filters.
	PatchAnnotationFilters(ctx context.Context, in *PatchAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Delete one or more annotation filters in a single request.
	DeleteAnnotationFilters(ctx context.Context, in *DeleteAnnotationFiltersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a list of clusters in an app
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*MultiClusterResponse, error)
	// List all the annotations for a given cluster.
	ListAnnotationsForCluster(ctx context.Context, in *ListAnnotationsForClusterRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// List all the annotations for a given cluser.
	PostClustersSearches(ctx context.Context, in *PostClustersSearchesRequest, opts ...grpc.CallOption) (*MultiClusterResponse, error)
	// Verify email
	PostVerifyEmail(ctx context.Context, in *PostVerifyEmailRequest, opts ...grpc.CallOption) (*SingleVerifyEmailResponse, error)
	// Request for password reset email
	PostRequestResetPassword(ctx context.Context, in *RequestResetPasswordRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Complete reset password
	PostCompleteResetPassword(ctx context.Context, in *CompleteResetPasswordRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Login with user/pass
	PostLogin(ctx context.Context, in *PostLoginRequest, opts ...grpc.CallOption) (*SingleLoginResponse, error)
	// Signup with account.
	PostSignup(ctx context.Context, in *PostSignupRequest, opts ...grpc.CallOption) (*SingleLoginResponse, error)
	// Logout use
	PostLogout(ctx context.Context, in *PostLogoutRequest, opts ...grpc.CallOption) (*SingleLogoutResponse, error)
	// List available authentication methods, e.g.
	// * standard auth method - login using user & password
	// * SAML auth methods - SSO using SAML Identity Providers like Okta, Github, Google GSuite, LinkedIn, etc.
	ListAuthMethods(ctx context.Context, in *ListAuthMethodsRequest, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error)
	// ListOrgAuthMethods
	ListOrgAuthMethods(ctx context.Context, in *ListAuthMethodsRequest, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error)
	// ListOrgAuthMethods
	PostIdLoginFinalizer(ctx context.Context, in *PostIdLoginFinalizerRequest, opts ...grpc.CallOption) (*PostIdLoginFinalizerResponse, error)
	// PostLinkIdpUser
	PostLinkIdpUser(ctx context.Context, in *PostLinkIdpUserRequest, opts ...grpc.CallOption) (*PostLinkIdpUserResponse, error)
	// GetLoginInfo
	GetLoginInfo(ctx context.Context, in *GetLoginInfoRequest, opts ...grpc.CallOption) (*GetLoginInfoResponse, error)
	// List available 2FA methods in current environment, e.g.
	// * TOTP auth method - login layer using time synced  codes
	ListAuth2FAMethods(ctx context.Context, in *List2FAMethodsRequest, opts ...grpc.CallOption) (*List2FAMethodsResponse, error)
	// Enable Clarifai TOTP 2FA
	PostAuth2FATotpRegisterEnable(ctx context.Context, in *PostAuth2FATotpRegisterEnableRequest, opts ...grpc.CallOption) (*PostAuth2FATotpRegisterEnableResponse, error)
	// Verify Clarifai TOTP 2FA activation
	PostAuth2FATotpRegisterVerify(ctx context.Context, in *PostAuth2FATotpRegisterVerifyRequest, opts ...grpc.CallOption) (*PostAuth2FATotpRegisterVerifyResponse, error)
	// Disable Clarifai TOTP 2FA
	PostAuth2FATotpDisable(ctx context.Context, in *PostAuth2FATotpDisableRequest, opts ...grpc.CallOption) (*PostAuth2FATotpDisableResponse, error)
	// Login with Clarifai TOTP 2FA activation
	PostAuth2FATotpLogin(ctx context.Context, in *PostAuth2FATotpLoginRequest, opts ...grpc.CallOption) (*SingleLoginResponse, error)
	// Recover users Clarifai TOTP 2FA activation through sending an email confirmation.
	PostAuth2FATotpRecover(ctx context.Context, in *PostAuth2FATotpRecoverRequest, opts ...grpc.CallOption) (*PostAuth2FATotpRecoverResponse, error)
	// Confirm the recovery of users Clarifai TOTP 2FA. Will be called by user from email link (via portal).
	GetAuth2FATotpRecoverConfirm(ctx context.Context, in *GetAuth2FATotpRecoverConfirmRequest, opts ...grpc.CallOption) (*GetAuth2FATotpRecoverConfirmResponse, error)
	// List the subscriptions.
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*SingleSubscriptionResponse, error)
	// Add a new subscription.
	PostSubscription(ctx context.Context, in *PostSubscriptionRequest, opts ...grpc.CallOption) (*SingleSubscriptionResponse, error)
	// List all credit cards.
	ListCreditCards(ctx context.Context, in *ListCreditCardsRequest, opts ...grpc.CallOption) (*MultipleCreditCardResponse, error)
	// Add a new credit card.
	PostCreditCard(ctx context.Context, in *PostCreditCardRequest, opts ...grpc.CallOption) (*SingleCreditCardResponse, error)
	// Delete a credit card.
	DeleteCreditCard(ctx context.Context, in *DeleteCreditCardRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Update a credit card.
	PatchCreditCards(ctx context.Context, in *PatchCreditCardsRequest, opts ...grpc.CallOption) (*MultipleCreditCardResponse, error)
	// Get the shipping address.
	GetShippingAddress(ctx context.Context, in *GetShippingAddressRequest, opts ...grpc.CallOption) (*SingleShippingAddressResponse, error)
	// Update shipping address.
	PutShippingAddress(ctx context.Context, in *PutShippingAddressRequest, opts ...grpc.CallOption) (*SingleShippingAddressResponse, error)
	// ListPlans
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*MultiPlanResponse, error)
	// List all status codes.
	ListStatusCodes(ctx context.Context, in *ListStatusCodesRequest, opts ...grpc.CallOption) (*MultiStatusCodeResponse, error)
	// Get more details for a status code.
	GetStatusCode(ctx context.Context, in *GetStatusCodeRequest, opts ...grpc.CallOption) (*SingleStatusCodeResponse, error)
	// Health check endpoint
	GetHealthz(ctx context.Context, in *GetHealthzRequest, opts ...grpc.CallOption) (*GetHealthzResponse, error)
	// List all billing  cycles - old billing
	ListUserBillingCycles(ctx context.Context, in *ListUserBillingCyclesRequest, opts ...grpc.CallOption) (*ListUserBillingCyclesResponse, error)
	// List user usage.cycles.
	ListUserCycles(ctx context.Context, in *ListUserCyclesRequest, opts ...grpc.CallOption) (*ListUserCyclesResponse, error)
	// Gets the billing cycle start and end date as well as invoice items.
	GetBillingUsage(ctx context.Context, in *GetBillingUsageRequest, opts ...grpc.CallOption) (*GetBillingUsageResponse, error)
	// Add historical usage. - Billing 1
	PostHistoricalUsage(ctx context.Context, in *PostHistoricalUsageRequest, opts ...grpc.CallOption) (*PostHistoricalUsageResponse, error)
	// Get historical usage. - Billing 2
	GetHistoricalUsage(ctx context.Context, in *GetHistoricalUsageRequest, opts ...grpc.CallOption) (*GetHistoricalUsageResponse, error)
	// Get a list of valid usage intervals
	ListUsageIntervals(ctx context.Context, in *ListUsageIntervalsRequest, opts ...grpc.CallOption) (*ListUsageIntervalsResponse, error)
	// Get realtime usage.
	GetRealtimeUsage(ctx context.Context, in *GetRealtimeUsageRequest, opts ...grpc.CallOption) (*GetRealtimeUsageResponse, error)
	// Post usage to platform. Only called by on prem now.
	PostUsage(ctx context.Context, in *PostUsageRequest, opts ...grpc.CallOption) (*PostUsageResponse, error)
	// owner list users who the app is shared with
	ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// add collaborators to an app.
	PostCollaborators(ctx context.Context, in *PostCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// Patch existing collaborators.
	PatchCollaborators(ctx context.Context, in *PatchCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// Delete existing collaborators.
	DeleteCollaborators(ctx context.Context, in *DeleteCollaboratorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Collaboration includes the app user are invitied to work on
	ListCollaborations(ctx context.Context, in *ListCollaborationsRequest, opts ...grpc.CallOption) (*MultiCollaborationsResponse, error)
	// Get the license with crypto security.
	FetchLicense(ctx context.Context, in *FetchLicenseRequest, opts ...grpc.CallOption) (*FetchLicenseResponse, error)
	// List all licenses.
	ListLicenses(ctx context.Context, in *ListLicensesRequest, opts ...grpc.CallOption) (*MultipleLicensesResponse, error)
	// Get a license
	GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*SingleLicenseResponse, error)
	// Check that a license is still valid.
	ValidateLicense(ctx context.Context, in *ValidateLicenseRequest, opts ...grpc.CallOption) (*ValidateLicenseResponse, error)
	// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
	// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
	PostAppDuplications(ctx context.Context, in *PostAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error)
	// list all the app duplications user triggers
	ListAppDuplications(ctx context.Context, in *ListAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error)
	// get the app duplication status
	GetAppDuplication(ctx context.Context, in *GetAppDuplicationRequest, opts ...grpc.CallOption) (*SingleAppDuplicationResponse, error)
	// Add tasks to an app.
	PostTasks(ctx context.Context, in *PostTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Task annotation count
	GetTaskAnnotationCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error)
	// Task Input count
	GetTaskInputCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error)
	// Get a specific task from an app.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*SingleTaskResponse, error)
	// List tasks from an app.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Patch one or more tasks.
	PatchTasks(ctx context.Context, in *PatchTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Delete multiple tasks in one request.
	DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Rollup annotation count for task.
	PatchAnnotationCountsRollup(ctx context.Context, in *PatchAnnotationCountsRollupRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add Label orders.
	PostLabelOrders(ctx context.Context, in *PostLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Get a label order.
	GetLabelOrder(ctx context.Context, in *GetLabelOrderRequest, opts ...grpc.CallOption) (*SingleLabelOrderResponse, error)
	// List label orders.
	ListLabelOrders(ctx context.Context, in *ListLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Patch one or more label orders.
	PatchLabelOrders(ctx context.Context, in *PatchLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Delete multiple label orders in one request.
	// this do not change task status
	DeleteLabelOrders(ctx context.Context, in *DeleteLabelOrdersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a list of Collectors to an app.
	// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
	// endpoint.
	// Those current scopes are listed here as a hard requirement.
	// They are needed when adding the collectors just so we now that you have permission with
	// that key at least to do the writing to this app with POST /inputs.
	PostCollectors(ctx context.Context, in *PostCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Get a specific collector from an app.
	GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*SingleCollectorResponse, error)
	// List all the collectors.
	ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Patch one or more collectors.
	PatchCollectors(ctx context.Context, in *PatchCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Delete multiple collectors in one request.
	// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
	DeleteCollectors(ctx context.Context, in *DeleteCollectorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostStatValues
	PostStatValues(ctx context.Context, in *PostStatValuesRequest, opts ...grpc.CallOption) (*MultiStatValueResponse, error)
	// PostStatValuesAggregate
	PostStatValuesAggregate(ctx context.Context, in *PostStatValuesAggregateRequest, opts ...grpc.CallOption) (*MultiStatValueAggregateResponse, error)
	// Add a new analytics entry into our database
	PostAnalytics(ctx context.Context, in *PostAnalyticsRequest, opts ...grpc.CallOption) (*PostAnalyticsResponse, error)
	// Add a new sdk_billing entry into our database
	PostSDKBilling(ctx context.Context, in *PostSDKBillingRequest, opts ...grpc.CallOption) (*PostSDKBillingResponse, error)
	// Find annotations duplicates based on an specified attribute of different annotations
	PostFindDuplicateAnnotationsJobs(ctx context.Context, in *PostFindDuplicateAnnotationsJobsRequest, opts ...grpc.CallOption) (*MultiFindDuplicateAnnotationsJobResponse, error)
	// Get annotations find duplicates jobs results by id
	GetFindDuplicateAnnotationsJob(ctx context.Context, in *GetFindDuplicateAnnotationsJobRequest, opts ...grpc.CallOption) (*SingleFindDuplicateAnnotationsJobResponse, error)
	// List all the annotations find duplicates jobs results
	ListFindDuplicateAnnotationsJobs(ctx context.Context, in *ListFindDuplicateAnnotationsJobsRequest, opts ...grpc.CallOption) (*MultiFindDuplicateAnnotationsJobResponse, error)
	// DeleteFindDuplicateAnnotationsJobs
	DeleteFindDuplicateAnnotationsJobs(ctx context.Context, in *DeleteFindDuplicateAnnotationsJobsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Increase the view metric for a detail view
	PostTrendingMetricsView(ctx context.Context, in *PostTrendingMetricsViewRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List the view metrics for a detail view
	ListTrendingMetricsViews(ctx context.Context, in *ListTrendingMetricsViewsRequest, opts ...grpc.CallOption) (*MultiTrendingMetricsViewResponse, error)
	// Validates the ids (app and user supported), returns validation errors and recommendations
	PostIdValidation(ctx context.Context, in *PostIdValidationRequest, opts ...grpc.CallOption) (*MultiIdValidationResponse, error)
	// List all the available tags for specified object_type grouped by category
	ListTagCategories(ctx context.Context, in *ListTagCategoriesRequest, opts ...grpc.CallOption) (*MultiTagCategoryResponse, error)
	// List users web notifications
	ListWebNotifications(ctx context.Context, in *ListWebNotificationsRequest, opts ...grpc.CallOption) (*MultiWebNotificationResponse, error)
	// Get a web notification
	GetWebNotification(ctx context.Context, in *GetWebNotificationRequest, opts ...grpc.CallOption) (*SingleWebNotificationResponse, error)
	// Update users web notifications
	PatchWebNotifications(ctx context.Context, in *PatchWebNotificationsRequest, opts ...grpc.CallOption) (*MultiWebNotificationResponse, error)
	// Delete users web notifications
	DeleteWebNotifications(ctx context.Context, in *DeleteWebNotificationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a specific module from an app.
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*SingleModuleResponse, error)
	// List all the modules in community, by user or by app.
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Add a modules to an app.
	PostModules(ctx context.Context, in *PostModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Patch one or more modules.
	PatchModules(ctx context.Context, in *PatchModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Delete multiple modules in one request.
	DeleteModules(ctx context.Context, in *DeleteModulesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a specific module version for a module.
	GetModuleVersion(ctx context.Context, in *GetModuleVersionRequest, opts ...grpc.CallOption) (*SingleModuleVersionResponse, error)
	// List all the modules versions for a given module.
	ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Create a new module version to trigger training of the module.
	PostModuleVersions(ctx context.Context, in *PostModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Delete a multiple module version.
	DeleteModuleVersions(ctx context.Context, in *DeleteModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get installed modules vesrions for an app.
	GetInstalledModuleVersion(ctx context.Context, in *GetInstalledModuleVersionRequest, opts ...grpc.CallOption) (*SingleInstalledModuleVersionResponse, error)
	// List installed modules vesrions for an app.
	ListInstalledModuleVersions(ctx context.Context, in *ListInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error)
	// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
	PostInstalledModuleVersions(ctx context.Context, in *PostInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error)
	// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
	// in the url.
	// This cleaned up any associated caller keys so needs the Keys_Delete scope.
	DeleteInstalledModuleVersions(ctx context.Context, in *DeleteInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Assign a key that the caller owns to be used when accessing this installed module version
	// If this endpoint is called with a different key then it overwrites what is there.
	PostInstalledModuleVersionsKey(ctx context.Context, in *PostInstalledModuleVersionsKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error)
	// Perform bulk operations on a list of inputs based on input source.
	// Operation include add, update, delete of concepts, metadata and geo data.
	// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
	PostBulkOperations(ctx context.Context, in *PostBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// List all the bulk operations
	ListBulkOperations(ctx context.Context, in *ListBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// Get the bulk operation details by ID
	GetBulkOperation(ctx context.Context, in *GetBulkOperationRequest, opts ...grpc.CallOption) (*SingleBulkOperationsResponse, error)
	// Cancel one or more bulk operations
	CancelBulkOperations(ctx context.Context, in *CancelBulkOperationRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// delete one or more terminated bulk operations
	DeleteBulkOperations(ctx context.Context, in *DeleteBulkOperationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a specific job.
	GetDatasetInputsSearchAddJob(ctx context.Context, in *GetDatasetInputsSearchAddJobRequest, opts ...grpc.CallOption) (*SingleDatasetInputsSearchAddJobResponse, error)
	// List next non-labeled and unassigned inputs from task's dataset
	ListNextTaskAssignments(ctx context.Context, in *ListNextTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
	PutTaskAssignments(ctx context.Context, in *PutTaskAssignmentsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostWaitlistEmails adds new e-mail addresses to a feature waiting list.
	PostWaitlistEmails(ctx context.Context, in *PostWaitlistEmailsRequest, opts ...grpc.CallOption) (*MultiWaitlistEmailResponse, error)
	// GetSampledPredictResults get sampled prediction metrics by model id
	GetSampledPredictMetrics(ctx context.Context, in *GetSampledPredictMetricsRequest, opts ...grpc.CallOption) (*MultiSampledPredictMetricsResponse, error)
	// Create a job to add inputs from a cloud storage to an app on the clarifai platform
	// This is an Asynchronous process. Use ListInputsAddJobs or GetInputsJob to check the status.
	PostInputsAddJobs(ctx context.Context, in *PostInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// List all the inputs add jobs
	ListInputsAddJobs(ctx context.Context, in *ListInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// Get the input add job details by ID
	GetInputsAddJob(ctx context.Context, in *GetInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error)
	// cancel the input add job by ID
	CancelInputsAddJob(ctx context.Context, in *CancelInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error)
	PostUploads(ctx context.Context, in *PostUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error)
	PutUploadContentParts(ctx context.Context, in *PutUploadContentPartsRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error)
	GetUpload(ctx context.Context, in *GetUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error)
	ListUploads(ctx context.Context, in *ListUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error)
	DeleteUploads(ctx context.Context, in *DeleteUploadsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
}

type v2Client struct {
	cc grpc.ClientConnInterface
}

func NewV2Client(cc grpc.ClientConnInterface) V2Client {
	return &v2Client{cc}
}

func (c *v2Client) Echo(ctx context.Context, in *TestMessage, opts ...grpc.CallOption) (*TestMessage, error) {
	out := new(TestMessage)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConceptRelations(ctx context.Context, in *ListConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error) {
	out := new(MultiConceptRelationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConceptRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptRelations(ctx context.Context, in *PostConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error) {
	out := new(MultiConceptRelationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteConceptRelations(ctx context.Context, in *DeleteConceptRelationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteConceptRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConceptCounts(ctx context.Context, in *GetConceptCountsRequest, opts ...grpc.CallOption) (*MultiConceptCountResponse, error) {
	out := new(MultiConceptCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetConceptCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*SingleConceptResponse, error) {
	out := new(SingleConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetConcept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelConcepts(ctx context.Context, in *ListModelConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptsSearches(ctx context.Context, in *PostConceptsSearchesRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConcepts(ctx context.Context, in *PostConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchConcepts(ctx context.Context, in *PatchConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetVocab(ctx context.Context, in *GetVocabRequest, opts ...grpc.CallOption) (*SingleVocabResponse, error) {
	out := new(SingleVocabResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListVocabs(ctx context.Context, in *ListVocabsRequest, opts ...grpc.CallOption) (*MultiVocabResponse, error) {
	out := new(MultiVocabResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListVocabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostVocabs(ctx context.Context, in *PostVocabsRequest, opts ...grpc.CallOption) (*MultiVocabResponse, error) {
	out := new(MultiVocabResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostVocabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchVocabs(ctx context.Context, in *PatchVocabsRequest, opts ...grpc.CallOption) (*MultiVocabResponse, error) {
	out := new(MultiVocabResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchVocabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteVocab(ctx context.Context, in *DeleteVocabRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteVocab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteVocabs(ctx context.Context, in *DeleteVocabsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteVocabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListVocabConcepts(ctx context.Context, in *ListVocabConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListVocabConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostVocabConcepts(ctx context.Context, in *PostVocabConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostVocabConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteVocabConcept(ctx context.Context, in *DeleteVocabConceptRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteVocabConcept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteVocabConcepts(ctx context.Context, in *DeleteVocabConceptsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteVocabConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConceptLanguage(ctx context.Context, in *GetConceptLanguageRequest, opts ...grpc.CallOption) (*SingleConceptLanguageResponse, error) {
	out := new(SingleConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetConceptLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConceptLanguages(ctx context.Context, in *ListConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConceptLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptLanguages(ctx context.Context, in *PostConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchConceptLanguages(ctx context.Context, in *PatchConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchConceptLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConceptReferences(ctx context.Context, in *ListConceptReferencesRequest, opts ...grpc.CallOption) (*MultiConceptReferenceResponse, error) {
	out := new(MultiConceptReferenceResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConceptReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListKnowledgeGraphs(ctx context.Context, in *ListKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error) {
	out := new(MultiKnowledgeGraphResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListKnowledgeGraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostKnowledgeGraphs(ctx context.Context, in *PostKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error) {
	out := new(MultiKnowledgeGraphResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostKnowledgeGraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptMappingJobs(ctx context.Context, in *PostConceptMappingJobsRequest, opts ...grpc.CallOption) (*MultiConceptMappingJobResponse, error) {
	out := new(MultiConceptMappingJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptMappingJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConceptMappings(ctx context.Context, in *ListConceptMappingsRequest, opts ...grpc.CallOption) (*MultiConceptMappingResponse, error) {
	out := new(MultiConceptMappingResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConceptMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptMappings(ctx context.Context, in *PostConceptMappingsRequest, opts ...grpc.CallOption) (*MultiConceptMappingResponse, error) {
	out := new(MultiConceptMappingResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*SingleAnnotationResponse, error) {
	out := new(SingleAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotations(ctx context.Context, in *PostAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotations(ctx context.Context, in *PatchAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationsStatus(ctx context.Context, in *PatchAnnotationsStatusRequest, opts ...grpc.CallOption) (*PatchAnnotationsStatusResponse, error) {
	out := new(PatchAnnotationsStatusResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotationsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotations(ctx context.Context, in *DeleteAnnotationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationsSearches(ctx context.Context, in *PatchAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotationsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationsSearches(ctx context.Context, in *PostAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotationsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputCount(ctx context.Context, in *GetInputCountRequest, opts ...grpc.CallOption) (*SingleInputCountResponse, error) {
	out := new(SingleInputCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) StreamInputs(ctx context.Context, in *StreamInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/StreamInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputSamples(ctx context.Context, in *GetInputSamplesRequest, opts ...grpc.CallOption) (*MultiInputAnnotationResponse, error) {
	out := new(MultiInputAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*SingleInputResponse, error) {
	out := new(SingleInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputs(ctx context.Context, in *PostInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsFile(ctx context.Context, in *PostInputsFileRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsNiFi(ctx context.Context, in *PostInputsNiFiRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsNiFi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsDocument(ctx context.Context, in *PostInputsDocumentRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchInputs(ctx context.Context, in *PatchInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInput(ctx context.Context, in *DeleteInputRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInputs(ctx context.Context, in *DeleteInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchInputsSearches(ctx context.Context, in *PatchInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchInputsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsSearches(ctx context.Context, in *PostInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (*MultiOutputResponse, error) {
	out := new(MultiOutputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*SingleDatasetResponse, error) {
	out := new(SingleDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasets(ctx context.Context, in *PostDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDatasets(ctx context.Context, in *PatchDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDatasetIds(ctx context.Context, in *PatchDatasetIdsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchDatasetIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasets(ctx context.Context, in *DeleteDatasetsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetInputs(ctx context.Context, in *ListDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error) {
	out := new(MultiDatasetInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasetInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDatasetInput(ctx context.Context, in *GetDatasetInputRequest, opts ...grpc.CallOption) (*SingleDatasetInputResponse, error) {
	out := new(SingleDatasetInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetDatasetInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasetInputs(ctx context.Context, in *PostDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error) {
	out := new(MultiDatasetInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostDatasetInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasetInputs(ctx context.Context, in *DeleteDatasetInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteDatasetInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetVersions(ctx context.Context, in *ListDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDatasetVersion(ctx context.Context, in *GetDatasetVersionRequest, opts ...grpc.CallOption) (*SingleDatasetVersionResponse, error) {
	out := new(SingleDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetVersionMetricsGroups(ctx context.Context, in *ListDatasetVersionMetricsGroupsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionMetricsGroupResponse, error) {
	out := new(MultiDatasetVersionMetricsGroupResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasetVersionMetricsGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasetVersions(ctx context.Context, in *PostDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDatasetVersions(ctx context.Context, in *PatchDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutDatasetVersionExports(ctx context.Context, in *PutDatasetVersionExportsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionExportResponse, error) {
	out := new(MultiDatasetVersionExportResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PutDatasetVersionExports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelType(ctx context.Context, in *GetModelTypeRequest, opts ...grpc.CallOption) (*SingleModelTypeResponse, error) {
	out := new(SingleModelTypeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOpenSourceLicenses(ctx context.Context, in *ListOpenSourceLicensesRequest, opts ...grpc.CallOption) (*ListOpenSourceLicensesResponse, error) {
	out := new(ListOpenSourceLicensesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListOpenSourceLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelTypes(ctx context.Context, in *ListModelTypesRequest, opts ...grpc.CallOption) (*MultiModelTypeResponse, error) {
	out := new(MultiModelTypeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelOutputInfo(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelOutputInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelsSearches(ctx context.Context, in *PostModelsSearchesRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModels(ctx context.Context, in *PostModelsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModels(ctx context.Context, in *PatchModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelIds(ctx context.Context, in *PatchModelIdsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelCheckConsents(ctx context.Context, in *PatchModelCheckConsentsRequest, opts ...grpc.CallOption) (*MultiModelCheckConsentResponse, error) {
	out := new(MultiModelCheckConsentResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelCheckConsents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelToolkits(ctx context.Context, in *PatchModelToolkitsRequest, opts ...grpc.CallOption) (*MultiModelToolkitResponse, error) {
	out := new(MultiModelToolkitResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelToolkits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelUseCases(ctx context.Context, in *PatchModelUseCasesRequest, opts ...grpc.CallOption) (*MultiModelUseCaseResponse, error) {
	out := new(MultiModelUseCaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelUseCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelLanguages(ctx context.Context, in *PatchModelLanguagesRequest, opts ...grpc.CallOption) (*MultiModelLanguageResponse, error) {
	out := new(MultiModelLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelInputs(ctx context.Context, in *ListModelInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersions(ctx context.Context, in *ListModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error) {
	out := new(MultiModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionsUnPublish(ctx context.Context, in *PostWorkflowVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowVersionsUnPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionsPublish(ctx context.Context, in *PostWorkflowVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowVersionsPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsPublish(ctx context.Context, in *PostModelVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionsPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsUnPublish(ctx context.Context, in *PostModelVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionsUnPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersions(ctx context.Context, in *PostModelVersionsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelVersions(ctx context.Context, in *PatchModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error) {
	out := new(MultiModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionMetrics(ctx context.Context, in *GetModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelVersionMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionMetrics(ctx context.Context, in *PostModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelReferences(ctx context.Context, in *ListModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error) {
	out := new(MultiModelReferenceResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelReferences(ctx context.Context, in *PostModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error) {
	out := new(MultiModelReferenceResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModelReferences(ctx context.Context, in *DeleteModelReferencesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModelReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionInputExample(ctx context.Context, in *GetModelVersionInputExampleRequest, opts ...grpc.CallOption) (*SingleModelVersionInputExampleResponse, error) {
	out := new(SingleModelVersionInputExampleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelVersionInputExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersionInputExamples(ctx context.Context, in *ListModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error) {
	out := new(MultiModelVersionInputExampleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelVersionInputExamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionInputExamples(ctx context.Context, in *PostModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error) {
	out := new(MultiModelVersionInputExampleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionInputExamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModelVersionInputExamples(ctx context.Context, in *DeleteModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModelVersionInputExamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelStars(ctx context.Context, in *PostModelStarsRequest, opts ...grpc.CallOption) (*MultiModelStarResponse, error) {
	out := new(MultiModelStarResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModelStars(ctx context.Context, in *DeleteModelStarsRequest, opts ...grpc.CallOption) (*DeleteModelStarsResponse, error) {
	out := new(DeleteModelStarsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModelStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostUserStars(ctx context.Context, in *PostUserStarsRequest, opts ...grpc.CallOption) (*MultiUserStarResponse, error) {
	out := new(MultiUserStarResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostUserStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteUserStars(ctx context.Context, in *DeleteUserStarsRequest, opts ...grpc.CallOption) (*DeleteUserStarsResponse, error) {
	out := new(DeleteUserStarsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteUserStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowStars(ctx context.Context, in *PostWorkflowStarsRequest, opts ...grpc.CallOption) (*MultiWorkflowStarResponse, error) {
	out := new(MultiWorkflowStarResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflowStars(ctx context.Context, in *DeleteWorkflowStarsRequest, opts ...grpc.CallOption) (*DeleteWorkflowStarsResponse, error) {
	out := new(DeleteWorkflowStarsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflowStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAppStars(ctx context.Context, in *PostAppStarsRequest, opts ...grpc.CallOption) (*MultiAppStarResponse, error) {
	out := new(MultiAppStarResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAppStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAppStars(ctx context.Context, in *DeleteAppStarsRequest, opts ...grpc.CallOption) (*DeleteAppStarsResponse, error) {
	out := new(DeleteAppStarsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAppStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*SingleWorkflowResponse, error) {
	out := new(SingleWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListPublicWorkflows(ctx context.Context, in *ListPublicWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListPublicWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflows(ctx context.Context, in *PostWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflows(ctx context.Context, in *PatchWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflowIds(ctx context.Context, in *PatchWorkflowIdsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchWorkflowIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflows(ctx context.Context, in *DeleteWorkflowsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowResults(ctx context.Context, in *PostWorkflowResultsRequest, opts ...grpc.CallOption) (*PostWorkflowResultsResponse, error) {
	out := new(PostWorkflowResultsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowResultsSimilarity(ctx context.Context, in *PostWorkflowResultsSimilarityRequest, opts ...grpc.CallOption) (*PostWorkflowResultsSimilarityResponse, error) {
	out := new(PostWorkflowResultsSimilarityResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowResultsSimilarity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error) {
	out := new(MultiWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListWorkflowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflowVersion(ctx context.Context, in *GetWorkflowVersionRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionResponse, error) {
	out := new(SingleWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetWorkflowVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflowVersions(ctx context.Context, in *DeleteWorkflowVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflowVersions(ctx context.Context, in *PatchWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error) {
	out := new(MultiWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchWorkflowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowMetrics(ctx context.Context, in *PostWorkflowMetricsRequest, opts ...grpc.CallOption) (*MultiWorkflowMetricsResponse, error) {
	out := new(MultiWorkflowMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflowMetrics(ctx context.Context, in *GetWorkflowMetricsRequest, opts ...grpc.CallOption) (*SingleWorkflowMetricsResponse, error) {
	out := new(SingleWorkflowMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetWorkflowMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflowNodeMetrics(ctx context.Context, in *GetWorkflowNodeMetricsRequest, opts ...grpc.CallOption) (*SingleWorkflowNodeMetricsResponse, error) {
	out := new(SingleWorkflowNodeMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetWorkflowNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflowMetrics(ctx context.Context, in *ListWorkflowMetricsRequest, opts ...grpc.CallOption) (*MultiWorkflowMetricsResponse, error) {
	out := new(MultiWorkflowMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListWorkflowMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflowMetrics(ctx context.Context, in *DeleteWorkflowMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflowMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error) {
	out := new(SingleKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAppKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostKeys(ctx context.Context, in *PostKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchKeys(ctx context.Context, in *PatchKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopes(ctx context.Context, in *MyScopesRequest, opts ...grpc.CallOption) (*MultiScopeResponse, error) {
	out := new(MultiScopeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/MyScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopesUser(ctx context.Context, in *MyScopesUserRequest, opts ...grpc.CallOption) (*MultiScopeUserResponse, error) {
	out := new(MultiScopeUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/MyScopesUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopesRoot(ctx context.Context, in *MyScopesRootRequest, opts ...grpc.CallOption) (*MultiScopeRootResponse, error) {
	out := new(MultiScopeRootResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/MyScopesRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*MultiScopeDepsResponse, error) {
	out := new(MultiScopeDepsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error) {
	out := new(SingleAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostApps(ctx context.Context, in *PostAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchApps(ctx context.Context, in *PatchAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAppsIds(ctx context.Context, in *PatchAppsIdsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAppsIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchApp(ctx context.Context, in *PatchAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error) {
	out := new(SingleAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAppOwner(ctx context.Context, in *PatchAppOwnerRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAppOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAppsSearches(ctx context.Context, in *PostAppsSearchesRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAppsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error) {
	out := new(SingleUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*MultiUserResponse, error) {
	out := new(MultiUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostUserConsent(ctx context.Context, in *PostUserConsentRequest, opts ...grpc.CallOption) (*SingleUserResponse, error) {
	out := new(SingleUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostUserConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error) {
	out := new(SingleUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostUserAccess(ctx context.Context, in *PostUserAccessRequest, opts ...grpc.CallOption) (*MultiUserAccessResponse, error) {
	out := new(MultiUserAccessResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostUserAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUserAccess(ctx context.Context, in *GetUserAccessRequest, opts ...grpc.CallOption) (*SingleUserAccessResponse, error) {
	out := new(SingleUserAccessResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetUserAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostEmails(ctx context.Context, in *PostEmailsRequest, opts ...grpc.CallOption) (*MultipleEmailResponse, error) {
	out := new(MultipleEmailResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*MultipleEmailResponse, error) {
	out := new(MultipleEmailResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostResendVerifyEmail(ctx context.Context, in *PostResendVerifyRequest, opts ...grpc.CallOption) (*SingleResendVerifyResponse, error) {
	out := new(SingleResendVerifyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostResendVerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostPrimaryEmail(ctx context.Context, in *PostPrimaryEmailRequest, opts ...grpc.CallOption) (*SingleEmailResponse, error) {
	out := new(SingleEmailResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostPrimaryEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostValidatePassword(ctx context.Context, in *PostValidatePasswordRequest, opts ...grpc.CallOption) (*SinglePasswordValidationResponse, error) {
	out := new(SinglePasswordValidationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostValidatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListGlobalPasswordPolicies(ctx context.Context, in *ListGlobalPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error) {
	out := new(MultiplePasswordPoliciesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListGlobalPasswordPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListPasswordPolicies(ctx context.Context, in *ListPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error) {
	out := new(MultiplePasswordPoliciesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListPasswordPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostPasswordPolicies(ctx context.Context, in *PostPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error) {
	out := new(MultiplePasswordPoliciesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostPasswordPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchPasswordPolicies(ctx context.Context, in *PatchPasswordPoliciesRequest, opts ...grpc.CallOption) (*MultiplePasswordPoliciesResponse, error) {
	out := new(MultiplePasswordPoliciesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchPasswordPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeletePasswordPolicies(ctx context.Context, in *DeletePasswordPoliciesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeletePasswordPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUserFeatureConfig(ctx context.Context, in *UserFeatureConfigRequest, opts ...grpc.CallOption) (*SingleUserFeatureConfigResponse, error) {
	out := new(SingleUserFeatureConfigResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetUserFeatureConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostOrganizations(ctx context.Context, in *PostOrganizationsRequest, opts ...grpc.CallOption) (*MultiOrganizationResponse, error) {
	out := new(MultiOrganizationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUsersOrganizations(ctx context.Context, in *ListUsersOrganizationsRequest, opts ...grpc.CallOption) (*MultiUsersOrganizationsResponse, error) {
	out := new(MultiUsersOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListUsersOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*MultiOrganizationResponse, error) {
	out := new(MultiOrganizationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*SingleOrganizationResponse, error) {
	out := new(SingleOrganizationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchOrganization(ctx context.Context, in *PatchOrganizationRequest, opts ...grpc.CallOption) (*SingleOrganizationResponse, error) {
	out := new(SingleOrganizationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*MultiOrganizationMemberResponse, error) {
	out := new(MultiOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListOrganizationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOrganizationAppMembers(ctx context.Context, in *ListOrganizationAppMembersRequest, opts ...grpc.CallOption) (*MultiOrganizationMemberResponse, error) {
	out := new(MultiOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListOrganizationAppMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostOrganizationMember(ctx context.Context, in *PostOrganizationMemberRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchOrganizationMember(ctx context.Context, in *PatchOrganizationMembersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteOrganizationMember(ctx context.Context, in *DeleteOrganizationMemberRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostOrganizationInvitations(ctx context.Context, in *PostOrganizationInvitationsRequest, opts ...grpc.CallOption) (*MultiOrganizationInvitationResponse, error) {
	out := new(MultiOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostOrganizationInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchOrganizationInvitations(ctx context.Context, in *PatchOrganizationInvitationsRequest, opts ...grpc.CallOption) (*MultiOrganizationInvitationResponse, error) {
	out := new(MultiOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchOrganizationInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOrganizationInvitations(ctx context.Context, in *ListOrganizationInvitationsRequest, opts ...grpc.CallOption) (*MultiOrganizationInvitationResponse, error) {
	out := new(MultiOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListOrganizationInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetOrganizationInvitation(ctx context.Context, in *GetOrganizationInvitationRequest, opts ...grpc.CallOption) (*SingleOrganizationInvitationResponse, error) {
	out := new(SingleOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetOrganizationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDeclineOrganizationInvitation(ctx context.Context, in *PostDeclineOrganizationInvitationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostDeclineOrganizationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAcceptOrganizationInvitation(ctx context.Context, in *PostAcceptOrganizationInvitationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAcceptOrganizationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetOrganizationInvitationPublic(ctx context.Context, in *GetOrganizationInvitationPublicRequest, opts ...grpc.CallOption) (*SingleOrganizationInvitationResponse, error) {
	out := new(SingleOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetOrganizationInvitationPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteRequestingUserFromOrganization(ctx context.Context, in *DeleteRequestingUserFromOrganizationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteRequestingUserFromOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostIdentityProviders(ctx context.Context, in *PostIdentityProvidersRequest, opts ...grpc.CallOption) (*MultiIdentityProviderResponse, error) {
	out := new(MultiIdentityProviderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostIdentityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListIdentityProviders(ctx context.Context, in *ListIdentityProvidersRequest, opts ...grpc.CallOption) (*MultiIdentityProviderResponse, error) {
	out := new(MultiIdentityProviderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListIdentityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetIdentityProvider(ctx context.Context, in *GetIdentityProviderRequest, opts ...grpc.CallOption) (*SingleIdentityProviderResponse, error) {
	out := new(SingleIdentityProviderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetIdentityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchIdentityProviders(ctx context.Context, in *PatchIdentityProvidersRequest, opts ...grpc.CallOption) (*MultiIdentityProviderResponse, error) {
	out := new(MultiIdentityProviderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchIdentityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteIdentityProviders(ctx context.Context, in *DeleteIdentityProvidersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteIdentityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTeams(ctx context.Context, in *PostTeamsRequest, opts ...grpc.CallOption) (*MultiTeamResponse, error) {
	out := new(MultiTeamResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*MultiTeamResponse, error) {
	out := new(MultiTeamResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*SingleTeamResponse, error) {
	out := new(SingleTeamResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchTeams(ctx context.Context, in *PatchTeamsRequest, opts ...grpc.CallOption) (*MultiTeamResponse, error) {
	out := new(MultiTeamResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteTeams(ctx context.Context, in *DeleteTeamsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTeamUsers(ctx context.Context, in *PostTeamUsersRequest, opts ...grpc.CallOption) (*MultiTeamUserResponse, error) {
	out := new(MultiTeamUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostTeamUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTeamUsers(ctx context.Context, in *ListTeamUsersRequest, opts ...grpc.CallOption) (*MultiTeamUserResponse, error) {
	out := new(MultiTeamUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTeamUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteTeamUsers(ctx context.Context, in *DeleteTeamUsersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteTeamUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTeamApps(ctx context.Context, in *PostTeamAppsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostTeamApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTeamApps(ctx context.Context, in *ListTeamAppsRequest, opts ...grpc.CallOption) (*MultiTeamAppsResponse, error) {
	out := new(MultiTeamAppsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTeamApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteTeamApps(ctx context.Context, in *DeleteTeamAppsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteTeamApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*MultiRoleResponse, error) {
	out := new(MultiRoleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*SingleRoleResponse, error) {
	out := new(SingleRoleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetSearch(ctx context.Context, in *GetSearchRequest, opts ...grpc.CallOption) (*SingleSearchResponse, error) {
	out := new(SingleSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListSearches(ctx context.Context, in *ListSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchSearches(ctx context.Context, in *PatchSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *v2Client) PostSearches(ctx context.Context, in *PostSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostSearchesByID(ctx context.Context, in *PostSearchesByIDRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostSearchesByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationSearchMetrics(ctx context.Context, in *PostAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotationSearchMetrics(ctx context.Context, in *GetAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationSearchMetrics(ctx context.Context, in *ListAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotationSearchMetrics(ctx context.Context, in *DeleteAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteSearch(ctx context.Context, in *DeleteSearchRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAttributeSearch(ctx context.Context, in *PostAttributeSearchRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAttributeSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationFilters(ctx context.Context, in *ListAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotationFilter(ctx context.Context, in *GetAnnotationFilterRequest, opts ...grpc.CallOption) (*SingleAnnotationFilterResponse, error) {
	out := new(SingleAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAnnotationFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationFilters(ctx context.Context, in *PostAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationFilters(ctx context.Context, in *PatchAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotationFilters(ctx context.Context, in *DeleteAnnotationFiltersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*MultiClusterResponse, error) {
	out := new(MultiClusterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationsForCluster(ctx context.Context, in *ListAnnotationsForClusterRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotationsForCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostClustersSearches(ctx context.Context, in *PostClustersSearchesRequest, opts ...grpc.CallOption) (*MultiClusterResponse, error) {
	out := new(MultiClusterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostClustersSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostVerifyEmail(ctx context.Context, in *PostVerifyEmailRequest, opts ...grpc.CallOption) (*SingleVerifyEmailResponse, error) {
	out := new(SingleVerifyEmailResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostVerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostRequestResetPassword(ctx context.Context, in *RequestResetPasswordRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostRequestResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCompleteResetPassword(ctx context.Context, in *CompleteResetPasswordRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostCompleteResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostLogin(ctx context.Context, in *PostLoginRequest, opts ...grpc.CallOption) (*SingleLoginResponse, error) {
	out := new(SingleLoginResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostSignup(ctx context.Context, in *PostSignupRequest, opts ...grpc.CallOption) (*SingleLoginResponse, error) {
	out := new(SingleLoginResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostSignup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostLogout(ctx context.Context, in *PostLogoutRequest, opts ...grpc.CallOption) (*SingleLogoutResponse, error) {
	out := new(SingleLogoutResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAuthMethods(ctx context.Context, in *ListAuthMethodsRequest, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error) {
	out := new(ListAuthMethodsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAuthMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOrgAuthMethods(ctx context.Context, in *ListAuthMethodsRequest, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error) {
	out := new(ListAuthMethodsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListOrgAuthMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostIdLoginFinalizer(ctx context.Context, in *PostIdLoginFinalizerRequest, opts ...grpc.CallOption) (*PostIdLoginFinalizerResponse, error) {
	out := new(PostIdLoginFinalizerResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostIdLoginFinalizer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostLinkIdpUser(ctx context.Context, in *PostLinkIdpUserRequest, opts ...grpc.CallOption) (*PostLinkIdpUserResponse, error) {
	out := new(PostLinkIdpUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostLinkIdpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetLoginInfo(ctx context.Context, in *GetLoginInfoRequest, opts ...grpc.CallOption) (*GetLoginInfoResponse, error) {
	out := new(GetLoginInfoResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetLoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAuth2FAMethods(ctx context.Context, in *List2FAMethodsRequest, opts ...grpc.CallOption) (*List2FAMethodsResponse, error) {
	out := new(List2FAMethodsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAuth2FAMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAuth2FATotpRegisterEnable(ctx context.Context, in *PostAuth2FATotpRegisterEnableRequest, opts ...grpc.CallOption) (*PostAuth2FATotpRegisterEnableResponse, error) {
	out := new(PostAuth2FATotpRegisterEnableResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAuth2FATotpRegisterEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAuth2FATotpRegisterVerify(ctx context.Context, in *PostAuth2FATotpRegisterVerifyRequest, opts ...grpc.CallOption) (*PostAuth2FATotpRegisterVerifyResponse, error) {
	out := new(PostAuth2FATotpRegisterVerifyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAuth2FATotpRegisterVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAuth2FATotpDisable(ctx context.Context, in *PostAuth2FATotpDisableRequest, opts ...grpc.CallOption) (*PostAuth2FATotpDisableResponse, error) {
	out := new(PostAuth2FATotpDisableResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAuth2FATotpDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAuth2FATotpLogin(ctx context.Context, in *PostAuth2FATotpLoginRequest, opts ...grpc.CallOption) (*SingleLoginResponse, error) {
	out := new(SingleLoginResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAuth2FATotpLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAuth2FATotpRecover(ctx context.Context, in *PostAuth2FATotpRecoverRequest, opts ...grpc.CallOption) (*PostAuth2FATotpRecoverResponse, error) {
	out := new(PostAuth2FATotpRecoverResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAuth2FATotpRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAuth2FATotpRecoverConfirm(ctx context.Context, in *GetAuth2FATotpRecoverConfirmRequest, opts ...grpc.CallOption) (*GetAuth2FATotpRecoverConfirmResponse, error) {
	out := new(GetAuth2FATotpRecoverConfirmResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAuth2FATotpRecoverConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*SingleSubscriptionResponse, error) {
	out := new(SingleSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostSubscription(ctx context.Context, in *PostSubscriptionRequest, opts ...grpc.CallOption) (*SingleSubscriptionResponse, error) {
	out := new(SingleSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCreditCards(ctx context.Context, in *ListCreditCardsRequest, opts ...grpc.CallOption) (*MultipleCreditCardResponse, error) {
	out := new(MultipleCreditCardResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListCreditCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCreditCard(ctx context.Context, in *PostCreditCardRequest, opts ...grpc.CallOption) (*SingleCreditCardResponse, error) {
	out := new(SingleCreditCardResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteCreditCard(ctx context.Context, in *DeleteCreditCardRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchCreditCards(ctx context.Context, in *PatchCreditCardsRequest, opts ...grpc.CallOption) (*MultipleCreditCardResponse, error) {
	out := new(MultipleCreditCardResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchCreditCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetShippingAddress(ctx context.Context, in *GetShippingAddressRequest, opts ...grpc.CallOption) (*SingleShippingAddressResponse, error) {
	out := new(SingleShippingAddressResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutShippingAddress(ctx context.Context, in *PutShippingAddressRequest, opts ...grpc.CallOption) (*SingleShippingAddressResponse, error) {
	out := new(SingleShippingAddressResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PutShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*MultiPlanResponse, error) {
	out := new(MultiPlanResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListStatusCodes(ctx context.Context, in *ListStatusCodesRequest, opts ...grpc.CallOption) (*MultiStatusCodeResponse, error) {
	out := new(MultiStatusCodeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListStatusCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetStatusCode(ctx context.Context, in *GetStatusCodeRequest, opts ...grpc.CallOption) (*SingleStatusCodeResponse, error) {
	out := new(SingleStatusCodeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetStatusCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetHealthz(ctx context.Context, in *GetHealthzRequest, opts ...grpc.CallOption) (*GetHealthzResponse, error) {
	out := new(GetHealthzResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetHealthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUserBillingCycles(ctx context.Context, in *ListUserBillingCyclesRequest, opts ...grpc.CallOption) (*ListUserBillingCyclesResponse, error) {
	out := new(ListUserBillingCyclesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListUserBillingCycles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUserCycles(ctx context.Context, in *ListUserCyclesRequest, opts ...grpc.CallOption) (*ListUserCyclesResponse, error) {
	out := new(ListUserCyclesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListUserCycles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetBillingUsage(ctx context.Context, in *GetBillingUsageRequest, opts ...grpc.CallOption) (*GetBillingUsageResponse, error) {
	out := new(GetBillingUsageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetBillingUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostHistoricalUsage(ctx context.Context, in *PostHistoricalUsageRequest, opts ...grpc.CallOption) (*PostHistoricalUsageResponse, error) {
	out := new(PostHistoricalUsageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostHistoricalUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetHistoricalUsage(ctx context.Context, in *GetHistoricalUsageRequest, opts ...grpc.CallOption) (*GetHistoricalUsageResponse, error) {
	out := new(GetHistoricalUsageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetHistoricalUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUsageIntervals(ctx context.Context, in *ListUsageIntervalsRequest, opts ...grpc.CallOption) (*ListUsageIntervalsResponse, error) {
	out := new(ListUsageIntervalsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListUsageIntervals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetRealtimeUsage(ctx context.Context, in *GetRealtimeUsageRequest, opts ...grpc.CallOption) (*GetRealtimeUsageResponse, error) {
	out := new(GetRealtimeUsageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetRealtimeUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostUsage(ctx context.Context, in *PostUsageRequest, opts ...grpc.CallOption) (*PostUsageResponse, error) {
	out := new(PostUsageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCollaborators(ctx context.Context, in *PostCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchCollaborators(ctx context.Context, in *PatchCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteCollaborators(ctx context.Context, in *DeleteCollaboratorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollaborations(ctx context.Context, in *ListCollaborationsRequest, opts ...grpc.CallOption) (*MultiCollaborationsResponse, error) {
	out := new(MultiCollaborationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListCollaborations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) FetchLicense(ctx context.Context, in *FetchLicenseRequest, opts ...grpc.CallOption) (*FetchLicenseResponse, error) {
	out := new(FetchLicenseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/FetchLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListLicenses(ctx context.Context, in *ListLicensesRequest, opts ...grpc.CallOption) (*MultipleLicensesResponse, error) {
	out := new(MultipleLicensesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*SingleLicenseResponse, error) {
	out := new(SingleLicenseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ValidateLicense(ctx context.Context, in *ValidateLicenseRequest, opts ...grpc.CallOption) (*ValidateLicenseResponse, error) {
	out := new(ValidateLicenseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ValidateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAppDuplications(ctx context.Context, in *PostAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error) {
	out := new(MultiAppDuplicationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAppDuplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAppDuplications(ctx context.Context, in *ListAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error) {
	out := new(MultiAppDuplicationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAppDuplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAppDuplication(ctx context.Context, in *GetAppDuplicationRequest, opts ...grpc.CallOption) (*SingleAppDuplicationResponse, error) {
	out := new(SingleAppDuplicationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAppDuplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTasks(ctx context.Context, in *PostTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTaskAnnotationCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error) {
	out := new(SingleTaskCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetTaskAnnotationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTaskInputCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error) {
	out := new(SingleTaskCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetTaskInputCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*SingleTaskResponse, error) {
	out := new(SingleTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchTasks(ctx context.Context, in *PatchTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationCountsRollup(ctx context.Context, in *PatchAnnotationCountsRollupRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotationCountsRollup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostLabelOrders(ctx context.Context, in *PostLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetLabelOrder(ctx context.Context, in *GetLabelOrderRequest, opts ...grpc.CallOption) (*SingleLabelOrderResponse, error) {
	out := new(SingleLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetLabelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListLabelOrders(ctx context.Context, in *ListLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchLabelOrders(ctx context.Context, in *PatchLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteLabelOrders(ctx context.Context, in *DeleteLabelOrdersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCollectors(ctx context.Context, in *PostCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*SingleCollectorResponse, error) {
	out := new(SingleCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchCollectors(ctx context.Context, in *PatchCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteCollectors(ctx context.Context, in *DeleteCollectorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostStatValues(ctx context.Context, in *PostStatValuesRequest, opts ...grpc.CallOption) (*MultiStatValueResponse, error) {
	out := new(MultiStatValueResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostStatValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostStatValuesAggregate(ctx context.Context, in *PostStatValuesAggregateRequest, opts ...grpc.CallOption) (*MultiStatValueAggregateResponse, error) {
	out := new(MultiStatValueAggregateResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostStatValuesAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnalytics(ctx context.Context, in *PostAnalyticsRequest, opts ...grpc.CallOption) (*PostAnalyticsResponse, error) {
	out := new(PostAnalyticsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostSDKBilling(ctx context.Context, in *PostSDKBillingRequest, opts ...grpc.CallOption) (*PostSDKBillingResponse, error) {
	out := new(PostSDKBillingResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostSDKBilling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostFindDuplicateAnnotationsJobs(ctx context.Context, in *PostFindDuplicateAnnotationsJobsRequest, opts ...grpc.CallOption) (*MultiFindDuplicateAnnotationsJobResponse, error) {
	out := new(MultiFindDuplicateAnnotationsJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostFindDuplicateAnnotationsJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetFindDuplicateAnnotationsJob(ctx context.Context, in *GetFindDuplicateAnnotationsJobRequest, opts ...grpc.CallOption) (*SingleFindDuplicateAnnotationsJobResponse, error) {
	out := new(SingleFindDuplicateAnnotationsJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetFindDuplicateAnnotationsJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListFindDuplicateAnnotationsJobs(ctx context.Context, in *ListFindDuplicateAnnotationsJobsRequest, opts ...grpc.CallOption) (*MultiFindDuplicateAnnotationsJobResponse, error) {
	out := new(MultiFindDuplicateAnnotationsJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListFindDuplicateAnnotationsJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteFindDuplicateAnnotationsJobs(ctx context.Context, in *DeleteFindDuplicateAnnotationsJobsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteFindDuplicateAnnotationsJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTrendingMetricsView(ctx context.Context, in *PostTrendingMetricsViewRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostTrendingMetricsView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTrendingMetricsViews(ctx context.Context, in *ListTrendingMetricsViewsRequest, opts ...grpc.CallOption) (*MultiTrendingMetricsViewResponse, error) {
	out := new(MultiTrendingMetricsViewResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTrendingMetricsViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostIdValidation(ctx context.Context, in *PostIdValidationRequest, opts ...grpc.CallOption) (*MultiIdValidationResponse, error) {
	out := new(MultiIdValidationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostIdValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTagCategories(ctx context.Context, in *ListTagCategoriesRequest, opts ...grpc.CallOption) (*MultiTagCategoryResponse, error) {
	out := new(MultiTagCategoryResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTagCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWebNotifications(ctx context.Context, in *ListWebNotificationsRequest, opts ...grpc.CallOption) (*MultiWebNotificationResponse, error) {
	out := new(MultiWebNotificationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListWebNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWebNotification(ctx context.Context, in *GetWebNotificationRequest, opts ...grpc.CallOption) (*SingleWebNotificationResponse, error) {
	out := new(SingleWebNotificationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetWebNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWebNotifications(ctx context.Context, in *PatchWebNotificationsRequest, opts ...grpc.CallOption) (*MultiWebNotificationResponse, error) {
	out := new(MultiWebNotificationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchWebNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWebNotifications(ctx context.Context, in *DeleteWebNotificationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWebNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*SingleModuleResponse, error) {
	out := new(SingleModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModules(ctx context.Context, in *PostModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModules(ctx context.Context, in *PatchModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModules(ctx context.Context, in *DeleteModulesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModuleVersion(ctx context.Context, in *GetModuleVersionRequest, opts ...grpc.CallOption) (*SingleModuleVersionResponse, error) {
	out := new(SingleModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModuleVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModuleVersions(ctx context.Context, in *PostModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModuleVersions(ctx context.Context, in *DeleteModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInstalledModuleVersion(ctx context.Context, in *GetInstalledModuleVersionRequest, opts ...grpc.CallOption) (*SingleInstalledModuleVersionResponse, error) {
	out := new(SingleInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInstalledModuleVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInstalledModuleVersions(ctx context.Context, in *ListInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error) {
	out := new(MultiInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListInstalledModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInstalledModuleVersions(ctx context.Context, in *PostInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error) {
	out := new(MultiInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInstalledModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInstalledModuleVersions(ctx context.Context, in *DeleteInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteInstalledModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInstalledModuleVersionsKey(ctx context.Context, in *PostInstalledModuleVersionsKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error) {
	out := new(SingleKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInstalledModuleVersionsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostBulkOperations(ctx context.Context, in *PostBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListBulkOperations(ctx context.Context, in *ListBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetBulkOperation(ctx context.Context, in *GetBulkOperationRequest, opts ...grpc.CallOption) (*SingleBulkOperationsResponse, error) {
	out := new(SingleBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetBulkOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelBulkOperations(ctx context.Context, in *CancelBulkOperationRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/CancelBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteBulkOperations(ctx context.Context, in *DeleteBulkOperationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDatasetInputsSearchAddJob(ctx context.Context, in *GetDatasetInputsSearchAddJobRequest, opts ...grpc.CallOption) (*SingleDatasetInputsSearchAddJobResponse, error) {
	out := new(SingleDatasetInputsSearchAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetDatasetInputsSearchAddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListNextTaskAssignments(ctx context.Context, in *ListNextTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListNextTaskAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutTaskAssignments(ctx context.Context, in *PutTaskAssignmentsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PutTaskAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWaitlistEmails(ctx context.Context, in *PostWaitlistEmailsRequest, opts ...grpc.CallOption) (*MultiWaitlistEmailResponse, error) {
	out := new(MultiWaitlistEmailResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWaitlistEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetSampledPredictMetrics(ctx context.Context, in *GetSampledPredictMetricsRequest, opts ...grpc.CallOption) (*MultiSampledPredictMetricsResponse, error) {
	out := new(MultiSampledPredictMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetSampledPredictMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsAddJobs(ctx context.Context, in *PostInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsAddJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputsAddJobs(ctx context.Context, in *ListInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListInputsAddJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputsAddJob(ctx context.Context, in *GetInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error) {
	out := new(SingleInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputsAddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelInputsAddJob(ctx context.Context, in *CancelInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error) {
	out := new(SingleInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/CancelInputsAddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostUploads(ctx context.Context, in *PostUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error) {
	out := new(MultiUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutUploadContentParts(ctx context.Context, in *PutUploadContentPartsRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error) {
	out := new(SingleUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PutUploadContentParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUpload(ctx context.Context, in *GetUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error) {
	out := new(SingleUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUploads(ctx context.Context, in *ListUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error) {
	out := new(MultiUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteUploads(ctx context.Context, in *DeleteUploadsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V2Server is the server API for V2 service.
// All implementations must embed UnimplementedV2Server
// for forward compatibility
type V2Server interface {
	// Common echo example.
	Echo(context.Context, *TestMessage) (*TestMessage, error)
	// List concept relations between concepts in the platform.
	// MUST be above ListConcepts so that if concept_id is empty this will still match
	// /concepts/relations to list all the concept relations in the app.
	ListConceptRelations(context.Context, *ListConceptRelationsRequest) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	PostConceptRelations(context.Context, *PostConceptRelationsRequest) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	DeleteConceptRelations(context.Context, *DeleteConceptRelationsRequest) (*status.BaseResponse, error)
	// List all the concepts with their positive and negative counts
	GetConceptCounts(context.Context, *GetConceptCountsRequest) (*MultiConceptCountResponse, error)
	// Get a specific concept from an app.
	GetConcept(context.Context, *GetConceptRequest) (*SingleConceptResponse, error)
	// List all the concepts.
	ListConcepts(context.Context, *ListConceptsRequest) (*MultiConceptResponse, error)
	// List models concepts.
	ListModelConcepts(context.Context, *ListModelConceptsRequest) (*MultiConceptResponse, error)
	// Search over the concepts to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostConceptsSearches(context.Context, *PostConceptsSearchesRequest) (*MultiConceptResponse, error)
	// Add a concept to an app.
	PostConcepts(context.Context, *PostConceptsRequest) (*MultiConceptResponse, error)
	// Patch one or more concepts.
	PatchConcepts(context.Context, *PatchConceptsRequest) (*MultiConceptResponse, error)
	// Get a specific vocab from an app.
	GetVocab(context.Context, *GetVocabRequest) (*SingleVocabResponse, error)
	// List all the vocabs.
	ListVocabs(context.Context, *ListVocabsRequest) (*MultiVocabResponse, error)
	// Add a vocab to an app.
	PostVocabs(context.Context, *PostVocabsRequest) (*MultiVocabResponse, error)
	// Patch one or more vocabs.
	PatchVocabs(context.Context, *PatchVocabsRequest) (*MultiVocabResponse, error)
	// Delete a single vocab.
	DeleteVocab(context.Context, *DeleteVocabRequest) (*status.BaseResponse, error)
	// Delete multiple vocabs in one request.
	DeleteVocabs(context.Context, *DeleteVocabsRequest) (*status.BaseResponse, error)
	// List all the vocabs.
	ListVocabConcepts(context.Context, *ListVocabConceptsRequest) (*MultiConceptResponse, error)
	// Add a vocab to an app.
	PostVocabConcepts(context.Context, *PostVocabConceptsRequest) (*MultiConceptResponse, error)
	// Delete a single concept from a vocab.
	DeleteVocabConcept(context.Context, *DeleteVocabConceptRequest) (*status.BaseResponse, error)
	// Delete multiple concepts from a vocab in one request.
	DeleteVocabConcepts(context.Context, *DeleteVocabConceptsRequest) (*status.BaseResponse, error)
	// Get a specific concept from an app.
	GetConceptLanguage(context.Context, *GetConceptLanguageRequest) (*SingleConceptLanguageResponse, error)
	// List the concept in all the translated languages.
	ListConceptLanguages(context.Context, *ListConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// Add a new translation for this concept.
	PostConceptLanguages(context.Context, *PostConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// Patch the name for a given language names by passing in a list of concepts with the new names
	// for the languages.
	PatchConceptLanguages(context.Context, *PatchConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// List the concept in all the outside sources where we found these concepts.
	ListConceptReferences(context.Context, *ListConceptReferencesRequest) (*MultiConceptReferenceResponse, error)
	// List all domain graphs.
	ListKnowledgeGraphs(context.Context, *ListKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error)
	// Post domain graphs.
	PostKnowledgeGraphs(context.Context, *PostKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error)
	// Start concept mapping jobs.
	PostConceptMappingJobs(context.Context, *PostConceptMappingJobsRequest) (*MultiConceptMappingJobResponse, error)
	// List all concept mappings for a given concept id.
	ListConceptMappings(context.Context, *ListConceptMappingsRequest) (*MultiConceptMappingResponse, error)
	// Post concept mappings.
	PostConceptMappings(context.Context, *PostConceptMappingsRequest) (*MultiConceptMappingResponse, error)
	// Get a specific annotation from an app.
	GetAnnotation(context.Context, *GetAnnotationRequest) (*SingleAnnotationResponse, error)
	// List all the annotation.
	ListAnnotations(context.Context, *ListAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Post annotations.
	PostAnnotations(context.Context, *PostAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Patch one or more annotations.
	PatchAnnotations(context.Context, *PatchAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Patch annotations status by worker id and task id.
	PatchAnnotationsStatus(context.Context, *PatchAnnotationsStatusRequest) (*PatchAnnotationsStatusResponse, error)
	// Delete a single annotation.
	DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*status.BaseResponse, error)
	// Delete multiple annotations in one request.
	DeleteAnnotations(context.Context, *DeleteAnnotationsRequest) (*status.BaseResponse, error)
	// Patch saved annotations searches by ids.
	PatchAnnotationsSearches(context.Context, *PatchAnnotationsSearchesRequest) (*MultiSearchResponse, error)
	// Execute a search over annotations
	PostAnnotationsSearches(context.Context, *PostAnnotationsSearchesRequest) (*MultiSearchResponse, error)
	// Get input count per status.
	GetInputCount(context.Context, *GetInputCountRequest) (*SingleInputCountResponse, error)
	// Streams all the inputs starting from oldest assets.
	StreamInputs(context.Context, *StreamInputsRequest) (*MultiInputResponse, error)
	// Get a specific input from an app.
	GetInputSamples(context.Context, *GetInputSamplesRequest) (*MultiInputAnnotationResponse, error)
	// Get a specific input from an app.
	GetInput(context.Context, *GetInputRequest) (*SingleInputResponse, error)
	// List all the inputs.
	ListInputs(context.Context, *ListInputsRequest) (*MultiInputResponse, error)
	// Add an input (or set of inputs) to an app.
	// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
	// it is asynchronous.
	PostInputs(context.Context, *PostInputsRequest) (*MultiInputResponse, error)
	// Add an input (or set of inputs) to an app via a file.
	// This is asynchronous.
	PostInputsFile(context.Context, *PostInputsFileRequest) (*MultiInputResponse, error)
	// Add an input or set of inputs to an app designed for NiFi integration.
	PostInputsNiFi(context.Context, *PostInputsNiFiRequest) (*MultiInputResponse, error)
	// Add an input or set of inputs to an app designed for Document integration.
	PostInputsDocument(context.Context, *PostInputsDocumentRequest) (*MultiInputResponse, error)
	// Patch one or more inputs.
	PatchInputs(context.Context, *PatchInputsRequest) (*MultiInputResponse, error)
	// Delete a single input asynchronously.
	DeleteInput(context.Context, *DeleteInputRequest) (*status.BaseResponse, error)
	// Delete multiple inputs in one request.
	// This call is asynchronous.
	DeleteInputs(context.Context, *DeleteInputsRequest) (*status.BaseResponse, error)
	// Patch saved inputs searches by ids.
	PatchInputsSearches(context.Context, *PatchInputsSearchesRequest) (*MultiSearchResponse, error)
	// Execute a search over inputs
	PostInputsSearches(context.Context, *PostInputsSearchesRequest) (*MultiSearchResponse, error)
	// Get predicted outputs from the model.
	PostModelOutputs(context.Context, *PostModelOutputsRequest) (*MultiOutputResponse, error)
	// List all the datasets.
	ListDatasets(context.Context, *ListDatasetsRequest) (*MultiDatasetResponse, error)
	// Get a specific dataset.
	GetDataset(context.Context, *GetDatasetRequest) (*SingleDatasetResponse, error)
	// Add datasets to an app.
	// The process is atomic, i.e. either all or no datasets are added.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PostDatasets(context.Context, *PostDatasetsRequest) (*MultiDatasetResponse, error)
	// Patch one or more datasets.
	// The process is atomic, i.e. either all or no datasets are patched.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PatchDatasets(context.Context, *PatchDatasetsRequest) (*MultiDatasetResponse, error)
	// Patch one or more dataset ids.
	PatchDatasetIds(context.Context, *PatchDatasetIdsRequest) (*MultiDatasetResponse, error)
	// Delete one or more datasets in a single request.
	DeleteDatasets(context.Context, *DeleteDatasetsRequest) (*status.BaseResponse, error)
	// List all the dataset inputs in a dataset.
	ListDatasetInputs(context.Context, *ListDatasetInputsRequest) (*MultiDatasetInputResponse, error)
	// Get a specific dataset input.
	GetDatasetInput(context.Context, *GetDatasetInputRequest) (*SingleDatasetInputResponse, error)
	// Add dataset inputs to a dataset.
	// The process is not atomic, i.e. if there are errors with some dataset
	// inputs, others might still be added. The response reports
	//   - SUCCESS if all dataset inputs were added,
	//   - MIXED_STATUS if only some dataset inputs were added, and
	//   - FAILURE if no dataset inputs were added.
	// Each individual dataset input in the response has the status set to
	// indicate if it was successful or if there was an error.
	PostDatasetInputs(context.Context, *PostDatasetInputsRequest) (*MultiDatasetInputResponse, error)
	// Delete one or more dataset inputs in a single request.
	DeleteDatasetInputs(context.Context, *DeleteDatasetInputsRequest) (*status.BaseResponse, error)
	// List all the dataset versions.
	ListDatasetVersions(context.Context, *ListDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Get a specific dataset version.
	GetDatasetVersion(context.Context, *GetDatasetVersionRequest) (*SingleDatasetVersionResponse, error)
	ListDatasetVersionMetricsGroups(context.Context, *ListDatasetVersionMetricsGroupsRequest) (*MultiDatasetVersionMetricsGroupResponse, error)
	// Add dataset versions to a dataset.
	PostDatasetVersions(context.Context, *PostDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Patch one or more dataset versions.
	PatchDatasetVersions(context.Context, *PatchDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Delete one or more dataset versions in a single request.
	DeleteDatasetVersions(context.Context, *DeleteDatasetVersionsRequest) (*status.BaseResponse, error)
	// Create export of a dataset version.
	PutDatasetVersionExports(context.Context, *PutDatasetVersionExportsRequest) (*MultiDatasetVersionExportResponse, error)
	// Get a specific model type.
	GetModelType(context.Context, *GetModelTypeRequest) (*SingleModelTypeResponse, error)
	// List all the supported open source licenses in the platform.
	ListOpenSourceLicenses(context.Context, *ListOpenSourceLicensesRequest) (*ListOpenSourceLicensesResponse, error)
	// List all the model types available in the platform.
	// This MUST be above ListModels so that the /models/types endpoint takes precedence.
	ListModelTypes(context.Context, *ListModelTypesRequest) (*MultiModelTypeResponse, error)
	// Get a specific model from an app.
	GetModel(context.Context, *GetModelRequest) (*SingleModelResponse, error)
	// Get a the output info for a given model_id or model_id/version_id
	// combo.
	GetModelOutputInfo(context.Context, *GetModelRequest) (*SingleModelResponse, error)
	// List all the models.
	ListModels(context.Context, *ListModelsRequest) (*MultiModelResponse, error)
	// Search over the models to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostModelsSearches(context.Context, *PostModelsSearchesRequest) (*MultiModelResponse, error)
	// Add a models to an app.
	PostModels(context.Context, *PostModelsRequest) (*SingleModelResponse, error)
	// Patch one or more models.
	PatchModels(context.Context, *PatchModelsRequest) (*MultiModelResponse, error)
	// Patch one or more models ids.
	PatchModelIds(context.Context, *PatchModelIdsRequest) (*MultiModelResponse, error)
	// Delete a single model.
	DeleteModel(context.Context, *DeleteModelRequest) (*status.BaseResponse, error)
	// Delete multiple models in one request.
	DeleteModels(context.Context, *DeleteModelsRequest) (*status.BaseResponse, error)
	// Update model check consents
	PatchModelCheckConsents(context.Context, *PatchModelCheckConsentsRequest) (*MultiModelCheckConsentResponse, error)
	// Update model toolkits tags
	PatchModelToolkits(context.Context, *PatchModelToolkitsRequest) (*MultiModelToolkitResponse, error)
	// Update model use_cases tags
	PatchModelUseCases(context.Context, *PatchModelUseCasesRequest) (*MultiModelUseCaseResponse, error)
	// Update model languages tags
	PatchModelLanguages(context.Context, *PatchModelLanguagesRequest) (*MultiModelLanguageResponse, error)
	// List all the inputs.
	ListModelInputs(context.Context, *ListModelInputsRequest) (*MultiInputResponse, error)
	// Get a specific model from an app.
	GetModelVersion(context.Context, *GetModelVersionRequest) (*SingleModelVersionResponse, error)
	// List all the models.
	ListModelVersions(context.Context, *ListModelVersionsRequest) (*MultiModelVersionResponse, error)
	PostWorkflowVersionsUnPublish(context.Context, *PostWorkflowVersionsUnPublishRequest) (*status.BaseResponse, error)
	PostWorkflowVersionsPublish(context.Context, *PostWorkflowVersionsPublishRequest) (*status.BaseResponse, error)
	// PostModelVersionsPublish
	PostModelVersionsPublish(context.Context, *PostModelVersionsPublishRequest) (*status.BaseResponse, error)
	// PostModelVersionsUnPublish
	PostModelVersionsUnPublish(context.Context, *PostModelVersionsUnPublishRequest) (*status.BaseResponse, error)
	// Create a new model version to trigger training of the model.
	PostModelVersions(context.Context, *PostModelVersionsRequest) (*SingleModelResponse, error)
	// PatchModelVersions
	PatchModelVersions(context.Context, *PatchModelVersionsRequest) (*MultiModelVersionResponse, error)
	// Delete a single model.
	DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*status.BaseResponse, error)
	// Get the evaluation metrics for a model version.
	GetModelVersionMetrics(context.Context, *GetModelVersionMetricsRequest) (*SingleModelVersionResponse, error)
	// Run the evaluation metrics for a model version.
	PostModelVersionMetrics(context.Context, *PostModelVersionMetricsRequest) (*SingleModelVersionResponse, error)
	// Lists model references tied to a particular model id.
	ListModelReferences(context.Context, *ListModelReferencesRequest) (*MultiModelReferenceResponse, error)
	// Add new reference(s) to a particular model
	PostModelReferences(context.Context, *PostModelReferencesRequest) (*MultiModelReferenceResponse, error)
	// Delete model references tied to a model id by reference id.
	DeleteModelReferences(context.Context, *DeleteModelReferencesRequest) (*status.BaseResponse, error)
	// GetModelVersionInputExample
	GetModelVersionInputExample(context.Context, *GetModelVersionInputExampleRequest) (*SingleModelVersionInputExampleResponse, error)
	// ListModelVersionInputExamples
	ListModelVersionInputExamples(context.Context, *ListModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error)
	// PostModelVersionInputExamples
	PostModelVersionInputExamples(context.Context, *PostModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error)
	// DeleteModelVersionInputExamples
	DeleteModelVersionInputExamples(context.Context, *DeleteModelVersionInputExamplesRequest) (*status.BaseResponse, error)
	// Star a model
	PostModelStars(context.Context, *PostModelStarsRequest) (*MultiModelStarResponse, error)
	//Un-star a model
	DeleteModelStars(context.Context, *DeleteModelStarsRequest) (*DeleteModelStarsResponse, error)
	// Star a user
	PostUserStars(context.Context, *PostUserStarsRequest) (*MultiUserStarResponse, error)
	// Un-star a user
	DeleteUserStars(context.Context, *DeleteUserStarsRequest) (*DeleteUserStarsResponse, error)
	// Star a workflow
	PostWorkflowStars(context.Context, *PostWorkflowStarsRequest) (*MultiWorkflowStarResponse, error)
	// Un-star a workflow
	DeleteWorkflowStars(context.Context, *DeleteWorkflowStarsRequest) (*DeleteWorkflowStarsResponse, error)
	// Star an app
	PostAppStars(context.Context, *PostAppStarsRequest) (*MultiAppStarResponse, error)
	// Un-star an app
	DeleteAppStars(context.Context, *DeleteAppStarsRequest) (*DeleteAppStarsResponse, error)
	// Get a specific workflow from an app.
	GetWorkflow(context.Context, *GetWorkflowRequest) (*SingleWorkflowResponse, error)
	// List all the workflows.
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*MultiWorkflowResponse, error)
	// List all public workflows.
	ListPublicWorkflows(context.Context, *ListPublicWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Add a workflow to an app.
	PostWorkflows(context.Context, *PostWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Patch one or more workflows.
	PatchWorkflows(context.Context, *PatchWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Patch one or more workflows ids.
	PatchWorkflowIds(context.Context, *PatchWorkflowIdsRequest) (*MultiWorkflowResponse, error)
	// Delete a single workflow.
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*status.BaseResponse, error)
	// Delete multiple workflows in one request.
	DeleteWorkflows(context.Context, *DeleteWorkflowsRequest) (*status.BaseResponse, error)
	// Predict using a workflow.
	PostWorkflowResults(context.Context, *PostWorkflowResultsRequest) (*PostWorkflowResultsResponse, error)
	// Compare embeddings distances using a workflow
	PostWorkflowResultsSimilarity(context.Context, *PostWorkflowResultsSimilarityRequest) (*PostWorkflowResultsSimilarityResponse, error)
	// List workflow versions.
	ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error)
	// Get single workflow version.
	GetWorkflowVersion(context.Context, *GetWorkflowVersionRequest) (*SingleWorkflowVersionResponse, error)
	// Delete workflow versions.
	DeleteWorkflowVersions(context.Context, *DeleteWorkflowVersionsRequest) (*status.BaseResponse, error)
	// Patch workflow versions.
	PatchWorkflowVersions(context.Context, *PatchWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error)
	// Evaluate all the nodes in the workflow.
	PostWorkflowMetrics(context.Context, *PostWorkflowMetricsRequest) (*MultiWorkflowMetricsResponse, error)
	// Get workflow evaluation data.
	GetWorkflowMetrics(context.Context, *GetWorkflowMetricsRequest) (*SingleWorkflowMetricsResponse, error)
	// GetWorkflowNodeMetrics
	GetWorkflowNodeMetrics(context.Context, *GetWorkflowNodeMetricsRequest) (*SingleWorkflowNodeMetricsResponse, error)
	// ListWorkflowMetrics
	ListWorkflowMetrics(context.Context, *ListWorkflowMetricsRequest) (*MultiWorkflowMetricsResponse, error)
	// Delete one or more workflow metrics.
	DeleteWorkflowMetrics(context.Context, *DeleteWorkflowMetricsRequest) (*status.BaseResponse, error)
	// Get a specific key from an app.
	GetKey(context.Context, *GetKeyRequest) (*SingleKeyResponse, error)
	// List all the keys.
	ListKeys(context.Context, *ListKeysRequest) (*MultiKeyResponse, error)
	// List keys by app_id
	ListAppKeys(context.Context, *ListAppKeysRequest) (*MultiKeyResponse, error)
	// Search over the keys to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteKey(context.Context, *DeleteKeyRequest) (*status.BaseResponse, error)
	// Add a key to an app.
	PostKeys(context.Context, *PostKeysRequest) (*MultiKeyResponse, error)
	// Patch one or more keys.
	PatchKeys(context.Context, *PatchKeysRequest) (*MultiKeyResponse, error)
	// API Keys in the public API -- request is itself Key authorized, and will tell
	// the user the scopes/access of the key/credential they're providing, as computed by
	// our authorizer:
	MyScopes(context.Context, *MyScopesRequest) (*MultiScopeResponse, error)
	MyScopesUser(context.Context, *MyScopesUserRequest) (*MultiScopeUserResponse, error)
	MyScopesRoot(context.Context, *MyScopesRootRequest) (*MultiScopeRootResponse, error)
	// List all auth scopes available to me as a user.
	ListScopes(context.Context, *ListScopesRequest) (*MultiScopeDepsResponse, error)
	// Get a specific app from an app.
	GetApp(context.Context, *GetAppRequest) (*SingleAppResponse, error)
	// List all the apps.
	ListApps(context.Context, *ListAppsRequest) (*MultiAppResponse, error)
	// Search over the apps to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteApp(context.Context, *DeleteAppRequest) (*status.BaseResponse, error)
	// Add a app to an app.
	// This needs to load the default workflow to make a copy, validating all the models in it, and
	// then writing the new workflow back to this new app.
	PostApps(context.Context, *PostAppsRequest) (*MultiAppResponse, error)
	// Patch one or more apps.
	PatchApps(context.Context, *PatchAppsRequest) (*MultiAppResponse, error)
	// Patch apps ids.
	PatchAppsIds(context.Context, *PatchAppsIdsRequest) (*MultiAppResponse, error)
	// Patch one app.
	PatchApp(context.Context, *PatchAppRequest) (*SingleAppResponse, error)
	// Patch app owner.
	// The new app owner can only be an org, and the original owner must be a member of that org.
	PatchAppOwner(context.Context, *PatchAppOwnerRequest) (*status.BaseResponse, error)
	// Search over the applications to find one or more you're looking for.
	PostAppsSearches(context.Context, *PostAppsSearchesRequest) (*MultiAppResponse, error)
	// Get current user information
	GetUser(context.Context, *GetUserRequest) (*SingleUserResponse, error)
	// List users
	ListUsers(context.Context, *ListUsersRequest) (*MultiUserResponse, error)
	// Update gdpr fields of current user.
	PostUserConsent(context.Context, *PostUserConsentRequest) (*SingleUserResponse, error)
	// Patch information of current user or another user in the same organisation
	PatchUser(context.Context, *PatchUserRequest) (*SingleUserResponse, error)
	// Post user access request
	PostUserAccess(context.Context, *PostUserAccessRequest) (*MultiUserAccessResponse, error)
	// Get user access request
	GetUserAccess(context.Context, *GetUserAccessRequest) (*SingleUserAccessResponse, error)
	////////////////////////////////////////
	// Email
	////////////////////////////////////////
	// Add Email
	PostEmails(context.Context, *PostEmailsRequest) (*MultipleEmailResponse, error)
	// List emails
	ListEmails(context.Context, *ListEmailsRequest) (*MultipleEmailResponse, error)
	// For sending another verification email.
	PostResendVerifyEmail(context.Context, *PostResendVerifyRequest) (*SingleResendVerifyResponse, error)
	// Deleting an email.
	DeleteEmail(context.Context, *DeleteEmailRequest) (*status.BaseResponse, error)
	// Create primate email.
	PostPrimaryEmail(context.Context, *PostPrimaryEmailRequest) (*SingleEmailResponse, error)
	// Validate new password in real-time for a user
	PostValidatePassword(context.Context, *PostValidatePasswordRequest) (*SinglePasswordValidationResponse, error)
	// Get global policy
	ListGlobalPasswordPolicies(context.Context, *ListGlobalPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error)
	// Get a specific set of password policies attached to a user.
	ListPasswordPolicies(context.Context, *ListPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error)
	// Create a specific set of password policies attached to a user or an organization.
	PostPasswordPolicies(context.Context, *PostPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error)
	// Update a specific set of password policies attached to a user or an organization.
	PatchPasswordPolicies(context.Context, *PatchPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error)
	// DeletePasswordPolicies
	DeletePasswordPolicies(context.Context, *DeletePasswordPoliciesRequest) (*status.BaseResponse, error)
	// Get user feature config
	GetUserFeatureConfig(context.Context, *UserFeatureConfigRequest) (*SingleUserFeatureConfigResponse, error)
	// Add organizations
	PostOrganizations(context.Context, *PostOrganizationsRequest) (*MultiOrganizationResponse, error)
	// List the provided user's organizations with their roles
	ListUsersOrganizations(context.Context, *ListUsersOrganizationsRequest) (*MultiUsersOrganizationsResponse, error)
	// List multiple organizations
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*MultiOrganizationResponse, error)
	// Get single organization
	GetOrganization(context.Context, *GetOrganizationRequest) (*SingleOrganizationResponse, error)
	// Patch an organization
	PatchOrganization(context.Context, *PatchOrganizationRequest) (*SingleOrganizationResponse, error)
	// Delete an organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*status.BaseResponse, error)
	// List organization members
	ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*MultiOrganizationMemberResponse, error)
	// ListOrganizationAppMembers
	ListOrganizationAppMembers(context.Context, *ListOrganizationAppMembersRequest) (*MultiOrganizationMemberResponse, error)
	// Add new member to organization
	PostOrganizationMember(context.Context, *PostOrganizationMemberRequest) (*status.BaseResponse, error)
	// PatchOrganizationMember
	PatchOrganizationMember(context.Context, *PatchOrganizationMembersRequest) (*status.BaseResponse, error)
	// Remove a member from organization
	DeleteOrganizationMember(context.Context, *DeleteOrganizationMemberRequest) (*status.BaseResponse, error)
	// Organization invites
	PostOrganizationInvitations(context.Context, *PostOrganizationInvitationsRequest) (*MultiOrganizationInvitationResponse, error)
	// PatchOrganizationInvitations
	PatchOrganizationInvitations(context.Context, *PatchOrganizationInvitationsRequest) (*MultiOrganizationInvitationResponse, error)
	// ListOrganizationInvitations
	ListOrganizationInvitations(context.Context, *ListOrganizationInvitationsRequest) (*MultiOrganizationInvitationResponse, error)
	// GetOrganizationInvitation
	GetOrganizationInvitation(context.Context, *GetOrganizationInvitationRequest) (*SingleOrganizationInvitationResponse, error)
	// PostDeclineOrganizationInvitation
	PostDeclineOrganizationInvitation(context.Context, *PostDeclineOrganizationInvitationRequest) (*status.BaseResponse, error)
	// PostAcceptOrganizationInvitation
	PostAcceptOrganizationInvitation(context.Context, *PostAcceptOrganizationInvitationRequest) (*status.BaseResponse, error)
	// GetOrganizationInvitationPublic
	GetOrganizationInvitationPublic(context.Context, *GetOrganizationInvitationPublicRequest) (*SingleOrganizationInvitationResponse, error)
	// Leave an organization
	DeleteRequestingUserFromOrganization(context.Context, *DeleteRequestingUserFromOrganizationRequest) (*status.BaseResponse, error)
	// Add IdentityProviders
	PostIdentityProviders(context.Context, *PostIdentityProvidersRequest) (*MultiIdentityProviderResponse, error)
	// List multiple IdentityProviders
	ListIdentityProviders(context.Context, *ListIdentityProvidersRequest) (*MultiIdentityProviderResponse, error)
	// Get single IdentityProvider
	GetIdentityProvider(context.Context, *GetIdentityProviderRequest) (*SingleIdentityProviderResponse, error)
	// Patch multiple IdentityProviders
	PatchIdentityProviders(context.Context, *PatchIdentityProvidersRequest) (*MultiIdentityProviderResponse, error)
	// Delete multiple IdentityProviders
	DeleteIdentityProviders(context.Context, *DeleteIdentityProvidersRequest) (*status.BaseResponse, error)
	// Add teams
	PostTeams(context.Context, *PostTeamsRequest) (*MultiTeamResponse, error)
	// List multiple teams
	ListTeams(context.Context, *ListTeamsRequest) (*MultiTeamResponse, error)
	// Get single team
	GetTeam(context.Context, *GetTeamRequest) (*SingleTeamResponse, error)
	// Patch multiple teams
	PatchTeams(context.Context, *PatchTeamsRequest) (*MultiTeamResponse, error)
	// Delete multiple teams
	DeleteTeams(context.Context, *DeleteTeamsRequest) (*status.BaseResponse, error)
	// Add users to a team
	PostTeamUsers(context.Context, *PostTeamUsersRequest) (*MultiTeamUserResponse, error)
	// List team users
	ListTeamUsers(context.Context, *ListTeamUsersRequest) (*MultiTeamUserResponse, error)
	// Delete users from a team
	DeleteTeamUsers(context.Context, *DeleteTeamUsersRequest) (*status.BaseResponse, error)
	// Add applications to team
	PostTeamApps(context.Context, *PostTeamAppsRequest) (*status.BaseResponse, error)
	// List team applications
	ListTeamApps(context.Context, *ListTeamAppsRequest) (*MultiTeamAppsResponse, error)
	// Remove applications from team
	DeleteTeamApps(context.Context, *DeleteTeamAppsRequest) (*status.BaseResponse, error)
	// List multiple roles
	ListRoles(context.Context, *ListRolesRequest) (*MultiRoleResponse, error)
	// Get single role
	GetRole(context.Context, *GetRoleRequest) (*SingleRoleResponse, error)
	// Get a saved legacy search.
	GetSearch(context.Context, *GetSearchRequest) (*SingleSearchResponse, error)
	// List all saved legacy searches.
	ListSearches(context.Context, *ListSearchesRequest) (*MultiSearchResponse, error)
	// Patch saved legacy searches by ids.
	PatchSearches(context.Context, *PatchSearchesRequest) (*MultiSearchResponse, error)
	// Deprecated: Do not use.
	// Execute a new search and optionally save it.
	//
	// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
	PostSearches(context.Context, *PostSearchesRequest) (*MultiSearchResponse, error)
	// Execute a previously saved legacy search.
	PostSearchesByID(context.Context, *PostSearchesByIDRequest) (*MultiSearchResponse, error)
	// Evaluate the results of two search requests
	PostAnnotationSearchMetrics(context.Context, *PostAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// Get the evaluation results between two search requests
	GetAnnotationSearchMetrics(context.Context, *GetAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// List the evaluation results between two search requests
	ListAnnotationSearchMetrics(context.Context, *ListAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// DeleteAnnotationSearchMetrics
	DeleteAnnotationSearchMetrics(context.Context, *DeleteAnnotationSearchMetricsRequest) (*status.BaseResponse, error)
	// Delete a saved search.
	DeleteSearch(context.Context, *DeleteSearchRequest) (*status.BaseResponse, error)
	// Execute an attribute search.
	PostAttributeSearch(context.Context, *PostAttributeSearchRequest) (*MultiSearchResponse, error)
	// List all the annotation filters.
	ListAnnotationFilters(context.Context, *ListAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Get a specific annotation filter.
	GetAnnotationFilter(context.Context, *GetAnnotationFilterRequest) (*SingleAnnotationFilterResponse, error)
	// Add annotation filters.
	PostAnnotationFilters(context.Context, *PostAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Patch one or more annotation filters.
	PatchAnnotationFilters(context.Context, *PatchAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Delete one or more annotation filters in a single request.
	DeleteAnnotationFilters(context.Context, *DeleteAnnotationFiltersRequest) (*status.BaseResponse, error)
	// Get a list of clusters in an app
	ListClusters(context.Context, *ListClustersRequest) (*MultiClusterResponse, error)
	// List all the annotations for a given cluster.
	ListAnnotationsForCluster(context.Context, *ListAnnotationsForClusterRequest) (*MultiAnnotationResponse, error)
	// List all the annotations for a given cluser.
	PostClustersSearches(context.Context, *PostClustersSearchesRequest) (*MultiClusterResponse, error)
	// Verify email
	PostVerifyEmail(context.Context, *PostVerifyEmailRequest) (*SingleVerifyEmailResponse, error)
	// Request for password reset email
	PostRequestResetPassword(context.Context, *RequestResetPasswordRequest) (*status.BaseResponse, error)
	// Complete reset password
	PostCompleteResetPassword(context.Context, *CompleteResetPasswordRequest) (*status.BaseResponse, error)
	// Login with user/pass
	PostLogin(context.Context, *PostLoginRequest) (*SingleLoginResponse, error)
	// Signup with account.
	PostSignup(context.Context, *PostSignupRequest) (*SingleLoginResponse, error)
	// Logout use
	PostLogout(context.Context, *PostLogoutRequest) (*SingleLogoutResponse, error)
	// List available authentication methods, e.g.
	// * standard auth method - login using user & password
	// * SAML auth methods - SSO using SAML Identity Providers like Okta, Github, Google GSuite, LinkedIn, etc.
	ListAuthMethods(context.Context, *ListAuthMethodsRequest) (*ListAuthMethodsResponse, error)
	// ListOrgAuthMethods
	ListOrgAuthMethods(context.Context, *ListAuthMethodsRequest) (*ListAuthMethodsResponse, error)
	// ListOrgAuthMethods
	PostIdLoginFinalizer(context.Context, *PostIdLoginFinalizerRequest) (*PostIdLoginFinalizerResponse, error)
	// PostLinkIdpUser
	PostLinkIdpUser(context.Context, *PostLinkIdpUserRequest) (*PostLinkIdpUserResponse, error)
	// GetLoginInfo
	GetLoginInfo(context.Context, *GetLoginInfoRequest) (*GetLoginInfoResponse, error)
	// List available 2FA methods in current environment, e.g.
	// * TOTP auth method - login layer using time synced  codes
	ListAuth2FAMethods(context.Context, *List2FAMethodsRequest) (*List2FAMethodsResponse, error)
	// Enable Clarifai TOTP 2FA
	PostAuth2FATotpRegisterEnable(context.Context, *PostAuth2FATotpRegisterEnableRequest) (*PostAuth2FATotpRegisterEnableResponse, error)
	// Verify Clarifai TOTP 2FA activation
	PostAuth2FATotpRegisterVerify(context.Context, *PostAuth2FATotpRegisterVerifyRequest) (*PostAuth2FATotpRegisterVerifyResponse, error)
	// Disable Clarifai TOTP 2FA
	PostAuth2FATotpDisable(context.Context, *PostAuth2FATotpDisableRequest) (*PostAuth2FATotpDisableResponse, error)
	// Login with Clarifai TOTP 2FA activation
	PostAuth2FATotpLogin(context.Context, *PostAuth2FATotpLoginRequest) (*SingleLoginResponse, error)
	// Recover users Clarifai TOTP 2FA activation through sending an email confirmation.
	PostAuth2FATotpRecover(context.Context, *PostAuth2FATotpRecoverRequest) (*PostAuth2FATotpRecoverResponse, error)
	// Confirm the recovery of users Clarifai TOTP 2FA. Will be called by user from email link (via portal).
	GetAuth2FATotpRecoverConfirm(context.Context, *GetAuth2FATotpRecoverConfirmRequest) (*GetAuth2FATotpRecoverConfirmResponse, error)
	// List the subscriptions.
	GetSubscription(context.Context, *GetSubscriptionRequest) (*SingleSubscriptionResponse, error)
	// Add a new subscription.
	PostSubscription(context.Context, *PostSubscriptionRequest) (*SingleSubscriptionResponse, error)
	// List all credit cards.
	ListCreditCards(context.Context, *ListCreditCardsRequest) (*MultipleCreditCardResponse, error)
	// Add a new credit card.
	PostCreditCard(context.Context, *PostCreditCardRequest) (*SingleCreditCardResponse, error)
	// Delete a credit card.
	DeleteCreditCard(context.Context, *DeleteCreditCardRequest) (*status.BaseResponse, error)
	// Update a credit card.
	PatchCreditCards(context.Context, *PatchCreditCardsRequest) (*MultipleCreditCardResponse, error)
	// Get the shipping address.
	GetShippingAddress(context.Context, *GetShippingAddressRequest) (*SingleShippingAddressResponse, error)
	// Update shipping address.
	PutShippingAddress(context.Context, *PutShippingAddressRequest) (*SingleShippingAddressResponse, error)
	// ListPlans
	ListPlans(context.Context, *ListPlansRequest) (*MultiPlanResponse, error)
	// List all status codes.
	ListStatusCodes(context.Context, *ListStatusCodesRequest) (*MultiStatusCodeResponse, error)
	// Get more details for a status code.
	GetStatusCode(context.Context, *GetStatusCodeRequest) (*SingleStatusCodeResponse, error)
	// Health check endpoint
	GetHealthz(context.Context, *GetHealthzRequest) (*GetHealthzResponse, error)
	// List all billing  cycles - old billing
	ListUserBillingCycles(context.Context, *ListUserBillingCyclesRequest) (*ListUserBillingCyclesResponse, error)
	// List user usage.cycles.
	ListUserCycles(context.Context, *ListUserCyclesRequest) (*ListUserCyclesResponse, error)
	// Gets the billing cycle start and end date as well as invoice items.
	GetBillingUsage(context.Context, *GetBillingUsageRequest) (*GetBillingUsageResponse, error)
	// Add historical usage. - Billing 1
	PostHistoricalUsage(context.Context, *PostHistoricalUsageRequest) (*PostHistoricalUsageResponse, error)
	// Get historical usage. - Billing 2
	GetHistoricalUsage(context.Context, *GetHistoricalUsageRequest) (*GetHistoricalUsageResponse, error)
	// Get a list of valid usage intervals
	ListUsageIntervals(context.Context, *ListUsageIntervalsRequest) (*ListUsageIntervalsResponse, error)
	// Get realtime usage.
	GetRealtimeUsage(context.Context, *GetRealtimeUsageRequest) (*GetRealtimeUsageResponse, error)
	// Post usage to platform. Only called by on prem now.
	PostUsage(context.Context, *PostUsageRequest) (*PostUsageResponse, error)
	// owner list users who the app is shared with
	ListCollaborators(context.Context, *ListCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// add collaborators to an app.
	PostCollaborators(context.Context, *PostCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// Patch existing collaborators.
	PatchCollaborators(context.Context, *PatchCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// Delete existing collaborators.
	DeleteCollaborators(context.Context, *DeleteCollaboratorsRequest) (*status.BaseResponse, error)
	// Collaboration includes the app user are invitied to work on
	ListCollaborations(context.Context, *ListCollaborationsRequest) (*MultiCollaborationsResponse, error)
	// Get the license with crypto security.
	FetchLicense(context.Context, *FetchLicenseRequest) (*FetchLicenseResponse, error)
	// List all licenses.
	ListLicenses(context.Context, *ListLicensesRequest) (*MultipleLicensesResponse, error)
	// Get a license
	GetLicense(context.Context, *GetLicenseRequest) (*SingleLicenseResponse, error)
	// Check that a license is still valid.
	ValidateLicense(context.Context, *ValidateLicenseRequest) (*ValidateLicenseResponse, error)
	// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
	// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
	PostAppDuplications(context.Context, *PostAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error)
	// list all the app duplications user triggers
	ListAppDuplications(context.Context, *ListAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error)
	// get the app duplication status
	GetAppDuplication(context.Context, *GetAppDuplicationRequest) (*SingleAppDuplicationResponse, error)
	// Add tasks to an app.
	PostTasks(context.Context, *PostTasksRequest) (*MultiTaskResponse, error)
	// Task annotation count
	GetTaskAnnotationCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error)
	// Task Input count
	GetTaskInputCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error)
	// Get a specific task from an app.
	GetTask(context.Context, *GetTaskRequest) (*SingleTaskResponse, error)
	// List tasks from an app.
	ListTasks(context.Context, *ListTasksRequest) (*MultiTaskResponse, error)
	// Patch one or more tasks.
	PatchTasks(context.Context, *PatchTasksRequest) (*MultiTaskResponse, error)
	// Delete multiple tasks in one request.
	DeleteTasks(context.Context, *DeleteTasksRequest) (*status.BaseResponse, error)
	// Rollup annotation count for task.
	PatchAnnotationCountsRollup(context.Context, *PatchAnnotationCountsRollupRequest) (*status.BaseResponse, error)
	// Add Label orders.
	PostLabelOrders(context.Context, *PostLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Get a label order.
	GetLabelOrder(context.Context, *GetLabelOrderRequest) (*SingleLabelOrderResponse, error)
	// List label orders.
	ListLabelOrders(context.Context, *ListLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Patch one or more label orders.
	PatchLabelOrders(context.Context, *PatchLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Delete multiple label orders in one request.
	// this do not change task status
	DeleteLabelOrders(context.Context, *DeleteLabelOrdersRequest) (*status.BaseResponse, error)
	// Add a list of Collectors to an app.
	// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
	// endpoint.
	// Those current scopes are listed here as a hard requirement.
	// They are needed when adding the collectors just so we now that you have permission with
	// that key at least to do the writing to this app with POST /inputs.
	PostCollectors(context.Context, *PostCollectorsRequest) (*MultiCollectorResponse, error)
	// Get a specific collector from an app.
	GetCollector(context.Context, *GetCollectorRequest) (*SingleCollectorResponse, error)
	// List all the collectors.
	ListCollectors(context.Context, *ListCollectorsRequest) (*MultiCollectorResponse, error)
	// Patch one or more collectors.
	PatchCollectors(context.Context, *PatchCollectorsRequest) (*MultiCollectorResponse, error)
	// Delete multiple collectors in one request.
	// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
	DeleteCollectors(context.Context, *DeleteCollectorsRequest) (*status.BaseResponse, error)
	// PostStatValues
	PostStatValues(context.Context, *PostStatValuesRequest) (*MultiStatValueResponse, error)
	// PostStatValuesAggregate
	PostStatValuesAggregate(context.Context, *PostStatValuesAggregateRequest) (*MultiStatValueAggregateResponse, error)
	// Add a new analytics entry into our database
	PostAnalytics(context.Context, *PostAnalyticsRequest) (*PostAnalyticsResponse, error)
	// Add a new sdk_billing entry into our database
	PostSDKBilling(context.Context, *PostSDKBillingRequest) (*PostSDKBillingResponse, error)
	// Find annotations duplicates based on an specified attribute of different annotations
	PostFindDuplicateAnnotationsJobs(context.Context, *PostFindDuplicateAnnotationsJobsRequest) (*MultiFindDuplicateAnnotationsJobResponse, error)
	// Get annotations find duplicates jobs results by id
	GetFindDuplicateAnnotationsJob(context.Context, *GetFindDuplicateAnnotationsJobRequest) (*SingleFindDuplicateAnnotationsJobResponse, error)
	// List all the annotations find duplicates jobs results
	ListFindDuplicateAnnotationsJobs(context.Context, *ListFindDuplicateAnnotationsJobsRequest) (*MultiFindDuplicateAnnotationsJobResponse, error)
	// DeleteFindDuplicateAnnotationsJobs
	DeleteFindDuplicateAnnotationsJobs(context.Context, *DeleteFindDuplicateAnnotationsJobsRequest) (*status.BaseResponse, error)
	// Increase the view metric for a detail view
	PostTrendingMetricsView(context.Context, *PostTrendingMetricsViewRequest) (*status.BaseResponse, error)
	// List the view metrics for a detail view
	ListTrendingMetricsViews(context.Context, *ListTrendingMetricsViewsRequest) (*MultiTrendingMetricsViewResponse, error)
	// Validates the ids (app and user supported), returns validation errors and recommendations
	PostIdValidation(context.Context, *PostIdValidationRequest) (*MultiIdValidationResponse, error)
	// List all the available tags for specified object_type grouped by category
	ListTagCategories(context.Context, *ListTagCategoriesRequest) (*MultiTagCategoryResponse, error)
	// List users web notifications
	ListWebNotifications(context.Context, *ListWebNotificationsRequest) (*MultiWebNotificationResponse, error)
	// Get a web notification
	GetWebNotification(context.Context, *GetWebNotificationRequest) (*SingleWebNotificationResponse, error)
	// Update users web notifications
	PatchWebNotifications(context.Context, *PatchWebNotificationsRequest) (*MultiWebNotificationResponse, error)
	// Delete users web notifications
	DeleteWebNotifications(context.Context, *DeleteWebNotificationsRequest) (*status.BaseResponse, error)
	// Get a specific module from an app.
	GetModule(context.Context, *GetModuleRequest) (*SingleModuleResponse, error)
	// List all the modules in community, by user or by app.
	ListModules(context.Context, *ListModulesRequest) (*MultiModuleResponse, error)
	// Add a modules to an app.
	PostModules(context.Context, *PostModulesRequest) (*MultiModuleResponse, error)
	// Patch one or more modules.
	PatchModules(context.Context, *PatchModulesRequest) (*MultiModuleResponse, error)
	// Delete multiple modules in one request.
	DeleteModules(context.Context, *DeleteModulesRequest) (*status.BaseResponse, error)
	// Get a specific module version for a module.
	GetModuleVersion(context.Context, *GetModuleVersionRequest) (*SingleModuleVersionResponse, error)
	// List all the modules versions for a given module.
	ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Create a new module version to trigger training of the module.
	PostModuleVersions(context.Context, *PostModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Delete a multiple module version.
	DeleteModuleVersions(context.Context, *DeleteModuleVersionsRequest) (*status.BaseResponse, error)
	// Get installed modules vesrions for an app.
	GetInstalledModuleVersion(context.Context, *GetInstalledModuleVersionRequest) (*SingleInstalledModuleVersionResponse, error)
	// List installed modules vesrions for an app.
	ListInstalledModuleVersions(context.Context, *ListInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error)
	// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
	PostInstalledModuleVersions(context.Context, *PostInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error)
	// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
	// in the url.
	// This cleaned up any associated caller keys so needs the Keys_Delete scope.
	DeleteInstalledModuleVersions(context.Context, *DeleteInstalledModuleVersionsRequest) (*status.BaseResponse, error)
	// Assign a key that the caller owns to be used when accessing this installed module version
	// If this endpoint is called with a different key then it overwrites what is there.
	PostInstalledModuleVersionsKey(context.Context, *PostInstalledModuleVersionsKeyRequest) (*SingleKeyResponse, error)
	// Perform bulk operations on a list of inputs based on input source.
	// Operation include add, update, delete of concepts, metadata and geo data.
	// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
	PostBulkOperations(context.Context, *PostBulkOperationsRequest) (*MultiBulkOperationsResponse, error)
	// List all the bulk operations
	ListBulkOperations(context.Context, *ListBulkOperationsRequest) (*MultiBulkOperationsResponse, error)
	// Get the bulk operation details by ID
	GetBulkOperation(context.Context, *GetBulkOperationRequest) (*SingleBulkOperationsResponse, error)
	// Cancel one or more bulk operations
	CancelBulkOperations(context.Context, *CancelBulkOperationRequest) (*MultiBulkOperationsResponse, error)
	// delete one or more terminated bulk operations
	DeleteBulkOperations(context.Context, *DeleteBulkOperationRequest) (*status.BaseResponse, error)
	// Get a specific job.
	GetDatasetInputsSearchAddJob(context.Context, *GetDatasetInputsSearchAddJobRequest) (*SingleDatasetInputsSearchAddJobResponse, error)
	// List next non-labeled and unassigned inputs from task's dataset
	ListNextTaskAssignments(context.Context, *ListNextTaskAssignmentsRequest) (*MultiInputResponse, error)
	// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
	PutTaskAssignments(context.Context, *PutTaskAssignmentsRequest) (*status.BaseResponse, error)
	// PostWaitlistEmails adds new e-mail addresses to a feature waiting list.
	PostWaitlistEmails(context.Context, *PostWaitlistEmailsRequest) (*MultiWaitlistEmailResponse, error)
	// GetSampledPredictResults get sampled prediction metrics by model id
	GetSampledPredictMetrics(context.Context, *GetSampledPredictMetricsRequest) (*MultiSampledPredictMetricsResponse, error)
	// Create a job to add inputs from a cloud storage to an app on the clarifai platform
	// This is an Asynchronous process. Use ListInputsAddJobs or GetInputsJob to check the status.
	PostInputsAddJobs(context.Context, *PostInputsAddJobsRequest) (*MultiInputsAddJobResponse, error)
	// List all the inputs add jobs
	ListInputsAddJobs(context.Context, *ListInputsAddJobsRequest) (*MultiInputsAddJobResponse, error)
	// Get the input add job details by ID
	GetInputsAddJob(context.Context, *GetInputsAddJobRequest) (*SingleInputsAddJobResponse, error)
	// cancel the input add job by ID
	CancelInputsAddJob(context.Context, *CancelInputsAddJobRequest) (*SingleInputsAddJobResponse, error)
	PostUploads(context.Context, *PostUploadsRequest) (*MultiUploadResponse, error)
	PutUploadContentParts(context.Context, *PutUploadContentPartsRequest) (*SingleUploadResponse, error)
	GetUpload(context.Context, *GetUploadRequest) (*SingleUploadResponse, error)
	ListUploads(context.Context, *ListUploadsRequest) (*MultiUploadResponse, error)
	DeleteUploads(context.Context, *DeleteUploadsRequest) (*status.BaseResponse, error)
	mustEmbedUnimplementedV2Server()
}

// UnimplementedV2Server must be embedded to have forward compatible implementations.
type UnimplementedV2Server struct {
}

func (UnimplementedV2Server) Echo(context.Context, *TestMessage) (*TestMessage, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedV2Server) ListConceptRelations(context.Context, *ListConceptRelationsRequest) (*MultiConceptRelationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptRelations not implemented")
}
func (UnimplementedV2Server) PostConceptRelations(context.Context, *PostConceptRelationsRequest) (*MultiConceptRelationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptRelations not implemented")
}
func (UnimplementedV2Server) DeleteConceptRelations(context.Context, *DeleteConceptRelationsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteConceptRelations not implemented")
}
func (UnimplementedV2Server) GetConceptCounts(context.Context, *GetConceptCountsRequest) (*MultiConceptCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConceptCounts not implemented")
}
func (UnimplementedV2Server) GetConcept(context.Context, *GetConceptRequest) (*SingleConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConcept not implemented")
}
func (UnimplementedV2Server) ListConcepts(context.Context, *ListConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConcepts not implemented")
}
func (UnimplementedV2Server) ListModelConcepts(context.Context, *ListModelConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelConcepts not implemented")
}
func (UnimplementedV2Server) PostConceptsSearches(context.Context, *PostConceptsSearchesRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptsSearches not implemented")
}
func (UnimplementedV2Server) PostConcepts(context.Context, *PostConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConcepts not implemented")
}
func (UnimplementedV2Server) PatchConcepts(context.Context, *PatchConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchConcepts not implemented")
}
func (UnimplementedV2Server) GetVocab(context.Context, *GetVocabRequest) (*SingleVocabResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVocab not implemented")
}
func (UnimplementedV2Server) ListVocabs(context.Context, *ListVocabsRequest) (*MultiVocabResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVocabs not implemented")
}
func (UnimplementedV2Server) PostVocabs(context.Context, *PostVocabsRequest) (*MultiVocabResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostVocabs not implemented")
}
func (UnimplementedV2Server) PatchVocabs(context.Context, *PatchVocabsRequest) (*MultiVocabResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchVocabs not implemented")
}
func (UnimplementedV2Server) DeleteVocab(context.Context, *DeleteVocabRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVocab not implemented")
}
func (UnimplementedV2Server) DeleteVocabs(context.Context, *DeleteVocabsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVocabs not implemented")
}
func (UnimplementedV2Server) ListVocabConcepts(context.Context, *ListVocabConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVocabConcepts not implemented")
}
func (UnimplementedV2Server) PostVocabConcepts(context.Context, *PostVocabConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostVocabConcepts not implemented")
}
func (UnimplementedV2Server) DeleteVocabConcept(context.Context, *DeleteVocabConceptRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVocabConcept not implemented")
}
func (UnimplementedV2Server) DeleteVocabConcepts(context.Context, *DeleteVocabConceptsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVocabConcepts not implemented")
}
func (UnimplementedV2Server) GetConceptLanguage(context.Context, *GetConceptLanguageRequest) (*SingleConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConceptLanguage not implemented")
}
func (UnimplementedV2Server) ListConceptLanguages(context.Context, *ListConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptLanguages not implemented")
}
func (UnimplementedV2Server) PostConceptLanguages(context.Context, *PostConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptLanguages not implemented")
}
func (UnimplementedV2Server) PatchConceptLanguages(context.Context, *PatchConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchConceptLanguages not implemented")
}
func (UnimplementedV2Server) ListConceptReferences(context.Context, *ListConceptReferencesRequest) (*MultiConceptReferenceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptReferences not implemented")
}
func (UnimplementedV2Server) ListKnowledgeGraphs(context.Context, *ListKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKnowledgeGraphs not implemented")
}
func (UnimplementedV2Server) PostKnowledgeGraphs(context.Context, *PostKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostKnowledgeGraphs not implemented")
}
func (UnimplementedV2Server) PostConceptMappingJobs(context.Context, *PostConceptMappingJobsRequest) (*MultiConceptMappingJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptMappingJobs not implemented")
}
func (UnimplementedV2Server) ListConceptMappings(context.Context, *ListConceptMappingsRequest) (*MultiConceptMappingResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptMappings not implemented")
}
func (UnimplementedV2Server) PostConceptMappings(context.Context, *PostConceptMappingsRequest) (*MultiConceptMappingResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptMappings not implemented")
}
func (UnimplementedV2Server) GetAnnotation(context.Context, *GetAnnotationRequest) (*SingleAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotation not implemented")
}
func (UnimplementedV2Server) ListAnnotations(context.Context, *ListAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotations not implemented")
}
func (UnimplementedV2Server) PostAnnotations(context.Context, *PostAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotations(context.Context, *PatchAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotationsStatus(context.Context, *PatchAnnotationsStatusRequest) (*PatchAnnotationsStatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationsStatus not implemented")
}
func (UnimplementedV2Server) DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotation not implemented")
}
func (UnimplementedV2Server) DeleteAnnotations(context.Context, *DeleteAnnotationsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotationsSearches(context.Context, *PatchAnnotationsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationsSearches not implemented")
}
func (UnimplementedV2Server) PostAnnotationsSearches(context.Context, *PostAnnotationsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationsSearches not implemented")
}
func (UnimplementedV2Server) GetInputCount(context.Context, *GetInputCountRequest) (*SingleInputCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputCount not implemented")
}
func (UnimplementedV2Server) StreamInputs(context.Context, *StreamInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StreamInputs not implemented")
}
func (UnimplementedV2Server) GetInputSamples(context.Context, *GetInputSamplesRequest) (*MultiInputAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputSamples not implemented")
}
func (UnimplementedV2Server) GetInput(context.Context, *GetInputRequest) (*SingleInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInput not implemented")
}
func (UnimplementedV2Server) ListInputs(context.Context, *ListInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputs not implemented")
}
func (UnimplementedV2Server) PostInputs(context.Context, *PostInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputs not implemented")
}
func (UnimplementedV2Server) PostInputsFile(context.Context, *PostInputsFileRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsFile not implemented")
}
func (UnimplementedV2Server) PostInputsNiFi(context.Context, *PostInputsNiFiRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsNiFi not implemented")
}
func (UnimplementedV2Server) PostInputsDocument(context.Context, *PostInputsDocumentRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsDocument not implemented")
}
func (UnimplementedV2Server) PatchInputs(context.Context, *PatchInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchInputs not implemented")
}
func (UnimplementedV2Server) DeleteInput(context.Context, *DeleteInputRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInput not implemented")
}
func (UnimplementedV2Server) DeleteInputs(context.Context, *DeleteInputsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInputs not implemented")
}
func (UnimplementedV2Server) PatchInputsSearches(context.Context, *PatchInputsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchInputsSearches not implemented")
}
func (UnimplementedV2Server) PostInputsSearches(context.Context, *PostInputsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsSearches not implemented")
}
func (UnimplementedV2Server) PostModelOutputs(context.Context, *PostModelOutputsRequest) (*MultiOutputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelOutputs not implemented")
}
func (UnimplementedV2Server) ListDatasets(context.Context, *ListDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedV2Server) GetDataset(context.Context, *GetDatasetRequest) (*SingleDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedV2Server) PostDatasets(context.Context, *PostDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasets not implemented")
}
func (UnimplementedV2Server) PatchDatasets(context.Context, *PatchDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDatasets not implemented")
}
func (UnimplementedV2Server) PatchDatasetIds(context.Context, *PatchDatasetIdsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDatasetIds not implemented")
}
func (UnimplementedV2Server) DeleteDatasets(context.Context, *DeleteDatasetsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasets not implemented")
}
func (UnimplementedV2Server) ListDatasetInputs(context.Context, *ListDatasetInputsRequest) (*MultiDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetInputs not implemented")
}
func (UnimplementedV2Server) GetDatasetInput(context.Context, *GetDatasetInputRequest) (*SingleDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetInput not implemented")
}
func (UnimplementedV2Server) PostDatasetInputs(context.Context, *PostDatasetInputsRequest) (*MultiDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasetInputs not implemented")
}
func (UnimplementedV2Server) DeleteDatasetInputs(context.Context, *DeleteDatasetInputsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasetInputs not implemented")
}
func (UnimplementedV2Server) ListDatasetVersions(context.Context, *ListDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetVersions not implemented")
}
func (UnimplementedV2Server) GetDatasetVersion(context.Context, *GetDatasetVersionRequest) (*SingleDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetVersion not implemented")
}
func (UnimplementedV2Server) ListDatasetVersionMetricsGroups(context.Context, *ListDatasetVersionMetricsGroupsRequest) (*MultiDatasetVersionMetricsGroupResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetVersionMetricsGroups not implemented")
}
func (UnimplementedV2Server) PostDatasetVersions(context.Context, *PostDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasetVersions not implemented")
}
func (UnimplementedV2Server) PatchDatasetVersions(context.Context, *PatchDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDatasetVersions not implemented")
}
func (UnimplementedV2Server) DeleteDatasetVersions(context.Context, *DeleteDatasetVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasetVersions not implemented")
}
func (UnimplementedV2Server) PutDatasetVersionExports(context.Context, *PutDatasetVersionExportsRequest) (*MultiDatasetVersionExportResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutDatasetVersionExports not implemented")
}
func (UnimplementedV2Server) GetModelType(context.Context, *GetModelTypeRequest) (*SingleModelTypeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelType not implemented")
}
func (UnimplementedV2Server) ListOpenSourceLicenses(context.Context, *ListOpenSourceLicensesRequest) (*ListOpenSourceLicensesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOpenSourceLicenses not implemented")
}
func (UnimplementedV2Server) ListModelTypes(context.Context, *ListModelTypesRequest) (*MultiModelTypeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelTypes not implemented")
}
func (UnimplementedV2Server) GetModel(context.Context, *GetModelRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedV2Server) GetModelOutputInfo(context.Context, *GetModelRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelOutputInfo not implemented")
}
func (UnimplementedV2Server) ListModels(context.Context, *ListModelsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedV2Server) PostModelsSearches(context.Context, *PostModelsSearchesRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelsSearches not implemented")
}
func (UnimplementedV2Server) PostModels(context.Context, *PostModelsRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModels not implemented")
}
func (UnimplementedV2Server) PatchModels(context.Context, *PatchModelsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModels not implemented")
}
func (UnimplementedV2Server) PatchModelIds(context.Context, *PatchModelIdsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelIds not implemented")
}
func (UnimplementedV2Server) DeleteModel(context.Context, *DeleteModelRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedV2Server) DeleteModels(context.Context, *DeleteModelsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModels not implemented")
}
func (UnimplementedV2Server) PatchModelCheckConsents(context.Context, *PatchModelCheckConsentsRequest) (*MultiModelCheckConsentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelCheckConsents not implemented")
}
func (UnimplementedV2Server) PatchModelToolkits(context.Context, *PatchModelToolkitsRequest) (*MultiModelToolkitResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelToolkits not implemented")
}
func (UnimplementedV2Server) PatchModelUseCases(context.Context, *PatchModelUseCasesRequest) (*MultiModelUseCaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelUseCases not implemented")
}
func (UnimplementedV2Server) PatchModelLanguages(context.Context, *PatchModelLanguagesRequest) (*MultiModelLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelLanguages not implemented")
}
func (UnimplementedV2Server) ListModelInputs(context.Context, *ListModelInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelInputs not implemented")
}
func (UnimplementedV2Server) GetModelVersion(context.Context, *GetModelVersionRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersion not implemented")
}
func (UnimplementedV2Server) ListModelVersions(context.Context, *ListModelVersionsRequest) (*MultiModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersions not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionsUnPublish(context.Context, *PostWorkflowVersionsUnPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionsUnPublish not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionsPublish(context.Context, *PostWorkflowVersionsPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionsPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersionsPublish(context.Context, *PostModelVersionsPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersionsUnPublish(context.Context, *PostModelVersionsUnPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsUnPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersions(context.Context, *PostModelVersionsRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersions not implemented")
}
func (UnimplementedV2Server) PatchModelVersions(context.Context, *PatchModelVersionsRequest) (*MultiModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelVersions not implemented")
}
func (UnimplementedV2Server) DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModelVersion not implemented")
}
func (UnimplementedV2Server) GetModelVersionMetrics(context.Context, *GetModelVersionMetricsRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionMetrics not implemented")
}
func (UnimplementedV2Server) PostModelVersionMetrics(context.Context, *PostModelVersionMetricsRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionMetrics not implemented")
}
func (UnimplementedV2Server) ListModelReferences(context.Context, *ListModelReferencesRequest) (*MultiModelReferenceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelReferences not implemented")
}
func (UnimplementedV2Server) PostModelReferences(context.Context, *PostModelReferencesRequest) (*MultiModelReferenceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelReferences not implemented")
}
func (UnimplementedV2Server) DeleteModelReferences(context.Context, *DeleteModelReferencesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModelReferences not implemented")
}
func (UnimplementedV2Server) GetModelVersionInputExample(context.Context, *GetModelVersionInputExampleRequest) (*SingleModelVersionInputExampleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionInputExample not implemented")
}
func (UnimplementedV2Server) ListModelVersionInputExamples(context.Context, *ListModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersionInputExamples not implemented")
}
func (UnimplementedV2Server) PostModelVersionInputExamples(context.Context, *PostModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionInputExamples not implemented")
}
func (UnimplementedV2Server) DeleteModelVersionInputExamples(context.Context, *DeleteModelVersionInputExamplesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModelVersionInputExamples not implemented")
}
func (UnimplementedV2Server) PostModelStars(context.Context, *PostModelStarsRequest) (*MultiModelStarResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelStars not implemented")
}
func (UnimplementedV2Server) DeleteModelStars(context.Context, *DeleteModelStarsRequest) (*DeleteModelStarsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModelStars not implemented")
}
func (UnimplementedV2Server) PostUserStars(context.Context, *PostUserStarsRequest) (*MultiUserStarResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostUserStars not implemented")
}
func (UnimplementedV2Server) DeleteUserStars(context.Context, *DeleteUserStarsRequest) (*DeleteUserStarsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUserStars not implemented")
}
func (UnimplementedV2Server) PostWorkflowStars(context.Context, *PostWorkflowStarsRequest) (*MultiWorkflowStarResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowStars not implemented")
}
func (UnimplementedV2Server) DeleteWorkflowStars(context.Context, *DeleteWorkflowStarsRequest) (*DeleteWorkflowStarsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflowStars not implemented")
}
func (UnimplementedV2Server) PostAppStars(context.Context, *PostAppStarsRequest) (*MultiAppStarResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAppStars not implemented")
}
func (UnimplementedV2Server) DeleteAppStars(context.Context, *DeleteAppStarsRequest) (*DeleteAppStarsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAppStars not implemented")
}
func (UnimplementedV2Server) GetWorkflow(context.Context, *GetWorkflowRequest) (*SingleWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedV2Server) ListWorkflows(context.Context, *ListWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedV2Server) ListPublicWorkflows(context.Context, *ListPublicWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPublicWorkflows not implemented")
}
func (UnimplementedV2Server) PostWorkflows(context.Context, *PostWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflows not implemented")
}
func (UnimplementedV2Server) PatchWorkflows(context.Context, *PatchWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflows not implemented")
}
func (UnimplementedV2Server) PatchWorkflowIds(context.Context, *PatchWorkflowIdsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflowIds not implemented")
}
func (UnimplementedV2Server) DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedV2Server) DeleteWorkflows(context.Context, *DeleteWorkflowsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflows not implemented")
}
func (UnimplementedV2Server) PostWorkflowResults(context.Context, *PostWorkflowResultsRequest) (*PostWorkflowResultsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowResults not implemented")
}
func (UnimplementedV2Server) PostWorkflowResultsSimilarity(context.Context, *PostWorkflowResultsSimilarityRequest) (*PostWorkflowResultsSimilarityResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowResultsSimilarity not implemented")
}
func (UnimplementedV2Server) ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflowVersions not implemented")
}
func (UnimplementedV2Server) GetWorkflowVersion(context.Context, *GetWorkflowVersionRequest) (*SingleWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflowVersion not implemented")
}
func (UnimplementedV2Server) DeleteWorkflowVersions(context.Context, *DeleteWorkflowVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflowVersions not implemented")
}
func (UnimplementedV2Server) PatchWorkflowVersions(context.Context, *PatchWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflowVersions not implemented")
}
func (UnimplementedV2Server) PostWorkflowMetrics(context.Context, *PostWorkflowMetricsRequest) (*MultiWorkflowMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowMetrics not implemented")
}
func (UnimplementedV2Server) GetWorkflowMetrics(context.Context, *GetWorkflowMetricsRequest) (*SingleWorkflowMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflowMetrics not implemented")
}
func (UnimplementedV2Server) GetWorkflowNodeMetrics(context.Context, *GetWorkflowNodeMetricsRequest) (*SingleWorkflowNodeMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflowNodeMetrics not implemented")
}
func (UnimplementedV2Server) ListWorkflowMetrics(context.Context, *ListWorkflowMetricsRequest) (*MultiWorkflowMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflowMetrics not implemented")
}
func (UnimplementedV2Server) DeleteWorkflowMetrics(context.Context, *DeleteWorkflowMetricsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflowMetrics not implemented")
}
func (UnimplementedV2Server) GetKey(context.Context, *GetKeyRequest) (*SingleKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedV2Server) ListKeys(context.Context, *ListKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedV2Server) ListAppKeys(context.Context, *ListAppKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAppKeys not implemented")
}
func (UnimplementedV2Server) DeleteKey(context.Context, *DeleteKeyRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedV2Server) PostKeys(context.Context, *PostKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostKeys not implemented")
}
func (UnimplementedV2Server) PatchKeys(context.Context, *PatchKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchKeys not implemented")
}
func (UnimplementedV2Server) MyScopes(context.Context, *MyScopesRequest) (*MultiScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopes not implemented")
}
func (UnimplementedV2Server) MyScopesUser(context.Context, *MyScopesUserRequest) (*MultiScopeUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopesUser not implemented")
}
func (UnimplementedV2Server) MyScopesRoot(context.Context, *MyScopesRootRequest) (*MultiScopeRootResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopesRoot not implemented")
}
func (UnimplementedV2Server) ListScopes(context.Context, *ListScopesRequest) (*MultiScopeDepsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedV2Server) GetApp(context.Context, *GetAppRequest) (*SingleAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedV2Server) ListApps(context.Context, *ListAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedV2Server) DeleteApp(context.Context, *DeleteAppRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedV2Server) PostApps(context.Context, *PostAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostApps not implemented")
}
func (UnimplementedV2Server) PatchApps(context.Context, *PatchAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchApps not implemented")
}
func (UnimplementedV2Server) PatchAppsIds(context.Context, *PatchAppsIdsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAppsIds not implemented")
}
func (UnimplementedV2Server) PatchApp(context.Context, *PatchAppRequest) (*SingleAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchApp not implemented")
}
func (UnimplementedV2Server) PatchAppOwner(context.Context, *PatchAppOwnerRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAppOwner not implemented")
}
func (UnimplementedV2Server) PostAppsSearches(context.Context, *PostAppsSearchesRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAppsSearches not implemented")
}
func (UnimplementedV2Server) GetUser(context.Context, *GetUserRequest) (*SingleUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedV2Server) ListUsers(context.Context, *ListUsersRequest) (*MultiUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedV2Server) PostUserConsent(context.Context, *PostUserConsentRequest) (*SingleUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostUserConsent not implemented")
}
func (UnimplementedV2Server) PatchUser(context.Context, *PatchUserRequest) (*SingleUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchUser not implemented")
}
func (UnimplementedV2Server) PostUserAccess(context.Context, *PostUserAccessRequest) (*MultiUserAccessResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostUserAccess not implemented")
}
func (UnimplementedV2Server) GetUserAccess(context.Context, *GetUserAccessRequest) (*SingleUserAccessResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUserAccess not implemented")
}
func (UnimplementedV2Server) PostEmails(context.Context, *PostEmailsRequest) (*MultipleEmailResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostEmails not implemented")
}
func (UnimplementedV2Server) ListEmails(context.Context, *ListEmailsRequest) (*MultipleEmailResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListEmails not implemented")
}
func (UnimplementedV2Server) PostResendVerifyEmail(context.Context, *PostResendVerifyRequest) (*SingleResendVerifyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostResendVerifyEmail not implemented")
}
func (UnimplementedV2Server) DeleteEmail(context.Context, *DeleteEmailRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteEmail not implemented")
}
func (UnimplementedV2Server) PostPrimaryEmail(context.Context, *PostPrimaryEmailRequest) (*SingleEmailResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostPrimaryEmail not implemented")
}
func (UnimplementedV2Server) PostValidatePassword(context.Context, *PostValidatePasswordRequest) (*SinglePasswordValidationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostValidatePassword not implemented")
}
func (UnimplementedV2Server) ListGlobalPasswordPolicies(context.Context, *ListGlobalPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGlobalPasswordPolicies not implemented")
}
func (UnimplementedV2Server) ListPasswordPolicies(context.Context, *ListPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPasswordPolicies not implemented")
}
func (UnimplementedV2Server) PostPasswordPolicies(context.Context, *PostPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostPasswordPolicies not implemented")
}
func (UnimplementedV2Server) PatchPasswordPolicies(context.Context, *PatchPasswordPoliciesRequest) (*MultiplePasswordPoliciesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchPasswordPolicies not implemented")
}
func (UnimplementedV2Server) DeletePasswordPolicies(context.Context, *DeletePasswordPoliciesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePasswordPolicies not implemented")
}
func (UnimplementedV2Server) GetUserFeatureConfig(context.Context, *UserFeatureConfigRequest) (*SingleUserFeatureConfigResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUserFeatureConfig not implemented")
}
func (UnimplementedV2Server) PostOrganizations(context.Context, *PostOrganizationsRequest) (*MultiOrganizationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostOrganizations not implemented")
}
func (UnimplementedV2Server) ListUsersOrganizations(context.Context, *ListUsersOrganizationsRequest) (*MultiUsersOrganizationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUsersOrganizations not implemented")
}
func (UnimplementedV2Server) ListOrganizations(context.Context, *ListOrganizationsRequest) (*MultiOrganizationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedV2Server) GetOrganization(context.Context, *GetOrganizationRequest) (*SingleOrganizationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedV2Server) PatchOrganization(context.Context, *PatchOrganizationRequest) (*SingleOrganizationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchOrganization not implemented")
}
func (UnimplementedV2Server) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedV2Server) ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*MultiOrganizationMemberResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOrganizationMembers not implemented")
}
func (UnimplementedV2Server) ListOrganizationAppMembers(context.Context, *ListOrganizationAppMembersRequest) (*MultiOrganizationMemberResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOrganizationAppMembers not implemented")
}
func (UnimplementedV2Server) PostOrganizationMember(context.Context, *PostOrganizationMemberRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostOrganizationMember not implemented")
}
func (UnimplementedV2Server) PatchOrganizationMember(context.Context, *PatchOrganizationMembersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchOrganizationMember not implemented")
}
func (UnimplementedV2Server) DeleteOrganizationMember(context.Context, *DeleteOrganizationMemberRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteOrganizationMember not implemented")
}
func (UnimplementedV2Server) PostOrganizationInvitations(context.Context, *PostOrganizationInvitationsRequest) (*MultiOrganizationInvitationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostOrganizationInvitations not implemented")
}
func (UnimplementedV2Server) PatchOrganizationInvitations(context.Context, *PatchOrganizationInvitationsRequest) (*MultiOrganizationInvitationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchOrganizationInvitations not implemented")
}
func (UnimplementedV2Server) ListOrganizationInvitations(context.Context, *ListOrganizationInvitationsRequest) (*MultiOrganizationInvitationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOrganizationInvitations not implemented")
}
func (UnimplementedV2Server) GetOrganizationInvitation(context.Context, *GetOrganizationInvitationRequest) (*SingleOrganizationInvitationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOrganizationInvitation not implemented")
}
func (UnimplementedV2Server) PostDeclineOrganizationInvitation(context.Context, *PostDeclineOrganizationInvitationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDeclineOrganizationInvitation not implemented")
}
func (UnimplementedV2Server) PostAcceptOrganizationInvitation(context.Context, *PostAcceptOrganizationInvitationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAcceptOrganizationInvitation not implemented")
}
func (UnimplementedV2Server) GetOrganizationInvitationPublic(context.Context, *GetOrganizationInvitationPublicRequest) (*SingleOrganizationInvitationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOrganizationInvitationPublic not implemented")
}
func (UnimplementedV2Server) DeleteRequestingUserFromOrganization(context.Context, *DeleteRequestingUserFromOrganizationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRequestingUserFromOrganization not implemented")
}
func (UnimplementedV2Server) PostIdentityProviders(context.Context, *PostIdentityProvidersRequest) (*MultiIdentityProviderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostIdentityProviders not implemented")
}
func (UnimplementedV2Server) ListIdentityProviders(context.Context, *ListIdentityProvidersRequest) (*MultiIdentityProviderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListIdentityProviders not implemented")
}
func (UnimplementedV2Server) GetIdentityProvider(context.Context, *GetIdentityProviderRequest) (*SingleIdentityProviderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetIdentityProvider not implemented")
}
func (UnimplementedV2Server) PatchIdentityProviders(context.Context, *PatchIdentityProvidersRequest) (*MultiIdentityProviderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchIdentityProviders not implemented")
}
func (UnimplementedV2Server) DeleteIdentityProviders(context.Context, *DeleteIdentityProvidersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteIdentityProviders not implemented")
}
func (UnimplementedV2Server) PostTeams(context.Context, *PostTeamsRequest) (*MultiTeamResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTeams not implemented")
}
func (UnimplementedV2Server) ListTeams(context.Context, *ListTeamsRequest) (*MultiTeamResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedV2Server) GetTeam(context.Context, *GetTeamRequest) (*SingleTeamResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedV2Server) PatchTeams(context.Context, *PatchTeamsRequest) (*MultiTeamResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchTeams not implemented")
}
func (UnimplementedV2Server) DeleteTeams(context.Context, *DeleteTeamsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTeams not implemented")
}
func (UnimplementedV2Server) PostTeamUsers(context.Context, *PostTeamUsersRequest) (*MultiTeamUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTeamUsers not implemented")
}
func (UnimplementedV2Server) ListTeamUsers(context.Context, *ListTeamUsersRequest) (*MultiTeamUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTeamUsers not implemented")
}
func (UnimplementedV2Server) DeleteTeamUsers(context.Context, *DeleteTeamUsersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTeamUsers not implemented")
}
func (UnimplementedV2Server) PostTeamApps(context.Context, *PostTeamAppsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTeamApps not implemented")
}
func (UnimplementedV2Server) ListTeamApps(context.Context, *ListTeamAppsRequest) (*MultiTeamAppsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTeamApps not implemented")
}
func (UnimplementedV2Server) DeleteTeamApps(context.Context, *DeleteTeamAppsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTeamApps not implemented")
}
func (UnimplementedV2Server) ListRoles(context.Context, *ListRolesRequest) (*MultiRoleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedV2Server) GetRole(context.Context, *GetRoleRequest) (*SingleRoleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedV2Server) GetSearch(context.Context, *GetSearchRequest) (*SingleSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSearch not implemented")
}
func (UnimplementedV2Server) ListSearches(context.Context, *ListSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSearches not implemented")
}
func (UnimplementedV2Server) PatchSearches(context.Context, *PatchSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchSearches not implemented")
}
func (UnimplementedV2Server) PostSearches(context.Context, *PostSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSearches not implemented")
}
func (UnimplementedV2Server) PostSearchesByID(context.Context, *PostSearchesByIDRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSearchesByID not implemented")
}
func (UnimplementedV2Server) PostAnnotationSearchMetrics(context.Context, *PostAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) GetAnnotationSearchMetrics(context.Context, *GetAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) ListAnnotationSearchMetrics(context.Context, *ListAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) DeleteAnnotationSearchMetrics(context.Context, *DeleteAnnotationSearchMetricsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) DeleteSearch(context.Context, *DeleteSearchRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSearch not implemented")
}
func (UnimplementedV2Server) PostAttributeSearch(context.Context, *PostAttributeSearchRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAttributeSearch not implemented")
}
func (UnimplementedV2Server) ListAnnotationFilters(context.Context, *ListAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationFilters not implemented")
}
func (UnimplementedV2Server) GetAnnotationFilter(context.Context, *GetAnnotationFilterRequest) (*SingleAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotationFilter not implemented")
}
func (UnimplementedV2Server) PostAnnotationFilters(context.Context, *PostAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationFilters not implemented")
}
func (UnimplementedV2Server) PatchAnnotationFilters(context.Context, *PatchAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationFilters not implemented")
}
func (UnimplementedV2Server) DeleteAnnotationFilters(context.Context, *DeleteAnnotationFiltersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotationFilters not implemented")
}
func (UnimplementedV2Server) ListClusters(context.Context, *ListClustersRequest) (*MultiClusterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedV2Server) ListAnnotationsForCluster(context.Context, *ListAnnotationsForClusterRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationsForCluster not implemented")
}
func (UnimplementedV2Server) PostClustersSearches(context.Context, *PostClustersSearchesRequest) (*MultiClusterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostClustersSearches not implemented")
}
func (UnimplementedV2Server) PostVerifyEmail(context.Context, *PostVerifyEmailRequest) (*SingleVerifyEmailResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostVerifyEmail not implemented")
}
func (UnimplementedV2Server) PostRequestResetPassword(context.Context, *RequestResetPasswordRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostRequestResetPassword not implemented")
}
func (UnimplementedV2Server) PostCompleteResetPassword(context.Context, *CompleteResetPasswordRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCompleteResetPassword not implemented")
}
func (UnimplementedV2Server) PostLogin(context.Context, *PostLoginRequest) (*SingleLoginResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostLogin not implemented")
}
func (UnimplementedV2Server) PostSignup(context.Context, *PostSignupRequest) (*SingleLoginResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSignup not implemented")
}
func (UnimplementedV2Server) PostLogout(context.Context, *PostLogoutRequest) (*SingleLogoutResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostLogout not implemented")
}
func (UnimplementedV2Server) ListAuthMethods(context.Context, *ListAuthMethodsRequest) (*ListAuthMethodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAuthMethods not implemented")
}
func (UnimplementedV2Server) ListOrgAuthMethods(context.Context, *ListAuthMethodsRequest) (*ListAuthMethodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOrgAuthMethods not implemented")
}
func (UnimplementedV2Server) PostIdLoginFinalizer(context.Context, *PostIdLoginFinalizerRequest) (*PostIdLoginFinalizerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostIdLoginFinalizer not implemented")
}
func (UnimplementedV2Server) PostLinkIdpUser(context.Context, *PostLinkIdpUserRequest) (*PostLinkIdpUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostLinkIdpUser not implemented")
}
func (UnimplementedV2Server) GetLoginInfo(context.Context, *GetLoginInfoRequest) (*GetLoginInfoResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLoginInfo not implemented")
}
func (UnimplementedV2Server) ListAuth2FAMethods(context.Context, *List2FAMethodsRequest) (*List2FAMethodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAuth2FAMethods not implemented")
}
func (UnimplementedV2Server) PostAuth2FATotpRegisterEnable(context.Context, *PostAuth2FATotpRegisterEnableRequest) (*PostAuth2FATotpRegisterEnableResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAuth2FATotpRegisterEnable not implemented")
}
func (UnimplementedV2Server) PostAuth2FATotpRegisterVerify(context.Context, *PostAuth2FATotpRegisterVerifyRequest) (*PostAuth2FATotpRegisterVerifyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAuth2FATotpRegisterVerify not implemented")
}
func (UnimplementedV2Server) PostAuth2FATotpDisable(context.Context, *PostAuth2FATotpDisableRequest) (*PostAuth2FATotpDisableResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAuth2FATotpDisable not implemented")
}
func (UnimplementedV2Server) PostAuth2FATotpLogin(context.Context, *PostAuth2FATotpLoginRequest) (*SingleLoginResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAuth2FATotpLogin not implemented")
}
func (UnimplementedV2Server) PostAuth2FATotpRecover(context.Context, *PostAuth2FATotpRecoverRequest) (*PostAuth2FATotpRecoverResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAuth2FATotpRecover not implemented")
}
func (UnimplementedV2Server) GetAuth2FATotpRecoverConfirm(context.Context, *GetAuth2FATotpRecoverConfirmRequest) (*GetAuth2FATotpRecoverConfirmResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAuth2FATotpRecoverConfirm not implemented")
}
func (UnimplementedV2Server) GetSubscription(context.Context, *GetSubscriptionRequest) (*SingleSubscriptionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedV2Server) PostSubscription(context.Context, *PostSubscriptionRequest) (*SingleSubscriptionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSubscription not implemented")
}
func (UnimplementedV2Server) ListCreditCards(context.Context, *ListCreditCardsRequest) (*MultipleCreditCardResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCreditCards not implemented")
}
func (UnimplementedV2Server) PostCreditCard(context.Context, *PostCreditCardRequest) (*SingleCreditCardResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCreditCard not implemented")
}
func (UnimplementedV2Server) DeleteCreditCard(context.Context, *DeleteCreditCardRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCreditCard not implemented")
}
func (UnimplementedV2Server) PatchCreditCards(context.Context, *PatchCreditCardsRequest) (*MultipleCreditCardResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchCreditCards not implemented")
}
func (UnimplementedV2Server) GetShippingAddress(context.Context, *GetShippingAddressRequest) (*SingleShippingAddressResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetShippingAddress not implemented")
}
func (UnimplementedV2Server) PutShippingAddress(context.Context, *PutShippingAddressRequest) (*SingleShippingAddressResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutShippingAddress not implemented")
}
func (UnimplementedV2Server) ListPlans(context.Context, *ListPlansRequest) (*MultiPlanResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedV2Server) ListStatusCodes(context.Context, *ListStatusCodesRequest) (*MultiStatusCodeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListStatusCodes not implemented")
}
func (UnimplementedV2Server) GetStatusCode(context.Context, *GetStatusCodeRequest) (*SingleStatusCodeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetStatusCode not implemented")
}
func (UnimplementedV2Server) GetHealthz(context.Context, *GetHealthzRequest) (*GetHealthzResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetHealthz not implemented")
}
func (UnimplementedV2Server) ListUserBillingCycles(context.Context, *ListUserBillingCyclesRequest) (*ListUserBillingCyclesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUserBillingCycles not implemented")
}
func (UnimplementedV2Server) ListUserCycles(context.Context, *ListUserCyclesRequest) (*ListUserCyclesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUserCycles not implemented")
}
func (UnimplementedV2Server) GetBillingUsage(context.Context, *GetBillingUsageRequest) (*GetBillingUsageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetBillingUsage not implemented")
}
func (UnimplementedV2Server) PostHistoricalUsage(context.Context, *PostHistoricalUsageRequest) (*PostHistoricalUsageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostHistoricalUsage not implemented")
}
func (UnimplementedV2Server) GetHistoricalUsage(context.Context, *GetHistoricalUsageRequest) (*GetHistoricalUsageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetHistoricalUsage not implemented")
}
func (UnimplementedV2Server) ListUsageIntervals(context.Context, *ListUsageIntervalsRequest) (*ListUsageIntervalsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUsageIntervals not implemented")
}
func (UnimplementedV2Server) GetRealtimeUsage(context.Context, *GetRealtimeUsageRequest) (*GetRealtimeUsageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRealtimeUsage not implemented")
}
func (UnimplementedV2Server) PostUsage(context.Context, *PostUsageRequest) (*PostUsageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostUsage not implemented")
}
func (UnimplementedV2Server) ListCollaborators(context.Context, *ListCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollaborators not implemented")
}
func (UnimplementedV2Server) PostCollaborators(context.Context, *PostCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCollaborators not implemented")
}
func (UnimplementedV2Server) PatchCollaborators(context.Context, *PatchCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchCollaborators not implemented")
}
func (UnimplementedV2Server) DeleteCollaborators(context.Context, *DeleteCollaboratorsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCollaborators not implemented")
}
func (UnimplementedV2Server) ListCollaborations(context.Context, *ListCollaborationsRequest) (*MultiCollaborationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollaborations not implemented")
}
func (UnimplementedV2Server) FetchLicense(context.Context, *FetchLicenseRequest) (*FetchLicenseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FetchLicense not implemented")
}
func (UnimplementedV2Server) ListLicenses(context.Context, *ListLicensesRequest) (*MultipleLicensesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListLicenses not implemented")
}
func (UnimplementedV2Server) GetLicense(context.Context, *GetLicenseRequest) (*SingleLicenseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedV2Server) ValidateLicense(context.Context, *ValidateLicenseRequest) (*ValidateLicenseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateLicense not implemented")
}
func (UnimplementedV2Server) PostAppDuplications(context.Context, *PostAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAppDuplications not implemented")
}
func (UnimplementedV2Server) ListAppDuplications(context.Context, *ListAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAppDuplications not implemented")
}
func (UnimplementedV2Server) GetAppDuplication(context.Context, *GetAppDuplicationRequest) (*SingleAppDuplicationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAppDuplication not implemented")
}
func (UnimplementedV2Server) PostTasks(context.Context, *PostTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTasks not implemented")
}
func (UnimplementedV2Server) GetTaskAnnotationCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTaskAnnotationCount not implemented")
}
func (UnimplementedV2Server) GetTaskInputCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTaskInputCount not implemented")
}
func (UnimplementedV2Server) GetTask(context.Context, *GetTaskRequest) (*SingleTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedV2Server) ListTasks(context.Context, *ListTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedV2Server) PatchTasks(context.Context, *PatchTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchTasks not implemented")
}
func (UnimplementedV2Server) DeleteTasks(context.Context, *DeleteTasksRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTasks not implemented")
}
func (UnimplementedV2Server) PatchAnnotationCountsRollup(context.Context, *PatchAnnotationCountsRollupRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationCountsRollup not implemented")
}
func (UnimplementedV2Server) PostLabelOrders(context.Context, *PostLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostLabelOrders not implemented")
}
func (UnimplementedV2Server) GetLabelOrder(context.Context, *GetLabelOrderRequest) (*SingleLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLabelOrder not implemented")
}
func (UnimplementedV2Server) ListLabelOrders(context.Context, *ListLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListLabelOrders not implemented")
}
func (UnimplementedV2Server) PatchLabelOrders(context.Context, *PatchLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchLabelOrders not implemented")
}
func (UnimplementedV2Server) DeleteLabelOrders(context.Context, *DeleteLabelOrdersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteLabelOrders not implemented")
}
func (UnimplementedV2Server) PostCollectors(context.Context, *PostCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCollectors not implemented")
}
func (UnimplementedV2Server) GetCollector(context.Context, *GetCollectorRequest) (*SingleCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCollector not implemented")
}
func (UnimplementedV2Server) ListCollectors(context.Context, *ListCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollectors not implemented")
}
func (UnimplementedV2Server) PatchCollectors(context.Context, *PatchCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchCollectors not implemented")
}
func (UnimplementedV2Server) DeleteCollectors(context.Context, *DeleteCollectorsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCollectors not implemented")
}
func (UnimplementedV2Server) PostStatValues(context.Context, *PostStatValuesRequest) (*MultiStatValueResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostStatValues not implemented")
}
func (UnimplementedV2Server) PostStatValuesAggregate(context.Context, *PostStatValuesAggregateRequest) (*MultiStatValueAggregateResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostStatValuesAggregate not implemented")
}
func (UnimplementedV2Server) PostAnalytics(context.Context, *PostAnalyticsRequest) (*PostAnalyticsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnalytics not implemented")
}
func (UnimplementedV2Server) PostSDKBilling(context.Context, *PostSDKBillingRequest) (*PostSDKBillingResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSDKBilling not implemented")
}
func (UnimplementedV2Server) PostFindDuplicateAnnotationsJobs(context.Context, *PostFindDuplicateAnnotationsJobsRequest) (*MultiFindDuplicateAnnotationsJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostFindDuplicateAnnotationsJobs not implemented")
}
func (UnimplementedV2Server) GetFindDuplicateAnnotationsJob(context.Context, *GetFindDuplicateAnnotationsJobRequest) (*SingleFindDuplicateAnnotationsJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetFindDuplicateAnnotationsJob not implemented")
}
func (UnimplementedV2Server) ListFindDuplicateAnnotationsJobs(context.Context, *ListFindDuplicateAnnotationsJobsRequest) (*MultiFindDuplicateAnnotationsJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListFindDuplicateAnnotationsJobs not implemented")
}
func (UnimplementedV2Server) DeleteFindDuplicateAnnotationsJobs(context.Context, *DeleteFindDuplicateAnnotationsJobsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteFindDuplicateAnnotationsJobs not implemented")
}
func (UnimplementedV2Server) PostTrendingMetricsView(context.Context, *PostTrendingMetricsViewRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTrendingMetricsView not implemented")
}
func (UnimplementedV2Server) ListTrendingMetricsViews(context.Context, *ListTrendingMetricsViewsRequest) (*MultiTrendingMetricsViewResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTrendingMetricsViews not implemented")
}
func (UnimplementedV2Server) PostIdValidation(context.Context, *PostIdValidationRequest) (*MultiIdValidationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostIdValidation not implemented")
}
func (UnimplementedV2Server) ListTagCategories(context.Context, *ListTagCategoriesRequest) (*MultiTagCategoryResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTagCategories not implemented")
}
func (UnimplementedV2Server) ListWebNotifications(context.Context, *ListWebNotificationsRequest) (*MultiWebNotificationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWebNotifications not implemented")
}
func (UnimplementedV2Server) GetWebNotification(context.Context, *GetWebNotificationRequest) (*SingleWebNotificationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWebNotification not implemented")
}
func (UnimplementedV2Server) PatchWebNotifications(context.Context, *PatchWebNotificationsRequest) (*MultiWebNotificationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWebNotifications not implemented")
}
func (UnimplementedV2Server) DeleteWebNotifications(context.Context, *DeleteWebNotificationsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWebNotifications not implemented")
}
func (UnimplementedV2Server) GetModule(context.Context, *GetModuleRequest) (*SingleModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedV2Server) ListModules(context.Context, *ListModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedV2Server) PostModules(context.Context, *PostModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModules not implemented")
}
func (UnimplementedV2Server) PatchModules(context.Context, *PatchModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModules not implemented")
}
func (UnimplementedV2Server) DeleteModules(context.Context, *DeleteModulesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModules not implemented")
}
func (UnimplementedV2Server) GetModuleVersion(context.Context, *GetModuleVersionRequest) (*SingleModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModuleVersion not implemented")
}
func (UnimplementedV2Server) ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModuleVersions not implemented")
}
func (UnimplementedV2Server) PostModuleVersions(context.Context, *PostModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModuleVersions not implemented")
}
func (UnimplementedV2Server) DeleteModuleVersions(context.Context, *DeleteModuleVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModuleVersions not implemented")
}
func (UnimplementedV2Server) GetInstalledModuleVersion(context.Context, *GetInstalledModuleVersionRequest) (*SingleInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInstalledModuleVersion not implemented")
}
func (UnimplementedV2Server) ListInstalledModuleVersions(context.Context, *ListInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) PostInstalledModuleVersions(context.Context, *PostInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) DeleteInstalledModuleVersions(context.Context, *DeleteInstalledModuleVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) PostInstalledModuleVersionsKey(context.Context, *PostInstalledModuleVersionsKeyRequest) (*SingleKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInstalledModuleVersionsKey not implemented")
}
func (UnimplementedV2Server) PostBulkOperations(context.Context, *PostBulkOperationsRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostBulkOperations not implemented")
}
func (UnimplementedV2Server) ListBulkOperations(context.Context, *ListBulkOperationsRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListBulkOperations not implemented")
}
func (UnimplementedV2Server) GetBulkOperation(context.Context, *GetBulkOperationRequest) (*SingleBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetBulkOperation not implemented")
}
func (UnimplementedV2Server) CancelBulkOperations(context.Context, *CancelBulkOperationRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelBulkOperations not implemented")
}
func (UnimplementedV2Server) DeleteBulkOperations(context.Context, *DeleteBulkOperationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteBulkOperations not implemented")
}
func (UnimplementedV2Server) GetDatasetInputsSearchAddJob(context.Context, *GetDatasetInputsSearchAddJobRequest) (*SingleDatasetInputsSearchAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetInputsSearchAddJob not implemented")
}
func (UnimplementedV2Server) ListNextTaskAssignments(context.Context, *ListNextTaskAssignmentsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNextTaskAssignments not implemented")
}
func (UnimplementedV2Server) PutTaskAssignments(context.Context, *PutTaskAssignmentsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutTaskAssignments not implemented")
}
func (UnimplementedV2Server) PostWaitlistEmails(context.Context, *PostWaitlistEmailsRequest) (*MultiWaitlistEmailResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWaitlistEmails not implemented")
}
func (UnimplementedV2Server) GetSampledPredictMetrics(context.Context, *GetSampledPredictMetricsRequest) (*MultiSampledPredictMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSampledPredictMetrics not implemented")
}
func (UnimplementedV2Server) PostInputsAddJobs(context.Context, *PostInputsAddJobsRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsAddJobs not implemented")
}
func (UnimplementedV2Server) ListInputsAddJobs(context.Context, *ListInputsAddJobsRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputsAddJobs not implemented")
}
func (UnimplementedV2Server) GetInputsAddJob(context.Context, *GetInputsAddJobRequest) (*SingleInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputsAddJob not implemented")
}
func (UnimplementedV2Server) CancelInputsAddJob(context.Context, *CancelInputsAddJobRequest) (*SingleInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelInputsAddJob not implemented")
}
func (UnimplementedV2Server) PostUploads(context.Context, *PostUploadsRequest) (*MultiUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostUploads not implemented")
}
func (UnimplementedV2Server) PutUploadContentParts(context.Context, *PutUploadContentPartsRequest) (*SingleUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutUploadContentParts not implemented")
}
func (UnimplementedV2Server) GetUpload(context.Context, *GetUploadRequest) (*SingleUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUpload not implemented")
}
func (UnimplementedV2Server) ListUploads(context.Context, *ListUploadsRequest) (*MultiUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUploads not implemented")
}
func (UnimplementedV2Server) DeleteUploads(context.Context, *DeleteUploadsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUploads not implemented")
}
func (UnimplementedV2Server) mustEmbedUnimplementedV2Server() {}

// UnsafeV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V2Server will
// result in compilation errors.
type UnsafeV2Server interface {
	mustEmbedUnimplementedV2Server()
}

func RegisterV2Server(s grpc.ServiceRegistrar, srv V2Server) {
	s.RegisterService(&V2_ServiceDesc, srv)
}

func _V2_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).Echo(ctx, req.(*TestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConceptRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptRelations(ctx, req.(*ListConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptRelations(ctx, req.(*PostConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteConceptRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteConceptRelations(ctx, req.(*DeleteConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConceptCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConceptCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetConceptCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConceptCounts(ctx, req.(*GetConceptCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConcept(ctx, req.(*GetConceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConcepts(ctx, req.(*ListConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelConcepts(ctx, req.(*ListModelConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptsSearches(ctx, req.(*PostConceptsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConcepts(ctx, req.(*PostConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchConcepts(ctx, req.(*PatchConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetVocab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVocabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetVocab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetVocab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetVocab(ctx, req.(*GetVocabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListVocabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVocabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListVocabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListVocabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListVocabs(ctx, req.(*ListVocabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostVocabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVocabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostVocabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostVocabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostVocabs(ctx, req.(*PostVocabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchVocabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchVocabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchVocabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchVocabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchVocabs(ctx, req.(*PatchVocabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteVocab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVocabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteVocab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteVocab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteVocab(ctx, req.(*DeleteVocabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteVocabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVocabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteVocabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteVocabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteVocabs(ctx, req.(*DeleteVocabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListVocabConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVocabConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListVocabConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListVocabConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListVocabConcepts(ctx, req.(*ListVocabConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostVocabConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVocabConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostVocabConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostVocabConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostVocabConcepts(ctx, req.(*PostVocabConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteVocabConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVocabConceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteVocabConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteVocabConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteVocabConcept(ctx, req.(*DeleteVocabConceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteVocabConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVocabConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteVocabConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteVocabConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteVocabConcepts(ctx, req.(*DeleteVocabConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConceptLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConceptLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetConceptLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConceptLanguage(ctx, req.(*GetConceptLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConceptLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptLanguages(ctx, req.(*ListConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptLanguages(ctx, req.(*PostConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchConceptLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchConceptLanguages(ctx, req.(*PatchConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConceptReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConceptReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptReferences(ctx, req.(*ListConceptReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListKnowledgeGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnowledgeGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListKnowledgeGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListKnowledgeGraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListKnowledgeGraphs(ctx, req.(*ListKnowledgeGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostKnowledgeGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostKnowledgeGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostKnowledgeGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostKnowledgeGraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostKnowledgeGraphs(ctx, req.(*PostKnowledgeGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptMappingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptMappingJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptMappingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptMappingJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptMappingJobs(ctx, req.(*PostConceptMappingJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConceptMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConceptMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptMappings(ctx, req.(*ListConceptMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptMappings(ctx, req.(*PostConceptMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotation(ctx, req.(*GetAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotations(ctx, req.(*ListAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotations(ctx, req.(*PostAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotations(ctx, req.(*PatchAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotationsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationsStatus(ctx, req.(*PatchAnnotationsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotation(ctx, req.(*DeleteAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotations(ctx, req.(*DeleteAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotationsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationsSearches(ctx, req.(*PatchAnnotationsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotationsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationsSearches(ctx, req.(*PostAnnotationsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputCount(ctx, req.(*GetInputCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_StreamInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).StreamInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/StreamInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).StreamInputs(ctx, req.(*StreamInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputSamples(ctx, req.(*GetInputSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInput(ctx, req.(*GetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputs(ctx, req.(*ListInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputs(ctx, req.(*PostInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsFile(ctx, req.(*PostInputsFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsNiFi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsNiFiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsNiFi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsNiFi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsNiFi(ctx, req.(*PostInputsNiFiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsDocument(ctx, req.(*PostInputsDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchInputs(ctx, req.(*PatchInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInput(ctx, req.(*DeleteInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInputs(ctx, req.(*DeleteInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchInputsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInputsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchInputsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchInputsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchInputsSearches(ctx, req.(*PatchInputsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsSearches(ctx, req.(*PostInputsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelOutputs(ctx, req.(*PostModelOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasets(ctx, req.(*PostDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDatasets(ctx, req.(*PatchDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDatasetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDatasetIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDatasetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchDatasetIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDatasetIds(ctx, req.(*PatchDatasetIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasets(ctx, req.(*DeleteDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasetInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetInputs(ctx, req.(*ListDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDatasetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDatasetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetDatasetInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDatasetInput(ctx, req.(*GetDatasetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostDatasetInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasetInputs(ctx, req.(*PostDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteDatasetInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasetInputs(ctx, req.(*DeleteDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetVersions(ctx, req.(*ListDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDatasetVersion(ctx, req.(*GetDatasetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetVersionMetricsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetVersionMetricsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetVersionMetricsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasetVersionMetricsGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetVersionMetricsGroups(ctx, req.(*ListDatasetVersionMetricsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasetVersions(ctx, req.(*PostDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDatasetVersions(ctx, req.(*PatchDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasetVersions(ctx, req.(*DeleteDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutDatasetVersionExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDatasetVersionExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutDatasetVersionExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PutDatasetVersionExports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutDatasetVersionExports(ctx, req.(*PutDatasetVersionExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelType(ctx, req.(*GetModelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOpenSourceLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpenSourceLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOpenSourceLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListOpenSourceLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOpenSourceLicenses(ctx, req.(*ListOpenSourceLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelTypes(ctx, req.(*ListModelTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelOutputInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelOutputInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelOutputInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelOutputInfo(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelsSearches(ctx, req.(*PostModelsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModels(ctx, req.(*PostModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModels(ctx, req.(*PatchModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelIds(ctx, req.(*PatchModelIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModels(ctx, req.(*DeleteModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelCheckConsents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelCheckConsentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelCheckConsents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelCheckConsents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelCheckConsents(ctx, req.(*PatchModelCheckConsentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelToolkits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelToolkitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelToolkits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelToolkits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelToolkits(ctx, req.(*PatchModelToolkitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelUseCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelUseCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelUseCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelUseCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelUseCases(ctx, req.(*PatchModelUseCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelLanguages(ctx, req.(*PatchModelLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelInputs(ctx, req.(*ListModelInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersion(ctx, req.(*GetModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersions(ctx, req.(*ListModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionsUnPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionsUnPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionsUnPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowVersionsUnPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionsUnPublish(ctx, req.(*PostWorkflowVersionsUnPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionsPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionsPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionsPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowVersionsPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionsPublish(ctx, req.(*PostWorkflowVersionsPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionsPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsPublish(ctx, req.(*PostModelVersionsPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsUnPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsUnPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsUnPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionsUnPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsUnPublish(ctx, req.(*PostModelVersionsUnPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersions(ctx, req.(*PostModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelVersions(ctx, req.(*PatchModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModelVersion(ctx, req.(*DeleteModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelVersionMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionMetrics(ctx, req.(*GetModelVersionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionMetrics(ctx, req.(*PostModelVersionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelReferences(ctx, req.(*ListModelReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelReferences(ctx, req.(*PostModelReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModelReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModelReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModelReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModelReferences(ctx, req.(*DeleteModelReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionInputExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionInputExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionInputExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelVersionInputExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionInputExample(ctx, req.(*GetModelVersionInputExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersionInputExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionInputExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersionInputExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelVersionInputExamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersionInputExamples(ctx, req.(*ListModelVersionInputExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionInputExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionInputExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionInputExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionInputExamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionInputExamples(ctx, req.(*PostModelVersionInputExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModelVersionInputExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionInputExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModelVersionInputExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModelVersionInputExamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModelVersionInputExamples(ctx, req.(*DeleteModelVersionInputExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelStars(ctx, req.(*PostModelStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModelStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModelStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModelStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModelStars(ctx, req.(*DeleteModelStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostUserStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostUserStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostUserStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostUserStars(ctx, req.(*PostUserStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteUserStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteUserStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteUserStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteUserStars(ctx, req.(*DeleteUserStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowStars(ctx, req.(*PostWorkflowStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflowStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflowStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflowStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflowStars(ctx, req.(*DeleteWorkflowStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAppStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAppStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAppStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAppStars(ctx, req.(*PostAppStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAppStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAppStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAppStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAppStars(ctx, req.(*DeleteAppStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListPublicWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPublicWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListPublicWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPublicWorkflows(ctx, req.(*ListPublicWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflows(ctx, req.(*PostWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflows(ctx, req.(*PatchWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflowIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflowIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchWorkflowIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflowIds(ctx, req.(*PatchWorkflowIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflows(ctx, req.(*DeleteWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowResults(ctx, req.(*PostWorkflowResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowResultsSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowResultsSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowResultsSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowResultsSimilarity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowResultsSimilarity(ctx, req.(*PostWorkflowResultsSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListWorkflowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflowVersions(ctx, req.(*ListWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetWorkflowVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflowVersion(ctx, req.(*GetWorkflowVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflowVersions(ctx, req.(*DeleteWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchWorkflowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflowVersions(ctx, req.(*PatchWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowMetrics(ctx, req.(*PostWorkflowMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflowMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflowMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetWorkflowMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflowMetrics(ctx, req.(*GetWorkflowMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflowNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflowNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetWorkflowNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflowNodeMetrics(ctx, req.(*GetWorkflowNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflowMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflowMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListWorkflowMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflowMetrics(ctx, req.(*ListWorkflowMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflowMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflowMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflowMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflowMetrics(ctx, req.(*DeleteWorkflowMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAppKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAppKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAppKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAppKeys(ctx, req.(*ListAppKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostKeys(ctx, req.(*PostKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchKeys(ctx, req.(*PatchKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/MyScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopes(ctx, req.(*MyScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopesUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopesUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/MyScopesUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopesUser(ctx, req.(*MyScopesUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopesRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopesRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/MyScopesRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopesRoot(ctx, req.(*MyScopesRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListScopes(ctx, req.(*ListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostApps(ctx, req.(*PostAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchApps(ctx, req.(*PatchAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAppsIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppsIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAppsIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAppsIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAppsIds(ctx, req.(*PatchAppsIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchApp(ctx, req.(*PatchAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAppOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAppOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAppOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAppOwner(ctx, req.(*PatchAppOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAppsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAppsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAppsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAppsSearches(ctx, req.(*PostAppsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostUserConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostUserConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostUserConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostUserConsent(ctx, req.(*PostUserConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchUser(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostUserAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostUserAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostUserAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostUserAccess(ctx, req.(*PostUserAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUserAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUserAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetUserAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUserAccess(ctx, req.(*GetUserAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostEmails(ctx, req.(*PostEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListEmails(ctx, req.(*ListEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostResendVerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostResendVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostResendVerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostResendVerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostResendVerifyEmail(ctx, req.(*PostResendVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteEmail(ctx, req.(*DeleteEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostPrimaryEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPrimaryEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostPrimaryEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostPrimaryEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostPrimaryEmail(ctx, req.(*PostPrimaryEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostValidatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostValidatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostValidatePassword(ctx, req.(*PostValidatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListGlobalPasswordPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalPasswordPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListGlobalPasswordPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListGlobalPasswordPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListGlobalPasswordPolicies(ctx, req.(*ListGlobalPasswordPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListPasswordPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPasswordPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPasswordPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListPasswordPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPasswordPolicies(ctx, req.(*ListPasswordPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostPasswordPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPasswordPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostPasswordPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostPasswordPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostPasswordPolicies(ctx, req.(*PostPasswordPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchPasswordPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPasswordPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchPasswordPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchPasswordPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchPasswordPolicies(ctx, req.(*PatchPasswordPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeletePasswordPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePasswordPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeletePasswordPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeletePasswordPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeletePasswordPolicies(ctx, req.(*DeletePasswordPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUserFeatureConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeatureConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUserFeatureConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetUserFeatureConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUserFeatureConfig(ctx, req.(*UserFeatureConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostOrganizations(ctx, req.(*PostOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUsersOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUsersOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListUsersOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUsersOrganizations(ctx, req.(*ListUsersOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchOrganization(ctx, req.(*PatchOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListOrganizationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOrganizationMembers(ctx, req.(*ListOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOrganizationAppMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAppMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOrganizationAppMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListOrganizationAppMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOrganizationAppMembers(ctx, req.(*ListOrganizationAppMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostOrganizationMember(ctx, req.(*PostOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchOrganizationMember(ctx, req.(*PatchOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteOrganizationMember(ctx, req.(*DeleteOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostOrganizationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrganizationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostOrganizationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostOrganizationInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostOrganizationInvitations(ctx, req.(*PostOrganizationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchOrganizationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchOrganizationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchOrganizationInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchOrganizationInvitations(ctx, req.(*PatchOrganizationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOrganizationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOrganizationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListOrganizationInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOrganizationInvitations(ctx, req.(*ListOrganizationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetOrganizationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetOrganizationInvitation(ctx, req.(*GetOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDeclineOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeclineOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDeclineOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostDeclineOrganizationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDeclineOrganizationInvitation(ctx, req.(*PostDeclineOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAcceptOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAcceptOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAcceptOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAcceptOrganizationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAcceptOrganizationInvitation(ctx, req.(*PostAcceptOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetOrganizationInvitationPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInvitationPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetOrganizationInvitationPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetOrganizationInvitationPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetOrganizationInvitationPublic(ctx, req.(*GetOrganizationInvitationPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteRequestingUserFromOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestingUserFromOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteRequestingUserFromOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteRequestingUserFromOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteRequestingUserFromOrganization(ctx, req.(*DeleteRequestingUserFromOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostIdentityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostIdentityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostIdentityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostIdentityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostIdentityProviders(ctx, req.(*PostIdentityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListIdentityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListIdentityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListIdentityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListIdentityProviders(ctx, req.(*ListIdentityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetIdentityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetIdentityProvider(ctx, req.(*GetIdentityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchIdentityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchIdentityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchIdentityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchIdentityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchIdentityProviders(ctx, req.(*PatchIdentityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteIdentityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteIdentityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteIdentityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteIdentityProviders(ctx, req.(*DeleteIdentityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTeams(ctx, req.(*PostTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTeams(ctx, req.(*ListTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchTeams(ctx, req.(*PatchTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteTeams(ctx, req.(*DeleteTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTeamUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTeamUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTeamUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostTeamUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTeamUsers(ctx, req.(*PostTeamUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTeamUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTeamUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTeamUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTeamUsers(ctx, req.(*ListTeamUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteTeamUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteTeamUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteTeamUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteTeamUsers(ctx, req.(*DeleteTeamUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTeamApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTeamAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTeamApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostTeamApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTeamApps(ctx, req.(*PostTeamAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTeamApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTeamApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTeamApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTeamApps(ctx, req.(*ListTeamAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteTeamApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteTeamApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteTeamApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteTeamApps(ctx, req.(*DeleteTeamAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetSearch(ctx, req.(*GetSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListSearches(ctx, req.(*ListSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchSearches(ctx, req.(*PatchSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSearches(ctx, req.(*PostSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSearchesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearchesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSearchesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostSearchesByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSearchesByID(ctx, req.(*PostSearchesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationSearchMetrics(ctx, req.(*PostAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotationSearchMetrics(ctx, req.(*GetAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationSearchMetrics(ctx, req.(*ListAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotationSearchMetrics(ctx, req.(*DeleteAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteSearch(ctx, req.(*DeleteSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAttributeSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAttributeSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAttributeSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAttributeSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAttributeSearch(ctx, req.(*PostAttributeSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationFilters(ctx, req.(*ListAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotationFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotationFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAnnotationFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotationFilter(ctx, req.(*GetAnnotationFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationFilters(ctx, req.(*PostAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationFilters(ctx, req.(*PatchAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotationFilters(ctx, req.(*DeleteAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationsForCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationsForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationsForCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotationsForCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationsForCluster(ctx, req.(*ListAnnotationsForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostClustersSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostClustersSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostClustersSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostClustersSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostClustersSearches(ctx, req.(*PostClustersSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostVerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostVerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostVerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostVerifyEmail(ctx, req.(*PostVerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostRequestResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostRequestResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostRequestResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostRequestResetPassword(ctx, req.(*RequestResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCompleteResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCompleteResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostCompleteResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCompleteResetPassword(ctx, req.(*CompleteResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostLogin(ctx, req.(*PostLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSignup(ctx, req.(*PostSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostLogout(ctx, req.(*PostLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAuthMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAuthMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAuthMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAuthMethods(ctx, req.(*ListAuthMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOrgAuthMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOrgAuthMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListOrgAuthMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOrgAuthMethods(ctx, req.(*ListAuthMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostIdLoginFinalizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostIdLoginFinalizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostIdLoginFinalizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostIdLoginFinalizer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostIdLoginFinalizer(ctx, req.(*PostIdLoginFinalizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostLinkIdpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLinkIdpUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostLinkIdpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostLinkIdpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostLinkIdpUser(ctx, req.(*PostLinkIdpUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetLoginInfo(ctx, req.(*GetLoginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAuth2FAMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List2FAMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAuth2FAMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAuth2FAMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAuth2FAMethods(ctx, req.(*List2FAMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAuth2FATotpRegisterEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuth2FATotpRegisterEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAuth2FATotpRegisterEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAuth2FATotpRegisterEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAuth2FATotpRegisterEnable(ctx, req.(*PostAuth2FATotpRegisterEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAuth2FATotpRegisterVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuth2FATotpRegisterVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAuth2FATotpRegisterVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAuth2FATotpRegisterVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAuth2FATotpRegisterVerify(ctx, req.(*PostAuth2FATotpRegisterVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAuth2FATotpDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuth2FATotpDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAuth2FATotpDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAuth2FATotpDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAuth2FATotpDisable(ctx, req.(*PostAuth2FATotpDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAuth2FATotpLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuth2FATotpLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAuth2FATotpLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAuth2FATotpLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAuth2FATotpLogin(ctx, req.(*PostAuth2FATotpLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAuth2FATotpRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuth2FATotpRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAuth2FATotpRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAuth2FATotpRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAuth2FATotpRecover(ctx, req.(*PostAuth2FATotpRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAuth2FATotpRecoverConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuth2FATotpRecoverConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAuth2FATotpRecoverConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAuth2FATotpRecoverConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAuth2FATotpRecoverConfirm(ctx, req.(*GetAuth2FATotpRecoverConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSubscription(ctx, req.(*PostSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCreditCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCreditCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListCreditCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCreditCards(ctx, req.(*ListCreditCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCreditCard(ctx, req.(*PostCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteCreditCard(ctx, req.(*DeleteCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchCreditCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCreditCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchCreditCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchCreditCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchCreditCards(ctx, req.(*PatchCreditCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetShippingAddress(ctx, req.(*GetShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PutShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutShippingAddress(ctx, req.(*PutShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListPlans(ctx, req.(*ListPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListStatusCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListStatusCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListStatusCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListStatusCodes(ctx, req.(*ListStatusCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetStatusCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetStatusCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetStatusCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetStatusCode(ctx, req.(*GetStatusCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetHealthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetHealthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetHealthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetHealthz(ctx, req.(*GetHealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUserBillingCycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBillingCyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUserBillingCycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListUserBillingCycles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUserBillingCycles(ctx, req.(*ListUserBillingCyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUserCycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUserCycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListUserCycles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUserCycles(ctx, req.(*ListUserCyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetBillingUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetBillingUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetBillingUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetBillingUsage(ctx, req.(*GetBillingUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostHistoricalUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostHistoricalUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostHistoricalUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostHistoricalUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostHistoricalUsage(ctx, req.(*PostHistoricalUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetHistoricalUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetHistoricalUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetHistoricalUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetHistoricalUsage(ctx, req.(*GetHistoricalUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUsageIntervals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsageIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUsageIntervals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListUsageIntervals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUsageIntervals(ctx, req.(*ListUsageIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetRealtimeUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetRealtimeUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetRealtimeUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetRealtimeUsage(ctx, req.(*GetRealtimeUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostUsage(ctx, req.(*PostUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollaborators(ctx, req.(*ListCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCollaborators(ctx, req.(*PostCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchCollaborators(ctx, req.(*PatchCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteCollaborators(ctx, req.(*DeleteCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollaborations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollaborationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollaborations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListCollaborations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollaborations(ctx, req.(*ListCollaborationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_FetchLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).FetchLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/FetchLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).FetchLicense(ctx, req.(*FetchLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListLicenses(ctx, req.(*ListLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetLicense(ctx, req.(*GetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ValidateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ValidateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ValidateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ValidateLicense(ctx, req.(*ValidateLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAppDuplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppDuplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAppDuplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAppDuplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAppDuplications(ctx, req.(*PostAppDuplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAppDuplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppDuplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAppDuplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAppDuplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAppDuplications(ctx, req.(*ListAppDuplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAppDuplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDuplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAppDuplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAppDuplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAppDuplication(ctx, req.(*GetAppDuplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTasks(ctx, req.(*PostTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTaskAnnotationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTaskAnnotationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetTaskAnnotationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTaskAnnotationCount(ctx, req.(*GetTaskCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTaskInputCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTaskInputCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetTaskInputCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTaskInputCount(ctx, req.(*GetTaskCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchTasks(ctx, req.(*PatchTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteTasks(ctx, req.(*DeleteTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationCountsRollup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationCountsRollupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationCountsRollup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotationCountsRollup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationCountsRollup(ctx, req.(*PatchAnnotationCountsRollupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostLabelOrders(ctx, req.(*PostLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetLabelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetLabelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetLabelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetLabelOrder(ctx, req.(*GetLabelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListLabelOrders(ctx, req.(*ListLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchLabelOrders(ctx, req.(*PatchLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteLabelOrders(ctx, req.(*DeleteLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCollectors(ctx, req.(*PostCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetCollector(ctx, req.(*GetCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollectors(ctx, req.(*ListCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchCollectors(ctx, req.(*PatchCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteCollectors(ctx, req.(*DeleteCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostStatValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostStatValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostStatValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostStatValues(ctx, req.(*PostStatValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostStatValuesAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatValuesAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostStatValuesAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostStatValuesAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostStatValuesAggregate(ctx, req.(*PostStatValuesAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnalytics(ctx, req.(*PostAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSDKBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSDKBillingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSDKBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostSDKBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSDKBilling(ctx, req.(*PostSDKBillingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostFindDuplicateAnnotationsJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFindDuplicateAnnotationsJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostFindDuplicateAnnotationsJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostFindDuplicateAnnotationsJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostFindDuplicateAnnotationsJobs(ctx, req.(*PostFindDuplicateAnnotationsJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetFindDuplicateAnnotationsJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFindDuplicateAnnotationsJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetFindDuplicateAnnotationsJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetFindDuplicateAnnotationsJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetFindDuplicateAnnotationsJob(ctx, req.(*GetFindDuplicateAnnotationsJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListFindDuplicateAnnotationsJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFindDuplicateAnnotationsJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListFindDuplicateAnnotationsJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListFindDuplicateAnnotationsJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListFindDuplicateAnnotationsJobs(ctx, req.(*ListFindDuplicateAnnotationsJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteFindDuplicateAnnotationsJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFindDuplicateAnnotationsJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteFindDuplicateAnnotationsJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteFindDuplicateAnnotationsJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteFindDuplicateAnnotationsJobs(ctx, req.(*DeleteFindDuplicateAnnotationsJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTrendingMetricsView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTrendingMetricsViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTrendingMetricsView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostTrendingMetricsView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTrendingMetricsView(ctx, req.(*PostTrendingMetricsViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTrendingMetricsViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrendingMetricsViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTrendingMetricsViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTrendingMetricsViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTrendingMetricsViews(ctx, req.(*ListTrendingMetricsViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostIdValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostIdValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostIdValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostIdValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostIdValidation(ctx, req.(*PostIdValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTagCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTagCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTagCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTagCategories(ctx, req.(*ListTagCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWebNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWebNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListWebNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWebNotifications(ctx, req.(*ListWebNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWebNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWebNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetWebNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWebNotification(ctx, req.(*GetWebNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWebNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWebNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWebNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchWebNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWebNotifications(ctx, req.(*PatchWebNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWebNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWebNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWebNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWebNotifications(ctx, req.(*DeleteWebNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModules(ctx, req.(*PostModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModules(ctx, req.(*PatchModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModules(ctx, req.(*DeleteModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModuleVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModuleVersion(ctx, req.(*GetModuleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModuleVersions(ctx, req.(*ListModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModuleVersions(ctx, req.(*PostModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModuleVersions(ctx, req.(*DeleteModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInstalledModuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstalledModuleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInstalledModuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInstalledModuleVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInstalledModuleVersion(ctx, req.(*GetInstalledModuleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListInstalledModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInstalledModuleVersions(ctx, req.(*ListInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInstalledModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInstalledModuleVersions(ctx, req.(*PostInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteInstalledModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInstalledModuleVersions(ctx, req.(*DeleteInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInstalledModuleVersionsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstalledModuleVersionsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInstalledModuleVersionsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInstalledModuleVersionsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInstalledModuleVersionsKey(ctx, req.(*PostInstalledModuleVersionsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBulkOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostBulkOperations(ctx, req.(*PostBulkOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBulkOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListBulkOperations(ctx, req.(*ListBulkOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetBulkOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetBulkOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetBulkOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetBulkOperation(ctx, req.(*GetBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/CancelBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelBulkOperations(ctx, req.(*CancelBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteBulkOperations(ctx, req.(*DeleteBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDatasetInputsSearchAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetInputsSearchAddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDatasetInputsSearchAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetDatasetInputsSearchAddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDatasetInputsSearchAddJob(ctx, req.(*GetDatasetInputsSearchAddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListNextTaskAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextTaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListNextTaskAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListNextTaskAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListNextTaskAssignments(ctx, req.(*ListNextTaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutTaskAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutTaskAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PutTaskAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutTaskAssignments(ctx, req.(*PutTaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWaitlistEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWaitlistEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWaitlistEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWaitlistEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWaitlistEmails(ctx, req.(*PostWaitlistEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetSampledPredictMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampledPredictMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetSampledPredictMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetSampledPredictMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetSampledPredictMetrics(ctx, req.(*GetSampledPredictMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsAddJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsAddJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsAddJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsAddJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsAddJobs(ctx, req.(*PostInputsAddJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputsAddJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsAddJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputsAddJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListInputsAddJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputsAddJobs(ctx, req.(*ListInputsAddJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputsAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputsAddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputsAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputsAddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputsAddJob(ctx, req.(*GetInputsAddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelInputsAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInputsAddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelInputsAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/CancelInputsAddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelInputsAddJob(ctx, req.(*CancelInputsAddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostUploads(ctx, req.(*PostUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutUploadContentParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUploadContentPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutUploadContentParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PutUploadContentParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutUploadContentParts(ctx, req.(*PutUploadContentPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUpload(ctx, req.(*GetUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUploads(ctx, req.(*ListUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteUploads(ctx, req.(*DeleteUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V2_ServiceDesc is the grpc.ServiceDesc for V2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clarifai.api.V2",
	HandlerType: (*V2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _V2_Echo_Handler,
		},
		{
			MethodName: "ListConceptRelations",
			Handler:    _V2_ListConceptRelations_Handler,
		},
		{
			MethodName: "PostConceptRelations",
			Handler:    _V2_PostConceptRelations_Handler,
		},
		{
			MethodName: "DeleteConceptRelations",
			Handler:    _V2_DeleteConceptRelations_Handler,
		},
		{
			MethodName: "GetConceptCounts",
			Handler:    _V2_GetConceptCounts_Handler,
		},
		{
			MethodName: "GetConcept",
			Handler:    _V2_GetConcept_Handler,
		},
		{
			MethodName: "ListConcepts",
			Handler:    _V2_ListConcepts_Handler,
		},
		{
			MethodName: "ListModelConcepts",
			Handler:    _V2_ListModelConcepts_Handler,
		},
		{
			MethodName: "PostConceptsSearches",
			Handler:    _V2_PostConceptsSearches_Handler,
		},
		{
			MethodName: "PostConcepts",
			Handler:    _V2_PostConcepts_Handler,
		},
		{
			MethodName: "PatchConcepts",
			Handler:    _V2_PatchConcepts_Handler,
		},
		{
			MethodName: "GetVocab",
			Handler:    _V2_GetVocab_Handler,
		},
		{
			MethodName: "ListVocabs",
			Handler:    _V2_ListVocabs_Handler,
		},
		{
			MethodName: "PostVocabs",
			Handler:    _V2_PostVocabs_Handler,
		},
		{
			MethodName: "PatchVocabs",
			Handler:    _V2_PatchVocabs_Handler,
		},
		{
			MethodName: "DeleteVocab",
			Handler:    _V2_DeleteVocab_Handler,
		},
		{
			MethodName: "DeleteVocabs",
			Handler:    _V2_DeleteVocabs_Handler,
		},
		{
			MethodName: "ListVocabConcepts",
			Handler:    _V2_ListVocabConcepts_Handler,
		},
		{
			MethodName: "PostVocabConcepts",
			Handler:    _V2_PostVocabConcepts_Handler,
		},
		{
			MethodName: "DeleteVocabConcept",
			Handler:    _V2_DeleteVocabConcept_Handler,
		},
		{
			MethodName: "DeleteVocabConcepts",
			Handler:    _V2_DeleteVocabConcepts_Handler,
		},
		{
			MethodName: "GetConceptLanguage",
			Handler:    _V2_GetConceptLanguage_Handler,
		},
		{
			MethodName: "ListConceptLanguages",
			Handler:    _V2_ListConceptLanguages_Handler,
		},
		{
			MethodName: "PostConceptLanguages",
			Handler:    _V2_PostConceptLanguages_Handler,
		},
		{
			MethodName: "PatchConceptLanguages",
			Handler:    _V2_PatchConceptLanguages_Handler,
		},
		{
			MethodName: "ListConceptReferences",
			Handler:    _V2_ListConceptReferences_Handler,
		},
		{
			MethodName: "ListKnowledgeGraphs",
			Handler:    _V2_ListKnowledgeGraphs_Handler,
		},
		{
			MethodName: "PostKnowledgeGraphs",
			Handler:    _V2_PostKnowledgeGraphs_Handler,
		},
		{
			MethodName: "PostConceptMappingJobs",
			Handler:    _V2_PostConceptMappingJobs_Handler,
		},
		{
			MethodName: "ListConceptMappings",
			Handler:    _V2_ListConceptMappings_Handler,
		},
		{
			MethodName: "PostConceptMappings",
			Handler:    _V2_PostConceptMappings_Handler,
		},
		{
			MethodName: "GetAnnotation",
			Handler:    _V2_GetAnnotation_Handler,
		},
		{
			MethodName: "ListAnnotations",
			Handler:    _V2_ListAnnotations_Handler,
		},
		{
			MethodName: "PostAnnotations",
			Handler:    _V2_PostAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotations",
			Handler:    _V2_PatchAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotationsStatus",
			Handler:    _V2_PatchAnnotationsStatus_Handler,
		},
		{
			MethodName: "DeleteAnnotation",
			Handler:    _V2_DeleteAnnotation_Handler,
		},
		{
			MethodName: "DeleteAnnotations",
			Handler:    _V2_DeleteAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotationsSearches",
			Handler:    _V2_PatchAnnotationsSearches_Handler,
		},
		{
			MethodName: "PostAnnotationsSearches",
			Handler:    _V2_PostAnnotationsSearches_Handler,
		},
		{
			MethodName: "GetInputCount",
			Handler:    _V2_GetInputCount_Handler,
		},
		{
			MethodName: "StreamInputs",
			Handler:    _V2_StreamInputs_Handler,
		},
		{
			MethodName: "GetInputSamples",
			Handler:    _V2_GetInputSamples_Handler,
		},
		{
			MethodName: "GetInput",
			Handler:    _V2_GetInput_Handler,
		},
		{
			MethodName: "ListInputs",
			Handler:    _V2_ListInputs_Handler,
		},
		{
			MethodName: "PostInputs",
			Handler:    _V2_PostInputs_Handler,
		},
		{
			MethodName: "PostInputsFile",
			Handler:    _V2_PostInputsFile_Handler,
		},
		{
			MethodName: "PostInputsNiFi",
			Handler:    _V2_PostInputsNiFi_Handler,
		},
		{
			MethodName: "PostInputsDocument",
			Handler:    _V2_PostInputsDocument_Handler,
		},
		{
			MethodName: "PatchInputs",
			Handler:    _V2_PatchInputs_Handler,
		},
		{
			MethodName: "DeleteInput",
			Handler:    _V2_DeleteInput_Handler,
		},
		{
			MethodName: "DeleteInputs",
			Handler:    _V2_DeleteInputs_Handler,
		},
		{
			MethodName: "PatchInputsSearches",
			Handler:    _V2_PatchInputsSearches_Handler,
		},
		{
			MethodName: "PostInputsSearches",
			Handler:    _V2_PostInputsSearches_Handler,
		},
		{
			MethodName: "PostModelOutputs",
			Handler:    _V2_PostModelOutputs_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _V2_ListDatasets_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _V2_GetDataset_Handler,
		},
		{
			MethodName: "PostDatasets",
			Handler:    _V2_PostDatasets_Handler,
		},
		{
			MethodName: "PatchDatasets",
			Handler:    _V2_PatchDatasets_Handler,
		},
		{
			MethodName: "PatchDatasetIds",
			Handler:    _V2_PatchDatasetIds_Handler,
		},
		{
			MethodName: "DeleteDatasets",
			Handler:    _V2_DeleteDatasets_Handler,
		},
		{
			MethodName: "ListDatasetInputs",
			Handler:    _V2_ListDatasetInputs_Handler,
		},
		{
			MethodName: "GetDatasetInput",
			Handler:    _V2_GetDatasetInput_Handler,
		},
		{
			MethodName: "PostDatasetInputs",
			Handler:    _V2_PostDatasetInputs_Handler,
		},
		{
			MethodName: "DeleteDatasetInputs",
			Handler:    _V2_DeleteDatasetInputs_Handler,
		},
		{
			MethodName: "ListDatasetVersions",
			Handler:    _V2_ListDatasetVersions_Handler,
		},
		{
			MethodName: "GetDatasetVersion",
			Handler:    _V2_GetDatasetVersion_Handler,
		},
		{
			MethodName: "ListDatasetVersionMetricsGroups",
			Handler:    _V2_ListDatasetVersionMetricsGroups_Handler,
		},
		{
			MethodName: "PostDatasetVersions",
			Handler:    _V2_PostDatasetVersions_Handler,
		},
		{
			MethodName: "PatchDatasetVersions",
			Handler:    _V2_PatchDatasetVersions_Handler,
		},
		{
			MethodName: "DeleteDatasetVersions",
			Handler:    _V2_DeleteDatasetVersions_Handler,
		},
		{
			MethodName: "PutDatasetVersionExports",
			Handler:    _V2_PutDatasetVersionExports_Handler,
		},
		{
			MethodName: "GetModelType",
			Handler:    _V2_GetModelType_Handler,
		},
		{
			MethodName: "ListOpenSourceLicenses",
			Handler:    _V2_ListOpenSourceLicenses_Handler,
		},
		{
			MethodName: "ListModelTypes",
			Handler:    _V2_ListModelTypes_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _V2_GetModel_Handler,
		},
		{
			MethodName: "GetModelOutputInfo",
			Handler:    _V2_GetModelOutputInfo_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _V2_ListModels_Handler,
		},
		{
			MethodName: "PostModelsSearches",
			Handler:    _V2_PostModelsSearches_Handler,
		},
		{
			MethodName: "PostModels",
			Handler:    _V2_PostModels_Handler,
		},
		{
			MethodName: "PatchModels",
			Handler:    _V2_PatchModels_Handler,
		},
		{
			MethodName: "PatchModelIds",
			Handler:    _V2_PatchModelIds_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _V2_DeleteModel_Handler,
		},
		{
			MethodName: "DeleteModels",
			Handler:    _V2_DeleteModels_Handler,
		},
		{
			MethodName: "PatchModelCheckConsents",
			Handler:    _V2_PatchModelCheckConsents_Handler,
		},
		{
			MethodName: "PatchModelToolkits",
			Handler:    _V2_PatchModelToolkits_Handler,
		},
		{
			MethodName: "PatchModelUseCases",
			Handler:    _V2_PatchModelUseCases_Handler,
		},
		{
			MethodName: "PatchModelLanguages",
			Handler:    _V2_PatchModelLanguages_Handler,
		},
		{
			MethodName: "ListModelInputs",
			Handler:    _V2_ListModelInputs_Handler,
		},
		{
			MethodName: "GetModelVersion",
			Handler:    _V2_GetModelVersion_Handler,
		},
		{
			MethodName: "ListModelVersions",
			Handler:    _V2_ListModelVersions_Handler,
		},
		{
			MethodName: "PostWorkflowVersionsUnPublish",
			Handler:    _V2_PostWorkflowVersionsUnPublish_Handler,
		},
		{
			MethodName: "PostWorkflowVersionsPublish",
			Handler:    _V2_PostWorkflowVersionsPublish_Handler,
		},
		{
			MethodName: "PostModelVersionsPublish",
			Handler:    _V2_PostModelVersionsPublish_Handler,
		},
		{
			MethodName: "PostModelVersionsUnPublish",
			Handler:    _V2_PostModelVersionsUnPublish_Handler,
		},
		{
			MethodName: "PostModelVersions",
			Handler:    _V2_PostModelVersions_Handler,
		},
		{
			MethodName: "PatchModelVersions",
			Handler:    _V2_PatchModelVersions_Handler,
		},
		{
			MethodName: "DeleteModelVersion",
			Handler:    _V2_DeleteModelVersion_Handler,
		},
		{
			MethodName: "GetModelVersionMetrics",
			Handler:    _V2_GetModelVersionMetrics_Handler,
		},
		{
			MethodName: "PostModelVersionMetrics",
			Handler:    _V2_PostModelVersionMetrics_Handler,
		},
		{
			MethodName: "ListModelReferences",
			Handler:    _V2_ListModelReferences_Handler,
		},
		{
			MethodName: "PostModelReferences",
			Handler:    _V2_PostModelReferences_Handler,
		},
		{
			MethodName: "DeleteModelReferences",
			Handler:    _V2_DeleteModelReferences_Handler,
		},
		{
			MethodName: "GetModelVersionInputExample",
			Handler:    _V2_GetModelVersionInputExample_Handler,
		},
		{
			MethodName: "ListModelVersionInputExamples",
			Handler:    _V2_ListModelVersionInputExamples_Handler,
		},
		{
			MethodName: "PostModelVersionInputExamples",
			Handler:    _V2_PostModelVersionInputExamples_Handler,
		},
		{
			MethodName: "DeleteModelVersionInputExamples",
			Handler:    _V2_DeleteModelVersionInputExamples_Handler,
		},
		{
			MethodName: "PostModelStars",
			Handler:    _V2_PostModelStars_Handler,
		},
		{
			MethodName: "DeleteModelStars",
			Handler:    _V2_DeleteModelStars_Handler,
		},
		{
			MethodName: "PostUserStars",
			Handler:    _V2_PostUserStars_Handler,
		},
		{
			MethodName: "DeleteUserStars",
			Handler:    _V2_DeleteUserStars_Handler,
		},
		{
			MethodName: "PostWorkflowStars",
			Handler:    _V2_PostWorkflowStars_Handler,
		},
		{
			MethodName: "DeleteWorkflowStars",
			Handler:    _V2_DeleteWorkflowStars_Handler,
		},
		{
			MethodName: "PostAppStars",
			Handler:    _V2_PostAppStars_Handler,
		},
		{
			MethodName: "DeleteAppStars",
			Handler:    _V2_DeleteAppStars_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _V2_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _V2_ListWorkflows_Handler,
		},
		{
			MethodName: "ListPublicWorkflows",
			Handler:    _V2_ListPublicWorkflows_Handler,
		},
		{
			MethodName: "PostWorkflows",
			Handler:    _V2_PostWorkflows_Handler,
		},
		{
			MethodName: "PatchWorkflows",
			Handler:    _V2_PatchWorkflows_Handler,
		},
		{
			MethodName: "PatchWorkflowIds",
			Handler:    _V2_PatchWorkflowIds_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _V2_DeleteWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflows",
			Handler:    _V2_DeleteWorkflows_Handler,
		},
		{
			MethodName: "PostWorkflowResults",
			Handler:    _V2_PostWorkflowResults_Handler,
		},
		{
			MethodName: "PostWorkflowResultsSimilarity",
			Handler:    _V2_PostWorkflowResultsSimilarity_Handler,
		},
		{
			MethodName: "ListWorkflowVersions",
			Handler:    _V2_ListWorkflowVersions_Handler,
		},
		{
			MethodName: "GetWorkflowVersion",
			Handler:    _V2_GetWorkflowVersion_Handler,
		},
		{
			MethodName: "DeleteWorkflowVersions",
			Handler:    _V2_DeleteWorkflowVersions_Handler,
		},
		{
			MethodName: "PatchWorkflowVersions",
			Handler:    _V2_PatchWorkflowVersions_Handler,
		},
		{
			MethodName: "PostWorkflowMetrics",
			Handler:    _V2_PostWorkflowMetrics_Handler,
		},
		{
			MethodName: "GetWorkflowMetrics",
			Handler:    _V2_GetWorkflowMetrics_Handler,
		},
		{
			MethodName: "GetWorkflowNodeMetrics",
			Handler:    _V2_GetWorkflowNodeMetrics_Handler,
		},
		{
			MethodName: "ListWorkflowMetrics",
			Handler:    _V2_ListWorkflowMetrics_Handler,
		},
		{
			MethodName: "DeleteWorkflowMetrics",
			Handler:    _V2_DeleteWorkflowMetrics_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _V2_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _V2_ListKeys_Handler,
		},
		{
			MethodName: "ListAppKeys",
			Handler:    _V2_ListAppKeys_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _V2_DeleteKey_Handler,
		},
		{
			MethodName: "PostKeys",
			Handler:    _V2_PostKeys_Handler,
		},
		{
			MethodName: "PatchKeys",
			Handler:    _V2_PatchKeys_Handler,
		},
		{
			MethodName: "MyScopes",
			Handler:    _V2_MyScopes_Handler,
		},
		{
			MethodName: "MyScopesUser",
			Handler:    _V2_MyScopesUser_Handler,
		},
		{
			MethodName: "MyScopesRoot",
			Handler:    _V2_MyScopesRoot_Handler,
		},
		{
			MethodName: "ListScopes",
			Handler:    _V2_ListScopes_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _V2_GetApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _V2_ListApps_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _V2_DeleteApp_Handler,
		},
		{
			MethodName: "PostApps",
			Handler:    _V2_PostApps_Handler,
		},
		{
			MethodName: "PatchApps",
			Handler:    _V2_PatchApps_Handler,
		},
		{
			MethodName: "PatchAppsIds",
			Handler:    _V2_PatchAppsIds_Handler,
		},
		{
			MethodName: "PatchApp",
			Handler:    _V2_PatchApp_Handler,
		},
		{
			MethodName: "PatchAppOwner",
			Handler:    _V2_PatchAppOwner_Handler,
		},
		{
			MethodName: "PostAppsSearches",
			Handler:    _V2_PostAppsSearches_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _V2_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _V2_ListUsers_Handler,
		},
		{
			MethodName: "PostUserConsent",
			Handler:    _V2_PostUserConsent_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _V2_PatchUser_Handler,
		},
		{
			MethodName: "PostUserAccess",
			Handler:    _V2_PostUserAccess_Handler,
		},
		{
			MethodName: "GetUserAccess",
			Handler:    _V2_GetUserAccess_Handler,
		},
		{
			MethodName: "PostEmails",
			Handler:    _V2_PostEmails_Handler,
		},
		{
			MethodName: "ListEmails",
			Handler:    _V2_ListEmails_Handler,
		},
		{
			MethodName: "PostResendVerifyEmail",
			Handler:    _V2_PostResendVerifyEmail_Handler,
		},
		{
			MethodName: "DeleteEmail",
			Handler:    _V2_DeleteEmail_Handler,
		},
		{
			MethodName: "PostPrimaryEmail",
			Handler:    _V2_PostPrimaryEmail_Handler,
		},
		{
			MethodName: "PostValidatePassword",
			Handler:    _V2_PostValidatePassword_Handler,
		},
		{
			MethodName: "ListGlobalPasswordPolicies",
			Handler:    _V2_ListGlobalPasswordPolicies_Handler,
		},
		{
			MethodName: "ListPasswordPolicies",
			Handler:    _V2_ListPasswordPolicies_Handler,
		},
		{
			MethodName: "PostPasswordPolicies",
			Handler:    _V2_PostPasswordPolicies_Handler,
		},
		{
			MethodName: "PatchPasswordPolicies",
			Handler:    _V2_PatchPasswordPolicies_Handler,
		},
		{
			MethodName: "DeletePasswordPolicies",
			Handler:    _V2_DeletePasswordPolicies_Handler,
		},
		{
			MethodName: "GetUserFeatureConfig",
			Handler:    _V2_GetUserFeatureConfig_Handler,
		},
		{
			MethodName: "PostOrganizations",
			Handler:    _V2_PostOrganizations_Handler,
		},
		{
			MethodName: "ListUsersOrganizations",
			Handler:    _V2_ListUsersOrganizations_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _V2_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _V2_GetOrganization_Handler,
		},
		{
			MethodName: "PatchOrganization",
			Handler:    _V2_PatchOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _V2_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationMembers",
			Handler:    _V2_ListOrganizationMembers_Handler,
		},
		{
			MethodName: "ListOrganizationAppMembers",
			Handler:    _V2_ListOrganizationAppMembers_Handler,
		},
		{
			MethodName: "PostOrganizationMember",
			Handler:    _V2_PostOrganizationMember_Handler,
		},
		{
			MethodName: "PatchOrganizationMember",
			Handler:    _V2_PatchOrganizationMember_Handler,
		},
		{
			MethodName: "DeleteOrganizationMember",
			Handler:    _V2_DeleteOrganizationMember_Handler,
		},
		{
			MethodName: "PostOrganizationInvitations",
			Handler:    _V2_PostOrganizationInvitations_Handler,
		},
		{
			MethodName: "PatchOrganizationInvitations",
			Handler:    _V2_PatchOrganizationInvitations_Handler,
		},
		{
			MethodName: "ListOrganizationInvitations",
			Handler:    _V2_ListOrganizationInvitations_Handler,
		},
		{
			MethodName: "GetOrganizationInvitation",
			Handler:    _V2_GetOrganizationInvitation_Handler,
		},
		{
			MethodName: "PostDeclineOrganizationInvitation",
			Handler:    _V2_PostDeclineOrganizationInvitation_Handler,
		},
		{
			MethodName: "PostAcceptOrganizationInvitation",
			Handler:    _V2_PostAcceptOrganizationInvitation_Handler,
		},
		{
			MethodName: "GetOrganizationInvitationPublic",
			Handler:    _V2_GetOrganizationInvitationPublic_Handler,
		},
		{
			MethodName: "DeleteRequestingUserFromOrganization",
			Handler:    _V2_DeleteRequestingUserFromOrganization_Handler,
		},
		{
			MethodName: "PostIdentityProviders",
			Handler:    _V2_PostIdentityProviders_Handler,
		},
		{
			MethodName: "ListIdentityProviders",
			Handler:    _V2_ListIdentityProviders_Handler,
		},
		{
			MethodName: "GetIdentityProvider",
			Handler:    _V2_GetIdentityProvider_Handler,
		},
		{
			MethodName: "PatchIdentityProviders",
			Handler:    _V2_PatchIdentityProviders_Handler,
		},
		{
			MethodName: "DeleteIdentityProviders",
			Handler:    _V2_DeleteIdentityProviders_Handler,
		},
		{
			MethodName: "PostTeams",
			Handler:    _V2_PostTeams_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _V2_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _V2_GetTeam_Handler,
		},
		{
			MethodName: "PatchTeams",
			Handler:    _V2_PatchTeams_Handler,
		},
		{
			MethodName: "DeleteTeams",
			Handler:    _V2_DeleteTeams_Handler,
		},
		{
			MethodName: "PostTeamUsers",
			Handler:    _V2_PostTeamUsers_Handler,
		},
		{
			MethodName: "ListTeamUsers",
			Handler:    _V2_ListTeamUsers_Handler,
		},
		{
			MethodName: "DeleteTeamUsers",
			Handler:    _V2_DeleteTeamUsers_Handler,
		},
		{
			MethodName: "PostTeamApps",
			Handler:    _V2_PostTeamApps_Handler,
		},
		{
			MethodName: "ListTeamApps",
			Handler:    _V2_ListTeamApps_Handler,
		},
		{
			MethodName: "DeleteTeamApps",
			Handler:    _V2_DeleteTeamApps_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _V2_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _V2_GetRole_Handler,
		},
		{
			MethodName: "GetSearch",
			Handler:    _V2_GetSearch_Handler,
		},
		{
			MethodName: "ListSearches",
			Handler:    _V2_ListSearches_Handler,
		},
		{
			MethodName: "PatchSearches",
			Handler:    _V2_PatchSearches_Handler,
		},
		{
			MethodName: "PostSearches",
			Handler:    _V2_PostSearches_Handler,
		},
		{
			MethodName: "PostSearchesByID",
			Handler:    _V2_PostSearchesByID_Handler,
		},
		{
			MethodName: "PostAnnotationSearchMetrics",
			Handler:    _V2_PostAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "GetAnnotationSearchMetrics",
			Handler:    _V2_GetAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "ListAnnotationSearchMetrics",
			Handler:    _V2_ListAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "DeleteAnnotationSearchMetrics",
			Handler:    _V2_DeleteAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "DeleteSearch",
			Handler:    _V2_DeleteSearch_Handler,
		},
		{
			MethodName: "PostAttributeSearch",
			Handler:    _V2_PostAttributeSearch_Handler,
		},
		{
			MethodName: "ListAnnotationFilters",
			Handler:    _V2_ListAnnotationFilters_Handler,
		},
		{
			MethodName: "GetAnnotationFilter",
			Handler:    _V2_GetAnnotationFilter_Handler,
		},
		{
			MethodName: "PostAnnotationFilters",
			Handler:    _V2_PostAnnotationFilters_Handler,
		},
		{
			MethodName: "PatchAnnotationFilters",
			Handler:    _V2_PatchAnnotationFilters_Handler,
		},
		{
			MethodName: "DeleteAnnotationFilters",
			Handler:    _V2_DeleteAnnotationFilters_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _V2_ListClusters_Handler,
		},
		{
			MethodName: "ListAnnotationsForCluster",
			Handler:    _V2_ListAnnotationsForCluster_Handler,
		},
		{
			MethodName: "PostClustersSearches",
			Handler:    _V2_PostClustersSearches_Handler,
		},
		{
			MethodName: "PostVerifyEmail",
			Handler:    _V2_PostVerifyEmail_Handler,
		},
		{
			MethodName: "PostRequestResetPassword",
			Handler:    _V2_PostRequestResetPassword_Handler,
		},
		{
			MethodName: "PostCompleteResetPassword",
			Handler:    _V2_PostCompleteResetPassword_Handler,
		},
		{
			MethodName: "PostLogin",
			Handler:    _V2_PostLogin_Handler,
		},
		{
			MethodName: "PostSignup",
			Handler:    _V2_PostSignup_Handler,
		},
		{
			MethodName: "PostLogout",
			Handler:    _V2_PostLogout_Handler,
		},
		{
			MethodName: "ListAuthMethods",
			Handler:    _V2_ListAuthMethods_Handler,
		},
		{
			MethodName: "ListOrgAuthMethods",
			Handler:    _V2_ListOrgAuthMethods_Handler,
		},
		{
			MethodName: "PostIdLoginFinalizer",
			Handler:    _V2_PostIdLoginFinalizer_Handler,
		},
		{
			MethodName: "PostLinkIdpUser",
			Handler:    _V2_PostLinkIdpUser_Handler,
		},
		{
			MethodName: "GetLoginInfo",
			Handler:    _V2_GetLoginInfo_Handler,
		},
		{
			MethodName: "ListAuth2FAMethods",
			Handler:    _V2_ListAuth2FAMethods_Handler,
		},
		{
			MethodName: "PostAuth2FATotpRegisterEnable",
			Handler:    _V2_PostAuth2FATotpRegisterEnable_Handler,
		},
		{
			MethodName: "PostAuth2FATotpRegisterVerify",
			Handler:    _V2_PostAuth2FATotpRegisterVerify_Handler,
		},
		{
			MethodName: "PostAuth2FATotpDisable",
			Handler:    _V2_PostAuth2FATotpDisable_Handler,
		},
		{
			MethodName: "PostAuth2FATotpLogin",
			Handler:    _V2_PostAuth2FATotpLogin_Handler,
		},
		{
			MethodName: "PostAuth2FATotpRecover",
			Handler:    _V2_PostAuth2FATotpRecover_Handler,
		},
		{
			MethodName: "GetAuth2FATotpRecoverConfirm",
			Handler:    _V2_GetAuth2FATotpRecoverConfirm_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _V2_GetSubscription_Handler,
		},
		{
			MethodName: "PostSubscription",
			Handler:    _V2_PostSubscription_Handler,
		},
		{
			MethodName: "ListCreditCards",
			Handler:    _V2_ListCreditCards_Handler,
		},
		{
			MethodName: "PostCreditCard",
			Handler:    _V2_PostCreditCard_Handler,
		},
		{
			MethodName: "DeleteCreditCard",
			Handler:    _V2_DeleteCreditCard_Handler,
		},
		{
			MethodName: "PatchCreditCards",
			Handler:    _V2_PatchCreditCards_Handler,
		},
		{
			MethodName: "GetShippingAddress",
			Handler:    _V2_GetShippingAddress_Handler,
		},
		{
			MethodName: "PutShippingAddress",
			Handler:    _V2_PutShippingAddress_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _V2_ListPlans_Handler,
		},
		{
			MethodName: "ListStatusCodes",
			Handler:    _V2_ListStatusCodes_Handler,
		},
		{
			MethodName: "GetStatusCode",
			Handler:    _V2_GetStatusCode_Handler,
		},
		{
			MethodName: "GetHealthz",
			Handler:    _V2_GetHealthz_Handler,
		},
		{
			MethodName: "ListUserBillingCycles",
			Handler:    _V2_ListUserBillingCycles_Handler,
		},
		{
			MethodName: "ListUserCycles",
			Handler:    _V2_ListUserCycles_Handler,
		},
		{
			MethodName: "GetBillingUsage",
			Handler:    _V2_GetBillingUsage_Handler,
		},
		{
			MethodName: "PostHistoricalUsage",
			Handler:    _V2_PostHistoricalUsage_Handler,
		},
		{
			MethodName: "GetHistoricalUsage",
			Handler:    _V2_GetHistoricalUsage_Handler,
		},
		{
			MethodName: "ListUsageIntervals",
			Handler:    _V2_ListUsageIntervals_Handler,
		},
		{
			MethodName: "GetRealtimeUsage",
			Handler:    _V2_GetRealtimeUsage_Handler,
		},
		{
			MethodName: "PostUsage",
			Handler:    _V2_PostUsage_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _V2_ListCollaborators_Handler,
		},
		{
			MethodName: "PostCollaborators",
			Handler:    _V2_PostCollaborators_Handler,
		},
		{
			MethodName: "PatchCollaborators",
			Handler:    _V2_PatchCollaborators_Handler,
		},
		{
			MethodName: "DeleteCollaborators",
			Handler:    _V2_DeleteCollaborators_Handler,
		},
		{
			MethodName: "ListCollaborations",
			Handler:    _V2_ListCollaborations_Handler,
		},
		{
			MethodName: "FetchLicense",
			Handler:    _V2_FetchLicense_Handler,
		},
		{
			MethodName: "ListLicenses",
			Handler:    _V2_ListLicenses_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _V2_GetLicense_Handler,
		},
		{
			MethodName: "ValidateLicense",
			Handler:    _V2_ValidateLicense_Handler,
		},
		{
			MethodName: "PostAppDuplications",
			Handler:    _V2_PostAppDuplications_Handler,
		},
		{
			MethodName: "ListAppDuplications",
			Handler:    _V2_ListAppDuplications_Handler,
		},
		{
			MethodName: "GetAppDuplication",
			Handler:    _V2_GetAppDuplication_Handler,
		},
		{
			MethodName: "PostTasks",
			Handler:    _V2_PostTasks_Handler,
		},
		{
			MethodName: "GetTaskAnnotationCount",
			Handler:    _V2_GetTaskAnnotationCount_Handler,
		},
		{
			MethodName: "GetTaskInputCount",
			Handler:    _V2_GetTaskInputCount_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _V2_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _V2_ListTasks_Handler,
		},
		{
			MethodName: "PatchTasks",
			Handler:    _V2_PatchTasks_Handler,
		},
		{
			MethodName: "DeleteTasks",
			Handler:    _V2_DeleteTasks_Handler,
		},
		{
			MethodName: "PatchAnnotationCountsRollup",
			Handler:    _V2_PatchAnnotationCountsRollup_Handler,
		},
		{
			MethodName: "PostLabelOrders",
			Handler:    _V2_PostLabelOrders_Handler,
		},
		{
			MethodName: "GetLabelOrder",
			Handler:    _V2_GetLabelOrder_Handler,
		},
		{
			MethodName: "ListLabelOrders",
			Handler:    _V2_ListLabelOrders_Handler,
		},
		{
			MethodName: "PatchLabelOrders",
			Handler:    _V2_PatchLabelOrders_Handler,
		},
		{
			MethodName: "DeleteLabelOrders",
			Handler:    _V2_DeleteLabelOrders_Handler,
		},
		{
			MethodName: "PostCollectors",
			Handler:    _V2_PostCollectors_Handler,
		},
		{
			MethodName: "GetCollector",
			Handler:    _V2_GetCollector_Handler,
		},
		{
			MethodName: "ListCollectors",
			Handler:    _V2_ListCollectors_Handler,
		},
		{
			MethodName: "PatchCollectors",
			Handler:    _V2_PatchCollectors_Handler,
		},
		{
			MethodName: "DeleteCollectors",
			Handler:    _V2_DeleteCollectors_Handler,
		},
		{
			MethodName: "PostStatValues",
			Handler:    _V2_PostStatValues_Handler,
		},
		{
			MethodName: "PostStatValuesAggregate",
			Handler:    _V2_PostStatValuesAggregate_Handler,
		},
		{
			MethodName: "PostAnalytics",
			Handler:    _V2_PostAnalytics_Handler,
		},
		{
			MethodName: "PostSDKBilling",
			Handler:    _V2_PostSDKBilling_Handler,
		},
		{
			MethodName: "PostFindDuplicateAnnotationsJobs",
			Handler:    _V2_PostFindDuplicateAnnotationsJobs_Handler,
		},
		{
			MethodName: "GetFindDuplicateAnnotationsJob",
			Handler:    _V2_GetFindDuplicateAnnotationsJob_Handler,
		},
		{
			MethodName: "ListFindDuplicateAnnotationsJobs",
			Handler:    _V2_ListFindDuplicateAnnotationsJobs_Handler,
		},
		{
			MethodName: "DeleteFindDuplicateAnnotationsJobs",
			Handler:    _V2_DeleteFindDuplicateAnnotationsJobs_Handler,
		},
		{
			MethodName: "PostTrendingMetricsView",
			Handler:    _V2_PostTrendingMetricsView_Handler,
		},
		{
			MethodName: "ListTrendingMetricsViews",
			Handler:    _V2_ListTrendingMetricsViews_Handler,
		},
		{
			MethodName: "PostIdValidation",
			Handler:    _V2_PostIdValidation_Handler,
		},
		{
			MethodName: "ListTagCategories",
			Handler:    _V2_ListTagCategories_Handler,
		},
		{
			MethodName: "ListWebNotifications",
			Handler:    _V2_ListWebNotifications_Handler,
		},
		{
			MethodName: "GetWebNotification",
			Handler:    _V2_GetWebNotification_Handler,
		},
		{
			MethodName: "PatchWebNotifications",
			Handler:    _V2_PatchWebNotifications_Handler,
		},
		{
			MethodName: "DeleteWebNotifications",
			Handler:    _V2_DeleteWebNotifications_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _V2_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _V2_ListModules_Handler,
		},
		{
			MethodName: "PostModules",
			Handler:    _V2_PostModules_Handler,
		},
		{
			MethodName: "PatchModules",
			Handler:    _V2_PatchModules_Handler,
		},
		{
			MethodName: "DeleteModules",
			Handler:    _V2_DeleteModules_Handler,
		},
		{
			MethodName: "GetModuleVersion",
			Handler:    _V2_GetModuleVersion_Handler,
		},
		{
			MethodName: "ListModuleVersions",
			Handler:    _V2_ListModuleVersions_Handler,
		},
		{
			MethodName: "PostModuleVersions",
			Handler:    _V2_PostModuleVersions_Handler,
		},
		{
			MethodName: "DeleteModuleVersions",
			Handler:    _V2_DeleteModuleVersions_Handler,
		},
		{
			MethodName: "GetInstalledModuleVersion",
			Handler:    _V2_GetInstalledModuleVersion_Handler,
		},
		{
			MethodName: "ListInstalledModuleVersions",
			Handler:    _V2_ListInstalledModuleVersions_Handler,
		},
		{
			MethodName: "PostInstalledModuleVersions",
			Handler:    _V2_PostInstalledModuleVersions_Handler,
		},
		{
			MethodName: "DeleteInstalledModuleVersions",
			Handler:    _V2_DeleteInstalledModuleVersions_Handler,
		},
		{
			MethodName: "PostInstalledModuleVersionsKey",
			Handler:    _V2_PostInstalledModuleVersionsKey_Handler,
		},
		{
			MethodName: "PostBulkOperations",
			Handler:    _V2_PostBulkOperations_Handler,
		},
		{
			MethodName: "ListBulkOperations",
			Handler:    _V2_ListBulkOperations_Handler,
		},
		{
			MethodName: "GetBulkOperation",
			Handler:    _V2_GetBulkOperation_Handler,
		},
		{
			MethodName: "CancelBulkOperations",
			Handler:    _V2_CancelBulkOperations_Handler,
		},
		{
			MethodName: "DeleteBulkOperations",
			Handler:    _V2_DeleteBulkOperations_Handler,
		},
		{
			MethodName: "GetDatasetInputsSearchAddJob",
			Handler:    _V2_GetDatasetInputsSearchAddJob_Handler,
		},
		{
			MethodName: "ListNextTaskAssignments",
			Handler:    _V2_ListNextTaskAssignments_Handler,
		},
		{
			MethodName: "PutTaskAssignments",
			Handler:    _V2_PutTaskAssignments_Handler,
		},
		{
			MethodName: "PostWaitlistEmails",
			Handler:    _V2_PostWaitlistEmails_Handler,
		},
		{
			MethodName: "GetSampledPredictMetrics",
			Handler:    _V2_GetSampledPredictMetrics_Handler,
		},
		{
			MethodName: "PostInputsAddJobs",
			Handler:    _V2_PostInputsAddJobs_Handler,
		},
		{
			MethodName: "ListInputsAddJobs",
			Handler:    _V2_ListInputsAddJobs_Handler,
		},
		{
			MethodName: "GetInputsAddJob",
			Handler:    _V2_GetInputsAddJob_Handler,
		},
		{
			MethodName: "CancelInputsAddJob",
			Handler:    _V2_CancelInputsAddJob_Handler,
		},
		{
			MethodName: "PostUploads",
			Handler:    _V2_PostUploads_Handler,
		},
		{
			MethodName: "PutUploadContentParts",
			Handler:    _V2_PutUploadContentParts_Handler,
		},
		{
			MethodName: "GetUpload",
			Handler:    _V2_GetUpload_Handler,
		},
		{
			MethodName: "ListUploads",
			Handler:    _V2_ListUploads_Handler,
		},
		{
			MethodName: "DeleteUploads",
			Handler:    _V2_DeleteUploads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clarifai/api/service.proto",
}
