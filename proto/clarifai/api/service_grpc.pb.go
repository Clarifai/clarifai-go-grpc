// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/clarifai/api/service.proto

package api

import (
	context "context"
	status "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V2Client is the client API for V2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V2Client interface {
	// List concept relations between concepts in the platform.
	// MUST be above ListConcepts so that if concept_id is empty this will still match
	// /concepts/relations to list all the concept relations in the app.
	ListConceptRelations(ctx context.Context, in *ListConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	PostConceptRelations(ctx context.Context, in *PostConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	DeleteConceptRelations(ctx context.Context, in *DeleteConceptRelationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the concepts with their positive and negative counts
	GetConceptCounts(ctx context.Context, in *GetConceptCountsRequest, opts ...grpc.CallOption) (*MultiConceptCountResponse, error)
	// Get a specific concept from an app.
	GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*SingleConceptResponse, error)
	// List all the concepts.
	ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// List models concepts.
	ListModelConcepts(ctx context.Context, in *ListModelConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Search over the concepts to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostConceptsSearches(ctx context.Context, in *PostConceptsSearchesRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Add a concept to an app.
	PostConcepts(ctx context.Context, in *PostConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Patch one or more concepts.
	PatchConcepts(ctx context.Context, in *PatchConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error)
	// Get a specific concept from an app.
	GetConceptLanguage(ctx context.Context, in *GetConceptLanguageRequest, opts ...grpc.CallOption) (*SingleConceptLanguageResponse, error)
	// List the concept in all the translated languages.
	ListConceptLanguages(ctx context.Context, in *ListConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// Add a new translation for this concept.
	PostConceptLanguages(ctx context.Context, in *PostConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// Patch the name for a given language names by passing in a list of concepts with the new names
	// for the languages.
	PatchConceptLanguages(ctx context.Context, in *PatchConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error)
	// List all domain graphs.
	ListKnowledgeGraphs(ctx context.Context, in *ListKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error)
	// Post domain graphs.
	PostKnowledgeGraphs(ctx context.Context, in *PostKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error)
	// Start concept mapping jobs.
	PostConceptMappingJobs(ctx context.Context, in *PostConceptMappingJobsRequest, opts ...grpc.CallOption) (*MultiConceptMappingJobResponse, error)
	// Get a specific annotation from an app.
	GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*SingleAnnotationResponse, error)
	// List all the annotation.
	ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Post annotations.
	PostAnnotations(ctx context.Context, in *PostAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Patch one or more annotations.
	PatchAnnotations(ctx context.Context, in *PatchAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error)
	// Patch annotations status by worker id and task id.
	PatchAnnotationsStatus(ctx context.Context, in *PatchAnnotationsStatusRequest, opts ...grpc.CallOption) (*PatchAnnotationsStatusResponse, error)
	// Delete a single annotation.
	DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple annotations in one request.
	DeleteAnnotations(ctx context.Context, in *DeleteAnnotationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch saved annotations searches by ids.
	PatchAnnotationsSearches(ctx context.Context, in *PatchAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a search over annotations
	PostAnnotationsSearches(ctx context.Context, in *PostAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// ListAnnotationWorkers lists users, models, and workflows (collectively
	// known as "workers") that have added annotations to the application.
	ListAnnotationWorkers(ctx context.Context, in *ListAnnotationWorkersRequest, opts ...grpc.CallOption) (*MultiWorkerResponse, error)
	// Get input count per status.
	GetInputCount(ctx context.Context, in *GetInputCountRequest, opts ...grpc.CallOption) (*SingleInputCountResponse, error)
	// Streams all the inputs starting from oldest assets.
	StreamInputs(ctx context.Context, in *StreamInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Get a specific input from an app.
	GetInputSamples(ctx context.Context, in *GetInputSamplesRequest, opts ...grpc.CallOption) (*MultiInputAnnotationResponse, error)
	// Get a specific input from an app.
	GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*SingleInputResponse, error)
	// Get a video input manifest.
	GetInputVideoManifest(ctx context.Context, in *GetVideoManifestRequest, opts ...grpc.CallOption) (*GetVideoManifestResponse, error)
	// List all the inputs.
	ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Add 1 or more input to an app.
	// The actual inputs processing is asynchronous.
	PostInputs(ctx context.Context, in *PostInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Patch one or more inputs.
	PatchInputs(ctx context.Context, in *PatchInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Delete a single input asynchronously.
	DeleteInput(ctx context.Context, in *DeleteInputRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple inputs in one request.
	// This call is asynchronous.
	DeleteInputs(ctx context.Context, in *DeleteInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch saved inputs searches by ids.
	PatchInputsSearches(ctx context.Context, in *PatchInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a search over inputs
	PostInputsSearches(ctx context.Context, in *PostInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Get predicted outputs from the model.
	PostModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (*MultiOutputResponse, error)
	// List all the datasets.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Get a specific dataset.
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*SingleDatasetResponse, error)
	// Add datasets to an app.
	// The process is atomic, i.e. either all or no datasets are added.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PostDatasets(ctx context.Context, in *PostDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Patch one or more datasets.
	// The process is atomic, i.e. either all or no datasets are patched.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PatchDatasets(ctx context.Context, in *PatchDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error)
	// Delete one or more datasets in a single request.
	DeleteDatasets(ctx context.Context, in *DeleteDatasetsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the dataset inputs in a dataset.
	ListDatasetInputs(ctx context.Context, in *ListDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error)
	// Get a specific dataset input.
	GetDatasetInput(ctx context.Context, in *GetDatasetInputRequest, opts ...grpc.CallOption) (*SingleDatasetInputResponse, error)
	// Add dataset inputs to a dataset.
	// The process is not atomic, i.e. if there are errors with some dataset
	// inputs, others might still be added. The response reports
	//   - SUCCESS if all dataset inputs were added,
	//   - MIXED_STATUS if only some dataset inputs were added, and
	//   - FAILURE if no dataset inputs were added.
	//
	// Each individual dataset input in the response has the status set to
	// indicate if it was successful or if there was an error.
	PostDatasetInputs(ctx context.Context, in *PostDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error)
	// Delete one or more dataset inputs in a single request.
	DeleteDatasetInputs(ctx context.Context, in *DeleteDatasetInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the dataset versions.
	ListDatasetVersions(ctx context.Context, in *ListDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Get a specific dataset version.
	GetDatasetVersion(ctx context.Context, in *GetDatasetVersionRequest, opts ...grpc.CallOption) (*SingleDatasetVersionResponse, error)
	ListDatasetVersionMetricsGroups(ctx context.Context, in *ListDatasetVersionMetricsGroupsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionMetricsGroupResponse, error)
	// Add dataset versions to a dataset.
	PostDatasetVersions(ctx context.Context, in *PostDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Patch one or more dataset versions.
	PatchDatasetVersions(ctx context.Context, in *PatchDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error)
	// Delete one or more dataset versions in a single request.
	DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Create export of a dataset version.
	PutDatasetVersionExports(ctx context.Context, in *PutDatasetVersionExportsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionExportResponse, error)
	// Get a specific model type.
	GetModelType(ctx context.Context, in *GetModelTypeRequest, opts ...grpc.CallOption) (*SingleModelTypeResponse, error)
	// List all the supported open source licenses in the platform.
	ListOpenSourceLicenses(ctx context.Context, in *ListOpenSourceLicensesRequest, opts ...grpc.CallOption) (*ListOpenSourceLicensesResponse, error)
	// List all the model types available in the platform.
	// This MUST be above ListModels so that the /models/types endpoint takes precedence.
	ListModelTypes(ctx context.Context, in *ListModelTypesRequest, opts ...grpc.CallOption) (*MultiModelTypeResponse, error)
	// Get a specific model from an app.
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// Get a the output info for a given model_id or model_id/version_id
	// combo.
	GetModelOutputInfo(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// List all the models.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// List the resource counts for the app.
	GetResourceCounts(ctx context.Context, in *GetResourceCountsRequest, opts ...grpc.CallOption) (*GetResourceCountsResponse, error)
	// Search over the models to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostModelsSearches(ctx context.Context, in *PostModelsSearchesRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Add a models to an app.
	PostModels(ctx context.Context, in *PostModelsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// Patch one or more models.
	PatchModels(ctx context.Context, in *PatchModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Patch one or more models ids.
	PatchModelIds(ctx context.Context, in *PatchModelIdsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error)
	// Delete a single model.
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple models in one request.
	DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Update model check consents
	PatchModelCheckConsents(ctx context.Context, in *PatchModelCheckConsentsRequest, opts ...grpc.CallOption) (*MultiModelCheckConsentResponse, error)
	// Update model toolkits tags
	PatchModelToolkits(ctx context.Context, in *PatchModelToolkitsRequest, opts ...grpc.CallOption) (*MultiModelToolkitResponse, error)
	// Update model use_cases tags
	PatchModelUseCases(ctx context.Context, in *PatchModelUseCasesRequest, opts ...grpc.CallOption) (*MultiModelUseCaseResponse, error)
	// Update model languages tags
	PatchModelLanguages(ctx context.Context, in *PatchModelLanguagesRequest, opts ...grpc.CallOption) (*MultiModelLanguageResponse, error)
	// Deprecated: Do not use.
	// Deprecated: Unmaintained and ideally replaced with usage of datasets
	ListModelInputs(ctx context.Context, in *ListModelInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// Get a specific model from an app.
	GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// List all the models.
	ListModelVersions(ctx context.Context, in *ListModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error)
	PostWorkflowVersionsUnPublish(ctx context.Context, in *PostWorkflowVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	PostWorkflowVersionsPublish(ctx context.Context, in *PostWorkflowVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostModelVersionsPublish
	PostModelVersionsPublish(ctx context.Context, in *PostModelVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostModelVersionsUnPublish
	PostModelVersionsUnPublish(ctx context.Context, in *PostModelVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Create a new model version to trigger training of the model.
	PostModelVersions(ctx context.Context, in *PostModelVersionsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error)
	// PatchModelVersions
	PatchModelVersions(ctx context.Context, in *PatchModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error)
	// Delete a single model.
	DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Deprecated: Use GetEvaluation instead
	// Get the evaluation metrics for a model version.
	GetModelVersionMetrics(ctx context.Context, in *GetModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	// Run the evaluation metrics for a model version.
	PostModelVersionMetrics(ctx context.Context, in *PostModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	PostModelVersionEvaluations(ctx context.Context, in *PostModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// List the evaluation metrics for a model version.
	ListModelVersionEvaluations(ctx context.Context, in *ListModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// Get an evaluation metrics for a model version.
	GetModelVersionEvaluation(ctx context.Context, in *GetModelVersionEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error)
	PostEvaluations(ctx context.Context, in *PostEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	ListEvaluations(ctx context.Context, in *ListEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error)
	GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error)
	// Lists model references tied to a particular model id.
	ListModelReferences(ctx context.Context, in *ListModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error)
	// GetModelVersionInputExample
	GetModelVersionInputExample(ctx context.Context, in *GetModelVersionInputExampleRequest, opts ...grpc.CallOption) (*SingleModelVersionInputExampleResponse, error)
	// ListModelVersionInputExamples
	ListModelVersionInputExamples(ctx context.Context, in *ListModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error)
	// Get a specific workflow from an app.
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*SingleWorkflowResponse, error)
	// List all the workflows.
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Add a workflow to an app.
	PostWorkflows(ctx context.Context, in *PostWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Patch one or more workflows.
	PatchWorkflows(ctx context.Context, in *PatchWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Patch one or more workflows ids.
	PatchWorkflowIds(ctx context.Context, in *PatchWorkflowIdsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error)
	// Delete a single workflow.
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete multiple workflows in one request.
	DeleteWorkflows(ctx context.Context, in *DeleteWorkflowsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Predict using a workflow.
	PostWorkflowResults(ctx context.Context, in *PostWorkflowResultsRequest, opts ...grpc.CallOption) (*PostWorkflowResultsResponse, error)
	// Compare embeddings distances using a workflow
	PostWorkflowResultsSimilarity(ctx context.Context, in *PostWorkflowResultsSimilarityRequest, opts ...grpc.CallOption) (*PostWorkflowResultsSimilarityResponse, error)
	// List workflow versions.
	ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error)
	// Get single workflow version.
	GetWorkflowVersion(ctx context.Context, in *GetWorkflowVersionRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionResponse, error)
	// Delete workflow versions.
	DeleteWorkflowVersions(ctx context.Context, in *DeleteWorkflowVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Patch workflow versions.
	PatchWorkflowVersions(ctx context.Context, in *PatchWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error)
	// Get a specific key from an app.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error)
	// List all the keys.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// List keys by app_id
	ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// Search over the keys to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a key to an app.
	PostKeys(ctx context.Context, in *PostKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// Patch one or more keys.
	PatchKeys(ctx context.Context, in *PatchKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error)
	// API Keys in the public API -- request is itself Key authorized, and will tell
	// the user the scopes/access of the key/credential they're providing, as computed by
	// our authorizer:
	MyScopes(ctx context.Context, in *MyScopesRequest, opts ...grpc.CallOption) (*MultiScopeResponse, error)
	MyScopesUser(ctx context.Context, in *MyScopesUserRequest, opts ...grpc.CallOption) (*MultiScopeUserResponse, error)
	MyScopesRoot(ctx context.Context, in *MyScopesRootRequest, opts ...grpc.CallOption) (*MultiScopeRootResponse, error)
	// List all auth scopes available to me as a user.
	ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*MultiScopeDepsResponse, error)
	// Get a specific app from an app.
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error)
	// List all the apps.
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Search over the apps to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a app to an app.
	// This needs to load the default workflow to make a copy, validating all the models in it, and
	// then writing the new workflow back to this new app.
	PostApps(ctx context.Context, in *PostAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch one or more apps.
	PatchApps(ctx context.Context, in *PatchAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch apps ids.
	PatchAppsIds(ctx context.Context, in *PatchAppsIdsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Patch one app.
	PatchApp(ctx context.Context, in *PatchAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error)
	// Search over the applications to find one or more you're looking for.
	PostAppsSearches(ctx context.Context, in *PostAppsSearchesRequest, opts ...grpc.CallOption) (*MultiAppResponse, error)
	// Get user information
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error)
	// Validate new password in real-time for a user
	PostValidatePassword(ctx context.Context, in *PostValidatePasswordRequest, opts ...grpc.CallOption) (*SinglePasswordValidationResponse, error)
	// Get a saved legacy search.
	GetSearch(ctx context.Context, in *GetSearchRequest, opts ...grpc.CallOption) (*SingleSearchResponse, error)
	// List all saved legacy searches.
	ListSearches(ctx context.Context, in *ListSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Patch saved legacy searches by ids.
	PatchSearches(ctx context.Context, in *PatchSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Deprecated: Do not use.
	// Execute a new search and optionally save it.
	//
	// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
	PostSearches(ctx context.Context, in *PostSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Execute a previously saved legacy search.
	PostSearchesByID(ctx context.Context, in *PostSearchesByIDRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error)
	// Evaluate the results of two search requests
	PostAnnotationSearchMetrics(ctx context.Context, in *PostAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// Get the evaluation results between two search requests
	GetAnnotationSearchMetrics(ctx context.Context, in *GetAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// List the evaluation results between two search requests
	ListAnnotationSearchMetrics(ctx context.Context, in *ListAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error)
	// DeleteAnnotationSearchMetrics
	DeleteAnnotationSearchMetrics(ctx context.Context, in *DeleteAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Delete a saved search.
	DeleteSearch(ctx context.Context, in *DeleteSearchRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the annotation filters.
	ListAnnotationFilters(ctx context.Context, in *ListAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Get a specific annotation filter.
	GetAnnotationFilter(ctx context.Context, in *GetAnnotationFilterRequest, opts ...grpc.CallOption) (*SingleAnnotationFilterResponse, error)
	// Add annotation filters.
	PostAnnotationFilters(ctx context.Context, in *PostAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Patch one or more annotation filters.
	PatchAnnotationFilters(ctx context.Context, in *PatchAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error)
	// Delete one or more annotation filters in a single request.
	DeleteAnnotationFilters(ctx context.Context, in *DeleteAnnotationFiltersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all status codes.
	ListStatusCodes(ctx context.Context, in *ListStatusCodesRequest, opts ...grpc.CallOption) (*MultiStatusCodeResponse, error)
	// Get more details for a status code.
	GetStatusCode(ctx context.Context, in *GetStatusCodeRequest, opts ...grpc.CallOption) (*SingleStatusCodeResponse, error)
	// owner list users who the app is shared with
	ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// add collaborators to an app.
	PostCollaborators(ctx context.Context, in *PostCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// Patch existing collaborators.
	PatchCollaborators(ctx context.Context, in *PatchCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error)
	// Delete existing collaborators.
	DeleteCollaborators(ctx context.Context, in *DeleteCollaboratorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Collaboration includes the app user are invitied to work on
	ListCollaborations(ctx context.Context, in *ListCollaborationsRequest, opts ...grpc.CallOption) (*MultiCollaborationsResponse, error)
	// PostAppDuplications starts async app duplication jobs which copy resources
	// (inputs, annotations, models etc) from one application to another. It can
	// also create the destination application if it does not exist, with fields
	// (description, metadata etc) copied from the source application.
	//
	// A duplication job can be started by any user that can read from the source
	// application (the target of this call) and can create and write to the
	// destination application. The duplication is associated with the user that
	// created it, so in order to read the status and progress of the job, that
	// user's ID has to be used in the call to GetAppDuplication, which might be
	// different to the source application owner ID in this call.
	PostAppDuplications(ctx context.Context, in *PostAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error)
	// ListAppDuplications lists all app duplication jobs created by the user.
	ListAppDuplications(ctx context.Context, in *ListAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error)
	// GetAppDuplication returns an app duplication job created by the user.
	GetAppDuplication(ctx context.Context, in *GetAppDuplicationRequest, opts ...grpc.CallOption) (*SingleAppDuplicationResponse, error)
	// Add tasks to an app.
	PostTasks(ctx context.Context, in *PostTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Task annotation count
	GetTaskAnnotationCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error)
	// Task Input count
	GetTaskInputCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error)
	// Get a specific task from an app.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*SingleTaskResponse, error)
	// List tasks from an app.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Patch one or more tasks.
	PatchTasks(ctx context.Context, in *PatchTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error)
	// Delete multiple tasks in one request.
	DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add Label orders.
	PostLabelOrders(ctx context.Context, in *PostLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Get a label order.
	GetLabelOrder(ctx context.Context, in *GetLabelOrderRequest, opts ...grpc.CallOption) (*SingleLabelOrderResponse, error)
	// List label orders.
	ListLabelOrders(ctx context.Context, in *ListLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Patch one or more label orders.
	PatchLabelOrders(ctx context.Context, in *PatchLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error)
	// Delete multiple label orders in one request.
	// this do not change task status
	DeleteLabelOrders(ctx context.Context, in *DeleteLabelOrdersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Add a list of Collectors to an app.
	// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
	// endpoint.
	// Those current scopes are listed here as a hard requirement.
	// They are needed when adding the collectors just so we now that you have permission with
	// that key at least to do the writing to this app with POST /inputs.
	PostCollectors(ctx context.Context, in *PostCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Get a specific collector from an app.
	GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*SingleCollectorResponse, error)
	// List all the collectors.
	ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Patch one or more collectors.
	PatchCollectors(ctx context.Context, in *PatchCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error)
	// Delete multiple collectors in one request.
	// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
	DeleteCollectors(ctx context.Context, in *DeleteCollectorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// PostStatValues
	PostStatValues(ctx context.Context, in *PostStatValuesRequest, opts ...grpc.CallOption) (*MultiStatValueResponse, error)
	// PostStatValuesAggregate
	PostStatValuesAggregate(ctx context.Context, in *PostStatValuesAggregateRequest, opts ...grpc.CallOption) (*MultiStatValueAggregateResponse, error)
	// Increase the view metric for a detail view
	PostTrendingMetricsView(ctx context.Context, in *PostTrendingMetricsViewRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List the view metrics for a detail view
	ListTrendingMetricsViews(ctx context.Context, in *ListTrendingMetricsViewsRequest, opts ...grpc.CallOption) (*MultiTrendingMetricsViewResponse, error)
	// Get a specific module from an app.
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*SingleModuleResponse, error)
	// List all the modules in community, by user or by app.
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Add a modules to an app.
	PostModules(ctx context.Context, in *PostModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Patch one or more modules.
	PatchModules(ctx context.Context, in *PatchModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error)
	// Delete multiple modules in one request.
	DeleteModules(ctx context.Context, in *DeleteModulesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get a specific module version for a module.
	GetModuleVersion(ctx context.Context, in *GetModuleVersionRequest, opts ...grpc.CallOption) (*SingleModuleVersionResponse, error)
	// List all the modules versions for a given module.
	ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Create a new module version to trigger training of the module.
	PostModuleVersions(ctx context.Context, in *PostModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Modify details of an existing module version.
	PatchModuleVersions(ctx context.Context, in *PatchModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error)
	// Delete a multiple module version.
	DeleteModuleVersions(ctx context.Context, in *DeleteModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Get usage count for specific module version.
	GetModuleVersionUsageCount(ctx context.Context, in *GetModuleVersionUsageCountRequest, opts ...grpc.CallOption) (*SingleModuleVersionUsageCountResponse, error)
	// Get installed modules vesrions for an app.
	GetInstalledModuleVersion(ctx context.Context, in *GetInstalledModuleVersionRequest, opts ...grpc.CallOption) (*SingleInstalledModuleVersionResponse, error)
	// List installed modules vesrions for an app.
	ListInstalledModuleVersions(ctx context.Context, in *ListInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error)
	// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
	PostInstalledModuleVersions(ctx context.Context, in *PostInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error)
	// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
	// in the url.
	// This cleaned up any associated caller keys so needs the Keys_Delete scope.
	DeleteInstalledModuleVersions(ctx context.Context, in *DeleteInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Assign a key that the caller owns to be used when accessing this installed module version
	// If this endpoint is called with a different key then it overwrites what is there.
	PostInstalledModuleVersionsKey(ctx context.Context, in *PostInstalledModuleVersionsKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error)
	// Perform bulk operations on a list of inputs based on input source.
	// Operation include add, update, delete of concepts, metadata and geo data.
	// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
	PostBulkOperations(ctx context.Context, in *PostBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// List all the bulk operations
	ListBulkOperations(ctx context.Context, in *ListBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// Get the bulk operation details by ID
	GetBulkOperation(ctx context.Context, in *GetBulkOperationRequest, opts ...grpc.CallOption) (*SingleBulkOperationsResponse, error)
	// Cancel one or more bulk operations
	CancelBulkOperations(ctx context.Context, in *CancelBulkOperationRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error)
	// delete one or more terminated bulk operations
	DeleteBulkOperations(ctx context.Context, in *DeleteBulkOperationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List next non-labeled and unassigned inputs from task's dataset
	ListNextTaskAssignments(ctx context.Context, in *ListNextTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error)
	// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
	PutTaskAssignments(ctx context.Context, in *PutTaskAssignmentsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List all the inputs add jobs
	ListInputsAddJobs(ctx context.Context, in *ListInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// Get the input add job details by ID
	GetInputsAddJob(ctx context.Context, in *GetInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error)
	// cancel the input add job by ID
	CancelInputsAddJob(ctx context.Context, in *CancelInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error)
	PostUploads(ctx context.Context, in *PostUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error)
	// Upload a part of a multipart upload.
	// Behaviour on completion depends on the endpoint that was used to initiate the upload.
	PutUploadContentParts(ctx context.Context, in *PutUploadContentPartsRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error)
	GetUpload(ctx context.Context, in *GetUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error)
	ListUploads(ctx context.Context, in *ListUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error)
	DeleteUploads(ctx context.Context, in *DeleteUploadsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// Initiates retrieval of inputs from cloud storage from a user provided data source.
	// Will create and return an inputs-add-job for tracking progress.
	// Archives will be extracted and their contents will be processed as inputs.
	//
	// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
	// files in the images_folder beginning with abc or in a subfolder beginning with abc.
	// For example:
	// bucket/images_folder/abcImage.png
	// bucket/images_folder/abc-1/Data.zip
	//
	// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
	// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
	// in which case it only requires rights to access that particular file.
	PostInputsDataSources(ctx context.Context, in *PostInputsDataSourcesRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// Get the input extraction job details by ID
	GetInputsExtractionJob(ctx context.Context, in *GetInputsExtractionJobRequest, opts ...grpc.CallOption) (*SingleInputsExtractionJobResponse, error)
	// List all the input extraction jobs
	ListInputsExtractionJobs(ctx context.Context, in *ListInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error)
	CancelInputsExtractionJobs(ctx context.Context, in *CancelInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error)
	// Start uploading a file archive containing inputs.
	// Will create and return an inputs-add-job for tracking progress.
	//
	// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
	// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
	PostInputsUploads(ctx context.Context, in *PostInputsUploadsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error)
	// Get a specific runner from an app.
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*SingleRunnerResponse, error)
	// List all the runners in community, by user or by app.
	ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error)
	// Add a runners to an app.
	PostRunners(ctx context.Context, in *PostRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error)
	// Delete multiple runners in one request.
	DeleteRunners(ctx context.Context, in *DeleteRunnersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error)
	// List items for the remote runner to work on.
	ListRunnerItems(ctx context.Context, in *ListRunnerItemsRequest, opts ...grpc.CallOption) (*MultiRunnerItemResponse, error)
	// Post back outputs from remote runners
	PostRunnerItemOutputs(ctx context.Context, in *PostRunnerItemOutputsRequest, opts ...grpc.CallOption) (*MultiRunnerItemOutputResponse, error)
	PostModelVersionsTrainingTimeEstimate(ctx context.Context, in *PostModelVersionsTrainingTimeEstimateRequest, opts ...grpc.CallOption) (*MultiTrainingTimeEstimateResponse, error)
}

type v2Client struct {
	cc grpc.ClientConnInterface
}

func NewV2Client(cc grpc.ClientConnInterface) V2Client {
	return &v2Client{cc}
}

func (c *v2Client) ListConceptRelations(ctx context.Context, in *ListConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error) {
	out := new(MultiConceptRelationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConceptRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptRelations(ctx context.Context, in *PostConceptRelationsRequest, opts ...grpc.CallOption) (*MultiConceptRelationResponse, error) {
	out := new(MultiConceptRelationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteConceptRelations(ctx context.Context, in *DeleteConceptRelationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteConceptRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConceptCounts(ctx context.Context, in *GetConceptCountsRequest, opts ...grpc.CallOption) (*MultiConceptCountResponse, error) {
	out := new(MultiConceptCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetConceptCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConcept(ctx context.Context, in *GetConceptRequest, opts ...grpc.CallOption) (*SingleConceptResponse, error) {
	out := new(SingleConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetConcept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConcepts(ctx context.Context, in *ListConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelConcepts(ctx context.Context, in *ListModelConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptsSearches(ctx context.Context, in *PostConceptsSearchesRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConcepts(ctx context.Context, in *PostConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchConcepts(ctx context.Context, in *PatchConceptsRequest, opts ...grpc.CallOption) (*MultiConceptResponse, error) {
	out := new(MultiConceptResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchConcepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetConceptLanguage(ctx context.Context, in *GetConceptLanguageRequest, opts ...grpc.CallOption) (*SingleConceptLanguageResponse, error) {
	out := new(SingleConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetConceptLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListConceptLanguages(ctx context.Context, in *ListConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListConceptLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptLanguages(ctx context.Context, in *PostConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchConceptLanguages(ctx context.Context, in *PatchConceptLanguagesRequest, opts ...grpc.CallOption) (*MultiConceptLanguageResponse, error) {
	out := new(MultiConceptLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchConceptLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListKnowledgeGraphs(ctx context.Context, in *ListKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error) {
	out := new(MultiKnowledgeGraphResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListKnowledgeGraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostKnowledgeGraphs(ctx context.Context, in *PostKnowledgeGraphsRequest, opts ...grpc.CallOption) (*MultiKnowledgeGraphResponse, error) {
	out := new(MultiKnowledgeGraphResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostKnowledgeGraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostConceptMappingJobs(ctx context.Context, in *PostConceptMappingJobsRequest, opts ...grpc.CallOption) (*MultiConceptMappingJobResponse, error) {
	out := new(MultiConceptMappingJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostConceptMappingJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*SingleAnnotationResponse, error) {
	out := new(SingleAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotations(ctx context.Context, in *PostAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotations(ctx context.Context, in *PatchAnnotationsRequest, opts ...grpc.CallOption) (*MultiAnnotationResponse, error) {
	out := new(MultiAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationsStatus(ctx context.Context, in *PatchAnnotationsStatusRequest, opts ...grpc.CallOption) (*PatchAnnotationsStatusResponse, error) {
	out := new(PatchAnnotationsStatusResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotationsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotations(ctx context.Context, in *DeleteAnnotationsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationsSearches(ctx context.Context, in *PatchAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotationsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationsSearches(ctx context.Context, in *PostAnnotationsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotationsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationWorkers(ctx context.Context, in *ListAnnotationWorkersRequest, opts ...grpc.CallOption) (*MultiWorkerResponse, error) {
	out := new(MultiWorkerResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotationWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputCount(ctx context.Context, in *GetInputCountRequest, opts ...grpc.CallOption) (*SingleInputCountResponse, error) {
	out := new(SingleInputCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) StreamInputs(ctx context.Context, in *StreamInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/StreamInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputSamples(ctx context.Context, in *GetInputSamplesRequest, opts ...grpc.CallOption) (*MultiInputAnnotationResponse, error) {
	out := new(MultiInputAnnotationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*SingleInputResponse, error) {
	out := new(SingleInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputVideoManifest(ctx context.Context, in *GetVideoManifestRequest, opts ...grpc.CallOption) (*GetVideoManifestResponse, error) {
	out := new(GetVideoManifestResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputVideoManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputs(ctx context.Context, in *PostInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchInputs(ctx context.Context, in *PatchInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInput(ctx context.Context, in *DeleteInputRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInputs(ctx context.Context, in *DeleteInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchInputsSearches(ctx context.Context, in *PatchInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchInputsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsSearches(ctx context.Context, in *PostInputsSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelOutputs(ctx context.Context, in *PostModelOutputsRequest, opts ...grpc.CallOption) (*MultiOutputResponse, error) {
	out := new(MultiOutputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*SingleDatasetResponse, error) {
	out := new(SingleDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasets(ctx context.Context, in *PostDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDatasets(ctx context.Context, in *PatchDatasetsRequest, opts ...grpc.CallOption) (*MultiDatasetResponse, error) {
	out := new(MultiDatasetResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasets(ctx context.Context, in *DeleteDatasetsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetInputs(ctx context.Context, in *ListDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error) {
	out := new(MultiDatasetInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasetInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDatasetInput(ctx context.Context, in *GetDatasetInputRequest, opts ...grpc.CallOption) (*SingleDatasetInputResponse, error) {
	out := new(SingleDatasetInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetDatasetInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasetInputs(ctx context.Context, in *PostDatasetInputsRequest, opts ...grpc.CallOption) (*MultiDatasetInputResponse, error) {
	out := new(MultiDatasetInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostDatasetInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasetInputs(ctx context.Context, in *DeleteDatasetInputsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteDatasetInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetVersions(ctx context.Context, in *ListDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetDatasetVersion(ctx context.Context, in *GetDatasetVersionRequest, opts ...grpc.CallOption) (*SingleDatasetVersionResponse, error) {
	out := new(SingleDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListDatasetVersionMetricsGroups(ctx context.Context, in *ListDatasetVersionMetricsGroupsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionMetricsGroupResponse, error) {
	out := new(MultiDatasetVersionMetricsGroupResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListDatasetVersionMetricsGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostDatasetVersions(ctx context.Context, in *PostDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchDatasetVersions(ctx context.Context, in *PatchDatasetVersionsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionResponse, error) {
	out := new(MultiDatasetVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutDatasetVersionExports(ctx context.Context, in *PutDatasetVersionExportsRequest, opts ...grpc.CallOption) (*MultiDatasetVersionExportResponse, error) {
	out := new(MultiDatasetVersionExportResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PutDatasetVersionExports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelType(ctx context.Context, in *GetModelTypeRequest, opts ...grpc.CallOption) (*SingleModelTypeResponse, error) {
	out := new(SingleModelTypeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListOpenSourceLicenses(ctx context.Context, in *ListOpenSourceLicensesRequest, opts ...grpc.CallOption) (*ListOpenSourceLicensesResponse, error) {
	out := new(ListOpenSourceLicensesResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListOpenSourceLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelTypes(ctx context.Context, in *ListModelTypesRequest, opts ...grpc.CallOption) (*MultiModelTypeResponse, error) {
	out := new(MultiModelTypeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelOutputInfo(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelOutputInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetResourceCounts(ctx context.Context, in *GetResourceCountsRequest, opts ...grpc.CallOption) (*GetResourceCountsResponse, error) {
	out := new(GetResourceCountsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetResourceCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelsSearches(ctx context.Context, in *PostModelsSearchesRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModels(ctx context.Context, in *PostModelsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModels(ctx context.Context, in *PatchModelsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelIds(ctx context.Context, in *PatchModelIdsRequest, opts ...grpc.CallOption) (*MultiModelResponse, error) {
	out := new(MultiModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelCheckConsents(ctx context.Context, in *PatchModelCheckConsentsRequest, opts ...grpc.CallOption) (*MultiModelCheckConsentResponse, error) {
	out := new(MultiModelCheckConsentResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelCheckConsents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelToolkits(ctx context.Context, in *PatchModelToolkitsRequest, opts ...grpc.CallOption) (*MultiModelToolkitResponse, error) {
	out := new(MultiModelToolkitResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelToolkits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelUseCases(ctx context.Context, in *PatchModelUseCasesRequest, opts ...grpc.CallOption) (*MultiModelUseCaseResponse, error) {
	out := new(MultiModelUseCaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelUseCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelLanguages(ctx context.Context, in *PatchModelLanguagesRequest, opts ...grpc.CallOption) (*MultiModelLanguageResponse, error) {
	out := new(MultiModelLanguageResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *v2Client) ListModelInputs(ctx context.Context, in *ListModelInputsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersions(ctx context.Context, in *ListModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error) {
	out := new(MultiModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionsUnPublish(ctx context.Context, in *PostWorkflowVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowVersionsUnPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowVersionsPublish(ctx context.Context, in *PostWorkflowVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowVersionsPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsPublish(ctx context.Context, in *PostModelVersionsPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionsPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsUnPublish(ctx context.Context, in *PostModelVersionsUnPublishRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionsUnPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersions(ctx context.Context, in *PostModelVersionsRequest, opts ...grpc.CallOption) (*SingleModelResponse, error) {
	out := new(SingleModelResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModelVersions(ctx context.Context, in *PatchModelVersionsRequest, opts ...grpc.CallOption) (*MultiModelVersionResponse, error) {
	out := new(MultiModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModelVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionMetrics(ctx context.Context, in *GetModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelVersionMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionMetrics(ctx context.Context, in *PostModelVersionMetricsRequest, opts ...grpc.CallOption) (*SingleModelVersionResponse, error) {
	out := new(SingleModelVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionEvaluations(ctx context.Context, in *PostModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionEvaluations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersionEvaluations(ctx context.Context, in *ListModelVersionEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelVersionEvaluations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionEvaluation(ctx context.Context, in *GetModelVersionEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error) {
	out := new(SingleEvalMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelVersionEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostEvaluations(ctx context.Context, in *PostEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostEvaluations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListEvaluations(ctx context.Context, in *ListEvaluationsRequest, opts ...grpc.CallOption) (*MultiEvalMetricsResponse, error) {
	out := new(MultiEvalMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListEvaluations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*SingleEvalMetricsResponse, error) {
	out := new(SingleEvalMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelReferences(ctx context.Context, in *ListModelReferencesRequest, opts ...grpc.CallOption) (*MultiModelReferenceResponse, error) {
	out := new(MultiModelReferenceResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModelVersionInputExample(ctx context.Context, in *GetModelVersionInputExampleRequest, opts ...grpc.CallOption) (*SingleModelVersionInputExampleResponse, error) {
	out := new(SingleModelVersionInputExampleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModelVersionInputExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModelVersionInputExamples(ctx context.Context, in *ListModelVersionInputExamplesRequest, opts ...grpc.CallOption) (*MultiModelVersionInputExampleResponse, error) {
	out := new(MultiModelVersionInputExampleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModelVersionInputExamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*SingleWorkflowResponse, error) {
	out := new(SingleWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflows(ctx context.Context, in *PostWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflows(ctx context.Context, in *PatchWorkflowsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflowIds(ctx context.Context, in *PatchWorkflowIdsRequest, opts ...grpc.CallOption) (*MultiWorkflowResponse, error) {
	out := new(MultiWorkflowResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchWorkflowIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflows(ctx context.Context, in *DeleteWorkflowsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowResults(ctx context.Context, in *PostWorkflowResultsRequest, opts ...grpc.CallOption) (*PostWorkflowResultsResponse, error) {
	out := new(PostWorkflowResultsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostWorkflowResultsSimilarity(ctx context.Context, in *PostWorkflowResultsSimilarityRequest, opts ...grpc.CallOption) (*PostWorkflowResultsSimilarityResponse, error) {
	out := new(PostWorkflowResultsSimilarityResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostWorkflowResultsSimilarity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListWorkflowVersions(ctx context.Context, in *ListWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error) {
	out := new(MultiWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListWorkflowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetWorkflowVersion(ctx context.Context, in *GetWorkflowVersionRequest, opts ...grpc.CallOption) (*SingleWorkflowVersionResponse, error) {
	out := new(SingleWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetWorkflowVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteWorkflowVersions(ctx context.Context, in *DeleteWorkflowVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteWorkflowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchWorkflowVersions(ctx context.Context, in *PatchWorkflowVersionsRequest, opts ...grpc.CallOption) (*MultiWorkflowVersionResponse, error) {
	out := new(MultiWorkflowVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchWorkflowVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error) {
	out := new(SingleKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAppKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostKeys(ctx context.Context, in *PostKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchKeys(ctx context.Context, in *PatchKeysRequest, opts ...grpc.CallOption) (*MultiKeyResponse, error) {
	out := new(MultiKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopes(ctx context.Context, in *MyScopesRequest, opts ...grpc.CallOption) (*MultiScopeResponse, error) {
	out := new(MultiScopeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/MyScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopesUser(ctx context.Context, in *MyScopesUserRequest, opts ...grpc.CallOption) (*MultiScopeUserResponse, error) {
	out := new(MultiScopeUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/MyScopesUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) MyScopesRoot(ctx context.Context, in *MyScopesRootRequest, opts ...grpc.CallOption) (*MultiScopeRootResponse, error) {
	out := new(MultiScopeRootResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/MyScopesRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*MultiScopeDepsResponse, error) {
	out := new(MultiScopeDepsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error) {
	out := new(SingleAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostApps(ctx context.Context, in *PostAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchApps(ctx context.Context, in *PatchAppsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAppsIds(ctx context.Context, in *PatchAppsIdsRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAppsIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchApp(ctx context.Context, in *PatchAppRequest, opts ...grpc.CallOption) (*SingleAppResponse, error) {
	out := new(SingleAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAppsSearches(ctx context.Context, in *PostAppsSearchesRequest, opts ...grpc.CallOption) (*MultiAppResponse, error) {
	out := new(MultiAppResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAppsSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error) {
	out := new(SingleUserResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostValidatePassword(ctx context.Context, in *PostValidatePasswordRequest, opts ...grpc.CallOption) (*SinglePasswordValidationResponse, error) {
	out := new(SinglePasswordValidationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostValidatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetSearch(ctx context.Context, in *GetSearchRequest, opts ...grpc.CallOption) (*SingleSearchResponse, error) {
	out := new(SingleSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListSearches(ctx context.Context, in *ListSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchSearches(ctx context.Context, in *PatchSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *v2Client) PostSearches(ctx context.Context, in *PostSearchesRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostSearchesByID(ctx context.Context, in *PostSearchesByIDRequest, opts ...grpc.CallOption) (*MultiSearchResponse, error) {
	out := new(MultiSearchResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostSearchesByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationSearchMetrics(ctx context.Context, in *PostAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotationSearchMetrics(ctx context.Context, in *GetAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationSearchMetrics(ctx context.Context, in *ListAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*MultiAnnotationSearchMetricsResponse, error) {
	out := new(MultiAnnotationSearchMetricsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotationSearchMetrics(ctx context.Context, in *DeleteAnnotationSearchMetricsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotationSearchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteSearch(ctx context.Context, in *DeleteSearchRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAnnotationFilters(ctx context.Context, in *ListAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAnnotationFilter(ctx context.Context, in *GetAnnotationFilterRequest, opts ...grpc.CallOption) (*SingleAnnotationFilterResponse, error) {
	out := new(SingleAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAnnotationFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAnnotationFilters(ctx context.Context, in *PostAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchAnnotationFilters(ctx context.Context, in *PatchAnnotationFiltersRequest, opts ...grpc.CallOption) (*MultiAnnotationFilterResponse, error) {
	out := new(MultiAnnotationFilterResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteAnnotationFilters(ctx context.Context, in *DeleteAnnotationFiltersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteAnnotationFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListStatusCodes(ctx context.Context, in *ListStatusCodesRequest, opts ...grpc.CallOption) (*MultiStatusCodeResponse, error) {
	out := new(MultiStatusCodeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListStatusCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetStatusCode(ctx context.Context, in *GetStatusCodeRequest, opts ...grpc.CallOption) (*SingleStatusCodeResponse, error) {
	out := new(SingleStatusCodeResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetStatusCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollaborators(ctx context.Context, in *ListCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCollaborators(ctx context.Context, in *PostCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchCollaborators(ctx context.Context, in *PatchCollaboratorsRequest, opts ...grpc.CallOption) (*MultiCollaboratorsResponse, error) {
	out := new(MultiCollaboratorsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteCollaborators(ctx context.Context, in *DeleteCollaboratorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollaborations(ctx context.Context, in *ListCollaborationsRequest, opts ...grpc.CallOption) (*MultiCollaborationsResponse, error) {
	out := new(MultiCollaborationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListCollaborations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostAppDuplications(ctx context.Context, in *PostAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error) {
	out := new(MultiAppDuplicationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostAppDuplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListAppDuplications(ctx context.Context, in *ListAppDuplicationsRequest, opts ...grpc.CallOption) (*MultiAppDuplicationsResponse, error) {
	out := new(MultiAppDuplicationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListAppDuplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetAppDuplication(ctx context.Context, in *GetAppDuplicationRequest, opts ...grpc.CallOption) (*SingleAppDuplicationResponse, error) {
	out := new(SingleAppDuplicationResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetAppDuplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTasks(ctx context.Context, in *PostTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTaskAnnotationCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error) {
	out := new(SingleTaskCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetTaskAnnotationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTaskInputCount(ctx context.Context, in *GetTaskCountRequest, opts ...grpc.CallOption) (*SingleTaskCountResponse, error) {
	out := new(SingleTaskCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetTaskInputCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*SingleTaskResponse, error) {
	out := new(SingleTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchTasks(ctx context.Context, in *PatchTasksRequest, opts ...grpc.CallOption) (*MultiTaskResponse, error) {
	out := new(MultiTaskResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostLabelOrders(ctx context.Context, in *PostLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetLabelOrder(ctx context.Context, in *GetLabelOrderRequest, opts ...grpc.CallOption) (*SingleLabelOrderResponse, error) {
	out := new(SingleLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetLabelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListLabelOrders(ctx context.Context, in *ListLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchLabelOrders(ctx context.Context, in *PatchLabelOrdersRequest, opts ...grpc.CallOption) (*MultiLabelOrderResponse, error) {
	out := new(MultiLabelOrderResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteLabelOrders(ctx context.Context, in *DeleteLabelOrdersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteLabelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostCollectors(ctx context.Context, in *PostCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*SingleCollectorResponse, error) {
	out := new(SingleCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchCollectors(ctx context.Context, in *PatchCollectorsRequest, opts ...grpc.CallOption) (*MultiCollectorResponse, error) {
	out := new(MultiCollectorResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteCollectors(ctx context.Context, in *DeleteCollectorsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteCollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostStatValues(ctx context.Context, in *PostStatValuesRequest, opts ...grpc.CallOption) (*MultiStatValueResponse, error) {
	out := new(MultiStatValueResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostStatValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostStatValuesAggregate(ctx context.Context, in *PostStatValuesAggregateRequest, opts ...grpc.CallOption) (*MultiStatValueAggregateResponse, error) {
	out := new(MultiStatValueAggregateResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostStatValuesAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostTrendingMetricsView(ctx context.Context, in *PostTrendingMetricsViewRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostTrendingMetricsView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListTrendingMetricsViews(ctx context.Context, in *ListTrendingMetricsViewsRequest, opts ...grpc.CallOption) (*MultiTrendingMetricsViewResponse, error) {
	out := new(MultiTrendingMetricsViewResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListTrendingMetricsViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*SingleModuleResponse, error) {
	out := new(SingleModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModules(ctx context.Context, in *PostModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModules(ctx context.Context, in *PatchModulesRequest, opts ...grpc.CallOption) (*MultiModuleResponse, error) {
	out := new(MultiModuleResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModules(ctx context.Context, in *DeleteModulesRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModuleVersion(ctx context.Context, in *GetModuleVersionRequest, opts ...grpc.CallOption) (*SingleModuleVersionResponse, error) {
	out := new(SingleModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModuleVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModuleVersions(ctx context.Context, in *PostModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PatchModuleVersions(ctx context.Context, in *PatchModuleVersionsRequest, opts ...grpc.CallOption) (*MultiModuleVersionResponse, error) {
	out := new(MultiModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PatchModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteModuleVersions(ctx context.Context, in *DeleteModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetModuleVersionUsageCount(ctx context.Context, in *GetModuleVersionUsageCountRequest, opts ...grpc.CallOption) (*SingleModuleVersionUsageCountResponse, error) {
	out := new(SingleModuleVersionUsageCountResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetModuleVersionUsageCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInstalledModuleVersion(ctx context.Context, in *GetInstalledModuleVersionRequest, opts ...grpc.CallOption) (*SingleInstalledModuleVersionResponse, error) {
	out := new(SingleInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInstalledModuleVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInstalledModuleVersions(ctx context.Context, in *ListInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error) {
	out := new(MultiInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListInstalledModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInstalledModuleVersions(ctx context.Context, in *PostInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*MultiInstalledModuleVersionResponse, error) {
	out := new(MultiInstalledModuleVersionResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInstalledModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteInstalledModuleVersions(ctx context.Context, in *DeleteInstalledModuleVersionsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteInstalledModuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInstalledModuleVersionsKey(ctx context.Context, in *PostInstalledModuleVersionsKeyRequest, opts ...grpc.CallOption) (*SingleKeyResponse, error) {
	out := new(SingleKeyResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInstalledModuleVersionsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostBulkOperations(ctx context.Context, in *PostBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListBulkOperations(ctx context.Context, in *ListBulkOperationsRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetBulkOperation(ctx context.Context, in *GetBulkOperationRequest, opts ...grpc.CallOption) (*SingleBulkOperationsResponse, error) {
	out := new(SingleBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetBulkOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelBulkOperations(ctx context.Context, in *CancelBulkOperationRequest, opts ...grpc.CallOption) (*MultiBulkOperationsResponse, error) {
	out := new(MultiBulkOperationsResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/CancelBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteBulkOperations(ctx context.Context, in *DeleteBulkOperationRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteBulkOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListNextTaskAssignments(ctx context.Context, in *ListNextTaskAssignmentsRequest, opts ...grpc.CallOption) (*MultiInputResponse, error) {
	out := new(MultiInputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListNextTaskAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutTaskAssignments(ctx context.Context, in *PutTaskAssignmentsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PutTaskAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputsAddJobs(ctx context.Context, in *ListInputsAddJobsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListInputsAddJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputsAddJob(ctx context.Context, in *GetInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error) {
	out := new(SingleInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputsAddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelInputsAddJob(ctx context.Context, in *CancelInputsAddJobRequest, opts ...grpc.CallOption) (*SingleInputsAddJobResponse, error) {
	out := new(SingleInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/CancelInputsAddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostUploads(ctx context.Context, in *PostUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error) {
	out := new(MultiUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PutUploadContentParts(ctx context.Context, in *PutUploadContentPartsRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error) {
	out := new(SingleUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PutUploadContentParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetUpload(ctx context.Context, in *GetUploadRequest, opts ...grpc.CallOption) (*SingleUploadResponse, error) {
	out := new(SingleUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListUploads(ctx context.Context, in *ListUploadsRequest, opts ...grpc.CallOption) (*MultiUploadResponse, error) {
	out := new(MultiUploadResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteUploads(ctx context.Context, in *DeleteUploadsRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsDataSources(ctx context.Context, in *PostInputsDataSourcesRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetInputsExtractionJob(ctx context.Context, in *GetInputsExtractionJobRequest, opts ...grpc.CallOption) (*SingleInputsExtractionJobResponse, error) {
	out := new(SingleInputsExtractionJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetInputsExtractionJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListInputsExtractionJobs(ctx context.Context, in *ListInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error) {
	out := new(MultiInputsExtractionJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListInputsExtractionJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) CancelInputsExtractionJobs(ctx context.Context, in *CancelInputsExtractionJobsRequest, opts ...grpc.CallOption) (*MultiInputsExtractionJobResponse, error) {
	out := new(MultiInputsExtractionJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/CancelInputsExtractionJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostInputsUploads(ctx context.Context, in *PostInputsUploadsRequest, opts ...grpc.CallOption) (*MultiInputsAddJobResponse, error) {
	out := new(MultiInputsAddJobResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostInputsUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*SingleRunnerResponse, error) {
	out := new(SingleRunnerResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error) {
	out := new(MultiRunnerResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostRunners(ctx context.Context, in *PostRunnersRequest, opts ...grpc.CallOption) (*MultiRunnerResponse, error) {
	out := new(MultiRunnerResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) DeleteRunners(ctx context.Context, in *DeleteRunnersRequest, opts ...grpc.CallOption) (*status.BaseResponse, error) {
	out := new(status.BaseResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/DeleteRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) ListRunnerItems(ctx context.Context, in *ListRunnerItemsRequest, opts ...grpc.CallOption) (*MultiRunnerItemResponse, error) {
	out := new(MultiRunnerItemResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/ListRunnerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostRunnerItemOutputs(ctx context.Context, in *PostRunnerItemOutputsRequest, opts ...grpc.CallOption) (*MultiRunnerItemOutputResponse, error) {
	out := new(MultiRunnerItemOutputResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostRunnerItemOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) PostModelVersionsTrainingTimeEstimate(ctx context.Context, in *PostModelVersionsTrainingTimeEstimateRequest, opts ...grpc.CallOption) (*MultiTrainingTimeEstimateResponse, error) {
	out := new(MultiTrainingTimeEstimateResponse)
	err := c.cc.Invoke(ctx, "/clarifai.api.V2/PostModelVersionsTrainingTimeEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V2Server is the server API for V2 service.
// All implementations must embed UnimplementedV2Server
// for forward compatibility
type V2Server interface {
	// List concept relations between concepts in the platform.
	// MUST be above ListConcepts so that if concept_id is empty this will still match
	// /concepts/relations to list all the concept relations in the app.
	ListConceptRelations(context.Context, *ListConceptRelationsRequest) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	PostConceptRelations(context.Context, *PostConceptRelationsRequest) (*MultiConceptRelationResponse, error)
	// Post concept relations to create relations between concepts in the platform.
	DeleteConceptRelations(context.Context, *DeleteConceptRelationsRequest) (*status.BaseResponse, error)
	// List all the concepts with their positive and negative counts
	GetConceptCounts(context.Context, *GetConceptCountsRequest) (*MultiConceptCountResponse, error)
	// Get a specific concept from an app.
	GetConcept(context.Context, *GetConceptRequest) (*SingleConceptResponse, error)
	// List all the concepts.
	ListConcepts(context.Context, *ListConceptsRequest) (*MultiConceptResponse, error)
	// List models concepts.
	ListModelConcepts(context.Context, *ListModelConceptsRequest) (*MultiConceptResponse, error)
	// Search over the concepts to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostConceptsSearches(context.Context, *PostConceptsSearchesRequest) (*MultiConceptResponse, error)
	// Add a concept to an app.
	PostConcepts(context.Context, *PostConceptsRequest) (*MultiConceptResponse, error)
	// Patch one or more concepts.
	PatchConcepts(context.Context, *PatchConceptsRequest) (*MultiConceptResponse, error)
	// Get a specific concept from an app.
	GetConceptLanguage(context.Context, *GetConceptLanguageRequest) (*SingleConceptLanguageResponse, error)
	// List the concept in all the translated languages.
	ListConceptLanguages(context.Context, *ListConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// Add a new translation for this concept.
	PostConceptLanguages(context.Context, *PostConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// Patch the name for a given language names by passing in a list of concepts with the new names
	// for the languages.
	PatchConceptLanguages(context.Context, *PatchConceptLanguagesRequest) (*MultiConceptLanguageResponse, error)
	// List all domain graphs.
	ListKnowledgeGraphs(context.Context, *ListKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error)
	// Post domain graphs.
	PostKnowledgeGraphs(context.Context, *PostKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error)
	// Start concept mapping jobs.
	PostConceptMappingJobs(context.Context, *PostConceptMappingJobsRequest) (*MultiConceptMappingJobResponse, error)
	// Get a specific annotation from an app.
	GetAnnotation(context.Context, *GetAnnotationRequest) (*SingleAnnotationResponse, error)
	// List all the annotation.
	ListAnnotations(context.Context, *ListAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Post annotations.
	PostAnnotations(context.Context, *PostAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Patch one or more annotations.
	PatchAnnotations(context.Context, *PatchAnnotationsRequest) (*MultiAnnotationResponse, error)
	// Patch annotations status by worker id and task id.
	PatchAnnotationsStatus(context.Context, *PatchAnnotationsStatusRequest) (*PatchAnnotationsStatusResponse, error)
	// Delete a single annotation.
	DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*status.BaseResponse, error)
	// Delete multiple annotations in one request.
	DeleteAnnotations(context.Context, *DeleteAnnotationsRequest) (*status.BaseResponse, error)
	// Patch saved annotations searches by ids.
	PatchAnnotationsSearches(context.Context, *PatchAnnotationsSearchesRequest) (*MultiSearchResponse, error)
	// Execute a search over annotations
	PostAnnotationsSearches(context.Context, *PostAnnotationsSearchesRequest) (*MultiSearchResponse, error)
	// ListAnnotationWorkers lists users, models, and workflows (collectively
	// known as "workers") that have added annotations to the application.
	ListAnnotationWorkers(context.Context, *ListAnnotationWorkersRequest) (*MultiWorkerResponse, error)
	// Get input count per status.
	GetInputCount(context.Context, *GetInputCountRequest) (*SingleInputCountResponse, error)
	// Streams all the inputs starting from oldest assets.
	StreamInputs(context.Context, *StreamInputsRequest) (*MultiInputResponse, error)
	// Get a specific input from an app.
	GetInputSamples(context.Context, *GetInputSamplesRequest) (*MultiInputAnnotationResponse, error)
	// Get a specific input from an app.
	GetInput(context.Context, *GetInputRequest) (*SingleInputResponse, error)
	// Get a video input manifest.
	GetInputVideoManifest(context.Context, *GetVideoManifestRequest) (*GetVideoManifestResponse, error)
	// List all the inputs.
	ListInputs(context.Context, *ListInputsRequest) (*MultiInputResponse, error)
	// Add 1 or more input to an app.
	// The actual inputs processing is asynchronous.
	PostInputs(context.Context, *PostInputsRequest) (*MultiInputResponse, error)
	// Patch one or more inputs.
	PatchInputs(context.Context, *PatchInputsRequest) (*MultiInputResponse, error)
	// Delete a single input asynchronously.
	DeleteInput(context.Context, *DeleteInputRequest) (*status.BaseResponse, error)
	// Delete multiple inputs in one request.
	// This call is asynchronous.
	DeleteInputs(context.Context, *DeleteInputsRequest) (*status.BaseResponse, error)
	// Patch saved inputs searches by ids.
	PatchInputsSearches(context.Context, *PatchInputsSearchesRequest) (*MultiSearchResponse, error)
	// Execute a search over inputs
	PostInputsSearches(context.Context, *PostInputsSearchesRequest) (*MultiSearchResponse, error)
	// Get predicted outputs from the model.
	PostModelOutputs(context.Context, *PostModelOutputsRequest) (*MultiOutputResponse, error)
	// List all the datasets.
	ListDatasets(context.Context, *ListDatasetsRequest) (*MultiDatasetResponse, error)
	// Get a specific dataset.
	GetDataset(context.Context, *GetDatasetRequest) (*SingleDatasetResponse, error)
	// Add datasets to an app.
	// The process is atomic, i.e. either all or no datasets are added.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PostDatasets(context.Context, *PostDatasetsRequest) (*MultiDatasetResponse, error)
	// Patch one or more datasets.
	// The process is atomic, i.e. either all or no datasets are patched.
	// If there is an error for one dataset,
	// the process will stop, revert the transaction and return the error.
	PatchDatasets(context.Context, *PatchDatasetsRequest) (*MultiDatasetResponse, error)
	// Delete one or more datasets in a single request.
	DeleteDatasets(context.Context, *DeleteDatasetsRequest) (*status.BaseResponse, error)
	// List all the dataset inputs in a dataset.
	ListDatasetInputs(context.Context, *ListDatasetInputsRequest) (*MultiDatasetInputResponse, error)
	// Get a specific dataset input.
	GetDatasetInput(context.Context, *GetDatasetInputRequest) (*SingleDatasetInputResponse, error)
	// Add dataset inputs to a dataset.
	// The process is not atomic, i.e. if there are errors with some dataset
	// inputs, others might still be added. The response reports
	//   - SUCCESS if all dataset inputs were added,
	//   - MIXED_STATUS if only some dataset inputs were added, and
	//   - FAILURE if no dataset inputs were added.
	//
	// Each individual dataset input in the response has the status set to
	// indicate if it was successful or if there was an error.
	PostDatasetInputs(context.Context, *PostDatasetInputsRequest) (*MultiDatasetInputResponse, error)
	// Delete one or more dataset inputs in a single request.
	DeleteDatasetInputs(context.Context, *DeleteDatasetInputsRequest) (*status.BaseResponse, error)
	// List all the dataset versions.
	ListDatasetVersions(context.Context, *ListDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Get a specific dataset version.
	GetDatasetVersion(context.Context, *GetDatasetVersionRequest) (*SingleDatasetVersionResponse, error)
	ListDatasetVersionMetricsGroups(context.Context, *ListDatasetVersionMetricsGroupsRequest) (*MultiDatasetVersionMetricsGroupResponse, error)
	// Add dataset versions to a dataset.
	PostDatasetVersions(context.Context, *PostDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Patch one or more dataset versions.
	PatchDatasetVersions(context.Context, *PatchDatasetVersionsRequest) (*MultiDatasetVersionResponse, error)
	// Delete one or more dataset versions in a single request.
	DeleteDatasetVersions(context.Context, *DeleteDatasetVersionsRequest) (*status.BaseResponse, error)
	// Create export of a dataset version.
	PutDatasetVersionExports(context.Context, *PutDatasetVersionExportsRequest) (*MultiDatasetVersionExportResponse, error)
	// Get a specific model type.
	GetModelType(context.Context, *GetModelTypeRequest) (*SingleModelTypeResponse, error)
	// List all the supported open source licenses in the platform.
	ListOpenSourceLicenses(context.Context, *ListOpenSourceLicensesRequest) (*ListOpenSourceLicensesResponse, error)
	// List all the model types available in the platform.
	// This MUST be above ListModels so that the /models/types endpoint takes precedence.
	ListModelTypes(context.Context, *ListModelTypesRequest) (*MultiModelTypeResponse, error)
	// Get a specific model from an app.
	GetModel(context.Context, *GetModelRequest) (*SingleModelResponse, error)
	// Get a the output info for a given model_id or model_id/version_id
	// combo.
	GetModelOutputInfo(context.Context, *GetModelRequest) (*SingleModelResponse, error)
	// List all the models.
	ListModels(context.Context, *ListModelsRequest) (*MultiModelResponse, error)
	// List the resource counts for the app.
	GetResourceCounts(context.Context, *GetResourceCountsRequest) (*GetResourceCountsResponse, error)
	// Search over the models to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	PostModelsSearches(context.Context, *PostModelsSearchesRequest) (*MultiModelResponse, error)
	// Add a models to an app.
	PostModels(context.Context, *PostModelsRequest) (*SingleModelResponse, error)
	// Patch one or more models.
	PatchModels(context.Context, *PatchModelsRequest) (*MultiModelResponse, error)
	// Patch one or more models ids.
	PatchModelIds(context.Context, *PatchModelIdsRequest) (*MultiModelResponse, error)
	// Delete a single model.
	DeleteModel(context.Context, *DeleteModelRequest) (*status.BaseResponse, error)
	// Delete multiple models in one request.
	DeleteModels(context.Context, *DeleteModelsRequest) (*status.BaseResponse, error)
	// Update model check consents
	PatchModelCheckConsents(context.Context, *PatchModelCheckConsentsRequest) (*MultiModelCheckConsentResponse, error)
	// Update model toolkits tags
	PatchModelToolkits(context.Context, *PatchModelToolkitsRequest) (*MultiModelToolkitResponse, error)
	// Update model use_cases tags
	PatchModelUseCases(context.Context, *PatchModelUseCasesRequest) (*MultiModelUseCaseResponse, error)
	// Update model languages tags
	PatchModelLanguages(context.Context, *PatchModelLanguagesRequest) (*MultiModelLanguageResponse, error)
	// Deprecated: Do not use.
	// Deprecated: Unmaintained and ideally replaced with usage of datasets
	ListModelInputs(context.Context, *ListModelInputsRequest) (*MultiInputResponse, error)
	// Get a specific model from an app.
	GetModelVersion(context.Context, *GetModelVersionRequest) (*SingleModelVersionResponse, error)
	// List all the models.
	ListModelVersions(context.Context, *ListModelVersionsRequest) (*MultiModelVersionResponse, error)
	PostWorkflowVersionsUnPublish(context.Context, *PostWorkflowVersionsUnPublishRequest) (*status.BaseResponse, error)
	PostWorkflowVersionsPublish(context.Context, *PostWorkflowVersionsPublishRequest) (*status.BaseResponse, error)
	// PostModelVersionsPublish
	PostModelVersionsPublish(context.Context, *PostModelVersionsPublishRequest) (*status.BaseResponse, error)
	// PostModelVersionsUnPublish
	PostModelVersionsUnPublish(context.Context, *PostModelVersionsUnPublishRequest) (*status.BaseResponse, error)
	// Create a new model version to trigger training of the model.
	PostModelVersions(context.Context, *PostModelVersionsRequest) (*SingleModelResponse, error)
	// PatchModelVersions
	PatchModelVersions(context.Context, *PatchModelVersionsRequest) (*MultiModelVersionResponse, error)
	// Delete a single model.
	DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*status.BaseResponse, error)
	// Deprecated: Use GetEvaluation instead
	// Get the evaluation metrics for a model version.
	GetModelVersionMetrics(context.Context, *GetModelVersionMetricsRequest) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	// Run the evaluation metrics for a model version.
	PostModelVersionMetrics(context.Context, *PostModelVersionMetricsRequest) (*SingleModelVersionResponse, error)
	// Deprecated, use PostEvaluations instead
	PostModelVersionEvaluations(context.Context, *PostModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// List the evaluation metrics for a model version.
	ListModelVersionEvaluations(context.Context, *ListModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	// Deprecated, use GetEvaluation instead
	// Get an evaluation metrics for a model version.
	GetModelVersionEvaluation(context.Context, *GetModelVersionEvaluationRequest) (*SingleEvalMetricsResponse, error)
	PostEvaluations(context.Context, *PostEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	ListEvaluations(context.Context, *ListEvaluationsRequest) (*MultiEvalMetricsResponse, error)
	GetEvaluation(context.Context, *GetEvaluationRequest) (*SingleEvalMetricsResponse, error)
	// Lists model references tied to a particular model id.
	ListModelReferences(context.Context, *ListModelReferencesRequest) (*MultiModelReferenceResponse, error)
	// GetModelVersionInputExample
	GetModelVersionInputExample(context.Context, *GetModelVersionInputExampleRequest) (*SingleModelVersionInputExampleResponse, error)
	// ListModelVersionInputExamples
	ListModelVersionInputExamples(context.Context, *ListModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error)
	// Get a specific workflow from an app.
	GetWorkflow(context.Context, *GetWorkflowRequest) (*SingleWorkflowResponse, error)
	// List all the workflows.
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Add a workflow to an app.
	PostWorkflows(context.Context, *PostWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Patch one or more workflows.
	PatchWorkflows(context.Context, *PatchWorkflowsRequest) (*MultiWorkflowResponse, error)
	// Patch one or more workflows ids.
	PatchWorkflowIds(context.Context, *PatchWorkflowIdsRequest) (*MultiWorkflowResponse, error)
	// Delete a single workflow.
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*status.BaseResponse, error)
	// Delete multiple workflows in one request.
	DeleteWorkflows(context.Context, *DeleteWorkflowsRequest) (*status.BaseResponse, error)
	// Predict using a workflow.
	PostWorkflowResults(context.Context, *PostWorkflowResultsRequest) (*PostWorkflowResultsResponse, error)
	// Compare embeddings distances using a workflow
	PostWorkflowResultsSimilarity(context.Context, *PostWorkflowResultsSimilarityRequest) (*PostWorkflowResultsSimilarityResponse, error)
	// List workflow versions.
	ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error)
	// Get single workflow version.
	GetWorkflowVersion(context.Context, *GetWorkflowVersionRequest) (*SingleWorkflowVersionResponse, error)
	// Delete workflow versions.
	DeleteWorkflowVersions(context.Context, *DeleteWorkflowVersionsRequest) (*status.BaseResponse, error)
	// Patch workflow versions.
	PatchWorkflowVersions(context.Context, *PatchWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error)
	// Get a specific key from an app.
	GetKey(context.Context, *GetKeyRequest) (*SingleKeyResponse, error)
	// List all the keys.
	ListKeys(context.Context, *ListKeysRequest) (*MultiKeyResponse, error)
	// List keys by app_id
	ListAppKeys(context.Context, *ListAppKeysRequest) (*MultiKeyResponse, error)
	// Search over the keys to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteKey(context.Context, *DeleteKeyRequest) (*status.BaseResponse, error)
	// Add a key to an app.
	PostKeys(context.Context, *PostKeysRequest) (*MultiKeyResponse, error)
	// Patch one or more keys.
	PatchKeys(context.Context, *PatchKeysRequest) (*MultiKeyResponse, error)
	// API Keys in the public API -- request is itself Key authorized, and will tell
	// the user the scopes/access of the key/credential they're providing, as computed by
	// our authorizer:
	MyScopes(context.Context, *MyScopesRequest) (*MultiScopeResponse, error)
	MyScopesUser(context.Context, *MyScopesUserRequest) (*MultiScopeUserResponse, error)
	MyScopesRoot(context.Context, *MyScopesRootRequest) (*MultiScopeRootResponse, error)
	// List all auth scopes available to me as a user.
	ListScopes(context.Context, *ListScopesRequest) (*MultiScopeDepsResponse, error)
	// Get a specific app from an app.
	GetApp(context.Context, *GetAppRequest) (*SingleAppResponse, error)
	// List all the apps.
	ListApps(context.Context, *ListAppsRequest) (*MultiAppResponse, error)
	// Search over the apps to find one or more you're looking for.
	// This leverage the "body" parameter because we also have page and
	// per_page as url query param variables in this request.
	DeleteApp(context.Context, *DeleteAppRequest) (*status.BaseResponse, error)
	// Add a app to an app.
	// This needs to load the default workflow to make a copy, validating all the models in it, and
	// then writing the new workflow back to this new app.
	PostApps(context.Context, *PostAppsRequest) (*MultiAppResponse, error)
	// Patch one or more apps.
	PatchApps(context.Context, *PatchAppsRequest) (*MultiAppResponse, error)
	// Patch apps ids.
	PatchAppsIds(context.Context, *PatchAppsIdsRequest) (*MultiAppResponse, error)
	// Patch one app.
	PatchApp(context.Context, *PatchAppRequest) (*SingleAppResponse, error)
	// Search over the applications to find one or more you're looking for.
	PostAppsSearches(context.Context, *PostAppsSearchesRequest) (*MultiAppResponse, error)
	// Get user information
	GetUser(context.Context, *GetUserRequest) (*SingleUserResponse, error)
	// Validate new password in real-time for a user
	PostValidatePassword(context.Context, *PostValidatePasswordRequest) (*SinglePasswordValidationResponse, error)
	// Get a saved legacy search.
	GetSearch(context.Context, *GetSearchRequest) (*SingleSearchResponse, error)
	// List all saved legacy searches.
	ListSearches(context.Context, *ListSearchesRequest) (*MultiSearchResponse, error)
	// Patch saved legacy searches by ids.
	PatchSearches(context.Context, *PatchSearchesRequest) (*MultiSearchResponse, error)
	// Deprecated: Do not use.
	// Execute a new search and optionally save it.
	//
	// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
	PostSearches(context.Context, *PostSearchesRequest) (*MultiSearchResponse, error)
	// Execute a previously saved legacy search.
	PostSearchesByID(context.Context, *PostSearchesByIDRequest) (*MultiSearchResponse, error)
	// Evaluate the results of two search requests
	PostAnnotationSearchMetrics(context.Context, *PostAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// Get the evaluation results between two search requests
	GetAnnotationSearchMetrics(context.Context, *GetAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// List the evaluation results between two search requests
	ListAnnotationSearchMetrics(context.Context, *ListAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error)
	// DeleteAnnotationSearchMetrics
	DeleteAnnotationSearchMetrics(context.Context, *DeleteAnnotationSearchMetricsRequest) (*status.BaseResponse, error)
	// Delete a saved search.
	DeleteSearch(context.Context, *DeleteSearchRequest) (*status.BaseResponse, error)
	// List all the annotation filters.
	ListAnnotationFilters(context.Context, *ListAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Get a specific annotation filter.
	GetAnnotationFilter(context.Context, *GetAnnotationFilterRequest) (*SingleAnnotationFilterResponse, error)
	// Add annotation filters.
	PostAnnotationFilters(context.Context, *PostAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Patch one or more annotation filters.
	PatchAnnotationFilters(context.Context, *PatchAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error)
	// Delete one or more annotation filters in a single request.
	DeleteAnnotationFilters(context.Context, *DeleteAnnotationFiltersRequest) (*status.BaseResponse, error)
	// List all status codes.
	ListStatusCodes(context.Context, *ListStatusCodesRequest) (*MultiStatusCodeResponse, error)
	// Get more details for a status code.
	GetStatusCode(context.Context, *GetStatusCodeRequest) (*SingleStatusCodeResponse, error)
	// owner list users who the app is shared with
	ListCollaborators(context.Context, *ListCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// add collaborators to an app.
	PostCollaborators(context.Context, *PostCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// Patch existing collaborators.
	PatchCollaborators(context.Context, *PatchCollaboratorsRequest) (*MultiCollaboratorsResponse, error)
	// Delete existing collaborators.
	DeleteCollaborators(context.Context, *DeleteCollaboratorsRequest) (*status.BaseResponse, error)
	// Collaboration includes the app user are invitied to work on
	ListCollaborations(context.Context, *ListCollaborationsRequest) (*MultiCollaborationsResponse, error)
	// PostAppDuplications starts async app duplication jobs which copy resources
	// (inputs, annotations, models etc) from one application to another. It can
	// also create the destination application if it does not exist, with fields
	// (description, metadata etc) copied from the source application.
	//
	// A duplication job can be started by any user that can read from the source
	// application (the target of this call) and can create and write to the
	// destination application. The duplication is associated with the user that
	// created it, so in order to read the status and progress of the job, that
	// user's ID has to be used in the call to GetAppDuplication, which might be
	// different to the source application owner ID in this call.
	PostAppDuplications(context.Context, *PostAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error)
	// ListAppDuplications lists all app duplication jobs created by the user.
	ListAppDuplications(context.Context, *ListAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error)
	// GetAppDuplication returns an app duplication job created by the user.
	GetAppDuplication(context.Context, *GetAppDuplicationRequest) (*SingleAppDuplicationResponse, error)
	// Add tasks to an app.
	PostTasks(context.Context, *PostTasksRequest) (*MultiTaskResponse, error)
	// Task annotation count
	GetTaskAnnotationCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error)
	// Task Input count
	GetTaskInputCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error)
	// Get a specific task from an app.
	GetTask(context.Context, *GetTaskRequest) (*SingleTaskResponse, error)
	// List tasks from an app.
	ListTasks(context.Context, *ListTasksRequest) (*MultiTaskResponse, error)
	// Patch one or more tasks.
	PatchTasks(context.Context, *PatchTasksRequest) (*MultiTaskResponse, error)
	// Delete multiple tasks in one request.
	DeleteTasks(context.Context, *DeleteTasksRequest) (*status.BaseResponse, error)
	// Add Label orders.
	PostLabelOrders(context.Context, *PostLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Get a label order.
	GetLabelOrder(context.Context, *GetLabelOrderRequest) (*SingleLabelOrderResponse, error)
	// List label orders.
	ListLabelOrders(context.Context, *ListLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Patch one or more label orders.
	PatchLabelOrders(context.Context, *PatchLabelOrdersRequest) (*MultiLabelOrderResponse, error)
	// Delete multiple label orders in one request.
	// this do not change task status
	DeleteLabelOrders(context.Context, *DeleteLabelOrdersRequest) (*status.BaseResponse, error)
	// Add a list of Collectors to an app.
	// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
	// endpoint.
	// Those current scopes are listed here as a hard requirement.
	// They are needed when adding the collectors just so we now that you have permission with
	// that key at least to do the writing to this app with POST /inputs.
	PostCollectors(context.Context, *PostCollectorsRequest) (*MultiCollectorResponse, error)
	// Get a specific collector from an app.
	GetCollector(context.Context, *GetCollectorRequest) (*SingleCollectorResponse, error)
	// List all the collectors.
	ListCollectors(context.Context, *ListCollectorsRequest) (*MultiCollectorResponse, error)
	// Patch one or more collectors.
	PatchCollectors(context.Context, *PatchCollectorsRequest) (*MultiCollectorResponse, error)
	// Delete multiple collectors in one request.
	// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
	DeleteCollectors(context.Context, *DeleteCollectorsRequest) (*status.BaseResponse, error)
	// PostStatValues
	PostStatValues(context.Context, *PostStatValuesRequest) (*MultiStatValueResponse, error)
	// PostStatValuesAggregate
	PostStatValuesAggregate(context.Context, *PostStatValuesAggregateRequest) (*MultiStatValueAggregateResponse, error)
	// Increase the view metric for a detail view
	PostTrendingMetricsView(context.Context, *PostTrendingMetricsViewRequest) (*status.BaseResponse, error)
	// List the view metrics for a detail view
	ListTrendingMetricsViews(context.Context, *ListTrendingMetricsViewsRequest) (*MultiTrendingMetricsViewResponse, error)
	// Get a specific module from an app.
	GetModule(context.Context, *GetModuleRequest) (*SingleModuleResponse, error)
	// List all the modules in community, by user or by app.
	ListModules(context.Context, *ListModulesRequest) (*MultiModuleResponse, error)
	// Add a modules to an app.
	PostModules(context.Context, *PostModulesRequest) (*MultiModuleResponse, error)
	// Patch one or more modules.
	PatchModules(context.Context, *PatchModulesRequest) (*MultiModuleResponse, error)
	// Delete multiple modules in one request.
	DeleteModules(context.Context, *DeleteModulesRequest) (*status.BaseResponse, error)
	// Get a specific module version for a module.
	GetModuleVersion(context.Context, *GetModuleVersionRequest) (*SingleModuleVersionResponse, error)
	// List all the modules versions for a given module.
	ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Create a new module version to trigger training of the module.
	PostModuleVersions(context.Context, *PostModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Modify details of an existing module version.
	PatchModuleVersions(context.Context, *PatchModuleVersionsRequest) (*MultiModuleVersionResponse, error)
	// Delete a multiple module version.
	DeleteModuleVersions(context.Context, *DeleteModuleVersionsRequest) (*status.BaseResponse, error)
	// Get usage count for specific module version.
	GetModuleVersionUsageCount(context.Context, *GetModuleVersionUsageCountRequest) (*SingleModuleVersionUsageCountResponse, error)
	// Get installed modules vesrions for an app.
	GetInstalledModuleVersion(context.Context, *GetInstalledModuleVersionRequest) (*SingleInstalledModuleVersionResponse, error)
	// List installed modules vesrions for an app.
	ListInstalledModuleVersions(context.Context, *ListInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error)
	// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
	PostInstalledModuleVersions(context.Context, *PostInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error)
	// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
	// in the url.
	// This cleaned up any associated caller keys so needs the Keys_Delete scope.
	DeleteInstalledModuleVersions(context.Context, *DeleteInstalledModuleVersionsRequest) (*status.BaseResponse, error)
	// Assign a key that the caller owns to be used when accessing this installed module version
	// If this endpoint is called with a different key then it overwrites what is there.
	PostInstalledModuleVersionsKey(context.Context, *PostInstalledModuleVersionsKeyRequest) (*SingleKeyResponse, error)
	// Perform bulk operations on a list of inputs based on input source.
	// Operation include add, update, delete of concepts, metadata and geo data.
	// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
	PostBulkOperations(context.Context, *PostBulkOperationsRequest) (*MultiBulkOperationsResponse, error)
	// List all the bulk operations
	ListBulkOperations(context.Context, *ListBulkOperationsRequest) (*MultiBulkOperationsResponse, error)
	// Get the bulk operation details by ID
	GetBulkOperation(context.Context, *GetBulkOperationRequest) (*SingleBulkOperationsResponse, error)
	// Cancel one or more bulk operations
	CancelBulkOperations(context.Context, *CancelBulkOperationRequest) (*MultiBulkOperationsResponse, error)
	// delete one or more terminated bulk operations
	DeleteBulkOperations(context.Context, *DeleteBulkOperationRequest) (*status.BaseResponse, error)
	// List next non-labeled and unassigned inputs from task's dataset
	ListNextTaskAssignments(context.Context, *ListNextTaskAssignmentsRequest) (*MultiInputResponse, error)
	// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
	PutTaskAssignments(context.Context, *PutTaskAssignmentsRequest) (*status.BaseResponse, error)
	// List all the inputs add jobs
	ListInputsAddJobs(context.Context, *ListInputsAddJobsRequest) (*MultiInputsAddJobResponse, error)
	// Get the input add job details by ID
	GetInputsAddJob(context.Context, *GetInputsAddJobRequest) (*SingleInputsAddJobResponse, error)
	// cancel the input add job by ID
	CancelInputsAddJob(context.Context, *CancelInputsAddJobRequest) (*SingleInputsAddJobResponse, error)
	PostUploads(context.Context, *PostUploadsRequest) (*MultiUploadResponse, error)
	// Upload a part of a multipart upload.
	// Behaviour on completion depends on the endpoint that was used to initiate the upload.
	PutUploadContentParts(context.Context, *PutUploadContentPartsRequest) (*SingleUploadResponse, error)
	GetUpload(context.Context, *GetUploadRequest) (*SingleUploadResponse, error)
	ListUploads(context.Context, *ListUploadsRequest) (*MultiUploadResponse, error)
	DeleteUploads(context.Context, *DeleteUploadsRequest) (*status.BaseResponse, error)
	// Initiates retrieval of inputs from cloud storage from a user provided data source.
	// Will create and return an inputs-add-job for tracking progress.
	// Archives will be extracted and their contents will be processed as inputs.
	//
	// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
	// files in the images_folder beginning with abc or in a subfolder beginning with abc.
	// For example:
	// bucket/images_folder/abcImage.png
	// bucket/images_folder/abc-1/Data.zip
	//
	// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
	// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
	// in which case it only requires rights to access that particular file.
	PostInputsDataSources(context.Context, *PostInputsDataSourcesRequest) (*MultiInputsAddJobResponse, error)
	// Get the input extraction job details by ID
	GetInputsExtractionJob(context.Context, *GetInputsExtractionJobRequest) (*SingleInputsExtractionJobResponse, error)
	// List all the input extraction jobs
	ListInputsExtractionJobs(context.Context, *ListInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error)
	CancelInputsExtractionJobs(context.Context, *CancelInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error)
	// Start uploading a file archive containing inputs.
	// Will create and return an inputs-add-job for tracking progress.
	//
	// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
	// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
	PostInputsUploads(context.Context, *PostInputsUploadsRequest) (*MultiInputsAddJobResponse, error)
	// Get a specific runner from an app.
	GetRunner(context.Context, *GetRunnerRequest) (*SingleRunnerResponse, error)
	// List all the runners in community, by user or by app.
	ListRunners(context.Context, *ListRunnersRequest) (*MultiRunnerResponse, error)
	// Add a runners to an app.
	PostRunners(context.Context, *PostRunnersRequest) (*MultiRunnerResponse, error)
	// Delete multiple runners in one request.
	DeleteRunners(context.Context, *DeleteRunnersRequest) (*status.BaseResponse, error)
	// List items for the remote runner to work on.
	ListRunnerItems(context.Context, *ListRunnerItemsRequest) (*MultiRunnerItemResponse, error)
	// Post back outputs from remote runners
	PostRunnerItemOutputs(context.Context, *PostRunnerItemOutputsRequest) (*MultiRunnerItemOutputResponse, error)
	PostModelVersionsTrainingTimeEstimate(context.Context, *PostModelVersionsTrainingTimeEstimateRequest) (*MultiTrainingTimeEstimateResponse, error)
	mustEmbedUnimplementedV2Server()
}

// UnimplementedV2Server must be embedded to have forward compatible implementations.
type UnimplementedV2Server struct {
}

func (UnimplementedV2Server) ListConceptRelations(context.Context, *ListConceptRelationsRequest) (*MultiConceptRelationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptRelations not implemented")
}
func (UnimplementedV2Server) PostConceptRelations(context.Context, *PostConceptRelationsRequest) (*MultiConceptRelationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptRelations not implemented")
}
func (UnimplementedV2Server) DeleteConceptRelations(context.Context, *DeleteConceptRelationsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteConceptRelations not implemented")
}
func (UnimplementedV2Server) GetConceptCounts(context.Context, *GetConceptCountsRequest) (*MultiConceptCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConceptCounts not implemented")
}
func (UnimplementedV2Server) GetConcept(context.Context, *GetConceptRequest) (*SingleConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConcept not implemented")
}
func (UnimplementedV2Server) ListConcepts(context.Context, *ListConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConcepts not implemented")
}
func (UnimplementedV2Server) ListModelConcepts(context.Context, *ListModelConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelConcepts not implemented")
}
func (UnimplementedV2Server) PostConceptsSearches(context.Context, *PostConceptsSearchesRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptsSearches not implemented")
}
func (UnimplementedV2Server) PostConcepts(context.Context, *PostConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConcepts not implemented")
}
func (UnimplementedV2Server) PatchConcepts(context.Context, *PatchConceptsRequest) (*MultiConceptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchConcepts not implemented")
}
func (UnimplementedV2Server) GetConceptLanguage(context.Context, *GetConceptLanguageRequest) (*SingleConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConceptLanguage not implemented")
}
func (UnimplementedV2Server) ListConceptLanguages(context.Context, *ListConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListConceptLanguages not implemented")
}
func (UnimplementedV2Server) PostConceptLanguages(context.Context, *PostConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptLanguages not implemented")
}
func (UnimplementedV2Server) PatchConceptLanguages(context.Context, *PatchConceptLanguagesRequest) (*MultiConceptLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchConceptLanguages not implemented")
}
func (UnimplementedV2Server) ListKnowledgeGraphs(context.Context, *ListKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKnowledgeGraphs not implemented")
}
func (UnimplementedV2Server) PostKnowledgeGraphs(context.Context, *PostKnowledgeGraphsRequest) (*MultiKnowledgeGraphResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostKnowledgeGraphs not implemented")
}
func (UnimplementedV2Server) PostConceptMappingJobs(context.Context, *PostConceptMappingJobsRequest) (*MultiConceptMappingJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostConceptMappingJobs not implemented")
}
func (UnimplementedV2Server) GetAnnotation(context.Context, *GetAnnotationRequest) (*SingleAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotation not implemented")
}
func (UnimplementedV2Server) ListAnnotations(context.Context, *ListAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotations not implemented")
}
func (UnimplementedV2Server) PostAnnotations(context.Context, *PostAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotations(context.Context, *PatchAnnotationsRequest) (*MultiAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotationsStatus(context.Context, *PatchAnnotationsStatusRequest) (*PatchAnnotationsStatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationsStatus not implemented")
}
func (UnimplementedV2Server) DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotation not implemented")
}
func (UnimplementedV2Server) DeleteAnnotations(context.Context, *DeleteAnnotationsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotations not implemented")
}
func (UnimplementedV2Server) PatchAnnotationsSearches(context.Context, *PatchAnnotationsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationsSearches not implemented")
}
func (UnimplementedV2Server) PostAnnotationsSearches(context.Context, *PostAnnotationsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationsSearches not implemented")
}
func (UnimplementedV2Server) ListAnnotationWorkers(context.Context, *ListAnnotationWorkersRequest) (*MultiWorkerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationWorkers not implemented")
}
func (UnimplementedV2Server) GetInputCount(context.Context, *GetInputCountRequest) (*SingleInputCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputCount not implemented")
}
func (UnimplementedV2Server) StreamInputs(context.Context, *StreamInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StreamInputs not implemented")
}
func (UnimplementedV2Server) GetInputSamples(context.Context, *GetInputSamplesRequest) (*MultiInputAnnotationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputSamples not implemented")
}
func (UnimplementedV2Server) GetInput(context.Context, *GetInputRequest) (*SingleInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInput not implemented")
}
func (UnimplementedV2Server) GetInputVideoManifest(context.Context, *GetVideoManifestRequest) (*GetVideoManifestResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputVideoManifest not implemented")
}
func (UnimplementedV2Server) ListInputs(context.Context, *ListInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputs not implemented")
}
func (UnimplementedV2Server) PostInputs(context.Context, *PostInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputs not implemented")
}
func (UnimplementedV2Server) PatchInputs(context.Context, *PatchInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchInputs not implemented")
}
func (UnimplementedV2Server) DeleteInput(context.Context, *DeleteInputRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInput not implemented")
}
func (UnimplementedV2Server) DeleteInputs(context.Context, *DeleteInputsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInputs not implemented")
}
func (UnimplementedV2Server) PatchInputsSearches(context.Context, *PatchInputsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchInputsSearches not implemented")
}
func (UnimplementedV2Server) PostInputsSearches(context.Context, *PostInputsSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsSearches not implemented")
}
func (UnimplementedV2Server) PostModelOutputs(context.Context, *PostModelOutputsRequest) (*MultiOutputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelOutputs not implemented")
}
func (UnimplementedV2Server) ListDatasets(context.Context, *ListDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedV2Server) GetDataset(context.Context, *GetDatasetRequest) (*SingleDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedV2Server) PostDatasets(context.Context, *PostDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasets not implemented")
}
func (UnimplementedV2Server) PatchDatasets(context.Context, *PatchDatasetsRequest) (*MultiDatasetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDatasets not implemented")
}
func (UnimplementedV2Server) DeleteDatasets(context.Context, *DeleteDatasetsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasets not implemented")
}
func (UnimplementedV2Server) ListDatasetInputs(context.Context, *ListDatasetInputsRequest) (*MultiDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetInputs not implemented")
}
func (UnimplementedV2Server) GetDatasetInput(context.Context, *GetDatasetInputRequest) (*SingleDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetInput not implemented")
}
func (UnimplementedV2Server) PostDatasetInputs(context.Context, *PostDatasetInputsRequest) (*MultiDatasetInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasetInputs not implemented")
}
func (UnimplementedV2Server) DeleteDatasetInputs(context.Context, *DeleteDatasetInputsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasetInputs not implemented")
}
func (UnimplementedV2Server) ListDatasetVersions(context.Context, *ListDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetVersions not implemented")
}
func (UnimplementedV2Server) GetDatasetVersion(context.Context, *GetDatasetVersionRequest) (*SingleDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetVersion not implemented")
}
func (UnimplementedV2Server) ListDatasetVersionMetricsGroups(context.Context, *ListDatasetVersionMetricsGroupsRequest) (*MultiDatasetVersionMetricsGroupResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetVersionMetricsGroups not implemented")
}
func (UnimplementedV2Server) PostDatasetVersions(context.Context, *PostDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostDatasetVersions not implemented")
}
func (UnimplementedV2Server) PatchDatasetVersions(context.Context, *PatchDatasetVersionsRequest) (*MultiDatasetVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchDatasetVersions not implemented")
}
func (UnimplementedV2Server) DeleteDatasetVersions(context.Context, *DeleteDatasetVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasetVersions not implemented")
}
func (UnimplementedV2Server) PutDatasetVersionExports(context.Context, *PutDatasetVersionExportsRequest) (*MultiDatasetVersionExportResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutDatasetVersionExports not implemented")
}
func (UnimplementedV2Server) GetModelType(context.Context, *GetModelTypeRequest) (*SingleModelTypeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelType not implemented")
}
func (UnimplementedV2Server) ListOpenSourceLicenses(context.Context, *ListOpenSourceLicensesRequest) (*ListOpenSourceLicensesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOpenSourceLicenses not implemented")
}
func (UnimplementedV2Server) ListModelTypes(context.Context, *ListModelTypesRequest) (*MultiModelTypeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelTypes not implemented")
}
func (UnimplementedV2Server) GetModel(context.Context, *GetModelRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedV2Server) GetModelOutputInfo(context.Context, *GetModelRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelOutputInfo not implemented")
}
func (UnimplementedV2Server) ListModels(context.Context, *ListModelsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedV2Server) GetResourceCounts(context.Context, *GetResourceCountsRequest) (*GetResourceCountsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetResourceCounts not implemented")
}
func (UnimplementedV2Server) PostModelsSearches(context.Context, *PostModelsSearchesRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelsSearches not implemented")
}
func (UnimplementedV2Server) PostModels(context.Context, *PostModelsRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModels not implemented")
}
func (UnimplementedV2Server) PatchModels(context.Context, *PatchModelsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModels not implemented")
}
func (UnimplementedV2Server) PatchModelIds(context.Context, *PatchModelIdsRequest) (*MultiModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelIds not implemented")
}
func (UnimplementedV2Server) DeleteModel(context.Context, *DeleteModelRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedV2Server) DeleteModels(context.Context, *DeleteModelsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModels not implemented")
}
func (UnimplementedV2Server) PatchModelCheckConsents(context.Context, *PatchModelCheckConsentsRequest) (*MultiModelCheckConsentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelCheckConsents not implemented")
}
func (UnimplementedV2Server) PatchModelToolkits(context.Context, *PatchModelToolkitsRequest) (*MultiModelToolkitResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelToolkits not implemented")
}
func (UnimplementedV2Server) PatchModelUseCases(context.Context, *PatchModelUseCasesRequest) (*MultiModelUseCaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelUseCases not implemented")
}
func (UnimplementedV2Server) PatchModelLanguages(context.Context, *PatchModelLanguagesRequest) (*MultiModelLanguageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelLanguages not implemented")
}
func (UnimplementedV2Server) ListModelInputs(context.Context, *ListModelInputsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelInputs not implemented")
}
func (UnimplementedV2Server) GetModelVersion(context.Context, *GetModelVersionRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersion not implemented")
}
func (UnimplementedV2Server) ListModelVersions(context.Context, *ListModelVersionsRequest) (*MultiModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersions not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionsUnPublish(context.Context, *PostWorkflowVersionsUnPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionsUnPublish not implemented")
}
func (UnimplementedV2Server) PostWorkflowVersionsPublish(context.Context, *PostWorkflowVersionsPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowVersionsPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersionsPublish(context.Context, *PostModelVersionsPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersionsUnPublish(context.Context, *PostModelVersionsUnPublishRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsUnPublish not implemented")
}
func (UnimplementedV2Server) PostModelVersions(context.Context, *PostModelVersionsRequest) (*SingleModelResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersions not implemented")
}
func (UnimplementedV2Server) PatchModelVersions(context.Context, *PatchModelVersionsRequest) (*MultiModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModelVersions not implemented")
}
func (UnimplementedV2Server) DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModelVersion not implemented")
}
func (UnimplementedV2Server) GetModelVersionMetrics(context.Context, *GetModelVersionMetricsRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionMetrics not implemented")
}
func (UnimplementedV2Server) PostModelVersionMetrics(context.Context, *PostModelVersionMetricsRequest) (*SingleModelVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionMetrics not implemented")
}
func (UnimplementedV2Server) PostModelVersionEvaluations(context.Context, *PostModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionEvaluations not implemented")
}
func (UnimplementedV2Server) ListModelVersionEvaluations(context.Context, *ListModelVersionEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersionEvaluations not implemented")
}
func (UnimplementedV2Server) GetModelVersionEvaluation(context.Context, *GetModelVersionEvaluationRequest) (*SingleEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionEvaluation not implemented")
}
func (UnimplementedV2Server) PostEvaluations(context.Context, *PostEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostEvaluations not implemented")
}
func (UnimplementedV2Server) ListEvaluations(context.Context, *ListEvaluationsRequest) (*MultiEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListEvaluations not implemented")
}
func (UnimplementedV2Server) GetEvaluation(context.Context, *GetEvaluationRequest) (*SingleEvalMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetEvaluation not implemented")
}
func (UnimplementedV2Server) ListModelReferences(context.Context, *ListModelReferencesRequest) (*MultiModelReferenceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelReferences not implemented")
}
func (UnimplementedV2Server) GetModelVersionInputExample(context.Context, *GetModelVersionInputExampleRequest) (*SingleModelVersionInputExampleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModelVersionInputExample not implemented")
}
func (UnimplementedV2Server) ListModelVersionInputExamples(context.Context, *ListModelVersionInputExamplesRequest) (*MultiModelVersionInputExampleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModelVersionInputExamples not implemented")
}
func (UnimplementedV2Server) GetWorkflow(context.Context, *GetWorkflowRequest) (*SingleWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedV2Server) ListWorkflows(context.Context, *ListWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedV2Server) PostWorkflows(context.Context, *PostWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflows not implemented")
}
func (UnimplementedV2Server) PatchWorkflows(context.Context, *PatchWorkflowsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflows not implemented")
}
func (UnimplementedV2Server) PatchWorkflowIds(context.Context, *PatchWorkflowIdsRequest) (*MultiWorkflowResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflowIds not implemented")
}
func (UnimplementedV2Server) DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedV2Server) DeleteWorkflows(context.Context, *DeleteWorkflowsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflows not implemented")
}
func (UnimplementedV2Server) PostWorkflowResults(context.Context, *PostWorkflowResultsRequest) (*PostWorkflowResultsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowResults not implemented")
}
func (UnimplementedV2Server) PostWorkflowResultsSimilarity(context.Context, *PostWorkflowResultsSimilarityRequest) (*PostWorkflowResultsSimilarityResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostWorkflowResultsSimilarity not implemented")
}
func (UnimplementedV2Server) ListWorkflowVersions(context.Context, *ListWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflowVersions not implemented")
}
func (UnimplementedV2Server) GetWorkflowVersion(context.Context, *GetWorkflowVersionRequest) (*SingleWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflowVersion not implemented")
}
func (UnimplementedV2Server) DeleteWorkflowVersions(context.Context, *DeleteWorkflowVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflowVersions not implemented")
}
func (UnimplementedV2Server) PatchWorkflowVersions(context.Context, *PatchWorkflowVersionsRequest) (*MultiWorkflowVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchWorkflowVersions not implemented")
}
func (UnimplementedV2Server) GetKey(context.Context, *GetKeyRequest) (*SingleKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedV2Server) ListKeys(context.Context, *ListKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedV2Server) ListAppKeys(context.Context, *ListAppKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAppKeys not implemented")
}
func (UnimplementedV2Server) DeleteKey(context.Context, *DeleteKeyRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedV2Server) PostKeys(context.Context, *PostKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostKeys not implemented")
}
func (UnimplementedV2Server) PatchKeys(context.Context, *PatchKeysRequest) (*MultiKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchKeys not implemented")
}
func (UnimplementedV2Server) MyScopes(context.Context, *MyScopesRequest) (*MultiScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopes not implemented")
}
func (UnimplementedV2Server) MyScopesUser(context.Context, *MyScopesUserRequest) (*MultiScopeUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopesUser not implemented")
}
func (UnimplementedV2Server) MyScopesRoot(context.Context, *MyScopesRootRequest) (*MultiScopeRootResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MyScopesRoot not implemented")
}
func (UnimplementedV2Server) ListScopes(context.Context, *ListScopesRequest) (*MultiScopeDepsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedV2Server) GetApp(context.Context, *GetAppRequest) (*SingleAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedV2Server) ListApps(context.Context, *ListAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedV2Server) DeleteApp(context.Context, *DeleteAppRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedV2Server) PostApps(context.Context, *PostAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostApps not implemented")
}
func (UnimplementedV2Server) PatchApps(context.Context, *PatchAppsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchApps not implemented")
}
func (UnimplementedV2Server) PatchAppsIds(context.Context, *PatchAppsIdsRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAppsIds not implemented")
}
func (UnimplementedV2Server) PatchApp(context.Context, *PatchAppRequest) (*SingleAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchApp not implemented")
}
func (UnimplementedV2Server) PostAppsSearches(context.Context, *PostAppsSearchesRequest) (*MultiAppResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAppsSearches not implemented")
}
func (UnimplementedV2Server) GetUser(context.Context, *GetUserRequest) (*SingleUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedV2Server) PostValidatePassword(context.Context, *PostValidatePasswordRequest) (*SinglePasswordValidationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostValidatePassword not implemented")
}
func (UnimplementedV2Server) GetSearch(context.Context, *GetSearchRequest) (*SingleSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSearch not implemented")
}
func (UnimplementedV2Server) ListSearches(context.Context, *ListSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSearches not implemented")
}
func (UnimplementedV2Server) PatchSearches(context.Context, *PatchSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchSearches not implemented")
}
func (UnimplementedV2Server) PostSearches(context.Context, *PostSearchesRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSearches not implemented")
}
func (UnimplementedV2Server) PostSearchesByID(context.Context, *PostSearchesByIDRequest) (*MultiSearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostSearchesByID not implemented")
}
func (UnimplementedV2Server) PostAnnotationSearchMetrics(context.Context, *PostAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) GetAnnotationSearchMetrics(context.Context, *GetAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) ListAnnotationSearchMetrics(context.Context, *ListAnnotationSearchMetricsRequest) (*MultiAnnotationSearchMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) DeleteAnnotationSearchMetrics(context.Context, *DeleteAnnotationSearchMetricsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotationSearchMetrics not implemented")
}
func (UnimplementedV2Server) DeleteSearch(context.Context, *DeleteSearchRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSearch not implemented")
}
func (UnimplementedV2Server) ListAnnotationFilters(context.Context, *ListAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAnnotationFilters not implemented")
}
func (UnimplementedV2Server) GetAnnotationFilter(context.Context, *GetAnnotationFilterRequest) (*SingleAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAnnotationFilter not implemented")
}
func (UnimplementedV2Server) PostAnnotationFilters(context.Context, *PostAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAnnotationFilters not implemented")
}
func (UnimplementedV2Server) PatchAnnotationFilters(context.Context, *PatchAnnotationFiltersRequest) (*MultiAnnotationFilterResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchAnnotationFilters not implemented")
}
func (UnimplementedV2Server) DeleteAnnotationFilters(context.Context, *DeleteAnnotationFiltersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAnnotationFilters not implemented")
}
func (UnimplementedV2Server) ListStatusCodes(context.Context, *ListStatusCodesRequest) (*MultiStatusCodeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListStatusCodes not implemented")
}
func (UnimplementedV2Server) GetStatusCode(context.Context, *GetStatusCodeRequest) (*SingleStatusCodeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetStatusCode not implemented")
}
func (UnimplementedV2Server) ListCollaborators(context.Context, *ListCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollaborators not implemented")
}
func (UnimplementedV2Server) PostCollaborators(context.Context, *PostCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCollaborators not implemented")
}
func (UnimplementedV2Server) PatchCollaborators(context.Context, *PatchCollaboratorsRequest) (*MultiCollaboratorsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchCollaborators not implemented")
}
func (UnimplementedV2Server) DeleteCollaborators(context.Context, *DeleteCollaboratorsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCollaborators not implemented")
}
func (UnimplementedV2Server) ListCollaborations(context.Context, *ListCollaborationsRequest) (*MultiCollaborationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollaborations not implemented")
}
func (UnimplementedV2Server) PostAppDuplications(context.Context, *PostAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostAppDuplications not implemented")
}
func (UnimplementedV2Server) ListAppDuplications(context.Context, *ListAppDuplicationsRequest) (*MultiAppDuplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAppDuplications not implemented")
}
func (UnimplementedV2Server) GetAppDuplication(context.Context, *GetAppDuplicationRequest) (*SingleAppDuplicationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAppDuplication not implemented")
}
func (UnimplementedV2Server) PostTasks(context.Context, *PostTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTasks not implemented")
}
func (UnimplementedV2Server) GetTaskAnnotationCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTaskAnnotationCount not implemented")
}
func (UnimplementedV2Server) GetTaskInputCount(context.Context, *GetTaskCountRequest) (*SingleTaskCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTaskInputCount not implemented")
}
func (UnimplementedV2Server) GetTask(context.Context, *GetTaskRequest) (*SingleTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedV2Server) ListTasks(context.Context, *ListTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedV2Server) PatchTasks(context.Context, *PatchTasksRequest) (*MultiTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchTasks not implemented")
}
func (UnimplementedV2Server) DeleteTasks(context.Context, *DeleteTasksRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTasks not implemented")
}
func (UnimplementedV2Server) PostLabelOrders(context.Context, *PostLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostLabelOrders not implemented")
}
func (UnimplementedV2Server) GetLabelOrder(context.Context, *GetLabelOrderRequest) (*SingleLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLabelOrder not implemented")
}
func (UnimplementedV2Server) ListLabelOrders(context.Context, *ListLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListLabelOrders not implemented")
}
func (UnimplementedV2Server) PatchLabelOrders(context.Context, *PatchLabelOrdersRequest) (*MultiLabelOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchLabelOrders not implemented")
}
func (UnimplementedV2Server) DeleteLabelOrders(context.Context, *DeleteLabelOrdersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteLabelOrders not implemented")
}
func (UnimplementedV2Server) PostCollectors(context.Context, *PostCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostCollectors not implemented")
}
func (UnimplementedV2Server) GetCollector(context.Context, *GetCollectorRequest) (*SingleCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCollector not implemented")
}
func (UnimplementedV2Server) ListCollectors(context.Context, *ListCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCollectors not implemented")
}
func (UnimplementedV2Server) PatchCollectors(context.Context, *PatchCollectorsRequest) (*MultiCollectorResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchCollectors not implemented")
}
func (UnimplementedV2Server) DeleteCollectors(context.Context, *DeleteCollectorsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCollectors not implemented")
}
func (UnimplementedV2Server) PostStatValues(context.Context, *PostStatValuesRequest) (*MultiStatValueResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostStatValues not implemented")
}
func (UnimplementedV2Server) PostStatValuesAggregate(context.Context, *PostStatValuesAggregateRequest) (*MultiStatValueAggregateResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostStatValuesAggregate not implemented")
}
func (UnimplementedV2Server) PostTrendingMetricsView(context.Context, *PostTrendingMetricsViewRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostTrendingMetricsView not implemented")
}
func (UnimplementedV2Server) ListTrendingMetricsViews(context.Context, *ListTrendingMetricsViewsRequest) (*MultiTrendingMetricsViewResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTrendingMetricsViews not implemented")
}
func (UnimplementedV2Server) GetModule(context.Context, *GetModuleRequest) (*SingleModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedV2Server) ListModules(context.Context, *ListModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedV2Server) PostModules(context.Context, *PostModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModules not implemented")
}
func (UnimplementedV2Server) PatchModules(context.Context, *PatchModulesRequest) (*MultiModuleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModules not implemented")
}
func (UnimplementedV2Server) DeleteModules(context.Context, *DeleteModulesRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModules not implemented")
}
func (UnimplementedV2Server) GetModuleVersion(context.Context, *GetModuleVersionRequest) (*SingleModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModuleVersion not implemented")
}
func (UnimplementedV2Server) ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListModuleVersions not implemented")
}
func (UnimplementedV2Server) PostModuleVersions(context.Context, *PostModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModuleVersions not implemented")
}
func (UnimplementedV2Server) PatchModuleVersions(context.Context, *PatchModuleVersionsRequest) (*MultiModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PatchModuleVersions not implemented")
}
func (UnimplementedV2Server) DeleteModuleVersions(context.Context, *DeleteModuleVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteModuleVersions not implemented")
}
func (UnimplementedV2Server) GetModuleVersionUsageCount(context.Context, *GetModuleVersionUsageCountRequest) (*SingleModuleVersionUsageCountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetModuleVersionUsageCount not implemented")
}
func (UnimplementedV2Server) GetInstalledModuleVersion(context.Context, *GetInstalledModuleVersionRequest) (*SingleInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInstalledModuleVersion not implemented")
}
func (UnimplementedV2Server) ListInstalledModuleVersions(context.Context, *ListInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) PostInstalledModuleVersions(context.Context, *PostInstalledModuleVersionsRequest) (*MultiInstalledModuleVersionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) DeleteInstalledModuleVersions(context.Context, *DeleteInstalledModuleVersionsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInstalledModuleVersions not implemented")
}
func (UnimplementedV2Server) PostInstalledModuleVersionsKey(context.Context, *PostInstalledModuleVersionsKeyRequest) (*SingleKeyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInstalledModuleVersionsKey not implemented")
}
func (UnimplementedV2Server) PostBulkOperations(context.Context, *PostBulkOperationsRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostBulkOperations not implemented")
}
func (UnimplementedV2Server) ListBulkOperations(context.Context, *ListBulkOperationsRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListBulkOperations not implemented")
}
func (UnimplementedV2Server) GetBulkOperation(context.Context, *GetBulkOperationRequest) (*SingleBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetBulkOperation not implemented")
}
func (UnimplementedV2Server) CancelBulkOperations(context.Context, *CancelBulkOperationRequest) (*MultiBulkOperationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelBulkOperations not implemented")
}
func (UnimplementedV2Server) DeleteBulkOperations(context.Context, *DeleteBulkOperationRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteBulkOperations not implemented")
}
func (UnimplementedV2Server) ListNextTaskAssignments(context.Context, *ListNextTaskAssignmentsRequest) (*MultiInputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNextTaskAssignments not implemented")
}
func (UnimplementedV2Server) PutTaskAssignments(context.Context, *PutTaskAssignmentsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutTaskAssignments not implemented")
}
func (UnimplementedV2Server) ListInputsAddJobs(context.Context, *ListInputsAddJobsRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputsAddJobs not implemented")
}
func (UnimplementedV2Server) GetInputsAddJob(context.Context, *GetInputsAddJobRequest) (*SingleInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputsAddJob not implemented")
}
func (UnimplementedV2Server) CancelInputsAddJob(context.Context, *CancelInputsAddJobRequest) (*SingleInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelInputsAddJob not implemented")
}
func (UnimplementedV2Server) PostUploads(context.Context, *PostUploadsRequest) (*MultiUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostUploads not implemented")
}
func (UnimplementedV2Server) PutUploadContentParts(context.Context, *PutUploadContentPartsRequest) (*SingleUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PutUploadContentParts not implemented")
}
func (UnimplementedV2Server) GetUpload(context.Context, *GetUploadRequest) (*SingleUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUpload not implemented")
}
func (UnimplementedV2Server) ListUploads(context.Context, *ListUploadsRequest) (*MultiUploadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUploads not implemented")
}
func (UnimplementedV2Server) DeleteUploads(context.Context, *DeleteUploadsRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUploads not implemented")
}
func (UnimplementedV2Server) PostInputsDataSources(context.Context, *PostInputsDataSourcesRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsDataSources not implemented")
}
func (UnimplementedV2Server) GetInputsExtractionJob(context.Context, *GetInputsExtractionJobRequest) (*SingleInputsExtractionJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInputsExtractionJob not implemented")
}
func (UnimplementedV2Server) ListInputsExtractionJobs(context.Context, *ListInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInputsExtractionJobs not implemented")
}
func (UnimplementedV2Server) CancelInputsExtractionJobs(context.Context, *CancelInputsExtractionJobsRequest) (*MultiInputsExtractionJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelInputsExtractionJobs not implemented")
}
func (UnimplementedV2Server) PostInputsUploads(context.Context, *PostInputsUploadsRequest) (*MultiInputsAddJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostInputsUploads not implemented")
}
func (UnimplementedV2Server) GetRunner(context.Context, *GetRunnerRequest) (*SingleRunnerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedV2Server) ListRunners(context.Context, *ListRunnersRequest) (*MultiRunnerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRunners not implemented")
}
func (UnimplementedV2Server) PostRunners(context.Context, *PostRunnersRequest) (*MultiRunnerResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostRunners not implemented")
}
func (UnimplementedV2Server) DeleteRunners(context.Context, *DeleteRunnersRequest) (*status.BaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRunners not implemented")
}
func (UnimplementedV2Server) ListRunnerItems(context.Context, *ListRunnerItemsRequest) (*MultiRunnerItemResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRunnerItems not implemented")
}
func (UnimplementedV2Server) PostRunnerItemOutputs(context.Context, *PostRunnerItemOutputsRequest) (*MultiRunnerItemOutputResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostRunnerItemOutputs not implemented")
}
func (UnimplementedV2Server) PostModelVersionsTrainingTimeEstimate(context.Context, *PostModelVersionsTrainingTimeEstimateRequest) (*MultiTrainingTimeEstimateResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PostModelVersionsTrainingTimeEstimate not implemented")
}
func (UnimplementedV2Server) mustEmbedUnimplementedV2Server() {}

// UnsafeV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V2Server will
// result in compilation errors.
type UnsafeV2Server interface {
	mustEmbedUnimplementedV2Server()
}

func RegisterV2Server(s grpc.ServiceRegistrar, srv V2Server) {
	s.RegisterService(&V2_ServiceDesc, srv)
}

func _V2_ListConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConceptRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptRelations(ctx, req.(*ListConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptRelations(ctx, req.(*PostConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteConceptRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConceptRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteConceptRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteConceptRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteConceptRelations(ctx, req.(*DeleteConceptRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConceptCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConceptCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetConceptCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConceptCounts(ctx, req.(*GetConceptCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConcept(ctx, req.(*GetConceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConcepts(ctx, req.(*ListConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelConcepts(ctx, req.(*ListModelConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptsSearches(ctx, req.(*PostConceptsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConcepts(ctx, req.(*PostConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchConcepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchConcepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchConcepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchConcepts(ctx, req.(*PatchConceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetConceptLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConceptLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetConceptLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetConceptLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetConceptLanguage(ctx, req.(*GetConceptLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListConceptLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListConceptLanguages(ctx, req.(*ListConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptLanguages(ctx, req.(*PostConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchConceptLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConceptLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchConceptLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchConceptLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchConceptLanguages(ctx, req.(*PatchConceptLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListKnowledgeGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnowledgeGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListKnowledgeGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListKnowledgeGraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListKnowledgeGraphs(ctx, req.(*ListKnowledgeGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostKnowledgeGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostKnowledgeGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostKnowledgeGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostKnowledgeGraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostKnowledgeGraphs(ctx, req.(*PostKnowledgeGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostConceptMappingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConceptMappingJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostConceptMappingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostConceptMappingJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostConceptMappingJobs(ctx, req.(*PostConceptMappingJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotation(ctx, req.(*GetAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotations(ctx, req.(*ListAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotations(ctx, req.(*PostAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotations(ctx, req.(*PatchAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotationsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationsStatus(ctx, req.(*PatchAnnotationsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotation(ctx, req.(*DeleteAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotations(ctx, req.(*DeleteAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotationsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationsSearches(ctx, req.(*PatchAnnotationsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotationsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationsSearches(ctx, req.(*PostAnnotationsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotationWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationWorkers(ctx, req.(*ListAnnotationWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputCount(ctx, req.(*GetInputCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_StreamInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).StreamInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/StreamInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).StreamInputs(ctx, req.(*StreamInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputSamples(ctx, req.(*GetInputSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInput(ctx, req.(*GetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputVideoManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputVideoManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputVideoManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputVideoManifest(ctx, req.(*GetVideoManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputs(ctx, req.(*ListInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputs(ctx, req.(*PostInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchInputs(ctx, req.(*PatchInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInput(ctx, req.(*DeleteInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInputs(ctx, req.(*DeleteInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchInputsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInputsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchInputsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchInputsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchInputsSearches(ctx, req.(*PatchInputsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsSearches(ctx, req.(*PostInputsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelOutputs(ctx, req.(*PostModelOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasets(ctx, req.(*PostDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDatasets(ctx, req.(*PatchDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasets(ctx, req.(*DeleteDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasetInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetInputs(ctx, req.(*ListDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDatasetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDatasetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetDatasetInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDatasetInput(ctx, req.(*GetDatasetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostDatasetInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasetInputs(ctx, req.(*PostDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteDatasetInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasetInputs(ctx, req.(*DeleteDatasetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetVersions(ctx, req.(*ListDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetDatasetVersion(ctx, req.(*GetDatasetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListDatasetVersionMetricsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetVersionMetricsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListDatasetVersionMetricsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListDatasetVersionMetricsGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListDatasetVersionMetricsGroups(ctx, req.(*ListDatasetVersionMetricsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostDatasetVersions(ctx, req.(*PostDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchDatasetVersions(ctx, req.(*PatchDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteDatasetVersions(ctx, req.(*DeleteDatasetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutDatasetVersionExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDatasetVersionExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutDatasetVersionExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PutDatasetVersionExports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutDatasetVersionExports(ctx, req.(*PutDatasetVersionExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelType(ctx, req.(*GetModelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListOpenSourceLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpenSourceLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListOpenSourceLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListOpenSourceLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListOpenSourceLicenses(ctx, req.(*ListOpenSourceLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelTypes(ctx, req.(*ListModelTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelOutputInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelOutputInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelOutputInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelOutputInfo(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetResourceCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetResourceCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetResourceCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetResourceCounts(ctx, req.(*GetResourceCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelsSearches(ctx, req.(*PostModelsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModels(ctx, req.(*PostModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModels(ctx, req.(*PatchModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelIds(ctx, req.(*PatchModelIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModels(ctx, req.(*DeleteModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelCheckConsents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelCheckConsentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelCheckConsents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelCheckConsents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelCheckConsents(ctx, req.(*PatchModelCheckConsentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelToolkits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelToolkitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelToolkits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelToolkits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelToolkits(ctx, req.(*PatchModelToolkitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelUseCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelUseCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelUseCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelUseCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelUseCases(ctx, req.(*PatchModelUseCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelLanguages(ctx, req.(*PatchModelLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelInputs(ctx, req.(*ListModelInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersion(ctx, req.(*GetModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersions(ctx, req.(*ListModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionsUnPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionsUnPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionsUnPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowVersionsUnPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionsUnPublish(ctx, req.(*PostWorkflowVersionsUnPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowVersionsPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowVersionsPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowVersionsPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowVersionsPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowVersionsPublish(ctx, req.(*PostWorkflowVersionsPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionsPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsPublish(ctx, req.(*PostModelVersionsPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsUnPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsUnPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsUnPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionsUnPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsUnPublish(ctx, req.(*PostModelVersionsUnPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersions(ctx, req.(*PostModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModelVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModelVersions(ctx, req.(*PatchModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModelVersion(ctx, req.(*DeleteModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelVersionMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionMetrics(ctx, req.(*GetModelVersionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionMetrics(ctx, req.(*PostModelVersionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionEvaluations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionEvaluations(ctx, req.(*PostModelVersionEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersionEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersionEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelVersionEvaluations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersionEvaluations(ctx, req.(*ListModelVersionEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelVersionEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionEvaluation(ctx, req.(*GetModelVersionEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostEvaluations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostEvaluations(ctx, req.(*PostEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListEvaluations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListEvaluations(ctx, req.(*ListEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetEvaluation(ctx, req.(*GetEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelReferences(ctx, req.(*ListModelReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModelVersionInputExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionInputExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModelVersionInputExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModelVersionInputExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModelVersionInputExample(ctx, req.(*GetModelVersionInputExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModelVersionInputExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionInputExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModelVersionInputExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModelVersionInputExamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModelVersionInputExamples(ctx, req.(*ListModelVersionInputExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflows(ctx, req.(*PostWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflows(ctx, req.(*PatchWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflowIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflowIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchWorkflowIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflowIds(ctx, req.(*PatchWorkflowIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflows(ctx, req.(*DeleteWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowResults(ctx, req.(*PostWorkflowResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostWorkflowResultsSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkflowResultsSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostWorkflowResultsSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostWorkflowResultsSimilarity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostWorkflowResultsSimilarity(ctx, req.(*PostWorkflowResultsSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListWorkflowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListWorkflowVersions(ctx, req.(*ListWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetWorkflowVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetWorkflowVersion(ctx, req.(*GetWorkflowVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteWorkflowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteWorkflowVersions(ctx, req.(*DeleteWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchWorkflowVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkflowVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchWorkflowVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchWorkflowVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchWorkflowVersions(ctx, req.(*PatchWorkflowVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAppKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAppKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAppKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAppKeys(ctx, req.(*ListAppKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostKeys(ctx, req.(*PostKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchKeys(ctx, req.(*PatchKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/MyScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopes(ctx, req.(*MyScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopesUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopesUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/MyScopesUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopesUser(ctx, req.(*MyScopesUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_MyScopesRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyScopesRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).MyScopesRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/MyScopesRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).MyScopesRoot(ctx, req.(*MyScopesRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListScopes(ctx, req.(*ListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostApps(ctx, req.(*PostAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchApps(ctx, req.(*PatchAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAppsIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppsIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAppsIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAppsIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAppsIds(ctx, req.(*PatchAppsIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchApp(ctx, req.(*PatchAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAppsSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppsSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAppsSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAppsSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAppsSearches(ctx, req.(*PostAppsSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostValidatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostValidatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostValidatePassword(ctx, req.(*PostValidatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetSearch(ctx, req.(*GetSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListSearches(ctx, req.(*ListSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchSearches(ctx, req.(*PatchSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSearches(ctx, req.(*PostSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostSearchesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearchesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostSearchesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostSearchesByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostSearchesByID(ctx, req.(*PostSearchesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationSearchMetrics(ctx, req.(*PostAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotationSearchMetrics(ctx, req.(*GetAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationSearchMetrics(ctx, req.(*ListAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotationSearchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationSearchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotationSearchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotationSearchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotationSearchMetrics(ctx, req.(*DeleteAnnotationSearchMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteSearch(ctx, req.(*DeleteSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAnnotationFilters(ctx, req.(*ListAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAnnotationFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAnnotationFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAnnotationFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAnnotationFilter(ctx, req.(*GetAnnotationFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAnnotationFilters(ctx, req.(*PostAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchAnnotationFilters(ctx, req.(*PatchAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteAnnotationFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteAnnotationFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteAnnotationFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteAnnotationFilters(ctx, req.(*DeleteAnnotationFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListStatusCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListStatusCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListStatusCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListStatusCodes(ctx, req.(*ListStatusCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetStatusCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetStatusCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetStatusCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetStatusCode(ctx, req.(*GetStatusCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollaborators(ctx, req.(*ListCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCollaborators(ctx, req.(*PostCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchCollaborators(ctx, req.(*PatchCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteCollaborators(ctx, req.(*DeleteCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollaborations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollaborationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollaborations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListCollaborations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollaborations(ctx, req.(*ListCollaborationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostAppDuplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppDuplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostAppDuplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostAppDuplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostAppDuplications(ctx, req.(*PostAppDuplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListAppDuplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppDuplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListAppDuplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListAppDuplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListAppDuplications(ctx, req.(*ListAppDuplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetAppDuplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDuplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetAppDuplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetAppDuplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetAppDuplication(ctx, req.(*GetAppDuplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTasks(ctx, req.(*PostTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTaskAnnotationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTaskAnnotationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetTaskAnnotationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTaskAnnotationCount(ctx, req.(*GetTaskCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTaskInputCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTaskInputCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetTaskInputCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTaskInputCount(ctx, req.(*GetTaskCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchTasks(ctx, req.(*PatchTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteTasks(ctx, req.(*DeleteTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostLabelOrders(ctx, req.(*PostLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetLabelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetLabelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetLabelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetLabelOrder(ctx, req.(*GetLabelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListLabelOrders(ctx, req.(*ListLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchLabelOrders(ctx, req.(*PatchLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteLabelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteLabelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteLabelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteLabelOrders(ctx, req.(*DeleteLabelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostCollectors(ctx, req.(*PostCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetCollector(ctx, req.(*GetCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListCollectors(ctx, req.(*ListCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchCollectors(ctx, req.(*PatchCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteCollectors(ctx, req.(*DeleteCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostStatValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostStatValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostStatValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostStatValues(ctx, req.(*PostStatValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostStatValuesAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatValuesAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostStatValuesAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostStatValuesAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostStatValuesAggregate(ctx, req.(*PostStatValuesAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostTrendingMetricsView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTrendingMetricsViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostTrendingMetricsView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostTrendingMetricsView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostTrendingMetricsView(ctx, req.(*PostTrendingMetricsViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListTrendingMetricsViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrendingMetricsViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListTrendingMetricsViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListTrendingMetricsViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListTrendingMetricsViews(ctx, req.(*ListTrendingMetricsViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModules(ctx, req.(*PostModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModules(ctx, req.(*PatchModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModules(ctx, req.(*DeleteModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModuleVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModuleVersion(ctx, req.(*GetModuleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListModuleVersions(ctx, req.(*ListModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModuleVersions(ctx, req.(*PostModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PatchModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PatchModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PatchModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PatchModuleVersions(ctx, req.(*PatchModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteModuleVersions(ctx, req.(*DeleteModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetModuleVersionUsageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleVersionUsageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetModuleVersionUsageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetModuleVersionUsageCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetModuleVersionUsageCount(ctx, req.(*GetModuleVersionUsageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInstalledModuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstalledModuleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInstalledModuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInstalledModuleVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInstalledModuleVersion(ctx, req.(*GetInstalledModuleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListInstalledModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInstalledModuleVersions(ctx, req.(*ListInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInstalledModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInstalledModuleVersions(ctx, req.(*PostInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteInstalledModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstalledModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteInstalledModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteInstalledModuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteInstalledModuleVersions(ctx, req.(*DeleteInstalledModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInstalledModuleVersionsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstalledModuleVersionsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInstalledModuleVersionsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInstalledModuleVersionsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInstalledModuleVersionsKey(ctx, req.(*PostInstalledModuleVersionsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBulkOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostBulkOperations(ctx, req.(*PostBulkOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBulkOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListBulkOperations(ctx, req.(*ListBulkOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetBulkOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetBulkOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetBulkOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetBulkOperation(ctx, req.(*GetBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/CancelBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelBulkOperations(ctx, req.(*CancelBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteBulkOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBulkOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteBulkOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteBulkOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteBulkOperations(ctx, req.(*DeleteBulkOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListNextTaskAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextTaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListNextTaskAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListNextTaskAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListNextTaskAssignments(ctx, req.(*ListNextTaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutTaskAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutTaskAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PutTaskAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutTaskAssignments(ctx, req.(*PutTaskAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputsAddJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsAddJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputsAddJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListInputsAddJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputsAddJobs(ctx, req.(*ListInputsAddJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputsAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputsAddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputsAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputsAddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputsAddJob(ctx, req.(*GetInputsAddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelInputsAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInputsAddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelInputsAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/CancelInputsAddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelInputsAddJob(ctx, req.(*CancelInputsAddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostUploads(ctx, req.(*PostUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PutUploadContentParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUploadContentPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PutUploadContentParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PutUploadContentParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PutUploadContentParts(ctx, req.(*PutUploadContentPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetUpload(ctx, req.(*GetUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListUploads(ctx, req.(*ListUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteUploads(ctx, req.(*DeleteUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsDataSources(ctx, req.(*PostInputsDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetInputsExtractionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputsExtractionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetInputsExtractionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetInputsExtractionJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetInputsExtractionJob(ctx, req.(*GetInputsExtractionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListInputsExtractionJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsExtractionJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListInputsExtractionJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListInputsExtractionJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListInputsExtractionJobs(ctx, req.(*ListInputsExtractionJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_CancelInputsExtractionJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInputsExtractionJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).CancelInputsExtractionJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/CancelInputsExtractionJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).CancelInputsExtractionJobs(ctx, req.(*CancelInputsExtractionJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostInputsUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInputsUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostInputsUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostInputsUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostInputsUploads(ctx, req.(*PostInputsUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListRunners(ctx, req.(*ListRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostRunners(ctx, req.(*PostRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_DeleteRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).DeleteRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/DeleteRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).DeleteRunners(ctx, req.(*DeleteRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_ListRunnerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).ListRunnerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/ListRunnerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).ListRunnerItems(ctx, req.(*ListRunnerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostRunnerItemOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRunnerItemOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostRunnerItemOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostRunnerItemOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostRunnerItemOutputs(ctx, req.(*PostRunnerItemOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_PostModelVersionsTrainingTimeEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionsTrainingTimeEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).PostModelVersionsTrainingTimeEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clarifai.api.V2/PostModelVersionsTrainingTimeEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).PostModelVersionsTrainingTimeEstimate(ctx, req.(*PostModelVersionsTrainingTimeEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V2_ServiceDesc is the grpc.ServiceDesc for V2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clarifai.api.V2",
	HandlerType: (*V2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConceptRelations",
			Handler:    _V2_ListConceptRelations_Handler,
		},
		{
			MethodName: "PostConceptRelations",
			Handler:    _V2_PostConceptRelations_Handler,
		},
		{
			MethodName: "DeleteConceptRelations",
			Handler:    _V2_DeleteConceptRelations_Handler,
		},
		{
			MethodName: "GetConceptCounts",
			Handler:    _V2_GetConceptCounts_Handler,
		},
		{
			MethodName: "GetConcept",
			Handler:    _V2_GetConcept_Handler,
		},
		{
			MethodName: "ListConcepts",
			Handler:    _V2_ListConcepts_Handler,
		},
		{
			MethodName: "ListModelConcepts",
			Handler:    _V2_ListModelConcepts_Handler,
		},
		{
			MethodName: "PostConceptsSearches",
			Handler:    _V2_PostConceptsSearches_Handler,
		},
		{
			MethodName: "PostConcepts",
			Handler:    _V2_PostConcepts_Handler,
		},
		{
			MethodName: "PatchConcepts",
			Handler:    _V2_PatchConcepts_Handler,
		},
		{
			MethodName: "GetConceptLanguage",
			Handler:    _V2_GetConceptLanguage_Handler,
		},
		{
			MethodName: "ListConceptLanguages",
			Handler:    _V2_ListConceptLanguages_Handler,
		},
		{
			MethodName: "PostConceptLanguages",
			Handler:    _V2_PostConceptLanguages_Handler,
		},
		{
			MethodName: "PatchConceptLanguages",
			Handler:    _V2_PatchConceptLanguages_Handler,
		},
		{
			MethodName: "ListKnowledgeGraphs",
			Handler:    _V2_ListKnowledgeGraphs_Handler,
		},
		{
			MethodName: "PostKnowledgeGraphs",
			Handler:    _V2_PostKnowledgeGraphs_Handler,
		},
		{
			MethodName: "PostConceptMappingJobs",
			Handler:    _V2_PostConceptMappingJobs_Handler,
		},
		{
			MethodName: "GetAnnotation",
			Handler:    _V2_GetAnnotation_Handler,
		},
		{
			MethodName: "ListAnnotations",
			Handler:    _V2_ListAnnotations_Handler,
		},
		{
			MethodName: "PostAnnotations",
			Handler:    _V2_PostAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotations",
			Handler:    _V2_PatchAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotationsStatus",
			Handler:    _V2_PatchAnnotationsStatus_Handler,
		},
		{
			MethodName: "DeleteAnnotation",
			Handler:    _V2_DeleteAnnotation_Handler,
		},
		{
			MethodName: "DeleteAnnotations",
			Handler:    _V2_DeleteAnnotations_Handler,
		},
		{
			MethodName: "PatchAnnotationsSearches",
			Handler:    _V2_PatchAnnotationsSearches_Handler,
		},
		{
			MethodName: "PostAnnotationsSearches",
			Handler:    _V2_PostAnnotationsSearches_Handler,
		},
		{
			MethodName: "ListAnnotationWorkers",
			Handler:    _V2_ListAnnotationWorkers_Handler,
		},
		{
			MethodName: "GetInputCount",
			Handler:    _V2_GetInputCount_Handler,
		},
		{
			MethodName: "StreamInputs",
			Handler:    _V2_StreamInputs_Handler,
		},
		{
			MethodName: "GetInputSamples",
			Handler:    _V2_GetInputSamples_Handler,
		},
		{
			MethodName: "GetInput",
			Handler:    _V2_GetInput_Handler,
		},
		{
			MethodName: "GetInputVideoManifest",
			Handler:    _V2_GetInputVideoManifest_Handler,
		},
		{
			MethodName: "ListInputs",
			Handler:    _V2_ListInputs_Handler,
		},
		{
			MethodName: "PostInputs",
			Handler:    _V2_PostInputs_Handler,
		},
		{
			MethodName: "PatchInputs",
			Handler:    _V2_PatchInputs_Handler,
		},
		{
			MethodName: "DeleteInput",
			Handler:    _V2_DeleteInput_Handler,
		},
		{
			MethodName: "DeleteInputs",
			Handler:    _V2_DeleteInputs_Handler,
		},
		{
			MethodName: "PatchInputsSearches",
			Handler:    _V2_PatchInputsSearches_Handler,
		},
		{
			MethodName: "PostInputsSearches",
			Handler:    _V2_PostInputsSearches_Handler,
		},
		{
			MethodName: "PostModelOutputs",
			Handler:    _V2_PostModelOutputs_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _V2_ListDatasets_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _V2_GetDataset_Handler,
		},
		{
			MethodName: "PostDatasets",
			Handler:    _V2_PostDatasets_Handler,
		},
		{
			MethodName: "PatchDatasets",
			Handler:    _V2_PatchDatasets_Handler,
		},
		{
			MethodName: "DeleteDatasets",
			Handler:    _V2_DeleteDatasets_Handler,
		},
		{
			MethodName: "ListDatasetInputs",
			Handler:    _V2_ListDatasetInputs_Handler,
		},
		{
			MethodName: "GetDatasetInput",
			Handler:    _V2_GetDatasetInput_Handler,
		},
		{
			MethodName: "PostDatasetInputs",
			Handler:    _V2_PostDatasetInputs_Handler,
		},
		{
			MethodName: "DeleteDatasetInputs",
			Handler:    _V2_DeleteDatasetInputs_Handler,
		},
		{
			MethodName: "ListDatasetVersions",
			Handler:    _V2_ListDatasetVersions_Handler,
		},
		{
			MethodName: "GetDatasetVersion",
			Handler:    _V2_GetDatasetVersion_Handler,
		},
		{
			MethodName: "ListDatasetVersionMetricsGroups",
			Handler:    _V2_ListDatasetVersionMetricsGroups_Handler,
		},
		{
			MethodName: "PostDatasetVersions",
			Handler:    _V2_PostDatasetVersions_Handler,
		},
		{
			MethodName: "PatchDatasetVersions",
			Handler:    _V2_PatchDatasetVersions_Handler,
		},
		{
			MethodName: "DeleteDatasetVersions",
			Handler:    _V2_DeleteDatasetVersions_Handler,
		},
		{
			MethodName: "PutDatasetVersionExports",
			Handler:    _V2_PutDatasetVersionExports_Handler,
		},
		{
			MethodName: "GetModelType",
			Handler:    _V2_GetModelType_Handler,
		},
		{
			MethodName: "ListOpenSourceLicenses",
			Handler:    _V2_ListOpenSourceLicenses_Handler,
		},
		{
			MethodName: "ListModelTypes",
			Handler:    _V2_ListModelTypes_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _V2_GetModel_Handler,
		},
		{
			MethodName: "GetModelOutputInfo",
			Handler:    _V2_GetModelOutputInfo_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _V2_ListModels_Handler,
		},
		{
			MethodName: "GetResourceCounts",
			Handler:    _V2_GetResourceCounts_Handler,
		},
		{
			MethodName: "PostModelsSearches",
			Handler:    _V2_PostModelsSearches_Handler,
		},
		{
			MethodName: "PostModels",
			Handler:    _V2_PostModels_Handler,
		},
		{
			MethodName: "PatchModels",
			Handler:    _V2_PatchModels_Handler,
		},
		{
			MethodName: "PatchModelIds",
			Handler:    _V2_PatchModelIds_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _V2_DeleteModel_Handler,
		},
		{
			MethodName: "DeleteModels",
			Handler:    _V2_DeleteModels_Handler,
		},
		{
			MethodName: "PatchModelCheckConsents",
			Handler:    _V2_PatchModelCheckConsents_Handler,
		},
		{
			MethodName: "PatchModelToolkits",
			Handler:    _V2_PatchModelToolkits_Handler,
		},
		{
			MethodName: "PatchModelUseCases",
			Handler:    _V2_PatchModelUseCases_Handler,
		},
		{
			MethodName: "PatchModelLanguages",
			Handler:    _V2_PatchModelLanguages_Handler,
		},
		{
			MethodName: "ListModelInputs",
			Handler:    _V2_ListModelInputs_Handler,
		},
		{
			MethodName: "GetModelVersion",
			Handler:    _V2_GetModelVersion_Handler,
		},
		{
			MethodName: "ListModelVersions",
			Handler:    _V2_ListModelVersions_Handler,
		},
		{
			MethodName: "PostWorkflowVersionsUnPublish",
			Handler:    _V2_PostWorkflowVersionsUnPublish_Handler,
		},
		{
			MethodName: "PostWorkflowVersionsPublish",
			Handler:    _V2_PostWorkflowVersionsPublish_Handler,
		},
		{
			MethodName: "PostModelVersionsPublish",
			Handler:    _V2_PostModelVersionsPublish_Handler,
		},
		{
			MethodName: "PostModelVersionsUnPublish",
			Handler:    _V2_PostModelVersionsUnPublish_Handler,
		},
		{
			MethodName: "PostModelVersions",
			Handler:    _V2_PostModelVersions_Handler,
		},
		{
			MethodName: "PatchModelVersions",
			Handler:    _V2_PatchModelVersions_Handler,
		},
		{
			MethodName: "DeleteModelVersion",
			Handler:    _V2_DeleteModelVersion_Handler,
		},
		{
			MethodName: "GetModelVersionMetrics",
			Handler:    _V2_GetModelVersionMetrics_Handler,
		},
		{
			MethodName: "PostModelVersionMetrics",
			Handler:    _V2_PostModelVersionMetrics_Handler,
		},
		{
			MethodName: "PostModelVersionEvaluations",
			Handler:    _V2_PostModelVersionEvaluations_Handler,
		},
		{
			MethodName: "ListModelVersionEvaluations",
			Handler:    _V2_ListModelVersionEvaluations_Handler,
		},
		{
			MethodName: "GetModelVersionEvaluation",
			Handler:    _V2_GetModelVersionEvaluation_Handler,
		},
		{
			MethodName: "PostEvaluations",
			Handler:    _V2_PostEvaluations_Handler,
		},
		{
			MethodName: "ListEvaluations",
			Handler:    _V2_ListEvaluations_Handler,
		},
		{
			MethodName: "GetEvaluation",
			Handler:    _V2_GetEvaluation_Handler,
		},
		{
			MethodName: "ListModelReferences",
			Handler:    _V2_ListModelReferences_Handler,
		},
		{
			MethodName: "GetModelVersionInputExample",
			Handler:    _V2_GetModelVersionInputExample_Handler,
		},
		{
			MethodName: "ListModelVersionInputExamples",
			Handler:    _V2_ListModelVersionInputExamples_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _V2_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _V2_ListWorkflows_Handler,
		},
		{
			MethodName: "PostWorkflows",
			Handler:    _V2_PostWorkflows_Handler,
		},
		{
			MethodName: "PatchWorkflows",
			Handler:    _V2_PatchWorkflows_Handler,
		},
		{
			MethodName: "PatchWorkflowIds",
			Handler:    _V2_PatchWorkflowIds_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _V2_DeleteWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflows",
			Handler:    _V2_DeleteWorkflows_Handler,
		},
		{
			MethodName: "PostWorkflowResults",
			Handler:    _V2_PostWorkflowResults_Handler,
		},
		{
			MethodName: "PostWorkflowResultsSimilarity",
			Handler:    _V2_PostWorkflowResultsSimilarity_Handler,
		},
		{
			MethodName: "ListWorkflowVersions",
			Handler:    _V2_ListWorkflowVersions_Handler,
		},
		{
			MethodName: "GetWorkflowVersion",
			Handler:    _V2_GetWorkflowVersion_Handler,
		},
		{
			MethodName: "DeleteWorkflowVersions",
			Handler:    _V2_DeleteWorkflowVersions_Handler,
		},
		{
			MethodName: "PatchWorkflowVersions",
			Handler:    _V2_PatchWorkflowVersions_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _V2_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _V2_ListKeys_Handler,
		},
		{
			MethodName: "ListAppKeys",
			Handler:    _V2_ListAppKeys_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _V2_DeleteKey_Handler,
		},
		{
			MethodName: "PostKeys",
			Handler:    _V2_PostKeys_Handler,
		},
		{
			MethodName: "PatchKeys",
			Handler:    _V2_PatchKeys_Handler,
		},
		{
			MethodName: "MyScopes",
			Handler:    _V2_MyScopes_Handler,
		},
		{
			MethodName: "MyScopesUser",
			Handler:    _V2_MyScopesUser_Handler,
		},
		{
			MethodName: "MyScopesRoot",
			Handler:    _V2_MyScopesRoot_Handler,
		},
		{
			MethodName: "ListScopes",
			Handler:    _V2_ListScopes_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _V2_GetApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _V2_ListApps_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _V2_DeleteApp_Handler,
		},
		{
			MethodName: "PostApps",
			Handler:    _V2_PostApps_Handler,
		},
		{
			MethodName: "PatchApps",
			Handler:    _V2_PatchApps_Handler,
		},
		{
			MethodName: "PatchAppsIds",
			Handler:    _V2_PatchAppsIds_Handler,
		},
		{
			MethodName: "PatchApp",
			Handler:    _V2_PatchApp_Handler,
		},
		{
			MethodName: "PostAppsSearches",
			Handler:    _V2_PostAppsSearches_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _V2_GetUser_Handler,
		},
		{
			MethodName: "PostValidatePassword",
			Handler:    _V2_PostValidatePassword_Handler,
		},
		{
			MethodName: "GetSearch",
			Handler:    _V2_GetSearch_Handler,
		},
		{
			MethodName: "ListSearches",
			Handler:    _V2_ListSearches_Handler,
		},
		{
			MethodName: "PatchSearches",
			Handler:    _V2_PatchSearches_Handler,
		},
		{
			MethodName: "PostSearches",
			Handler:    _V2_PostSearches_Handler,
		},
		{
			MethodName: "PostSearchesByID",
			Handler:    _V2_PostSearchesByID_Handler,
		},
		{
			MethodName: "PostAnnotationSearchMetrics",
			Handler:    _V2_PostAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "GetAnnotationSearchMetrics",
			Handler:    _V2_GetAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "ListAnnotationSearchMetrics",
			Handler:    _V2_ListAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "DeleteAnnotationSearchMetrics",
			Handler:    _V2_DeleteAnnotationSearchMetrics_Handler,
		},
		{
			MethodName: "DeleteSearch",
			Handler:    _V2_DeleteSearch_Handler,
		},
		{
			MethodName: "ListAnnotationFilters",
			Handler:    _V2_ListAnnotationFilters_Handler,
		},
		{
			MethodName: "GetAnnotationFilter",
			Handler:    _V2_GetAnnotationFilter_Handler,
		},
		{
			MethodName: "PostAnnotationFilters",
			Handler:    _V2_PostAnnotationFilters_Handler,
		},
		{
			MethodName: "PatchAnnotationFilters",
			Handler:    _V2_PatchAnnotationFilters_Handler,
		},
		{
			MethodName: "DeleteAnnotationFilters",
			Handler:    _V2_DeleteAnnotationFilters_Handler,
		},
		{
			MethodName: "ListStatusCodes",
			Handler:    _V2_ListStatusCodes_Handler,
		},
		{
			MethodName: "GetStatusCode",
			Handler:    _V2_GetStatusCode_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _V2_ListCollaborators_Handler,
		},
		{
			MethodName: "PostCollaborators",
			Handler:    _V2_PostCollaborators_Handler,
		},
		{
			MethodName: "PatchCollaborators",
			Handler:    _V2_PatchCollaborators_Handler,
		},
		{
			MethodName: "DeleteCollaborators",
			Handler:    _V2_DeleteCollaborators_Handler,
		},
		{
			MethodName: "ListCollaborations",
			Handler:    _V2_ListCollaborations_Handler,
		},
		{
			MethodName: "PostAppDuplications",
			Handler:    _V2_PostAppDuplications_Handler,
		},
		{
			MethodName: "ListAppDuplications",
			Handler:    _V2_ListAppDuplications_Handler,
		},
		{
			MethodName: "GetAppDuplication",
			Handler:    _V2_GetAppDuplication_Handler,
		},
		{
			MethodName: "PostTasks",
			Handler:    _V2_PostTasks_Handler,
		},
		{
			MethodName: "GetTaskAnnotationCount",
			Handler:    _V2_GetTaskAnnotationCount_Handler,
		},
		{
			MethodName: "GetTaskInputCount",
			Handler:    _V2_GetTaskInputCount_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _V2_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _V2_ListTasks_Handler,
		},
		{
			MethodName: "PatchTasks",
			Handler:    _V2_PatchTasks_Handler,
		},
		{
			MethodName: "DeleteTasks",
			Handler:    _V2_DeleteTasks_Handler,
		},
		{
			MethodName: "PostLabelOrders",
			Handler:    _V2_PostLabelOrders_Handler,
		},
		{
			MethodName: "GetLabelOrder",
			Handler:    _V2_GetLabelOrder_Handler,
		},
		{
			MethodName: "ListLabelOrders",
			Handler:    _V2_ListLabelOrders_Handler,
		},
		{
			MethodName: "PatchLabelOrders",
			Handler:    _V2_PatchLabelOrders_Handler,
		},
		{
			MethodName: "DeleteLabelOrders",
			Handler:    _V2_DeleteLabelOrders_Handler,
		},
		{
			MethodName: "PostCollectors",
			Handler:    _V2_PostCollectors_Handler,
		},
		{
			MethodName: "GetCollector",
			Handler:    _V2_GetCollector_Handler,
		},
		{
			MethodName: "ListCollectors",
			Handler:    _V2_ListCollectors_Handler,
		},
		{
			MethodName: "PatchCollectors",
			Handler:    _V2_PatchCollectors_Handler,
		},
		{
			MethodName: "DeleteCollectors",
			Handler:    _V2_DeleteCollectors_Handler,
		},
		{
			MethodName: "PostStatValues",
			Handler:    _V2_PostStatValues_Handler,
		},
		{
			MethodName: "PostStatValuesAggregate",
			Handler:    _V2_PostStatValuesAggregate_Handler,
		},
		{
			MethodName: "PostTrendingMetricsView",
			Handler:    _V2_PostTrendingMetricsView_Handler,
		},
		{
			MethodName: "ListTrendingMetricsViews",
			Handler:    _V2_ListTrendingMetricsViews_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _V2_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _V2_ListModules_Handler,
		},
		{
			MethodName: "PostModules",
			Handler:    _V2_PostModules_Handler,
		},
		{
			MethodName: "PatchModules",
			Handler:    _V2_PatchModules_Handler,
		},
		{
			MethodName: "DeleteModules",
			Handler:    _V2_DeleteModules_Handler,
		},
		{
			MethodName: "GetModuleVersion",
			Handler:    _V2_GetModuleVersion_Handler,
		},
		{
			MethodName: "ListModuleVersions",
			Handler:    _V2_ListModuleVersions_Handler,
		},
		{
			MethodName: "PostModuleVersions",
			Handler:    _V2_PostModuleVersions_Handler,
		},
		{
			MethodName: "PatchModuleVersions",
			Handler:    _V2_PatchModuleVersions_Handler,
		},
		{
			MethodName: "DeleteModuleVersions",
			Handler:    _V2_DeleteModuleVersions_Handler,
		},
		{
			MethodName: "GetModuleVersionUsageCount",
			Handler:    _V2_GetModuleVersionUsageCount_Handler,
		},
		{
			MethodName: "GetInstalledModuleVersion",
			Handler:    _V2_GetInstalledModuleVersion_Handler,
		},
		{
			MethodName: "ListInstalledModuleVersions",
			Handler:    _V2_ListInstalledModuleVersions_Handler,
		},
		{
			MethodName: "PostInstalledModuleVersions",
			Handler:    _V2_PostInstalledModuleVersions_Handler,
		},
		{
			MethodName: "DeleteInstalledModuleVersions",
			Handler:    _V2_DeleteInstalledModuleVersions_Handler,
		},
		{
			MethodName: "PostInstalledModuleVersionsKey",
			Handler:    _V2_PostInstalledModuleVersionsKey_Handler,
		},
		{
			MethodName: "PostBulkOperations",
			Handler:    _V2_PostBulkOperations_Handler,
		},
		{
			MethodName: "ListBulkOperations",
			Handler:    _V2_ListBulkOperations_Handler,
		},
		{
			MethodName: "GetBulkOperation",
			Handler:    _V2_GetBulkOperation_Handler,
		},
		{
			MethodName: "CancelBulkOperations",
			Handler:    _V2_CancelBulkOperations_Handler,
		},
		{
			MethodName: "DeleteBulkOperations",
			Handler:    _V2_DeleteBulkOperations_Handler,
		},
		{
			MethodName: "ListNextTaskAssignments",
			Handler:    _V2_ListNextTaskAssignments_Handler,
		},
		{
			MethodName: "PutTaskAssignments",
			Handler:    _V2_PutTaskAssignments_Handler,
		},
		{
			MethodName: "ListInputsAddJobs",
			Handler:    _V2_ListInputsAddJobs_Handler,
		},
		{
			MethodName: "GetInputsAddJob",
			Handler:    _V2_GetInputsAddJob_Handler,
		},
		{
			MethodName: "CancelInputsAddJob",
			Handler:    _V2_CancelInputsAddJob_Handler,
		},
		{
			MethodName: "PostUploads",
			Handler:    _V2_PostUploads_Handler,
		},
		{
			MethodName: "PutUploadContentParts",
			Handler:    _V2_PutUploadContentParts_Handler,
		},
		{
			MethodName: "GetUpload",
			Handler:    _V2_GetUpload_Handler,
		},
		{
			MethodName: "ListUploads",
			Handler:    _V2_ListUploads_Handler,
		},
		{
			MethodName: "DeleteUploads",
			Handler:    _V2_DeleteUploads_Handler,
		},
		{
			MethodName: "PostInputsDataSources",
			Handler:    _V2_PostInputsDataSources_Handler,
		},
		{
			MethodName: "GetInputsExtractionJob",
			Handler:    _V2_GetInputsExtractionJob_Handler,
		},
		{
			MethodName: "ListInputsExtractionJobs",
			Handler:    _V2_ListInputsExtractionJobs_Handler,
		},
		{
			MethodName: "CancelInputsExtractionJobs",
			Handler:    _V2_CancelInputsExtractionJobs_Handler,
		},
		{
			MethodName: "PostInputsUploads",
			Handler:    _V2_PostInputsUploads_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _V2_GetRunner_Handler,
		},
		{
			MethodName: "ListRunners",
			Handler:    _V2_ListRunners_Handler,
		},
		{
			MethodName: "PostRunners",
			Handler:    _V2_PostRunners_Handler,
		},
		{
			MethodName: "DeleteRunners",
			Handler:    _V2_DeleteRunners_Handler,
		},
		{
			MethodName: "ListRunnerItems",
			Handler:    _V2_ListRunnerItems_Handler,
		},
		{
			MethodName: "PostRunnerItemOutputs",
			Handler:    _V2_PostRunnerItemOutputs_Handler,
		},
		{
			MethodName: "PostModelVersionsTrainingTimeEstimate",
			Handler:    _V2_PostModelVersionsTrainingTimeEstimate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clarifai/api/service.proto",
}
