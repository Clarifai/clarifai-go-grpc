// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: proto/clarifai/api/service.proto

package api

import (
	status "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/status"
	_ "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/utils"
	_ "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/auth/scope"
	_ "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/auth/util"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrganizationInvitationStatus int32

const (
	OrganizationInvitationStatus_NOT_SET   OrganizationInvitationStatus = 0
	OrganizationInvitationStatus_PENDING   OrganizationInvitationStatus = 1
	OrganizationInvitationStatus_ACCEPTED  OrganizationInvitationStatus = 2
	OrganizationInvitationStatus_CANCELLED OrganizationInvitationStatus = 3
	OrganizationInvitationStatus_DECLINED  OrganizationInvitationStatus = 4
	OrganizationInvitationStatus_EXPIRED   OrganizationInvitationStatus = 5
)

// Enum value maps for OrganizationInvitationStatus.
var (
	OrganizationInvitationStatus_name = map[int32]string{
		0: "NOT_SET",
		1: "PENDING",
		2: "ACCEPTED",
		3: "CANCELLED",
		4: "DECLINED",
		5: "EXPIRED",
	}
	OrganizationInvitationStatus_value = map[string]int32{
		"NOT_SET":   0,
		"PENDING":   1,
		"ACCEPTED":  2,
		"CANCELLED": 3,
		"DECLINED":  4,
		"EXPIRED":   5,
	}
)

func (x OrganizationInvitationStatus) Enum() *OrganizationInvitationStatus {
	p := new(OrganizationInvitationStatus)
	*p = x
	return p
}

func (x OrganizationInvitationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrganizationInvitationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_service_proto_enumTypes[0].Descriptor()
}

func (OrganizationInvitationStatus) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_service_proto_enumTypes[0]
}

func (x OrganizationInvitationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrganizationInvitationStatus.Descriptor instead.
func (OrganizationInvitationStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{0}
}

type PutTaskAssignmentsRequestAction int32

const (
	PutTaskAssignmentsRequestAction_PUT_TASK_ASSIGNMENTS_REQUEST_ACTION_NOT_SET PutTaskAssignmentsRequestAction = 0
	PutTaskAssignmentsRequestAction_LABEL_START                                 PutTaskAssignmentsRequestAction = 1
	PutTaskAssignmentsRequestAction_LABEL_SUBMIT                                PutTaskAssignmentsRequestAction = 2
	PutTaskAssignmentsRequestAction_REVIEW_START                                PutTaskAssignmentsRequestAction = 10
	PutTaskAssignmentsRequestAction_REVIEW_APPROVE                              PutTaskAssignmentsRequestAction = 11
	PutTaskAssignmentsRequestAction_REVIEW_REQUEST_CHANGES                      PutTaskAssignmentsRequestAction = 12
)

// Enum value maps for PutTaskAssignmentsRequestAction.
var (
	PutTaskAssignmentsRequestAction_name = map[int32]string{
		0:  "PUT_TASK_ASSIGNMENTS_REQUEST_ACTION_NOT_SET",
		1:  "LABEL_START",
		2:  "LABEL_SUBMIT",
		10: "REVIEW_START",
		11: "REVIEW_APPROVE",
		12: "REVIEW_REQUEST_CHANGES",
	}
	PutTaskAssignmentsRequestAction_value = map[string]int32{
		"PUT_TASK_ASSIGNMENTS_REQUEST_ACTION_NOT_SET": 0,
		"LABEL_START":            1,
		"LABEL_SUBMIT":           2,
		"REVIEW_START":           10,
		"REVIEW_APPROVE":         11,
		"REVIEW_REQUEST_CHANGES": 12,
	}
)

func (x PutTaskAssignmentsRequestAction) Enum() *PutTaskAssignmentsRequestAction {
	p := new(PutTaskAssignmentsRequestAction)
	*p = x
	return p
}

func (x PutTaskAssignmentsRequestAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PutTaskAssignmentsRequestAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_service_proto_enumTypes[1].Descriptor()
}

func (PutTaskAssignmentsRequestAction) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_service_proto_enumTypes[1]
}

func (x PutTaskAssignmentsRequestAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PutTaskAssignmentsRequestAction.Descriptor instead.
func (PutTaskAssignmentsRequestAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{1}
}

// Split the results into pages.
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) The page number. Pagination is used to split the results into chunks. Defaults to 1.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults to 128.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{0}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetAnnotationRequest
type GetAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	AnnotationId string        `protobuf:"bytes,2,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
	InputId      string        `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *GetAnnotationRequest) Reset() {
	*x = GetAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnnotationRequest) ProtoMessage() {}

func (x *GetAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnnotationRequest.ProtoReflect.Descriptor instead.
func (*GetAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetAnnotationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAnnotationRequest) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *GetAnnotationRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// ListAnnotationsRequest
type ListAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List annotations for these IDs
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// List annotations for these Input IDs
	// Note that 'ids' are optional but if the are provided the number and order in
	// 'ids' and 'input_ids' should match
	// If you do not specify 'ids' all the annotations for 'input_ids' are returned
	// If a you do not specify both 'input_ids' and 'ids' all the annotations in the app are returned
	InputIds []string `protobuf:"bytes,3,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
	// Only return the annotations that has one of these user IDs, effectively operating as an
	// OR among them to filter down the results.
	// If model_version_ids are also provided these user_ids are OR'd with them as well since
	// annotations are either provided by users or model versions and we want the union of any
	// provided user or model version annotations in the results of ListAnnotations request.
	// If no user_ids are provided then annotations from all users are returned.
	UserIds []string `protobuf:"bytes,9,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Only return the annotations that has one of these model version IDs, effectively operating as an
	// OR among them to filter down the results.
	// If user_ids are also provided these model_versions_ids are OR'd with them as well since
	// annotations are either provided by users or model versions and we want the union of any
	// provided user or model version annotations in the results of ListAnnotations request.
	// If no model_version_ids are provided then annotations from all model versions are returned.
	ModelVersionIds []string `protobuf:"bytes,10,rep,name=model_version_ids,json=modelVersionIds,proto3" json:"model_version_ids,omitempty"`
	// Set status to filter by a list of statuses
	// If not statuses are provided then annotations with any status will be returned.
	Statuses []*status.Status `protobuf:"bytes,5,rep,name=statuses,proto3" json:"statuses,omitempty"`
	// Set this flag to list both trusted and not trusted annotations
	// by default it's listing only trusted annotations
	ListAllAnnotations bool `protobuf:"varint,6,opt,name=list_all_annotations,json=listAllAnnotations,proto3" json:"list_all_annotations,omitempty"`
	// Set this flag to return the model output for model annotations in the response.
	ReturnModelOutput bool `protobuf:"varint,12,opt,name=return_model_output,json=returnModelOutput,proto3" json:"return_model_output,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,8,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Flag to filter annotations by task_id
	TaskId string `protobuf:"bytes,11,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *ListAnnotationsRequest) Reset() {
	*x = ListAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationsRequest) ProtoMessage() {}

func (x *ListAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAnnotationsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListAnnotationsRequest) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *ListAnnotationsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListAnnotationsRequest) GetModelVersionIds() []string {
	if x != nil {
		return x.ModelVersionIds
	}
	return nil
}

func (x *ListAnnotationsRequest) GetStatuses() []*status.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListAnnotationsRequest) GetListAllAnnotations() bool {
	if x != nil {
		return x.ListAllAnnotations
	}
	return false
}

func (x *ListAnnotationsRequest) GetReturnModelOutput() bool {
	if x != nil {
		return x.ReturnModelOutput
	}
	return false
}

func (x *ListAnnotationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnnotationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListAnnotationsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// PostAnnotationsRequest
type PostAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Annotations []*Annotation `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *PostAnnotationsRequest) Reset() {
	*x = PostAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationsRequest) ProtoMessage() {}

func (x *PostAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{3}
}

func (x *PostAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationsRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// PatchAnnotationsRequest
type PatchAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Annotations []*Annotation `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// If the request is a "remove" action and the annotation is left with empty data,
	// then setting delete_if_empty_data to true will delete the annotation,
	// if possible (for example, will not delete an input-level annotation).
	DeleteIfEmptyData bool `protobuf:"varint,4,opt,name=delete_if_empty_data,json=deleteIfEmptyData,proto3" json:"delete_if_empty_data,omitempty"`
}

func (x *PatchAnnotationsRequest) Reset() {
	*x = PatchAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsRequest) ProtoMessage() {}

func (x *PatchAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{4}
}

func (x *PatchAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationsRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *PatchAnnotationsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchAnnotationsRequest) GetDeleteIfEmptyData() bool {
	if x != nil {
		return x.DeleteIfEmptyData
	}
	return false
}

// PatchAnnotationsStatusRequest
type PatchAnnotationsStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Filter by user IDs
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Filter by task ID
	TaskId string `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Filter by Status codes
	StatusCodes []status.StatusCode `protobuf:"varint,6,rep,packed,name=status_codes,json=statusCodes,proto3,enum=clarifai.api.status.StatusCode" json:"status_codes,omitempty"`
	// 'overwrite' is supported
	Action string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	// Update filtered annotations to this status
	StatusCode status.StatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=clarifai.api.status.StatusCode" json:"status_code,omitempty"`
}

func (x *PatchAnnotationsStatusRequest) Reset() {
	*x = PatchAnnotationsStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsStatusRequest) ProtoMessage() {}

func (x *PatchAnnotationsStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsStatusRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{5}
}

func (x *PatchAnnotationsStatusRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationsStatusRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *PatchAnnotationsStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PatchAnnotationsStatusRequest) GetStatusCodes() []status.StatusCode {
	if x != nil {
		return x.StatusCodes
	}
	return nil
}

func (x *PatchAnnotationsStatusRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchAnnotationsStatusRequest) GetStatusCode() status.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return status.StatusCode(0)
}

// PatchAnnotationsStatusResponse
type PatchAnnotationsStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UserIds      []string       `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	UpdatedCount uint32         `protobuf:"varint,3,opt,name=updated_count,json=updatedCount,proto3" json:"updated_count,omitempty"`
}

func (x *PatchAnnotationsStatusResponse) Reset() {
	*x = PatchAnnotationsStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsStatusResponse) ProtoMessage() {}

func (x *PatchAnnotationsStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsStatusResponse.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{6}
}

func (x *PatchAnnotationsStatusResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PatchAnnotationsStatusResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *PatchAnnotationsStatusResponse) GetUpdatedCount() uint32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

// DeleteAnnotationRequest
type DeleteAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputId      string        `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	AnnotationId string        `protobuf:"bytes,3,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
}

func (x *DeleteAnnotationRequest) Reset() {
	*x = DeleteAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationRequest) ProtoMessage() {}

func (x *DeleteAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteAnnotationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *DeleteAnnotationRequest) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Delete annotations with IDs
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// Delete annotations for these Input IDs
	// Note that 'ids' are optional but if the are provided the number and order in
	// 'ids' and 'input_ids' should match
	// If you do not specifiy 'ids' all the annotations for 'input_ids' are deleted
	// However you need to specify at least one value for 'input_ids'
	// i.e. this API does not support deleting all annotations
	InputIds []string `protobuf:"bytes,3,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
}

func (x *DeleteAnnotationsRequest) Reset() {
	*x = DeleteAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationsRequest) ProtoMessage() {}

func (x *DeleteAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteAnnotationsRequest) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

// SingleAnnotationResponse
type SingleAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Annotation *Annotation    `protobuf:"bytes,2,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *SingleAnnotationResponse) Reset() {
	*x = SingleAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAnnotationResponse) ProtoMessage() {}

func (x *SingleAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAnnotationResponse.ProtoReflect.Descriptor instead.
func (*SingleAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{9}
}

func (x *SingleAnnotationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAnnotationResponse) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

// MultiAnnotationResponse
type MultiAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Annotations []*Annotation  `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *MultiAnnotationResponse) Reset() {
	*x = MultiAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnnotationResponse) ProtoMessage() {}

func (x *MultiAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnnotationResponse.ProtoReflect.Descriptor instead.
func (*MultiAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{10}
}

func (x *MultiAnnotationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAnnotationResponse) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// ListAnnotationWorkersRequest
type ListAnnotationWorkersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response.
	// Currently supported: all, names
	AdditionalFields []string `protobuf:"bytes,4,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// (optional URL parameter) Only list workers that have created trusted annotations.
	TrustedOnly bool `protobuf:"varint,5,opt,name=trusted_only,json=trustedOnly,proto3" json:"trusted_only,omitempty"`
}

func (x *ListAnnotationWorkersRequest) Reset() {
	*x = ListAnnotationWorkersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationWorkersRequest) ProtoMessage() {}

func (x *ListAnnotationWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationWorkersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListAnnotationWorkersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAnnotationWorkersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnnotationWorkersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListAnnotationWorkersRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListAnnotationWorkersRequest) GetTrustedOnly() bool {
	if x != nil {
		return x.TrustedOnly
	}
	return false
}

// MultiWorkerResponse
type MultiWorkerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workers []*Worker      `protobuf:"bytes,2,rep,name=workers,proto3" json:"workers,omitempty"`
}

func (x *MultiWorkerResponse) Reset() {
	*x = MultiWorkerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkerResponse) ProtoMessage() {}

func (x *MultiWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkerResponse.ProtoReflect.Descriptor instead.
func (*MultiWorkerResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{12}
}

func (x *MultiWorkerResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWorkerResponse) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

// GetAppRequest
type GetAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,2,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetAppRequest) Reset() {
	*x = GetAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRequest) ProtoMessage() {}

func (x *GetAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRequest.ProtoReflect.Descriptor instead.
func (*GetAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetAppRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAppRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// ListAppsRequest
type ListAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,10,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,5,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//
	//	*ListAppsRequest_SortByName
	//	*ListAppsRequest_SortByModifiedAt
	//	*ListAppsRequest_SortByCreatedAt
	//	*ListAppsRequest_SortByStarCount
	SortBy isListAppsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	// If true, we only return apps that are handpicked by clarifai staff
	FeaturedOnly bool `protobuf:"varint,9,opt,name=featured_only,json=featuredOnly,proto3" json:"featured_only,omitempty"`
	// If true, we only return apps that are starred by the requesting user
	StarredOnly bool `protobuf:"varint,11,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// If true, we only return apps that are marked as a template by the app owner.
	TemplateOnly bool `protobuf:"varint,16,opt,name=template_only,json=templateOnly,proto3" json:"template_only,omitempty"`
	// Searching options:
	// Specify a search parameter in order to perform keyword search on the
	// following fields of the application:
	//   - id
	//   - name
	//   - description
	//   - notes
	//   - user_id (unless user_app_id.user_id is already set)
	//
	// Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
	// and used for partial prefix-matching (so searching for "clari" matches "clarifai").
	//
	// NOTE: Both the list of fields searched and the exact keyword matching
	// rules are subject to change and not guaranteed to be backwards-compatible.
	Search string `protobuf:"bytes,15,opt,name=search,proto3" json:"search,omitempty"`
	// Query various text fields (id, name, description, and notes) that can contain the words in the query string
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Query string `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	// Filter by the id, name and notes of the app. This supports wilcard queries like "gen*" to match "general" as an example.
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Filter by the user-unique-id of the app. This supports wilcard queries like "gen*" to match "general" as an example.
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Id string `protobuf:"bytes,14,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListAppsRequest) Reset() {
	*x = ListAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppsRequest) ProtoMessage() {}

func (x *ListAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppsRequest.ProtoReflect.Descriptor instead.
func (*ListAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAppsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAppsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListAppsRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListAppsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListAppsRequest) GetSortBy() isListAppsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListAppsRequest) GetSortByName() bool {
	if x, ok := x.GetSortBy().(*ListAppsRequest_SortByName); ok {
		return x.SortByName
	}
	return false
}

func (x *ListAppsRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListAppsRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListAppsRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListAppsRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

func (x *ListAppsRequest) GetSortByStarCount() bool {
	if x, ok := x.GetSortBy().(*ListAppsRequest_SortByStarCount); ok {
		return x.SortByStarCount
	}
	return false
}

func (x *ListAppsRequest) GetFeaturedOnly() bool {
	if x != nil {
		return x.FeaturedOnly
	}
	return false
}

func (x *ListAppsRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListAppsRequest) GetTemplateOnly() bool {
	if x != nil {
		return x.TemplateOnly
	}
	return false
}

func (x *ListAppsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListAppsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListAppsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListAppsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isListAppsRequest_SortBy interface {
	isListAppsRequest_SortBy()
}

type ListAppsRequest_SortByName struct {
	// Whether to order by the name
	SortByName bool `protobuf:"varint,6,opt,name=sort_by_name,json=sortByName,proto3,oneof"`
}

type ListAppsRequest_SortByModifiedAt struct {
	// Whether to order by the modified_at time.
	// If none of the sort options is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,7,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

type ListAppsRequest_SortByCreatedAt struct {
	// Whether to order by the created_at time.
	SortByCreatedAt bool `protobuf:"varint,12,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

type ListAppsRequest_SortByStarCount struct {
	// Whether to order by the number of users stared the app
	SortByStarCount bool `protobuf:"varint,13,opt,name=sort_by_star_count,json=sortByStarCount,proto3,oneof"`
}

func (*ListAppsRequest_SortByName) isListAppsRequest_SortBy() {}

func (*ListAppsRequest_SortByModifiedAt) isListAppsRequest_SortBy() {}

func (*ListAppsRequest_SortByCreatedAt) isListAppsRequest_SortBy() {}

func (*ListAppsRequest_SortByStarCount) isListAppsRequest_SortBy() {}

// PostAppsRequest
type PostAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Apps      []*App        `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *PostAppsRequest) Reset() {
	*x = PostAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppsRequest) ProtoMessage() {}

func (x *PostAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppsRequest.ProtoReflect.Descriptor instead.
func (*PostAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{15}
}

func (x *PostAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAppsRequest) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

// DeleteAppRequest
type DeleteAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *DeleteAppRequest) Reset() {
	*x = DeleteAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppRequest) ProtoMessage() {}

func (x *DeleteAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteAppRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PatchAppsRequest
type PatchAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Apps      []*App        `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
	// The action to perform on the patched App objects except App.Metadata
	// Supported values: 'overwrite' and 'remove'.
	//
	// Note that 'remove' can only be used to remove the app image by setting
	// 'image.url' in the request to the current value returned for that app.
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// The action to perform on the patched App.Metadata
	MetadataAction *PatchAction `protobuf:"bytes,4,opt,name=metadata_action,json=metadataAction,proto3" json:"metadata_action,omitempty"`
	// If set, the app will be automatically reindexed upon change of its base workflow.
	Reindex bool `protobuf:"varint,5,opt,name=reindex,proto3" json:"reindex,omitempty"`
}

func (x *PatchAppsRequest) Reset() {
	*x = PatchAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAppsRequest) ProtoMessage() {}

func (x *PatchAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAppsRequest.ProtoReflect.Descriptor instead.
func (*PatchAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{17}
}

func (x *PatchAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAppsRequest) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *PatchAppsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchAppsRequest) GetMetadataAction() *PatchAction {
	if x != nil {
		return x.MetadataAction
	}
	return nil
}

func (x *PatchAppsRequest) GetReindex() bool {
	if x != nil {
		return x.Reindex
	}
	return false
}

// PatchAppRequest
type PatchAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	App       *App          `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	// The action to perform on the patched App object except App.Metadata
	// Supported values: 'overwrite' and 'remove'.
	//
	// Note that 'remove' can only be used to remove the app image by setting
	// 'image.url' in the request to the current value returned for the app.
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// The action to perform on the patched App.Metadata
	MetadataAction *PatchAction `protobuf:"bytes,4,opt,name=metadata_action,json=metadataAction,proto3" json:"metadata_action,omitempty"`
	// If set, the app will be automatically reindexed upon change of its base workflow.
	Reindex bool `protobuf:"varint,5,opt,name=reindex,proto3" json:"reindex,omitempty"`
}

func (x *PatchAppRequest) Reset() {
	*x = PatchAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAppRequest) ProtoMessage() {}

func (x *PatchAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAppRequest.ProtoReflect.Descriptor instead.
func (*PatchAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{18}
}

func (x *PatchAppRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAppRequest) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *PatchAppRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchAppRequest) GetMetadataAction() *PatchAction {
	if x != nil {
		return x.MetadataAction
	}
	return nil
}

func (x *PatchAppRequest) GetReindex() bool {
	if x != nil {
		return x.Reindex
	}
	return false
}

// PatchAppsIdsRequest
type PatchAppsIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array containing 1 entry
	Ids []*IdUpdateSource `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAppsIdsRequest) Reset() {
	*x = PatchAppsIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAppsIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAppsIdsRequest) ProtoMessage() {}

func (x *PatchAppsIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAppsIdsRequest.ProtoReflect.Descriptor instead.
func (*PatchAppsIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{19}
}

func (x *PatchAppsIdsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAppsIdsRequest) GetIds() []*IdUpdateSource {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PatchAppsIdsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Search over the available applications.
type PostAppsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The body of the request.
	AppQuery *AppQuery `protobuf:"bytes,2,opt,name=app_query,json=appQuery,proto3" json:"app_query,omitempty"`
	// Pagination parameters here since there are no url args in this
	// POST request.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostAppsSearchesRequest) Reset() {
	*x = PostAppsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppsSearchesRequest) ProtoMessage() {}

func (x *PostAppsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostAppsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{20}
}

func (x *PostAppsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAppsSearchesRequest) GetAppQuery() *AppQuery {
	if x != nil {
		return x.AppQuery
	}
	return nil
}

func (x *PostAppsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// SingleAppResponse
type SingleAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	App    *App           `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *SingleAppResponse) Reset() {
	*x = SingleAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAppResponse) ProtoMessage() {}

func (x *SingleAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAppResponse.ProtoReflect.Descriptor instead.
func (*SingleAppResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{21}
}

func (x *SingleAppResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAppResponse) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

// MultiAppResponse
type MultiAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Apps   []*App         `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *MultiAppResponse) Reset() {
	*x = MultiAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAppResponse) ProtoMessage() {}

func (x *MultiAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAppResponse.ProtoReflect.Descriptor instead.
func (*MultiAppResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{22}
}

func (x *MultiAppResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAppResponse) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

// ListCollaboratorsRequest
type ListCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Set this flag to list both deleted and not deleted collaborators
	// by default it's listing only not deleted collaborators
	ListAllCollaborators bool `protobuf:"varint,2,opt,name=list_all_collaborators,json=listAllCollaborators,proto3" json:"list_all_collaborators,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListCollaboratorsRequest) Reset() {
	*x = ListCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollaboratorsRequest) ProtoMessage() {}

func (x *ListCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*ListCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListCollaboratorsRequest) GetListAllCollaborators() bool {
	if x != nil {
		return x.ListAllCollaborators
	}
	return false
}

func (x *ListCollaboratorsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCollaboratorsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostCollaboratorsRequest
type PostCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
}

func (x *PostCollaboratorsRequest) Reset() {
	*x = PostCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCollaboratorsRequest) ProtoMessage() {}

func (x *PostCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*PostCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{24}
}

func (x *PostCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostCollaboratorsRequest) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

// PatchCollaboratorsRequest
type PatchCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	// The action to perform on the patched objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchCollaboratorsRequest) Reset() {
	*x = PatchCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCollaboratorsRequest) ProtoMessage() {}

func (x *PatchCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*PatchCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{25}
}

func (x *PatchCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchCollaboratorsRequest) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *PatchCollaboratorsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteCollaboratorsRequest
type DeleteCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId       *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	CollaboratorIds []string      `protobuf:"bytes,2,rep,name=collaborator_ids,json=collaboratorIds,proto3" json:"collaborator_ids,omitempty"`
	UserEmails      []string      `protobuf:"bytes,3,rep,name=user_emails,json=userEmails,proto3" json:"user_emails,omitempty"`
}

func (x *DeleteCollaboratorsRequest) Reset() {
	*x = DeleteCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollaboratorsRequest) ProtoMessage() {}

func (x *DeleteCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteCollaboratorsRequest) GetCollaboratorIds() []string {
	if x != nil {
		return x.CollaboratorIds
	}
	return nil
}

func (x *DeleteCollaboratorsRequest) GetUserEmails() []string {
	if x != nil {
		return x.UserEmails
	}
	return nil
}

// MultiCollaboratorsResponse
type MultiCollaboratorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	// The owner of the application.
	//
	// When listing users that have access to the application, i.e. collaborators,
	// it is often relevant to also include the application owner, so return
	// their information here for convenience.
	//
	// Note: app_owner is only returned by ListCollaborators and only if the
	// owner is a regular user, not an organization.
	AppOwner *User `protobuf:"bytes,3,opt,name=app_owner,json=appOwner,proto3" json:"app_owner,omitempty"`
}

func (x *MultiCollaboratorsResponse) Reset() {
	*x = MultiCollaboratorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCollaboratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCollaboratorsResponse) ProtoMessage() {}

func (x *MultiCollaboratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCollaboratorsResponse.ProtoReflect.Descriptor instead.
func (*MultiCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{27}
}

func (x *MultiCollaboratorsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiCollaboratorsResponse) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *MultiCollaboratorsResponse) GetAppOwner() *User {
	if x != nil {
		return x.AppOwner
	}
	return nil
}

// ListCollaborationsRequest
type ListCollaborationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Filtering options:
	// If true, we only return collaborations on apps that are marked as a template by the app owner.
	TemplateOnly bool `protobuf:"varint,4,opt,name=template_only,json=templateOnly,proto3" json:"template_only,omitempty"`
}

func (x *ListCollaborationsRequest) Reset() {
	*x = ListCollaborationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollaborationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollaborationsRequest) ProtoMessage() {}

func (x *ListCollaborationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollaborationsRequest.ProtoReflect.Descriptor instead.
func (*ListCollaborationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListCollaborationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListCollaborationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCollaborationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListCollaborationsRequest) GetTemplateOnly() bool {
	if x != nil {
		return x.TemplateOnly
	}
	return false
}

// MultiCollaborationsResponse
type MultiCollaborationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collaborations []*Collaboration `protobuf:"bytes,2,rep,name=collaborations,proto3" json:"collaborations,omitempty"`
}

func (x *MultiCollaborationsResponse) Reset() {
	*x = MultiCollaborationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCollaborationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCollaborationsResponse) ProtoMessage() {}

func (x *MultiCollaborationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCollaborationsResponse.ProtoReflect.Descriptor instead.
func (*MultiCollaborationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{29}
}

func (x *MultiCollaborationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiCollaborationsResponse) GetCollaborations() []*Collaboration {
	if x != nil {
		return x.Collaborations
	}
	return nil
}

// Get Resource Price - new billing
type GetResourcePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Types that are assignable to Resource:
	//
	//	*GetResourcePriceRequest_Model
	//	*GetResourcePriceRequest_Workflow
	Resource isGetResourcePriceRequest_Resource `protobuf_oneof:"resource"`
}

func (x *GetResourcePriceRequest) Reset() {
	*x = GetResourcePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePriceRequest) ProtoMessage() {}

func (x *GetResourcePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePriceRequest.ProtoReflect.Descriptor instead.
func (*GetResourcePriceRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetResourcePriceRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (m *GetResourcePriceRequest) GetResource() isGetResourcePriceRequest_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *GetResourcePriceRequest) GetModel() *Model {
	if x, ok := x.GetResource().(*GetResourcePriceRequest_Model); ok {
		return x.Model
	}
	return nil
}

func (x *GetResourcePriceRequest) GetWorkflow() *Workflow {
	if x, ok := x.GetResource().(*GetResourcePriceRequest_Workflow); ok {
		return x.Workflow
	}
	return nil
}

type isGetResourcePriceRequest_Resource interface {
	isGetResourcePriceRequest_Resource()
}

type GetResourcePriceRequest_Model struct {
	// ########## Supported fields ##########
	// - id
	// - model_version.id
	Model *Model `protobuf:"bytes,2,opt,name=model,proto3,oneof"`
}

type GetResourcePriceRequest_Workflow struct {
	// ########## Supported fields ##########
	// - id
	// - version.id
	Workflow *Workflow `protobuf:"bytes,3,opt,name=workflow,proto3,oneof"`
}

func (*GetResourcePriceRequest_Model) isGetResourcePriceRequest_Resource() {}

func (*GetResourcePriceRequest_Workflow) isGetResourcePriceRequest_Resource() {}

type GetResourcePriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Price is in millicents, i.e. $1/100000
	Price int64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *GetResourcePriceResponse) Reset() {
	*x = GetResourcePriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePriceResponse) ProtoMessage() {}

func (x *GetResourcePriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePriceResponse.ProtoReflect.Descriptor instead.
func (*GetResourcePriceResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetResourcePriceResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetResourcePriceResponse) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// GetStatusCodeRequest
type GetStatusCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCodeId string `protobuf:"bytes,1,opt,name=status_code_id,json=statusCodeId,proto3" json:"status_code_id,omitempty"`
}

func (x *GetStatusCodeRequest) Reset() {
	*x = GetStatusCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusCodeRequest) ProtoMessage() {}

func (x *GetStatusCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusCodeRequest.ProtoReflect.Descriptor instead.
func (*GetStatusCodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetStatusCodeRequest) GetStatusCodeId() string {
	if x != nil {
		return x.StatusCodeId
	}
	return ""
}

// ListStatusCodesRequest
type ListStatusCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStatusCodesRequest) Reset() {
	*x = ListStatusCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusCodesRequest) ProtoMessage() {}

func (x *ListStatusCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusCodesRequest.ProtoReflect.Descriptor instead.
func (*ListStatusCodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{33}
}

// SingleStatusCodeResponse
type SingleStatusCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SingleStatusCodeResponse) Reset() {
	*x = SingleStatusCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleStatusCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleStatusCodeResponse) ProtoMessage() {}

func (x *SingleStatusCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleStatusCodeResponse.ProtoReflect.Descriptor instead.
func (*SingleStatusCodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{34}
}

func (x *SingleStatusCodeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// MultiStatusCodeResponse
type MultiStatusCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Statuses []*status.Status `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *MultiStatusCodeResponse) Reset() {
	*x = MultiStatusCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiStatusCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStatusCodeResponse) ProtoMessage() {}

func (x *MultiStatusCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStatusCodeResponse.ProtoReflect.Descriptor instead.
func (*MultiStatusCodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{35}
}

func (x *MultiStatusCodeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiStatusCodeResponse) GetStatuses() []*status.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// GetConceptRequest
type GetConceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept's id.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
}

func (x *GetConceptRequest) Reset() {
	*x = GetConceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptRequest) ProtoMessage() {}

func (x *GetConceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptRequest.ProtoReflect.Descriptor instead.
func (*GetConceptRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{36}
}

func (x *GetConceptRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetConceptRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

// ListConceptsRequest
type ListConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Fuzzy match on concept ID
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListConceptsRequest) Reset() {
	*x = ListConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptsRequest) ProtoMessage() {}

func (x *ListConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptsRequest.ProtoReflect.Descriptor instead.
func (*ListConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{37}
}

func (x *ListConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListConceptsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListModelConceptsRequest
type ListModelConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Model id
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Model version Id. Optional, if not provided latest model version is used.
	VersionId string `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Searching options:
	// Specify a search parameter in order to perform keyword search on the
	// following fields of the concept:
	//   - id
	//   - name
	//
	// Keywords are used for partial prefix-matching (so searching for "larif" matches "clarifai").
	//
	// NOTE: Both the list of fields searched and the exact keyword matching
	// rules are subject to change and not guaranteed to be backwards-compatible.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ListModelConceptsRequest) Reset() {
	*x = ListModelConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelConceptsRequest) ProtoMessage() {}

func (x *ListModelConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelConceptsRequest.ProtoReflect.Descriptor instead.
func (*ListModelConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{38}
}

func (x *ListModelConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelConceptsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelConceptsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ListModelConceptsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelConceptsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListModelConceptsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// PostConceptsSearchesRequest
type PostConceptsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids present in the url of the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The body of the request.
	ConceptQuery *ConceptQuery `protobuf:"bytes,2,opt,name=concept_query,json=conceptQuery,proto3" json:"concept_query,omitempty"`
	// Request additional info to be retrieved for each concept in the response.
	ExtraInfo *ConceptExtraInfoRequest `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	// Pagination parameters here since there are no url args in this
	// POST request.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostConceptsSearchesRequest) Reset() {
	*x = PostConceptsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptsSearchesRequest) ProtoMessage() {}

func (x *PostConceptsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostConceptsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{39}
}

func (x *PostConceptsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptsSearchesRequest) GetConceptQuery() *ConceptQuery {
	if x != nil {
		return x.ConceptQuery
	}
	return nil
}

func (x *PostConceptsSearchesRequest) GetExtraInfo() *ConceptExtraInfoRequest {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *PostConceptsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ConceptExtraInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determine if the concept is searchable by rank using this model.
	// Currently, only embedder models are supported.
	// ########## Supported fields ##########
	// - app_id
	// - id
	// - model_version.id
	// - user_id
	RankableModel *Model `protobuf:"bytes,1,opt,name=rankable_model,json=rankableModel,proto3" json:"rankable_model,omitempty"`
}

func (x *ConceptExtraInfoRequest) Reset() {
	*x = ConceptExtraInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptExtraInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptExtraInfoRequest) ProtoMessage() {}

func (x *ConceptExtraInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptExtraInfoRequest.ProtoReflect.Descriptor instead.
func (*ConceptExtraInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{40}
}

func (x *ConceptExtraInfoRequest) GetRankableModel() *Model {
	if x != nil {
		return x.RankableModel
	}
	return nil
}

// PostConceptsRequest
type PostConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concepts to add.
	Concepts []*Concept `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *PostConceptsRequest) Reset() {
	*x = PostConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptsRequest) ProtoMessage() {}

func (x *PostConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptsRequest.ProtoReflect.Descriptor instead.
func (*PostConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{41}
}

func (x *PostConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptsRequest) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

// PatchConceptsRequest
type PatchConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concepts to patch.
	Concepts []*Concept `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
	// The action to perform on the patched objects
	// For now ony action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchConceptsRequest) Reset() {
	*x = PatchConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchConceptsRequest) ProtoMessage() {}

func (x *PatchConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchConceptsRequest.ProtoReflect.Descriptor instead.
func (*PatchConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{42}
}

func (x *PatchConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchConceptsRequest) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *PatchConceptsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// GetConceptCountsRequest
type GetConceptCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *GetConceptCountsRequest) Reset() {
	*x = GetConceptCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptCountsRequest) ProtoMessage() {}

func (x *GetConceptCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptCountsRequest.ProtoReflect.Descriptor instead.
func (*GetConceptCountsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{43}
}

func (x *GetConceptCountsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetConceptCountsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetConceptCountsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// SingleConceptResponse
type SingleConceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concept.
	Concept *Concept `protobuf:"bytes,2,opt,name=concept,proto3" json:"concept,omitempty"`
}

func (x *SingleConceptResponse) Reset() {
	*x = SingleConceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptResponse) ProtoMessage() {}

func (x *SingleConceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{44}
}

func (x *SingleConceptResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptResponse) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

// MultiConceptResponse
type MultiConceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concepts.
	Concepts []*Concept `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *MultiConceptResponse) Reset() {
	*x = MultiConceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptResponse) ProtoMessage() {}

func (x *MultiConceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{45}
}

func (x *MultiConceptResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptResponse) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

// MultiConceptCountResponse
type MultiConceptCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concept counts.
	ConceptCounts []*ConceptCount `protobuf:"bytes,2,rep,name=concept_counts,json=conceptCounts,proto3" json:"concept_counts,omitempty"`
}

func (x *MultiConceptCountResponse) Reset() {
	*x = MultiConceptCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptCountResponse) ProtoMessage() {}

func (x *MultiConceptCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptCountResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{46}
}

func (x *MultiConceptCountResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptCountResponse) GetConceptCounts() []*ConceptCount {
	if x != nil {
		return x.ConceptCounts
	}
	return nil
}

// GET all relations such that the concept_id refers to the subject of the relation
type ListConceptRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The subject concept id in your app to get all the relationships for.
	// Leave as an empty string (GET /concepts/relations) to list ALL the relations in the app.
	//
	// When listing all the relations it will only return one direction of the relationship
	// with the predicate acting on the subject and not the inverse like is done when providing a
	// concept_id so that we can return a reliable page size always.
	//
	// When providing a concept_id, if a hyponym is present in the DB such as:
	// 'honey' (subject), 'hyponym' (predicate for "is a kind of"), 'food' (object)
	// then you can list the concept relations for 'honey' and get hyponym predicate with 'food'
	// object.
	// But you can also list the concept relations for 'food' and it will return the same hyponym
	// relationship with 'honey' as object and 'hypernym' as predicate.
	// Synonyms by nature are symmetrical relationships so either side can be the concept_id (subject)
	// when listing the relations.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// If predicate is provided then only list relations with that predicate.
	//
	// Note that if no subject is set in concept_id and predicate is set to
	// 'hypernym', then it will return any stored hyponyms as hypernyms with
	// just the subject and object swapped since they are reversed relations.
	//
	// Valid predicates are:
	// - 'hypernym'
	// - 'hyponym'
	// - 'synonym'
	Predicate string `protobuf:"bytes,3,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// If knowledge_graph_id is provided then just list relations from that knowledge graph.
	// If not provided then list relations from all knowledge graphs including the global one for this
	// app one (ie. knowledge_graph "") and any specific ones in the app.
	KnowledgeGraphId string `protobuf:"bytes,4,opt,name=knowledge_graph_id,json=knowledgeGraphId,proto3" json:"knowledge_graph_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,6,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListConceptRelationsRequest) Reset() {
	*x = ListConceptRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptRelationsRequest) ProtoMessage() {}

func (x *ListConceptRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptRelationsRequest.ProtoReflect.Descriptor instead.
func (*ListConceptRelationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{47}
}

func (x *ListConceptRelationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptRelationsRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *ListConceptRelationsRequest) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *ListConceptRelationsRequest) GetKnowledgeGraphId() string {
	if x != nil {
		return x.KnowledgeGraphId
	}
	return ""
}

func (x *ListConceptRelationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptRelationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// POST new concept relations
type PostConceptRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The subject concept id you're going to add relations for.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// The relationships you're going to add.
	ConceptRelations []*ConceptRelation `protobuf:"bytes,3,rep,name=concept_relations,json=conceptRelations,proto3" json:"concept_relations,omitempty"`
}

func (x *PostConceptRelationsRequest) Reset() {
	*x = PostConceptRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptRelationsRequest) ProtoMessage() {}

func (x *PostConceptRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptRelationsRequest.ProtoReflect.Descriptor instead.
func (*PostConceptRelationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{48}
}

func (x *PostConceptRelationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptRelationsRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *PostConceptRelationsRequest) GetConceptRelations() []*ConceptRelation {
	if x != nil {
		return x.ConceptRelations
	}
	return nil
}

// DELETE concept relations
type DeleteConceptRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept to delete relationship for.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// The concept relationship ids to delete.
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteConceptRelationsRequest) Reset() {
	*x = DeleteConceptRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConceptRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConceptRelationsRequest) ProtoMessage() {}

func (x *DeleteConceptRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConceptRelationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteConceptRelationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteConceptRelationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteConceptRelationsRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *DeleteConceptRelationsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// GET all knowledge graphs
type ListKnowledgeGraphsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListKnowledgeGraphsRequest) Reset() {
	*x = ListKnowledgeGraphsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKnowledgeGraphsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeGraphsRequest) ProtoMessage() {}

func (x *ListKnowledgeGraphsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeGraphsRequest.ProtoReflect.Descriptor instead.
func (*ListKnowledgeGraphsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{50}
}

func (x *ListKnowledgeGraphsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// POST new knowledge graphs
type PostKnowledgeGraphsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId       *UserAppIDSet     `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	KnowledgeGraphs []*KnowledgeGraph `protobuf:"bytes,2,rep,name=knowledge_graphs,json=knowledgeGraphs,proto3" json:"knowledge_graphs,omitempty"`
}

func (x *PostKnowledgeGraphsRequest) Reset() {
	*x = PostKnowledgeGraphsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostKnowledgeGraphsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostKnowledgeGraphsRequest) ProtoMessage() {}

func (x *PostKnowledgeGraphsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostKnowledgeGraphsRequest.ProtoReflect.Descriptor instead.
func (*PostKnowledgeGraphsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{51}
}

func (x *PostKnowledgeGraphsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostKnowledgeGraphsRequest) GetKnowledgeGraphs() []*KnowledgeGraph {
	if x != nil {
		return x.KnowledgeGraphs
	}
	return nil
}

// Start concept mapping jobs
type PostConceptMappingJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept mapping jobs that are being started
	ConceptMappingJobs []*ConceptMappingJob `protobuf:"bytes,2,rep,name=concept_mapping_jobs,json=conceptMappingJobs,proto3" json:"concept_mapping_jobs,omitempty"`
}

func (x *PostConceptMappingJobsRequest) Reset() {
	*x = PostConceptMappingJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptMappingJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptMappingJobsRequest) ProtoMessage() {}

func (x *PostConceptMappingJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptMappingJobsRequest.ProtoReflect.Descriptor instead.
func (*PostConceptMappingJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{52}
}

func (x *PostConceptMappingJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptMappingJobsRequest) GetConceptMappingJobs() []*ConceptMappingJob {
	if x != nil {
		return x.ConceptMappingJobs
	}
	return nil
}

// MultiConceptRelationResponse
type MultiConceptRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concept relations.
	ConceptRelations []*ConceptRelation `protobuf:"bytes,2,rep,name=concept_relations,json=conceptRelations,proto3" json:"concept_relations,omitempty"`
}

func (x *MultiConceptRelationResponse) Reset() {
	*x = MultiConceptRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptRelationResponse) ProtoMessage() {}

func (x *MultiConceptRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptRelationResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptRelationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{53}
}

func (x *MultiConceptRelationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptRelationResponse) GetConceptRelations() []*ConceptRelation {
	if x != nil {
		return x.ConceptRelations
	}
	return nil
}

// MultiKnowledgeGraphResponse
type MultiKnowledgeGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned knowledge graphs.
	KnowledgeGraphs []*KnowledgeGraph `protobuf:"bytes,2,rep,name=knowledge_graphs,json=knowledgeGraphs,proto3" json:"knowledge_graphs,omitempty"`
}

func (x *MultiKnowledgeGraphResponse) Reset() {
	*x = MultiKnowledgeGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiKnowledgeGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiKnowledgeGraphResponse) ProtoMessage() {}

func (x *MultiKnowledgeGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiKnowledgeGraphResponse.ProtoReflect.Descriptor instead.
func (*MultiKnowledgeGraphResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{54}
}

func (x *MultiKnowledgeGraphResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiKnowledgeGraphResponse) GetKnowledgeGraphs() []*KnowledgeGraph {
	if x != nil {
		return x.KnowledgeGraphs
	}
	return nil
}

// MultiConceptMappingJobResponse
type MultiConceptMappingJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The ids of the concept mapping jobs underway.
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MultiConceptMappingJobResponse) Reset() {
	*x = MultiConceptMappingJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptMappingJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptMappingJobResponse) ProtoMessage() {}

func (x *MultiConceptMappingJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptMappingJobResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptMappingJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{55}
}

func (x *MultiConceptMappingJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptMappingJobResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// GET single concept language for the given concept.
type GetConceptLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId string        `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// This is the language identifier.
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetConceptLanguageRequest) Reset() {
	*x = GetConceptLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptLanguageRequest) ProtoMessage() {}

func (x *GetConceptLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetConceptLanguageRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{56}
}

func (x *GetConceptLanguageRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetConceptLanguageRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *GetConceptLanguageRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// List multiple concept languages for the given concept.
type ListConceptLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId string        `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListConceptLanguagesRequest) Reset() {
	*x = ListConceptLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptLanguagesRequest) ProtoMessage() {}

func (x *ListConceptLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptLanguagesRequest.ProtoReflect.Descriptor instead.
func (*ListConceptLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{57}
}

func (x *ListConceptLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptLanguagesRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *ListConceptLanguagesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptLanguagesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PATCH multiple concept languages for the given concept.
type PatchConceptLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId        *UserAppIDSet      `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId        string             `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	ConceptLanguages []*ConceptLanguage `protobuf:"bytes,3,rep,name=concept_languages,json=conceptLanguages,proto3" json:"concept_languages,omitempty"`
	// The action to perform with the objects in the PATCH.
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchConceptLanguagesRequest) Reset() {
	*x = PatchConceptLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchConceptLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchConceptLanguagesRequest) ProtoMessage() {}

func (x *PatchConceptLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchConceptLanguagesRequest.ProtoReflect.Descriptor instead.
func (*PatchConceptLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{58}
}

func (x *PatchConceptLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchConceptLanguagesRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *PatchConceptLanguagesRequest) GetConceptLanguages() []*ConceptLanguage {
	if x != nil {
		return x.ConceptLanguages
	}
	return nil
}

func (x *PatchConceptLanguagesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// POST multiple concept languages for the given concept.
type PostConceptLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId        *UserAppIDSet      `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId        string             `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	ConceptLanguages []*ConceptLanguage `protobuf:"bytes,3,rep,name=concept_languages,json=conceptLanguages,proto3" json:"concept_languages,omitempty"`
}

func (x *PostConceptLanguagesRequest) Reset() {
	*x = PostConceptLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptLanguagesRequest) ProtoMessage() {}

func (x *PostConceptLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptLanguagesRequest.ProtoReflect.Descriptor instead.
func (*PostConceptLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{59}
}

func (x *PostConceptLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptLanguagesRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *PostConceptLanguagesRequest) GetConceptLanguages() []*ConceptLanguage {
	if x != nil {
		return x.ConceptLanguages
	}
	return nil
}

// SingleConceptLanguageResponse
type SingleConceptLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ConceptLanguage *ConceptLanguage `protobuf:"bytes,2,opt,name=concept_language,json=conceptLanguage,proto3" json:"concept_language,omitempty"`
}

func (x *SingleConceptLanguageResponse) Reset() {
	*x = SingleConceptLanguageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptLanguageResponse) ProtoMessage() {}

func (x *SingleConceptLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptLanguageResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptLanguageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{60}
}

func (x *SingleConceptLanguageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptLanguageResponse) GetConceptLanguage() *ConceptLanguage {
	if x != nil {
		return x.ConceptLanguage
	}
	return nil
}

// MultiConceptLanguageResponse
type MultiConceptLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ConceptLanguages []*ConceptLanguage `protobuf:"bytes,2,rep,name=concept_languages,json=conceptLanguages,proto3" json:"concept_languages,omitempty"`
}

func (x *MultiConceptLanguageResponse) Reset() {
	*x = MultiConceptLanguageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptLanguageResponse) ProtoMessage() {}

func (x *MultiConceptLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptLanguageResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptLanguageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{61}
}

func (x *MultiConceptLanguageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptLanguageResponse) GetConceptLanguages() []*ConceptLanguage {
	if x != nil {
		return x.ConceptLanguages
	}
	return nil
}

// GetInputRequest
type GetInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputId   string        `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *GetInputRequest) Reset() {
	*x = GetInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputRequest) ProtoMessage() {}

func (x *GetInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputRequest.ProtoReflect.Descriptor instead.
func (*GetInputRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{62}
}

func (x *GetInputRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInputRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

type GetVideoManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputId   string        `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *GetVideoManifestRequest) Reset() {
	*x = GetVideoManifestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoManifestRequest) ProtoMessage() {}

func (x *GetVideoManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoManifestRequest.ProtoReflect.Descriptor instead.
func (*GetVideoManifestRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{63}
}

func (x *GetVideoManifestRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetVideoManifestRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// GetInputSamplesRequest
type GetInputSamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// URL param. If zero ids provided, returns for all task labelers
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GetInputSamplesRequest) Reset() {
	*x = GetInputSamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputSamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputSamplesRequest) ProtoMessage() {}

func (x *GetInputSamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputSamplesRequest.ProtoReflect.Descriptor instead.
func (*GetInputSamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{64}
}

func (x *GetInputSamplesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInputSamplesRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetInputSamplesRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// ListInputsRequest
type ListInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Set status to filter by status
	Status *status.Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Ids    []string       `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListInputsRequest) Reset() {
	*x = ListInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInputsRequest) ProtoMessage() {}

func (x *ListInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInputsRequest.ProtoReflect.Descriptor instead.
func (*ListInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{65}
}

func (x *ListInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListInputsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListInputsRequest) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListInputsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// StreamInputsRequest
type StreamInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	LastId  string `protobuf:"bytes,3,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	// By default, the endpoint return inputs by the time when it is added.
	// If this is set to true, we will return inputs by id.
	OrderById  bool `protobuf:"varint,5,opt,name=order_by_id,json=orderById,proto3" json:"order_by_id,omitempty"`
	Descending bool `protobuf:"varint,4,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *StreamInputsRequest) Reset() {
	*x = StreamInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInputsRequest) ProtoMessage() {}

func (x *StreamInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInputsRequest.ProtoReflect.Descriptor instead.
func (*StreamInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{66}
}

func (x *StreamInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *StreamInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *StreamInputsRequest) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

func (x *StreamInputsRequest) GetOrderById() bool {
	if x != nil {
		return x.OrderById
	}
	return false
}

func (x *StreamInputsRequest) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

// PostInputsRequest
type PostInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of inputs to post.
	// For each input, the following fields are used:
	// * id
	// * data
	// * dataset_ids
	Inputs []*Input `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Collect statistics about created inputs in job with given ID.
	// * If job ID is empty, then job is not created.
	// * If job ID is non-empty and doesn't already exist, then a new job will be created with given ID.
	// * If job ID does already exist, then new inputs statistics are merged with previous inputs statistics.
	InputsAddJobId string `protobuf:"bytes,3,opt,name=inputs_add_job_id,json=inputsAddJobId,proto3" json:"inputs_add_job_id,omitempty"`
	// How to handle input ID conflicts.
	InputIdConflictResolution InputIDConflictResolution `protobuf:"varint,4,opt,name=input_id_conflict_resolution,json=inputIdConflictResolution,proto3,enum=clarifai.api.InputIDConflictResolution" json:"input_id_conflict_resolution,omitempty"`
}

func (x *PostInputsRequest) Reset() {
	*x = PostInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsRequest) ProtoMessage() {}

func (x *PostInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsRequest.ProtoReflect.Descriptor instead.
func (*PostInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{67}
}

func (x *PostInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PostInputsRequest) GetInputsAddJobId() string {
	if x != nil {
		return x.InputsAddJobId
	}
	return ""
}

func (x *PostInputsRequest) GetInputIdConflictResolution() InputIDConflictResolution {
	if x != nil {
		return x.InputIdConflictResolution
	}
	return InputIDConflictResolution_INPUT_ID_CONFLICT_RESOLUTION_NOT_SET
}

// PatchInputsRequest
type PatchInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of inputs to patch.
	// Inputs are identified by id field.
	// For each input, the following fields are patchable:
	// * data
	Inputs []*Input `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchInputsRequest) Reset() {
	*x = PatchInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInputsRequest) ProtoMessage() {}

func (x *PatchInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInputsRequest.ProtoReflect.Descriptor instead.
func (*PatchInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{68}
}

func (x *PatchInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchInputsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PatchInputsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteInputRequest
type DeleteInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputId   string        `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *DeleteInputRequest) Reset() {
	*x = DeleteInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInputRequest) ProtoMessage() {}

func (x *DeleteInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInputRequest.ProtoReflect.Descriptor instead.
func (*DeleteInputRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteInputRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteInputRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteInputsRequest) Reset() {
	*x = DeleteInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInputsRequest) ProtoMessage() {}

func (x *DeleteInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInputsRequest.ProtoReflect.Descriptor instead.
func (*DeleteInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteInputsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleInputResponse
type SingleInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Input  *Input         `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *SingleInputResponse) Reset() {
	*x = SingleInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInputResponse) ProtoMessage() {}

func (x *SingleInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInputResponse.ProtoReflect.Descriptor instead.
func (*SingleInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{71}
}

func (x *SingleInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInputResponse) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetVideoManifestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// MPEG-dash manifest as data-URI, base64-encoded
	// Can be empty if status is FAILED
	// Can be fallback manifest if status is MIXED_STATUS
	ManifestUrl string `protobuf:"bytes,2,opt,name=manifest_url,json=manifestUrl,proto3" json:"manifest_url,omitempty"`
}

func (x *GetVideoManifestResponse) Reset() {
	*x = GetVideoManifestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoManifestResponse) ProtoMessage() {}

func (x *GetVideoManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoManifestResponse.ProtoReflect.Descriptor instead.
func (*GetVideoManifestResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{72}
}

func (x *GetVideoManifestResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetVideoManifestResponse) GetManifestUrl() string {
	if x != nil {
		return x.ManifestUrl
	}
	return ""
}

// MultiInputResponse
type MultiInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Inputs       []*Input       `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	InputsAddJob *InputsAddJob  `protobuf:"bytes,3,opt,name=inputs_add_job,json=inputsAddJob,proto3" json:"inputs_add_job,omitempty"`
}

func (x *MultiInputResponse) Reset() {
	*x = MultiInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInputResponse) ProtoMessage() {}

func (x *MultiInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInputResponse.ProtoReflect.Descriptor instead.
func (*MultiInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{73}
}

func (x *MultiInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInputResponse) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *MultiInputResponse) GetInputsAddJob() *InputsAddJob {
	if x != nil {
		return x.InputsAddJob
	}
	return nil
}

// MultiInputAnnotationResponse
type MultiInputAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Hits   []*Hit         `protobuf:"bytes,3,rep,name=hits,proto3" json:"hits,omitempty"`
}

func (x *MultiInputAnnotationResponse) Reset() {
	*x = MultiInputAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInputAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInputAnnotationResponse) ProtoMessage() {}

func (x *MultiInputAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInputAnnotationResponse.ProtoReflect.Descriptor instead.
func (*MultiInputAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{74}
}

func (x *MultiInputAnnotationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInputAnnotationResponse) GetHits() []*Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

// SingleInputCountResponse
type SingleInputCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Counts *InputCount    `protobuf:"bytes,2,opt,name=counts,proto3" json:"counts,omitempty"`
}

func (x *SingleInputCountResponse) Reset() {
	*x = SingleInputCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInputCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInputCountResponse) ProtoMessage() {}

func (x *SingleInputCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInputCountResponse.ProtoReflect.Descriptor instead.
func (*SingleInputCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{75}
}

func (x *SingleInputCountResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInputCountResponse) GetCounts() *InputCount {
	if x != nil {
		return x.Counts
	}
	return nil
}

// GetInputCountRequest
type GetInputCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetInputCountRequest) Reset() {
	*x = GetInputCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputCountRequest) ProtoMessage() {}

func (x *GetInputCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputCountRequest.ProtoReflect.Descriptor instead.
func (*GetInputCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{76}
}

func (x *GetInputCountRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// ListDatasetsRequest
type ListDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage          uint32   `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	AdditionalFields []string `protobuf:"bytes,5,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,6,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//
	//	*ListDatasetsRequest_SortByCreatedAt
	//	*ListDatasetsRequest_SortByStarCount
	//	*ListDatasetsRequest_SortByModifiedAt
	//	*ListDatasetsRequest_SortById
	SortBy isListDatasetsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	StarredOnly bool `protobuf:"varint,4,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// Filter datasets by bookmark. If set, only return bookmarked datasets. Otherwise none bookmarked datasets only.
	Bookmark bool `protobuf:"varint,10,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	// Searching options:
	// Specify a search parameter in order to perform keyword search on the
	// following fields of the dataset:
	//   - id
	//   - description
	//   - notes
	//   - user_id (unless user_app_id.user_id is already set)
	//
	// Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
	// and used for partial prefix-matching (so searching for "clari" matches "clarifai").
	//
	// NOTE: Both the list of fields searched and the exact keyword matching
	// rules are subject to change and not guaranteed to be backwards-compatible.
	Search string `protobuf:"bytes,13,opt,name=search,proto3" json:"search,omitempty"`
	// Fuzzy filter on dataset ID
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Id string `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListDatasetsRequest) Reset() {
	*x = ListDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetsRequest) ProtoMessage() {}

func (x *ListDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{77}
}

func (x *ListDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListDatasetsRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListDatasetsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListDatasetsRequest) GetSortBy() isListDatasetsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListDatasetsRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListDatasetsRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

func (x *ListDatasetsRequest) GetSortByStarCount() bool {
	if x, ok := x.GetSortBy().(*ListDatasetsRequest_SortByStarCount); ok {
		return x.SortByStarCount
	}
	return false
}

func (x *ListDatasetsRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListDatasetsRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListDatasetsRequest) GetSortById() bool {
	if x, ok := x.GetSortBy().(*ListDatasetsRequest_SortById); ok {
		return x.SortById
	}
	return false
}

func (x *ListDatasetsRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListDatasetsRequest) GetBookmark() bool {
	if x != nil {
		return x.Bookmark
	}
	return false
}

func (x *ListDatasetsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListDatasetsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isListDatasetsRequest_SortBy interface {
	isListDatasetsRequest_SortBy()
}

type ListDatasetsRequest_SortByCreatedAt struct {
	// Whether to order by the created_at time.
	SortByCreatedAt bool `protobuf:"varint,7,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

type ListDatasetsRequest_SortByStarCount struct {
	// Whether to order by the number of users stared the app
	SortByStarCount bool `protobuf:"varint,8,opt,name=sort_by_star_count,json=sortByStarCount,proto3,oneof"`
}

type ListDatasetsRequest_SortByModifiedAt struct {
	// If neither sort option is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,9,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

type ListDatasetsRequest_SortById struct {
	// Whether to order by the external id
	SortById bool `protobuf:"varint,11,opt,name=sort_by_id,json=sortById,proto3,oneof"`
}

func (*ListDatasetsRequest_SortByCreatedAt) isListDatasetsRequest_SortBy() {}

func (*ListDatasetsRequest_SortByStarCount) isListDatasetsRequest_SortBy() {}

func (*ListDatasetsRequest_SortByModifiedAt) isListDatasetsRequest_SortBy() {}

func (*ListDatasetsRequest_SortById) isListDatasetsRequest_SortBy() {}

// GetDatasetRequest
type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId        string   `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	AdditionalFields []string `protobuf:"bytes,3,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{78}
}

func (x *GetDatasetRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetDatasetRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// Request to add one or more datasets.
type PostDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of datasets that are requested to be added.
	Datasets []*Dataset `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *PostDatasetsRequest) Reset() {
	*x = PostDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDatasetsRequest) ProtoMessage() {}

func (x *PostDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDatasetsRequest.ProtoReflect.Descriptor instead.
func (*PostDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{79}
}

func (x *PostDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostDatasetsRequest) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

// Request to patch several datasets.
type PatchDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of datasets that are requested to be updated.
	Datasets []*Dataset `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
	// The action to perform on the patched objects
	// Supported values: 'overwrite', 'merge', and 'remove'.
	//
	// Note that 'remove' can only be used to remove the dataset image by setting
	// 'image.url' in the request to the current value returned for that dataset.
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchDatasetsRequest) Reset() {
	*x = PatchDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDatasetsRequest) ProtoMessage() {}

func (x *PatchDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDatasetsRequest.ProtoReflect.Descriptor instead.
func (*PatchDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{80}
}

func (x *PatchDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchDatasetsRequest) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *PatchDatasetsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several datasets by list of ids.
type DeleteDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	DatasetIds []string      `protobuf:"bytes,2,rep,name=dataset_ids,json=datasetIds,proto3" json:"dataset_ids,omitempty"`
}

func (x *DeleteDatasetsRequest) Reset() {
	*x = DeleteDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetsRequest) ProtoMessage() {}

func (x *DeleteDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteDatasetsRequest) GetDatasetIds() []string {
	if x != nil {
		return x.DatasetIds
	}
	return nil
}

// MultiDatasetResponse
type MultiDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Datasets []*Dataset     `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *MultiDatasetResponse) Reset() {
	*x = MultiDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetResponse) ProtoMessage() {}

func (x *MultiDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{82}
}

func (x *MultiDatasetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetResponse) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

// SingleDatasetResponse
type SingleDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Dataset *Dataset       `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *SingleDatasetResponse) Reset() {
	*x = SingleDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetResponse) ProtoMessage() {}

func (x *SingleDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetResponse.ProtoReflect.Descriptor instead.
func (*SingleDatasetResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{83}
}

func (x *SingleDatasetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleDatasetResponse) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

// ListDatasetInputsRequest
type ListDatasetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListDatasetInputsRequest) Reset() {
	*x = ListDatasetInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetInputsRequest) ProtoMessage() {}

func (x *ListDatasetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetInputsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{84}
}

func (x *ListDatasetInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetInputsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListDatasetInputsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetDatasetInputRequest
type GetDatasetInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset input by id.
	InputId string `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *GetDatasetInputRequest) Reset() {
	*x = GetDatasetInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetInputRequest) ProtoMessage() {}

func (x *GetDatasetInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetInputRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetInputRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{85}
}

func (x *GetDatasetInputRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetDatasetInputRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetDatasetInputRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// Request to add one or more datasets.
type PostDatasetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// List of inputs that are requested to be added to this dataset.
	// Identify each input by id field. All other inputs fields are ignored.
	DatasetInputs []*DatasetInput `protobuf:"bytes,3,rep,name=dataset_inputs,json=datasetInputs,proto3" json:"dataset_inputs,omitempty"`
	// Query to search inputs to be added to this dataset.
	Search *Search `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *PostDatasetInputsRequest) Reset() {
	*x = PostDatasetInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostDatasetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDatasetInputsRequest) ProtoMessage() {}

func (x *PostDatasetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDatasetInputsRequest.ProtoReflect.Descriptor instead.
func (*PostDatasetInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{86}
}

func (x *PostDatasetInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostDatasetInputsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PostDatasetInputsRequest) GetDatasetInputs() []*DatasetInput {
	if x != nil {
		return x.DatasetInputs
	}
	return nil
}

func (x *PostDatasetInputsRequest) GetSearch() *Search {
	if x != nil {
		return x.Search
	}
	return nil
}

// Request to delete several dataset inputs by list of ids.
type DeleteDatasetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Specify which inputs to delete from dataset.
	InputIds []string `protobuf:"bytes,3,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
}

func (x *DeleteDatasetInputsRequest) Reset() {
	*x = DeleteDatasetInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetInputsRequest) ProtoMessage() {}

func (x *DeleteDatasetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetInputsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{87}
}

func (x *DeleteDatasetInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteDatasetInputsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DeleteDatasetInputsRequest) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

// MultiDatasetInputResponse
type MultiDatasetInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetInputs []*DatasetInput `protobuf:"bytes,2,rep,name=dataset_inputs,json=datasetInputs,proto3" json:"dataset_inputs,omitempty"`
	BulkOperation *BulkOperation  `protobuf:"bytes,4,opt,name=bulk_operation,json=bulkOperation,proto3" json:"bulk_operation,omitempty"`
}

func (x *MultiDatasetInputResponse) Reset() {
	*x = MultiDatasetInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetInputResponse) ProtoMessage() {}

func (x *MultiDatasetInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetInputResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{88}
}

func (x *MultiDatasetInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetInputResponse) GetDatasetInputs() []*DatasetInput {
	if x != nil {
		return x.DatasetInputs
	}
	return nil
}

func (x *MultiDatasetInputResponse) GetBulkOperation() *BulkOperation {
	if x != nil {
		return x.BulkOperation
	}
	return nil
}

// SingleDatasetInputResponse
type SingleDatasetInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetInput *DatasetInput  `protobuf:"bytes,2,opt,name=dataset_input,json=datasetInput,proto3" json:"dataset_input,omitempty"`
}

func (x *SingleDatasetInputResponse) Reset() {
	*x = SingleDatasetInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetInputResponse) ProtoMessage() {}

func (x *SingleDatasetInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetInputResponse.ProtoReflect.Descriptor instead.
func (*SingleDatasetInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{89}
}

func (x *SingleDatasetInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleDatasetInputResponse) GetDatasetInput() *DatasetInput {
	if x != nil {
		return x.DatasetInput
	}
	return nil
}

// ListDatasetVersionsRequest
type ListDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListDatasetVersionsRequest) Reset() {
	*x = ListDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetVersionsRequest) ProtoMessage() {}

func (x *ListDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{90}
}

func (x *ListDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListDatasetVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetDatasetVersionRequest
type GetDatasetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset version by id.
	DatasetVersionId string `protobuf:"bytes,3,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
}

func (x *GetDatasetVersionRequest) Reset() {
	*x = GetDatasetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetVersionRequest) ProtoMessage() {}

func (x *GetDatasetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{91}
}

func (x *GetDatasetVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetDatasetVersionRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetDatasetVersionRequest) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

// ListDatasetVersionMetricsGroupsRequest
type ListDatasetVersionMetricsGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset version by id.
	DatasetVersionId string `protobuf:"bytes,3,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Filter by parent path. Multiple parent paths are OR-ed. Empty list results in no filter.
	ParentPaths []string `protobuf:"bytes,6,rep,name=parent_paths,json=parentPaths,proto3" json:"parent_paths,omitempty"`
	// Filter by parent type. Multiple types are OR-ed. Empty list results in no filter.
	Types []DatasetVersionMetricsGroupType `protobuf:"varint,7,rep,packed,name=types,proto3,enum=clarifai.api.DatasetVersionMetricsGroupType" json:"types,omitempty"`
	// Filter by value. Multiple values are OR-ed. Empty list results in no filter.
	Values []*structpb.Value `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListDatasetVersionMetricsGroupsRequest) Reset() {
	*x = ListDatasetVersionMetricsGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetVersionMetricsGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetVersionMetricsGroupsRequest) ProtoMessage() {}

func (x *ListDatasetVersionMetricsGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetVersionMetricsGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetVersionMetricsGroupsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{92}
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetParentPaths() []string {
	if x != nil {
		return x.ParentPaths
	}
	return nil
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetTypes() []DatasetVersionMetricsGroupType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetValues() []*structpb.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// Request to add one or more dataset versions.
type PostDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// List of dataset versions that are requested to be added.
	DatasetVersions []*DatasetVersion `protobuf:"bytes,3,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
}

func (x *PostDatasetVersionsRequest) Reset() {
	*x = PostDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDatasetVersionsRequest) ProtoMessage() {}

func (x *PostDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{93}
}

func (x *PostDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PostDatasetVersionsRequest) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

// Request to patch several dataset versions.
type PatchDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// List of dataset versions that are requested to be updated.
	DatasetVersions []*DatasetVersion `protobuf:"bytes,3,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
	// The action to perform on the patched objects
	// For now, only 'overwrite' action is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchDatasetVersionsRequest) Reset() {
	*x = PatchDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDatasetVersionsRequest) ProtoMessage() {}

func (x *PatchDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*PatchDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{94}
}

func (x *PatchDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PatchDatasetVersionsRequest) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

func (x *PatchDatasetVersionsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several dataset versions by list of ids.
type DeleteDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId         string   `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetVersionIds []string `protobuf:"bytes,3,rep,name=dataset_version_ids,json=datasetVersionIds,proto3" json:"dataset_version_ids,omitempty"`
}

func (x *DeleteDatasetVersionsRequest) Reset() {
	*x = DeleteDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersionsRequest) ProtoMessage() {}

func (x *DeleteDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{95}
}

func (x *DeleteDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DeleteDatasetVersionsRequest) GetDatasetVersionIds() []string {
	if x != nil {
		return x.DatasetVersionIds
	}
	return nil
}

// Request to create exports of a dataset version.
type PutDatasetVersionExportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset version by id.
	DatasetVersionId string `protobuf:"bytes,3,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	// exports is the list of requested dataset version exports.
	// Only setting the 'format' field of the export is supported.
	Exports []*DatasetVersionExport `protobuf:"bytes,4,rep,name=exports,proto3" json:"exports,omitempty"`
}

func (x *PutDatasetVersionExportsRequest) Reset() {
	*x = PutDatasetVersionExportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDatasetVersionExportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDatasetVersionExportsRequest) ProtoMessage() {}

func (x *PutDatasetVersionExportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDatasetVersionExportsRequest.ProtoReflect.Descriptor instead.
func (*PutDatasetVersionExportsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{96}
}

func (x *PutDatasetVersionExportsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutDatasetVersionExportsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PutDatasetVersionExportsRequest) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *PutDatasetVersionExportsRequest) GetExports() []*DatasetVersionExport {
	if x != nil {
		return x.Exports
	}
	return nil
}

type MultiDatasetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetVersions []*DatasetVersion `protobuf:"bytes,2,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
}

func (x *MultiDatasetVersionResponse) Reset() {
	*x = MultiDatasetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetVersionResponse) ProtoMessage() {}

func (x *MultiDatasetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{97}
}

func (x *MultiDatasetVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetVersionResponse) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

type MultiDatasetVersionExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Exports []*DatasetVersionExport `protobuf:"bytes,2,rep,name=exports,proto3" json:"exports,omitempty"`
}

func (x *MultiDatasetVersionExportResponse) Reset() {
	*x = MultiDatasetVersionExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetVersionExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetVersionExportResponse) ProtoMessage() {}

func (x *MultiDatasetVersionExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetVersionExportResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetVersionExportResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{98}
}

func (x *MultiDatasetVersionExportResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetVersionExportResponse) GetExports() []*DatasetVersionExport {
	if x != nil {
		return x.Exports
	}
	return nil
}

type MultiDatasetVersionMetricsGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                      *status.Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetVersionMetricsGroups []*DatasetVersionMetricsGroup `protobuf:"bytes,2,rep,name=dataset_version_metrics_groups,json=datasetVersionMetricsGroups,proto3" json:"dataset_version_metrics_groups,omitempty"`
}

func (x *MultiDatasetVersionMetricsGroupResponse) Reset() {
	*x = MultiDatasetVersionMetricsGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetVersionMetricsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetVersionMetricsGroupResponse) ProtoMessage() {}

func (x *MultiDatasetVersionMetricsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetVersionMetricsGroupResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetVersionMetricsGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{99}
}

func (x *MultiDatasetVersionMetricsGroupResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetVersionMetricsGroupResponse) GetDatasetVersionMetricsGroups() []*DatasetVersionMetricsGroup {
	if x != nil {
		return x.DatasetVersionMetricsGroups
	}
	return nil
}

type SingleDatasetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetVersion *DatasetVersion `protobuf:"bytes,2,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *SingleDatasetVersionResponse) Reset() {
	*x = SingleDatasetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetVersionResponse) ProtoMessage() {}

func (x *SingleDatasetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleDatasetVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{100}
}

func (x *SingleDatasetVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleDatasetVersionResponse) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

// //////////////////////////////////////////////////
// Model prediction related stuff needs inputs and produces outputs.
// //////////////////////////////////////////////////
// Model prediction.
type PostModelOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Inputs    []*Input      `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// This allows you to specify config options for the model such as
	// the language which appear's in the model's output_info.
	Model *Model `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *PostModelOutputsRequest) Reset() {
	*x = PostModelOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelOutputsRequest) ProtoMessage() {}

func (x *PostModelOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelOutputsRequest.ProtoReflect.Descriptor instead.
func (*PostModelOutputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{101}
}

func (x *PostModelOutputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelOutputsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelOutputsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostModelOutputsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PostModelOutputsRequest) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

// Listing the inputs that went into training this model.
type ListModelInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelInputsRequest) Reset() {
	*x = ListModelInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelInputsRequest) ProtoMessage() {}

func (x *ListModelInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelInputsRequest.ProtoReflect.Descriptor instead.
func (*ListModelInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{102}
}

func (x *ListModelInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelInputsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelInputsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ListModelInputsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetKeyRequest
type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	KeyId     string        `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{103}
}

func (x *GetKeyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

// ListKeysRequest
type ListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage    uint32   `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	NotExpired bool     `protobuf:"varint,4,opt,name=not_expired,json=notExpired,proto3" json:"not_expired,omitempty"`
	Scopes     []string `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Endpoints  []string `protobuf:"bytes,6,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{104}
}

func (x *ListKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListKeysRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKeysRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListKeysRequest) GetNotExpired() bool {
	if x != nil {
		return x.NotExpired
	}
	return false
}

func (x *ListKeysRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ListKeysRequest) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// ListAppKeysRequest
type ListAppKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListAppKeysRequest) Reset() {
	*x = ListAppKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppKeysRequest) ProtoMessage() {}

func (x *ListAppKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppKeysRequest.ProtoReflect.Descriptor instead.
func (*ListAppKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{105}
}

func (x *ListAppKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAppKeysRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAppKeysRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostKeysRequest
type PostKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Keys      []*Key        `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *PostKeysRequest) Reset() {
	*x = PostKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostKeysRequest) ProtoMessage() {}

func (x *PostKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostKeysRequest.ProtoReflect.Descriptor instead.
func (*PostKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{106}
}

func (x *PostKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostKeysRequest) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

// DeleteKeyRequest
type DeleteKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	KeyId     string        `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *DeleteKeyRequest) Reset() {
	*x = DeleteKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyRequest) ProtoMessage() {}

func (x *DeleteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{107}
}

func (x *DeleteKeyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

// PatchKeysRequest
type PatchKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Keys      []*Key        `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// The action to perform on the patched objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchKeysRequest) Reset() {
	*x = PatchKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchKeysRequest) ProtoMessage() {}

func (x *PatchKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchKeysRequest.ProtoReflect.Descriptor instead.
func (*PatchKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{108}
}

func (x *PatchKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchKeysRequest) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PatchKeysRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// SingleKeyResponse
type SingleKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Key    *Key           `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SingleKeyResponse) Reset() {
	*x = SingleKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleKeyResponse) ProtoMessage() {}

func (x *SingleKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleKeyResponse.ProtoReflect.Descriptor instead.
func (*SingleKeyResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{109}
}

func (x *SingleKeyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleKeyResponse) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

// MultiKeyResponse
type MultiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Keys   []*Key         `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *MultiKeyResponse) Reset() {
	*x = MultiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiKeyResponse) ProtoMessage() {}

func (x *MultiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiKeyResponse.ProtoReflect.Descriptor instead.
func (*MultiKeyResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{110}
}

func (x *MultiKeyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiKeyResponse) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

// GetModelRequest
type GetModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// This is included so that we can re-use this request for multiple
	// rpcs with and without the version_id.
	VersionId     string `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Language      string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	TrainedBefore bool   `protobuf:"varint,5,opt,name=trained_before,json=trainedBefore,proto3" json:"trained_before,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets
	AdditionalFields []string `protobuf:"bytes,19,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetModelRequest) Reset() {
	*x = GetModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelRequest) ProtoMessage() {}

func (x *GetModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelRequest.ProtoReflect.Descriptor instead.
func (*GetModelRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{111}
}

func (x *GetModelRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GetModelRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetModelRequest) GetTrainedBefore() bool {
	if x != nil {
		return x.TrainedBefore
	}
	return false
}

func (x *GetModelRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// ListModelsRequest
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets
	AdditionalFields []string `protobuf:"bytes,19,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,10,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//
	//	*ListModelsRequest_SortByName
	//	*ListModelsRequest_SortByNumInputs
	//	*ListModelsRequest_SortByModifiedAt
	//	*ListModelsRequest_SortByCreatedAt
	//	*ListModelsRequest_SortByStarCount
	SortBy isListModelsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	// Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
	// supported.
	ModelTypeId string `protobuf:"bytes,6,opt,name=model_type_id,json=modelTypeId,proto3" json:"model_type_id,omitempty"`
	// If true, we only return models that have the status MODEL_TRAINED, which includes non-trainable model types.
	TrainedOnly bool `protobuf:"varint,7,opt,name=trained_only,json=trainedOnly,proto3" json:"trained_only,omitempty"`
	// The list of input fields to the model.
	// For example, you can specify 'image', which will return models that make inferences on images like visual-classifier models.
	InputFields []string `protobuf:"bytes,8,rep,name=input_fields,json=inputFields,proto3" json:"input_fields,omitempty"`
	// The list of output fields to the model.
	// For example, you can specify 'regions[...].data.concepts', which will return visual-detector models.
	OutputFields []string `protobuf:"bytes,9,rep,name=output_fields,json=outputFields,proto3" json:"output_fields,omitempty"`
	// Filter by the license of the model version
	License string `protobuf:"bytes,15,opt,name=license,proto3" json:"license,omitempty"`
	// If true, we only return models that are handpicked by clarifai staff
	FeaturedOnly bool `protobuf:"varint,16,opt,name=featured_only,json=featuredOnly,proto3" json:"featured_only,omitempty"`
	// If true, we only return models that are starred by the requesting user
	StarredOnly bool `protobuf:"varint,20,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// List of toolkit tags to filter by
	Toolkits []string `protobuf:"bytes,17,rep,name=toolkits,proto3" json:"toolkits,omitempty"`
	// List of use_case tags to filter by
	UseCases []string `protobuf:"bytes,18,rep,name=use_cases,json=useCases,proto3" json:"use_cases,omitempty"`
	// List of language tags to filter by
	Languages []string `protobuf:"bytes,21,rep,name=languages,proto3" json:"languages,omitempty"`
	// Old API behavior resulted in returning clarifai main models when calling ListModels while scoped to an app. While we transition
	// away from that, we can use this flag to not always fetch clarifai main models, unless that is the app we are explicitly listing for.
	DontFetchFromMain bool `protobuf:"varint,23,opt,name=dont_fetch_from_main,json=dontFetchFromMain,proto3" json:"dont_fetch_from_main,omitempty"`
	// Filter models by bookmark. If set, only return bookmarked models. Otherwise none bookmarked models only.
	// Note: you can not filter `trained_only` and bookmark at the same time.
	// When filter by bookmark, we will return trained and untrained models.
	Bookmark bool `protobuf:"varint,26,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	// Searching options:
	// Specify a search parameter in order to perform keyword search on the
	// following fields of the model:
	//   - id
	//   - name
	//   - description
	//   - notes
	//   - user_id (unless user_app_id.user_id is already set)
	//
	// Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
	// and used for partial prefix-matching (so searching for "clari" matches "clarifai").
	//
	// NOTE: Both the list of fields searched and the exact keyword matching
	// rules are subject to change and not guaranteed to be backwards-compatible.
	Search string `protobuf:"bytes,27,opt,name=search,proto3" json:"search,omitempty"`
	// Query name, description and id fields, that can contain the words in the query string. Does NOT support wildcards - full words only. Supports operators "OR" and "-" as NOT.
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Query string `protobuf:"bytes,14,opt,name=query,proto3" json:"query,omitempty"`
	// Filter by the description and id of the model. This supports wildcard queries like "gen*" to match "general" as an example.
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Extends the name filter to include the user_id of the application owner that the model belongs to.
	// Deprecated: use search instead of name.
	//
	// Deprecated: Do not use.
	FilterByUserId bool `protobuf:"varint,22,opt,name=filter_by_user_id,json=filterByUserId,proto3" json:"filter_by_user_id,omitempty"`
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{112}
}

func (x *ListModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListModelsRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListModelsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListModelsRequest) GetSortBy() isListModelsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListModelsRequest) GetSortByName() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByName); ok {
		return x.SortByName
	}
	return false
}

func (x *ListModelsRequest) GetSortByNumInputs() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByNumInputs); ok {
		return x.SortByNumInputs
	}
	return false
}

func (x *ListModelsRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListModelsRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

func (x *ListModelsRequest) GetSortByStarCount() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByStarCount); ok {
		return x.SortByStarCount
	}
	return false
}

func (x *ListModelsRequest) GetModelTypeId() string {
	if x != nil {
		return x.ModelTypeId
	}
	return ""
}

func (x *ListModelsRequest) GetTrainedOnly() bool {
	if x != nil {
		return x.TrainedOnly
	}
	return false
}

func (x *ListModelsRequest) GetInputFields() []string {
	if x != nil {
		return x.InputFields
	}
	return nil
}

func (x *ListModelsRequest) GetOutputFields() []string {
	if x != nil {
		return x.OutputFields
	}
	return nil
}

func (x *ListModelsRequest) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *ListModelsRequest) GetFeaturedOnly() bool {
	if x != nil {
		return x.FeaturedOnly
	}
	return false
}

func (x *ListModelsRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListModelsRequest) GetToolkits() []string {
	if x != nil {
		return x.Toolkits
	}
	return nil
}

func (x *ListModelsRequest) GetUseCases() []string {
	if x != nil {
		return x.UseCases
	}
	return nil
}

func (x *ListModelsRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *ListModelsRequest) GetDontFetchFromMain() bool {
	if x != nil {
		return x.DontFetchFromMain
	}
	return false
}

func (x *ListModelsRequest) GetBookmark() bool {
	if x != nil {
		return x.Bookmark
	}
	return false
}

func (x *ListModelsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListModelsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListModelsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListModelsRequest) GetFilterByUserId() bool {
	if x != nil {
		return x.FilterByUserId
	}
	return false
}

type isListModelsRequest_SortBy interface {
	isListModelsRequest_SortBy()
}

type ListModelsRequest_SortByName struct {
	// Whether to order by the name
	SortByName bool `protobuf:"varint,11,opt,name=sort_by_name,json=sortByName,proto3,oneof"`
}

type ListModelsRequest_SortByNumInputs struct {
	// Whether to order by the number of training inputs
	SortByNumInputs bool `protobuf:"varint,12,opt,name=sort_by_num_inputs,json=sortByNumInputs,proto3,oneof"`
}

type ListModelsRequest_SortByModifiedAt struct {
	// Whether to order by the modified_at time of the latest model version.
	// If none of the sort options is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,13,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

type ListModelsRequest_SortByCreatedAt struct {
	// Whether to order by the created_at
	SortByCreatedAt bool `protobuf:"varint,24,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

type ListModelsRequest_SortByStarCount struct {
	// Whether to order by count of stars
	SortByStarCount bool `protobuf:"varint,25,opt,name=sort_by_star_count,json=sortByStarCount,proto3,oneof"`
}

func (*ListModelsRequest_SortByName) isListModelsRequest_SortBy() {}

func (*ListModelsRequest_SortByNumInputs) isListModelsRequest_SortBy() {}

func (*ListModelsRequest_SortByModifiedAt) isListModelsRequest_SortBy() {}

func (*ListModelsRequest_SortByCreatedAt) isListModelsRequest_SortBy() {}

func (*ListModelsRequest_SortByStarCount) isListModelsRequest_SortBy() {}

// ResourceCountRequest
type GetResourceCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetResourceCountsRequest) Reset() {
	*x = GetResourceCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceCountsRequest) ProtoMessage() {}

func (x *GetResourceCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceCountsRequest.ProtoReflect.Descriptor instead.
func (*GetResourceCountsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{113}
}

func (x *GetResourceCountsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// ResourceCountResponse
type GetResourceCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Datasets  int64          `protobuf:"varint,2,opt,name=datasets,proto3" json:"datasets,omitempty"`
	Models    int64          `protobuf:"varint,3,opt,name=models,proto3" json:"models,omitempty"`
	Workflows int64          `protobuf:"varint,4,opt,name=workflows,proto3" json:"workflows,omitempty"`
	Modules   int64          `protobuf:"varint,5,opt,name=modules,proto3" json:"modules,omitempty"`
	Inputs    int64          `protobuf:"varint,6,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *GetResourceCountsResponse) Reset() {
	*x = GetResourceCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceCountsResponse) ProtoMessage() {}

func (x *GetResourceCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceCountsResponse.ProtoReflect.Descriptor instead.
func (*GetResourceCountsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{114}
}

func (x *GetResourceCountsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetResourceCountsResponse) GetDatasets() int64 {
	if x != nil {
		return x.Datasets
	}
	return 0
}

func (x *GetResourceCountsResponse) GetModels() int64 {
	if x != nil {
		return x.Models
	}
	return 0
}

func (x *GetResourceCountsResponse) GetWorkflows() int64 {
	if x != nil {
		return x.Workflows
	}
	return 0
}

func (x *GetResourceCountsResponse) GetModules() int64 {
	if x != nil {
		return x.Modules
	}
	return 0
}

func (x *GetResourceCountsResponse) GetInputs() int64 {
	if x != nil {
		return x.Inputs
	}
	return 0
}

type PatchModelToolkitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Toolkits  []string      `protobuf:"bytes,3,rep,name=toolkits,proto3" json:"toolkits,omitempty"`
	// overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelToolkitsRequest) Reset() {
	*x = PatchModelToolkitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelToolkitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelToolkitsRequest) ProtoMessage() {}

func (x *PatchModelToolkitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelToolkitsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelToolkitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{115}
}

func (x *PatchModelToolkitsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelToolkitsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelToolkitsRequest) GetToolkits() []string {
	if x != nil {
		return x.Toolkits
	}
	return nil
}

func (x *PatchModelToolkitsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchModelCheckConsentsRequest
type PatchModelCheckConsentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// the model id
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// the consents
	CheckConsents []string `protobuf:"bytes,3,rep,name=check_consents,json=checkConsents,proto3" json:"check_consents,omitempty"`
	// overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelCheckConsentsRequest) Reset() {
	*x = PatchModelCheckConsentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelCheckConsentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelCheckConsentsRequest) ProtoMessage() {}

func (x *PatchModelCheckConsentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelCheckConsentsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelCheckConsentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{116}
}

func (x *PatchModelCheckConsentsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelCheckConsentsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelCheckConsentsRequest) GetCheckConsents() []string {
	if x != nil {
		return x.CheckConsents
	}
	return nil
}

func (x *PatchModelCheckConsentsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PatchModelUseCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Usecases  []string      `protobuf:"bytes,3,rep,name=usecases,proto3" json:"usecases,omitempty"`
	// overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelUseCasesRequest) Reset() {
	*x = PatchModelUseCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelUseCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelUseCasesRequest) ProtoMessage() {}

func (x *PatchModelUseCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelUseCasesRequest.ProtoReflect.Descriptor instead.
func (*PatchModelUseCasesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{117}
}

func (x *PatchModelUseCasesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelUseCasesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelUseCasesRequest) GetUsecases() []string {
	if x != nil {
		return x.Usecases
	}
	return nil
}

func (x *PatchModelUseCasesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PatchModelLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Languages []string      `protobuf:"bytes,3,rep,name=languages,proto3" json:"languages,omitempty"`
	// Only overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelLanguagesRequest) Reset() {
	*x = PatchModelLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelLanguagesRequest) ProtoMessage() {}

func (x *PatchModelLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelLanguagesRequest.ProtoReflect.Descriptor instead.
func (*PatchModelLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{118}
}

func (x *PatchModelLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelLanguagesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelLanguagesRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *PatchModelLanguagesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type MultiModelToolkitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Toolkits []string       `protobuf:"bytes,2,rep,name=toolkits,proto3" json:"toolkits,omitempty"`
}

func (x *MultiModelToolkitResponse) Reset() {
	*x = MultiModelToolkitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelToolkitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelToolkitResponse) ProtoMessage() {}

func (x *MultiModelToolkitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelToolkitResponse.ProtoReflect.Descriptor instead.
func (*MultiModelToolkitResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{119}
}

func (x *MultiModelToolkitResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelToolkitResponse) GetToolkits() []string {
	if x != nil {
		return x.Toolkits
	}
	return nil
}

type MultiModelCheckConsentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CheckConsents []string       `protobuf:"bytes,2,rep,name=check_consents,json=checkConsents,proto3" json:"check_consents,omitempty"`
}

func (x *MultiModelCheckConsentResponse) Reset() {
	*x = MultiModelCheckConsentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelCheckConsentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelCheckConsentResponse) ProtoMessage() {}

func (x *MultiModelCheckConsentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelCheckConsentResponse.ProtoReflect.Descriptor instead.
func (*MultiModelCheckConsentResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{120}
}

func (x *MultiModelCheckConsentResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelCheckConsentResponse) GetCheckConsents() []string {
	if x != nil {
		return x.CheckConsents
	}
	return nil
}

type MultiModelUseCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Usecases []string       `protobuf:"bytes,2,rep,name=usecases,proto3" json:"usecases,omitempty"`
}

func (x *MultiModelUseCaseResponse) Reset() {
	*x = MultiModelUseCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelUseCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelUseCaseResponse) ProtoMessage() {}

func (x *MultiModelUseCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelUseCaseResponse.ProtoReflect.Descriptor instead.
func (*MultiModelUseCaseResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{121}
}

func (x *MultiModelUseCaseResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelUseCaseResponse) GetUsecases() []string {
	if x != nil {
		return x.Usecases
	}
	return nil
}

type MultiModelLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Languages []string       `protobuf:"bytes,2,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *MultiModelLanguageResponse) Reset() {
	*x = MultiModelLanguageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelLanguageResponse) ProtoMessage() {}

func (x *MultiModelLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelLanguageResponse.ProtoReflect.Descriptor instead.
func (*MultiModelLanguageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{122}
}

func (x *MultiModelLanguageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelLanguageResponse) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

// PostModelsRequest
type PostModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// NOTE: inconsistent since "model" is not plural, please use "models" below.
	// Previously you could only create one model at a time.
	// We still support this but you should pass it as models=[model] so
	// that this endpoint is consistent with the rest of our API.
	//
	// Deprecated: Do not use.
	Model *Model `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// This allows you to create one or more model by posting it to the API.
	Models []*Model `protobuf:"bytes,3,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *PostModelsRequest) Reset() {
	*x = PostModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelsRequest) ProtoMessage() {}

func (x *PostModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelsRequest.ProtoReflect.Descriptor instead.
func (*PostModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{123}
}

func (x *PostModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// Deprecated: Do not use.
func (x *PostModelsRequest) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *PostModelsRequest) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// PatchModelsRequest
type PatchModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Models    []*Model      `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	//
	// Note that 'remove' can be used to remove the model image by setting
	// 'image.url' in the request to the current value returned for that model.
	// This cannot be used in a request that is patching other fields as well.
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelsRequest) Reset() {
	*x = PatchModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelsRequest) ProtoMessage() {}

func (x *PatchModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{124}
}

func (x *PatchModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelsRequest) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *PatchModelsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type IdUpdateSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// old id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// new id
	NewId string `protobuf:"bytes,2,opt,name=new_id,json=newId,proto3" json:"new_id,omitempty"`
}

func (x *IdUpdateSource) Reset() {
	*x = IdUpdateSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdUpdateSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdUpdateSource) ProtoMessage() {}

func (x *IdUpdateSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdUpdateSource.ProtoReflect.Descriptor instead.
func (*IdUpdateSource) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{125}
}

func (x *IdUpdateSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdUpdateSource) GetNewId() string {
	if x != nil {
		return x.NewId
	}
	return ""
}

// PatchModelIdsRequest
type PatchModelIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array containing 1 entry
	Ids []*IdUpdateSource `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelIdsRequest) Reset() {
	*x = PatchModelIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelIdsRequest) ProtoMessage() {}

func (x *PatchModelIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelIdsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{126}
}

func (x *PatchModelIdsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelIdsRequest) GetIds() []*IdUpdateSource {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PatchModelIdsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteModelRequest
type DeleteModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (x *DeleteModelRequest) Reset() {
	*x = DeleteModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelRequest) ProtoMessage() {}

func (x *DeleteModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteModelRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteModelsRequest) Reset() {
	*x = DeleteModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelsRequest) ProtoMessage() {}

func (x *DeleteModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelsRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{128}
}

func (x *DeleteModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteModelsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// Search over the available models.
type PostModelsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids present in the url of the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The body of the request.
	ModelQuery *ModelQuery `protobuf:"bytes,2,opt,name=model_query,json=modelQuery,proto3" json:"model_query,omitempty"`
	// Pagination parameters here since there are no url args in this
	// POST request.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostModelsSearchesRequest) Reset() {
	*x = PostModelsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelsSearchesRequest) ProtoMessage() {}

func (x *PostModelsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostModelsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{129}
}

func (x *PostModelsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelsSearchesRequest) GetModelQuery() *ModelQuery {
	if x != nil {
		return x.ModelQuery
	}
	return nil
}

func (x *PostModelsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// SingleModelResponse
type SingleModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Model  *Model         `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *SingleModelResponse) Reset() {
	*x = SingleModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelResponse) ProtoMessage() {}

func (x *SingleModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelResponse.ProtoReflect.Descriptor instead.
func (*SingleModelResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{130}
}

func (x *SingleModelResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelResponse) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

// MultiModelResponse
type MultiModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Models []*Model       `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *MultiModelResponse) Reset() {
	*x = MultiModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelResponse) ProtoMessage() {}

func (x *MultiModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelResponse.ProtoReflect.Descriptor instead.
func (*MultiModelResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{131}
}

func (x *MultiModelResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// PatchModelVersionsRequest
type PatchModelVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId       string          `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersions []*ModelVersion `protobuf:"bytes,3,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelVersionsRequest) Reset() {
	*x = PatchModelVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelVersionsRequest) ProtoMessage() {}

func (x *PatchModelVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelVersionsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{132}
}

func (x *PatchModelVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelVersionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelVersionsRequest) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

func (x *PatchModelVersionsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// request for different endpoints currently.
type GetModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *GetModelVersionRequest) Reset() {
	*x = GetModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionRequest) ProtoMessage() {}

func (x *GetModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{133}
}

func (x *GetModelVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// ListModelVersionsRequest
type ListModelVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Filtering options:
	// To list only the model versions that have these concept ids present in them.
	ConceptIds []string `protobuf:"bytes,5,rep,name=concept_ids,json=conceptIds,proto3" json:"concept_ids,omitempty"`
	// To list only the model versions that have been trained.
	TrainedOnly bool `protobuf:"varint,6,opt,name=trained_only,json=trainedOnly,proto3" json:"trained_only,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,7,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//
	//	*ListModelVersionsRequest_SortByStatusCode
	//	*ListModelVersionsRequest_SortByNumInputs
	//	*ListModelVersionsRequest_SortByDescription
	//	*ListModelVersionsRequest_SortByCreatedAt
	SortBy isListModelVersionsRequest_SortBy `protobuf_oneof:"sort_by"`
}

func (x *ListModelVersionsRequest) Reset() {
	*x = ListModelVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelVersionsRequest) ProtoMessage() {}

func (x *ListModelVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListModelVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{134}
}

func (x *ListModelVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelVersionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListModelVersionsRequest) GetConceptIds() []string {
	if x != nil {
		return x.ConceptIds
	}
	return nil
}

func (x *ListModelVersionsRequest) GetTrainedOnly() bool {
	if x != nil {
		return x.TrainedOnly
	}
	return false
}

func (x *ListModelVersionsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListModelVersionsRequest) GetSortBy() isListModelVersionsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListModelVersionsRequest) GetSortByStatusCode() bool {
	if x, ok := x.GetSortBy().(*ListModelVersionsRequest_SortByStatusCode); ok {
		return x.SortByStatusCode
	}
	return false
}

func (x *ListModelVersionsRequest) GetSortByNumInputs() bool {
	if x, ok := x.GetSortBy().(*ListModelVersionsRequest_SortByNumInputs); ok {
		return x.SortByNumInputs
	}
	return false
}

func (x *ListModelVersionsRequest) GetSortByDescription() bool {
	if x, ok := x.GetSortBy().(*ListModelVersionsRequest_SortByDescription); ok {
		return x.SortByDescription
	}
	return false
}

func (x *ListModelVersionsRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListModelVersionsRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

type isListModelVersionsRequest_SortBy interface {
	isListModelVersionsRequest_SortBy()
}

type ListModelVersionsRequest_SortByStatusCode struct {
	// Whether to order by the status code
	SortByStatusCode bool `protobuf:"varint,8,opt,name=sort_by_status_code,json=sortByStatusCode,proto3,oneof"`
}

type ListModelVersionsRequest_SortByNumInputs struct {
	// Whether to order by the number of training inputs
	SortByNumInputs bool `protobuf:"varint,9,opt,name=sort_by_num_inputs,json=sortByNumInputs,proto3,oneof"`
}

type ListModelVersionsRequest_SortByDescription struct {
	// Whether to sort by the description
	SortByDescription bool `protobuf:"varint,10,opt,name=sort_by_description,json=sortByDescription,proto3,oneof"`
}

type ListModelVersionsRequest_SortByCreatedAt struct {
	// Whether to order by the created_at time
	// If neither sort option is set to true, will sort by created_at.
	SortByCreatedAt bool `protobuf:"varint,11,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

func (*ListModelVersionsRequest_SortByStatusCode) isListModelVersionsRequest_SortBy() {}

func (*ListModelVersionsRequest_SortByNumInputs) isListModelVersionsRequest_SortBy() {}

func (*ListModelVersionsRequest_SortByDescription) isListModelVersionsRequest_SortBy() {}

func (*ListModelVersionsRequest_SortByCreatedAt) isListModelVersionsRequest_SortBy() {}

// DeleteModelVersionRequest
type DeleteModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,4,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *DeleteModelVersionRequest) Reset() {
	*x = DeleteModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersionRequest) ProtoMessage() {}

func (x *DeleteModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersionRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{135}
}

func (x *DeleteModelVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelVersionRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *DeleteModelVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// SingleModelVersionResponse
type SingleModelVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModelVersion *ModelVersion  `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *SingleModelVersionResponse) Reset() {
	*x = SingleModelVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelVersionResponse) ProtoMessage() {}

func (x *SingleModelVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleModelVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{136}
}

func (x *SingleModelVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelVersionResponse) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

// MultiModelVersionResponse
type MultiModelVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModelVersions []*ModelVersion `protobuf:"bytes,2,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
}

func (x *MultiModelVersionResponse) Reset() {
	*x = MultiModelVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelVersionResponse) ProtoMessage() {}

func (x *MultiModelVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiModelVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{137}
}

func (x *MultiModelVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelVersionResponse) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

// Create (train) a new model version.
type PostModelVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId       string          `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersions []*ModelVersion `protobuf:"bytes,3,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
	// Description about this training run
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// When evaluate_after_training set to true, we will do evaluation immediately after training finishes.
	// We will merge this with default_eval_info.
	EvalInfo *EvalInfo `protobuf:"bytes,10,opt,name=eval_info,json=evalInfo,proto3" json:"eval_info,omitempty"`
}

func (x *PostModelVersionsRequest) Reset() {
	*x = PostModelVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsRequest) ProtoMessage() {}

func (x *PostModelVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{138}
}

func (x *PostModelVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsRequest) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

func (x *PostModelVersionsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PostModelVersionsRequest) GetEvalInfo() *EvalInfo {
	if x != nil {
		return x.EvalInfo
	}
	return nil
}

type PostModelVersionsUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UploadData:
	//
	//	*PostModelVersionsUploadRequest_UploadConfig
	//	*PostModelVersionsUploadRequest_ContentPart
	UploadData isPostModelVersionsUploadRequest_UploadData `protobuf_oneof:"upload_data"`
}

func (x *PostModelVersionsUploadRequest) Reset() {
	*x = PostModelVersionsUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsUploadRequest) ProtoMessage() {}

func (x *PostModelVersionsUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsUploadRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsUploadRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{139}
}

func (m *PostModelVersionsUploadRequest) GetUploadData() isPostModelVersionsUploadRequest_UploadData {
	if m != nil {
		return m.UploadData
	}
	return nil
}

func (x *PostModelVersionsUploadRequest) GetUploadConfig() *PostModelVersionsUploadConfig {
	if x, ok := x.GetUploadData().(*PostModelVersionsUploadRequest_UploadConfig); ok {
		return x.UploadConfig
	}
	return nil
}

func (x *PostModelVersionsUploadRequest) GetContentPart() *UploadContentPart {
	if x, ok := x.GetUploadData().(*PostModelVersionsUploadRequest_ContentPart); ok {
		return x.ContentPart
	}
	return nil
}

type isPostModelVersionsUploadRequest_UploadData interface {
	isPostModelVersionsUploadRequest_UploadData()
}

type PostModelVersionsUploadRequest_UploadConfig struct {
	UploadConfig *PostModelVersionsUploadConfig `protobuf:"bytes,1,opt,name=upload_config,json=uploadConfig,proto3,oneof"`
}

type PostModelVersionsUploadRequest_ContentPart struct {
	ContentPart *UploadContentPart `protobuf:"bytes,2,opt,name=content_part,json=contentPart,proto3,oneof"`
}

func (*PostModelVersionsUploadRequest_UploadConfig) isPostModelVersionsUploadRequest_UploadData() {}

func (*PostModelVersionsUploadRequest_ContentPart) isPostModelVersionsUploadRequest_UploadData() {}

type PostModelVersionsUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BytesRemaining uint64         `protobuf:"varint,2,opt,name=bytes_remaining,json=bytesRemaining,proto3" json:"bytes_remaining,omitempty"`
	ModelVersionId string         `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"` // ID of the model version being uploaded
}

func (x *PostModelVersionsUploadResponse) Reset() {
	*x = PostModelVersionsUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsUploadResponse) ProtoMessage() {}

func (x *PostModelVersionsUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsUploadResponse.ProtoReflect.Descriptor instead.
func (*PostModelVersionsUploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{140}
}

func (x *PostModelVersionsUploadResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostModelVersionsUploadResponse) GetBytesRemaining() uint64 {
	if x != nil {
		return x.BytesRemaining
	}
	return 0
}

func (x *PostModelVersionsUploadResponse) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

type PostModelVersionsUploadConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId      string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`                // model to create version of
	ModelVersion *ModelVersion `protobuf:"bytes,3,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"` // specification for the model version to be uploaded
	TotalSize    uint64        `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`         // number of bytes in the model files to be uploaded
}

func (x *PostModelVersionsUploadConfig) Reset() {
	*x = PostModelVersionsUploadConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsUploadConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsUploadConfig) ProtoMessage() {}

func (x *PostModelVersionsUploadConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsUploadConfig.ProtoReflect.Descriptor instead.
func (*PostModelVersionsUploadConfig) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{141}
}

func (x *PostModelVersionsUploadConfig) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsUploadConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsUploadConfig) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

func (x *PostModelVersionsUploadConfig) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// PutModelVersionExportsRequest
type PutModelVersionExportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *PutModelVersionExportsRequest) Reset() {
	*x = PutModelVersionExportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutModelVersionExportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutModelVersionExportsRequest) ProtoMessage() {}

func (x *PutModelVersionExportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutModelVersionExportsRequest.ProtoReflect.Descriptor instead.
func (*PutModelVersionExportsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{142}
}

func (x *PutModelVersionExportsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutModelVersionExportsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PutModelVersionExportsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// GetModelVersionExportRequest
type GetModelVersionExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *GetModelVersionExportRequest) Reset() {
	*x = GetModelVersionExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionExportRequest) ProtoMessage() {}

func (x *GetModelVersionExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionExportRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionExportRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{143}
}

func (x *GetModelVersionExportRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionExportRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionExportRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// SingleModelVersionExportResponse
type SingleModelVersionExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Export *ModelVersionExport `protobuf:"bytes,2,opt,name=export,proto3" json:"export,omitempty"`
}

func (x *SingleModelVersionExportResponse) Reset() {
	*x = SingleModelVersionExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelVersionExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelVersionExportResponse) ProtoMessage() {}

func (x *SingleModelVersionExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelVersionExportResponse.ProtoReflect.Descriptor instead.
func (*SingleModelVersionExportResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{144}
}

func (x *SingleModelVersionExportResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelVersionExportResponse) GetExport() *ModelVersionExport {
	if x != nil {
		return x.Export
	}
	return nil
}

type PostWorkflowVersionsUnPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                      `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId   string                             `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Publications []*WorkflowVersionUnPublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostWorkflowVersionsUnPublishRequest) Reset() {
	*x = PostWorkflowVersionsUnPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowVersionsUnPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowVersionsUnPublishRequest) ProtoMessage() {}

func (x *PostWorkflowVersionsUnPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowVersionsUnPublishRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowVersionsUnPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{145}
}

func (x *PostWorkflowVersionsUnPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowVersionsUnPublishRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowVersionsUnPublishRequest) GetPublications() []*WorkflowVersionUnPublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

type PostWorkflowVersionsPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                    `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId   string                           `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Publications []*WorkflowVersionPublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostWorkflowVersionsPublishRequest) Reset() {
	*x = PostWorkflowVersionsPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowVersionsPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowVersionsPublishRequest) ProtoMessage() {}

func (x *PostWorkflowVersionsPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowVersionsPublishRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowVersionsPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{146}
}

func (x *PostWorkflowVersionsPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowVersionsPublishRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowVersionsPublishRequest) GetPublications() []*WorkflowVersionPublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

type WorkflowVersionPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *WorkflowVersionPublishRequest) Reset() {
	*x = WorkflowVersionPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersionPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersionPublishRequest) ProtoMessage() {}

func (x *WorkflowVersionPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersionPublishRequest.ProtoReflect.Descriptor instead.
func (*WorkflowVersionPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{147}
}

func (x *WorkflowVersionPublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type WorkflowVersionUnPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *WorkflowVersionUnPublishRequest) Reset() {
	*x = WorkflowVersionUnPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersionUnPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersionUnPublishRequest) ProtoMessage() {}

func (x *WorkflowVersionUnPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersionUnPublishRequest.ProtoReflect.Descriptor instead.
func (*WorkflowVersionUnPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{148}
}

func (x *WorkflowVersionUnPublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// ModelVersionPublishRequest
type ModelVersionPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *ModelVersionPublishRequest) Reset() {
	*x = ModelVersionPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionPublishRequest) ProtoMessage() {}

func (x *ModelVersionPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionPublishRequest.ProtoReflect.Descriptor instead.
func (*ModelVersionPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{149}
}

func (x *ModelVersionPublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// PostModelVersionsPublishRequest
type PostModelVersionsPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                 `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId      string                        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Publications []*ModelVersionPublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostModelVersionsPublishRequest) Reset() {
	*x = PostModelVersionsPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsPublishRequest) ProtoMessage() {}

func (x *PostModelVersionsPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsPublishRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{150}
}

func (x *PostModelVersionsPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsPublishRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsPublishRequest) GetPublications() []*ModelVersionPublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

// ModelVersionUnpublishRequest
type ModelVersionUnpublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *ModelVersionUnpublishRequest) Reset() {
	*x = ModelVersionUnpublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionUnpublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionUnpublishRequest) ProtoMessage() {}

func (x *ModelVersionUnpublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionUnpublishRequest.ProtoReflect.Descriptor instead.
func (*ModelVersionUnpublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{151}
}

func (x *ModelVersionUnpublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// PostModelVersionsUnPublishRequest
type PostModelVersionsUnPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId      string                          `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Publications []*ModelVersionUnpublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostModelVersionsUnPublishRequest) Reset() {
	*x = PostModelVersionsUnPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsUnPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsUnPublishRequest) ProtoMessage() {}

func (x *PostModelVersionsUnPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsUnPublishRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsUnPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{152}
}

func (x *PostModelVersionsUnPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsUnPublishRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsUnPublishRequest) GetPublications() []*ModelVersionUnpublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

// Evaluate this model vesion
type PostEvaluationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// eval_info, id, model, and ground_truth_dataset will be used when creating the evaluation
	// If no dataset is provided, all app data that is annotated with concepts from the model will be used.
	EvalMetrics []*EvalMetrics `protobuf:"bytes,2,rep,name=eval_metrics,json=evalMetrics,proto3" json:"eval_metrics,omitempty"`
}

func (x *PostEvaluationsRequest) Reset() {
	*x = PostEvaluationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostEvaluationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostEvaluationsRequest) ProtoMessage() {}

func (x *PostEvaluationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostEvaluationsRequest.ProtoReflect.Descriptor instead.
func (*PostEvaluationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{153}
}

func (x *PostEvaluationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostEvaluationsRequest) GetEvalMetrics() []*EvalMetrics {
	if x != nil {
		return x.EvalMetrics
	}
	return nil
}

type ListEvaluationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// If true, sort in ascending order, otherwise sort in descending order.
	SortAscending bool `protobuf:"varint,4,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//
	//	*ListEvaluationsRequest_SortByAppId
	//	*ListEvaluationsRequest_SortByRocAuc
	//	*ListEvaluationsRequest_SortByF1
	//	*ListEvaluationsRequest_SortByCreatedAt
	//	*ListEvaluationsRequest_SortByMeanAvgPrecision
	//	*ListEvaluationsRequest_SortByPrecision
	//	*ListEvaluationsRequest_SortByRecall
	//	*ListEvaluationsRequest_SortByModelId
	//	*ListEvaluationsRequest_SortByEvalDatasetId
	//	*ListEvaluationsRequest_SortByTrainDatasetId
	SortBy isListEvaluationsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filter on model type id
	ModelTypeId string `protobuf:"bytes,12,opt,name=model_type_id,json=modelTypeId,proto3" json:"model_type_id,omitempty"`
	// Filter on dataset ID of the dataset version specified in the metric version
	EvalDatasetIds []string `protobuf:"bytes,13,rep,name=eval_dataset_ids,json=evalDatasetIds,proto3" json:"eval_dataset_ids,omitempty"`
	// Filter on dataset ID of the dataset version specified by the model version
	TrainDatasetIds []string `protobuf:"bytes,14,rep,name=train_dataset_ids,json=trainDatasetIds,proto3" json:"train_dataset_ids,omitempty"`
	// Filter on concept IDs specified in the modele version's output_info
	ConceptIds []string `protobuf:"bytes,15,rep,name=concept_ids,json=conceptIds,proto3" json:"concept_ids,omitempty"`
	// Whether to show failed metrics, defaults to false
	ShowFailedMetrics bool `protobuf:"varint,19,opt,name=show_failed_metrics,json=showFailedMetrics,proto3" json:"show_failed_metrics,omitempty"`
}

func (x *ListEvaluationsRequest) Reset() {
	*x = ListEvaluationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEvaluationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEvaluationsRequest) ProtoMessage() {}

func (x *ListEvaluationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEvaluationsRequest.ProtoReflect.Descriptor instead.
func (*ListEvaluationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{154}
}

func (x *ListEvaluationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListEvaluationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListEvaluationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListEvaluationsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListEvaluationsRequest) GetSortBy() isListEvaluationsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListEvaluationsRequest) GetSortByAppId() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByAppId); ok {
		return x.SortByAppId
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByRocAuc() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByRocAuc); ok {
		return x.SortByRocAuc
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByF1() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByF1); ok {
		return x.SortByF1
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByMeanAvgPrecision() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByMeanAvgPrecision); ok {
		return x.SortByMeanAvgPrecision
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByPrecision() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByPrecision); ok {
		return x.SortByPrecision
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByRecall() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByRecall); ok {
		return x.SortByRecall
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByModelId() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByModelId); ok {
		return x.SortByModelId
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByEvalDatasetId() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByEvalDatasetId); ok {
		return x.SortByEvalDatasetId
	}
	return false
}

func (x *ListEvaluationsRequest) GetSortByTrainDatasetId() bool {
	if x, ok := x.GetSortBy().(*ListEvaluationsRequest_SortByTrainDatasetId); ok {
		return x.SortByTrainDatasetId
	}
	return false
}

func (x *ListEvaluationsRequest) GetModelTypeId() string {
	if x != nil {
		return x.ModelTypeId
	}
	return ""
}

func (x *ListEvaluationsRequest) GetEvalDatasetIds() []string {
	if x != nil {
		return x.EvalDatasetIds
	}
	return nil
}

func (x *ListEvaluationsRequest) GetTrainDatasetIds() []string {
	if x != nil {
		return x.TrainDatasetIds
	}
	return nil
}

func (x *ListEvaluationsRequest) GetConceptIds() []string {
	if x != nil {
		return x.ConceptIds
	}
	return nil
}

func (x *ListEvaluationsRequest) GetShowFailedMetrics() bool {
	if x != nil {
		return x.ShowFailedMetrics
	}
	return false
}

type isListEvaluationsRequest_SortBy interface {
	isListEvaluationsRequest_SortBy()
}

type ListEvaluationsRequest_SortByAppId struct {
	// Whether to order by application id
	SortByAppId bool `protobuf:"varint,5,opt,name=sort_by_app_id,json=sortByAppId,proto3,oneof"`
}

type ListEvaluationsRequest_SortByRocAuc struct {
	// Whether to order by eval metric summary.macro_avg_roc_auc
	SortByRocAuc bool `protobuf:"varint,6,opt,name=sort_by_roc_auc,json=sortByRocAuc,proto3,oneof"`
}

type ListEvaluationsRequest_SortByF1 struct {
	// Whether to order by eval metric summary.f1
	SortByF1 bool `protobuf:"varint,7,opt,name=sort_by_f1,json=sortByF1,proto3,oneof"`
}

type ListEvaluationsRequest_SortByCreatedAt struct {
	// Whether to order by when the metric was created
	SortByCreatedAt bool `protobuf:"varint,8,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

type ListEvaluationsRequest_SortByMeanAvgPrecision struct {
	// Whether to order by eval metric summary.mean_avg_precision_iou_50
	SortByMeanAvgPrecision bool `protobuf:"varint,9,opt,name=sort_by_mean_avg_precision,json=sortByMeanAvgPrecision,proto3,oneof"`
}

type ListEvaluationsRequest_SortByPrecision struct {
	// Whether to order by eval metric summary.macro_avg_precision
	SortByPrecision bool `protobuf:"varint,10,opt,name=sort_by_precision,json=sortByPrecision,proto3,oneof"`
}

type ListEvaluationsRequest_SortByRecall struct {
	// Whether to order by eval metric summary.macro_avg_recall
	SortByRecall bool `protobuf:"varint,11,opt,name=sort_by_recall,json=sortByRecall,proto3,oneof"`
}

type ListEvaluationsRequest_SortByModelId struct {
	SortByModelId bool `protobuf:"varint,16,opt,name=sort_by_model_id,json=sortByModelId,proto3,oneof"`
}

type ListEvaluationsRequest_SortByEvalDatasetId struct {
	SortByEvalDatasetId bool `protobuf:"varint,17,opt,name=sort_by_eval_dataset_id,json=sortByEvalDatasetId,proto3,oneof"`
}

type ListEvaluationsRequest_SortByTrainDatasetId struct {
	SortByTrainDatasetId bool `protobuf:"varint,18,opt,name=sort_by_train_dataset_id,json=sortByTrainDatasetId,proto3,oneof"`
}

func (*ListEvaluationsRequest_SortByAppId) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByRocAuc) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByF1) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByCreatedAt) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByMeanAvgPrecision) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByPrecision) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByRecall) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByModelId) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByEvalDatasetId) isListEvaluationsRequest_SortBy() {}

func (*ListEvaluationsRequest_SortByTrainDatasetId) isListEvaluationsRequest_SortBy() {}

type GetEvaluationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	EvaluationId string        `protobuf:"bytes,2,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`
	// Any of the fields you wish to return in the metrics
	// By default, only the summary is returned.
	Fields *FieldsValue `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetEvaluationRequest) Reset() {
	*x = GetEvaluationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationRequest) ProtoMessage() {}

func (x *GetEvaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationRequest.ProtoReflect.Descriptor instead.
func (*GetEvaluationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{155}
}

func (x *GetEvaluationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetEvaluationRequest) GetEvaluationId() string {
	if x != nil {
		return x.EvaluationId
	}
	return ""
}

func (x *GetEvaluationRequest) GetFields() *FieldsValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Evaluate this model vesion
type PostModelVersionEvaluationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId      *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId        string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersionId string        `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// EvalInfo and ID will be used when creating the evaluation
	EvalMetrics []*EvalMetrics `protobuf:"bytes,4,rep,name=eval_metrics,json=evalMetrics,proto3" json:"eval_metrics,omitempty"`
}

func (x *PostModelVersionEvaluationsRequest) Reset() {
	*x = PostModelVersionEvaluationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionEvaluationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionEvaluationsRequest) ProtoMessage() {}

func (x *PostModelVersionEvaluationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionEvaluationsRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionEvaluationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{156}
}

func (x *PostModelVersionEvaluationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionEvaluationsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionEvaluationsRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *PostModelVersionEvaluationsRequest) GetEvalMetrics() []*EvalMetrics {
	if x != nil {
		return x.EvalMetrics
	}
	return nil
}

type ListModelVersionEvaluationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId      *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId        string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersionId string        `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelVersionEvaluationsRequest) Reset() {
	*x = ListModelVersionEvaluationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelVersionEvaluationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelVersionEvaluationsRequest) ProtoMessage() {}

func (x *ListModelVersionEvaluationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelVersionEvaluationsRequest.ProtoReflect.Descriptor instead.
func (*ListModelVersionEvaluationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{157}
}

func (x *ListModelVersionEvaluationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelVersionEvaluationsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelVersionEvaluationsRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *ListModelVersionEvaluationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelVersionEvaluationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GetModelVersionEvaluationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId      *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId        string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersionId string        `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	EvaluationId   string        `protobuf:"bytes,4,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`
	// Any of the fields you wish to return from multiclass_metrics
	// By default, only the summary is returned.
	Fields *FieldsValue `protobuf:"bytes,5,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetModelVersionEvaluationRequest) Reset() {
	*x = GetModelVersionEvaluationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionEvaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionEvaluationRequest) ProtoMessage() {}

func (x *GetModelVersionEvaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionEvaluationRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionEvaluationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{158}
}

func (x *GetModelVersionEvaluationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionEvaluationRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionEvaluationRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *GetModelVersionEvaluationRequest) GetEvaluationId() string {
	if x != nil {
		return x.EvaluationId
	}
	return ""
}

func (x *GetModelVersionEvaluationRequest) GetFields() *FieldsValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SingleEvalMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EvalMetrics *EvalMetrics   `protobuf:"bytes,2,opt,name=eval_metrics,json=evalMetrics,proto3" json:"eval_metrics,omitempty"`
}

func (x *SingleEvalMetricsResponse) Reset() {
	*x = SingleEvalMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEvalMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEvalMetricsResponse) ProtoMessage() {}

func (x *SingleEvalMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEvalMetricsResponse.ProtoReflect.Descriptor instead.
func (*SingleEvalMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{159}
}

func (x *SingleEvalMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleEvalMetricsResponse) GetEvalMetrics() *EvalMetrics {
	if x != nil {
		return x.EvalMetrics
	}
	return nil
}

type MultiEvalMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EvalMetrics []*EvalMetrics `protobuf:"bytes,2,rep,name=eval_metrics,json=evalMetrics,proto3" json:"eval_metrics,omitempty"`
}

func (x *MultiEvalMetricsResponse) Reset() {
	*x = MultiEvalMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiEvalMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiEvalMetricsResponse) ProtoMessage() {}

func (x *MultiEvalMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiEvalMetricsResponse.ProtoReflect.Descriptor instead.
func (*MultiEvalMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{160}
}

func (x *MultiEvalMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiEvalMetricsResponse) GetEvalMetrics() []*EvalMetrics {
	if x != nil {
		return x.EvalMetrics
	}
	return nil
}

// Evaluate this model version.
type PostModelVersionMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Use this to filter inputs that are used in evaluation
	TestSearch *Search `protobuf:"bytes,5,opt,name=test_search,json=testSearch,proto3" json:"test_search,omitempty"`
	// evaluation info. Such as dataset used for evaluation.
	EvalInfo *EvalInfo `protobuf:"bytes,10,opt,name=eval_info,json=evalInfo,proto3" json:"eval_info,omitempty"`
}

func (x *PostModelVersionMetricsRequest) Reset() {
	*x = PostModelVersionMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionMetricsRequest) ProtoMessage() {}

func (x *PostModelVersionMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionMetricsRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{161}
}

func (x *PostModelVersionMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionMetricsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionMetricsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostModelVersionMetricsRequest) GetTestSearch() *Search {
	if x != nil {
		return x.TestSearch
	}
	return nil
}

func (x *PostModelVersionMetricsRequest) GetEvalInfo() *EvalInfo {
	if x != nil {
		return x.EvalInfo
	}
	return nil
}

// Get the already computed evaluation metrics for this model
// version.
type GetModelVersionMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Any of the fields you wish to return from multiclass_metrics
	// By default, only the summary will be returned
	Fields *FieldsValue `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetModelVersionMetricsRequest) Reset() {
	*x = GetModelVersionMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionMetricsRequest) ProtoMessage() {}

func (x *GetModelVersionMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{162}
}

func (x *GetModelVersionMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionMetricsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionMetricsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GetModelVersionMetricsRequest) GetFields() *FieldsValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

// GetModelTypeRequest
type GetModelTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use and app combo. Not really used for this endpoint at this time so may go away in future.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The specific ModelType.Id you want to retrieve.
	ModelTypeId string `protobuf:"bytes,2,opt,name=model_type_id,json=modelTypeId,proto3" json:"model_type_id,omitempty"`
}

func (x *GetModelTypeRequest) Reset() {
	*x = GetModelTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTypeRequest) ProtoMessage() {}

func (x *GetModelTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTypeRequest.ProtoReflect.Descriptor instead.
func (*GetModelTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{163}
}

func (x *GetModelTypeRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelTypeRequest) GetModelTypeId() string {
	if x != nil {
		return x.ModelTypeId
	}
	return ""
}

// ListModelTypesRequest
type ListModelTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use and app combo. Not really used for this endpoint at this time so may go away in future.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelTypesRequest) Reset() {
	*x = ListModelTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelTypesRequest) ProtoMessage() {}

func (x *ListModelTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelTypesRequest.ProtoReflect.Descriptor instead.
func (*ListModelTypesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{164}
}

func (x *ListModelTypesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelTypesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelTypesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// ListOpenSourceLicensesRequest
type ListOpenSourceLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListOpenSourceLicensesRequest) Reset() {
	*x = ListOpenSourceLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpenSourceLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenSourceLicensesRequest) ProtoMessage() {}

func (x *ListOpenSourceLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenSourceLicensesRequest.ProtoReflect.Descriptor instead.
func (*ListOpenSourceLicensesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{165}
}

// ListOpenSourceLicensesResponse
type ListOpenSourceLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Licenses []string       `protobuf:"bytes,2,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *ListOpenSourceLicensesResponse) Reset() {
	*x = ListOpenSourceLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpenSourceLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenSourceLicensesResponse) ProtoMessage() {}

func (x *ListOpenSourceLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenSourceLicensesResponse.ProtoReflect.Descriptor instead.
func (*ListOpenSourceLicensesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{166}
}

func (x *ListOpenSourceLicensesResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListOpenSourceLicensesResponse) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

// SingleModelTypeResponse
type SingleModelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the response.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The retrieved ModelType object. .
	ModelType *ModelType `protobuf:"bytes,2,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
}

func (x *SingleModelTypeResponse) Reset() {
	*x = SingleModelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelTypeResponse) ProtoMessage() {}

func (x *SingleModelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelTypeResponse.ProtoReflect.Descriptor instead.
func (*SingleModelTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{167}
}

func (x *SingleModelTypeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelTypeResponse) GetModelType() *ModelType {
	if x != nil {
		return x.ModelType
	}
	return nil
}

// MultiModelTypeResponse
type MultiModelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the response.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of ModelType objects.
	ModelTypes []*ModelType `protobuf:"bytes,2,rep,name=model_types,json=modelTypes,proto3" json:"model_types,omitempty"`
	// List of model importers
	ModelImporters *ModelTypeField `protobuf:"bytes,3,opt,name=model_importers,json=modelImporters,proto3" json:"model_importers,omitempty"`
	// Triton model envs that can be used for model upload
	TritonCondaEnvsInfo []*TritonCondaEnvInfo `protobuf:"bytes,4,rep,name=triton_conda_envs_info,json=tritonCondaEnvsInfo,proto3" json:"triton_conda_envs_info,omitempty"`
}

func (x *MultiModelTypeResponse) Reset() {
	*x = MultiModelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelTypeResponse) ProtoMessage() {}

func (x *MultiModelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelTypeResponse.ProtoReflect.Descriptor instead.
func (*MultiModelTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{168}
}

func (x *MultiModelTypeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelTypeResponse) GetModelTypes() []*ModelType {
	if x != nil {
		return x.ModelTypes
	}
	return nil
}

func (x *MultiModelTypeResponse) GetModelImporters() *ModelTypeField {
	if x != nil {
		return x.ModelImporters
	}
	return nil
}

func (x *MultiModelTypeResponse) GetTritonCondaEnvsInfo() []*TritonCondaEnvInfo {
	if x != nil {
		return x.TritonCondaEnvsInfo
	}
	return nil
}

// GetModelVersionInputExampleRequest
type GetModelVersionInputExampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorization field  (contains app/user id info)
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of model the example belongs to
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// specific version the example belongs to
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// Id of example to fetch
	ExampleId string `protobuf:"bytes,4,opt,name=example_id,json=exampleId,proto3" json:"example_id,omitempty"`
}

func (x *GetModelVersionInputExampleRequest) Reset() {
	*x = GetModelVersionInputExampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionInputExampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionInputExampleRequest) ProtoMessage() {}

func (x *GetModelVersionInputExampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionInputExampleRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionInputExampleRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{169}
}

func (x *GetModelVersionInputExampleRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionInputExampleRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionInputExampleRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *GetModelVersionInputExampleRequest) GetExampleId() string {
	if x != nil {
		return x.ExampleId
	}
	return ""
}

// ListModelVersionInputExamplesRequest
type ListModelVersionInputExamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorization field  (contains app/user id info)
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of model the example belongs to
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// specific version the example belongs to
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// Optional, defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Optional, defaults to 128 references per page.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelVersionInputExamplesRequest) Reset() {
	*x = ListModelVersionInputExamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelVersionInputExamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelVersionInputExamplesRequest) ProtoMessage() {}

func (x *ListModelVersionInputExamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelVersionInputExamplesRequest.ProtoReflect.Descriptor instead.
func (*ListModelVersionInputExamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{170}
}

func (x *ListModelVersionInputExamplesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelVersionInputExamplesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelVersionInputExamplesRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *ListModelVersionInputExamplesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelVersionInputExamplesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// SingleModelVersionInputExampleResponse
type SingleModelVersionInputExampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status of response
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// model input example message
	ModelVersionInputExample *ModelVersionInputExample `protobuf:"bytes,2,opt,name=model_version_input_example,json=modelVersionInputExample,proto3" json:"model_version_input_example,omitempty"`
}

func (x *SingleModelVersionInputExampleResponse) Reset() {
	*x = SingleModelVersionInputExampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelVersionInputExampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelVersionInputExampleResponse) ProtoMessage() {}

func (x *SingleModelVersionInputExampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelVersionInputExampleResponse.ProtoReflect.Descriptor instead.
func (*SingleModelVersionInputExampleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{171}
}

func (x *SingleModelVersionInputExampleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelVersionInputExampleResponse) GetModelVersionInputExample() *ModelVersionInputExample {
	if x != nil {
		return x.ModelVersionInputExample
	}
	return nil
}

// MultiModelVersionInputExampleResponse
type MultiModelVersionInputExampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status of response
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// model input example messages
	ModelVersionInputExamples []*ModelVersionInputExample `protobuf:"bytes,2,rep,name=model_version_input_examples,json=modelVersionInputExamples,proto3" json:"model_version_input_examples,omitempty"`
}

func (x *MultiModelVersionInputExampleResponse) Reset() {
	*x = MultiModelVersionInputExampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelVersionInputExampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelVersionInputExampleResponse) ProtoMessage() {}

func (x *MultiModelVersionInputExampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelVersionInputExampleResponse.ProtoReflect.Descriptor instead.
func (*MultiModelVersionInputExampleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{172}
}

func (x *MultiModelVersionInputExampleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelVersionInputExampleResponse) GetModelVersionInputExamples() []*ModelVersionInputExample {
	if x != nil {
		return x.ModelVersionInputExamples
	}
	return nil
}

// ListModelReferencesRequest
type ListModelReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Optional, defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// Optional, defaults to 128 references per page.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelReferencesRequest) Reset() {
	*x = ListModelReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelReferencesRequest) ProtoMessage() {}

func (x *ListModelReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelReferencesRequest.ProtoReflect.Descriptor instead.
func (*ListModelReferencesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{173}
}

func (x *ListModelReferencesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelReferencesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelReferencesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelReferencesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// MultiModelReferenceResponse
type MultiModelReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModelReferences []*ModelReference `protobuf:"bytes,2,rep,name=model_references,json=modelReferences,proto3" json:"model_references,omitempty"`
}

func (x *MultiModelReferenceResponse) Reset() {
	*x = MultiModelReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelReferenceResponse) ProtoMessage() {}

func (x *MultiModelReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelReferenceResponse.ProtoReflect.Descriptor instead.
func (*MultiModelReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{174}
}

func (x *MultiModelReferenceResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelReferenceResponse) GetModelReferences() []*ModelReference {
	if x != nil {
		return x.ModelReferences
	}
	return nil
}

// MultiOutputResponse
type MultiOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// For each input processed during model prediction we create one output.
	Outputs []*Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *MultiOutputResponse) Reset() {
	*x = MultiOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiOutputResponse) ProtoMessage() {}

func (x *MultiOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiOutputResponse.ProtoReflect.Descriptor instead.
func (*MultiOutputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{175}
}

func (x *MultiOutputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiOutputResponse) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// ListScopesRequest
type ListScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If "personal_access_token" include scopes and endpoints available to personal access tokens.
	// If "api_key" include scopes and endpoints available to app-specific keys. (default)
	KeyType string `protobuf:"bytes,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	// For all user specific information we include user_app_id to get the user_id in a consistent way
	UserAppId *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListScopesRequest) Reset() {
	*x = ListScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScopesRequest) ProtoMessage() {}

func (x *ListScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScopesRequest.ProtoReflect.Descriptor instead.
func (*ListScopesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{176}
}

func (x *ListScopesRequest) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *ListScopesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MyScopesRequest
type MyScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *MyScopesRequest) Reset() {
	*x = MyScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyScopesRequest) ProtoMessage() {}

func (x *MyScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyScopesRequest.ProtoReflect.Descriptor instead.
func (*MyScopesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{177}
}

func (x *MyScopesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MyScopesUserRequest
type MyScopesUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *MyScopesUserRequest) Reset() {
	*x = MyScopesUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyScopesUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyScopesUserRequest) ProtoMessage() {}

func (x *MyScopesUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyScopesUserRequest.ProtoReflect.Descriptor instead.
func (*MyScopesUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{178}
}

func (x *MyScopesUserRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MyScopesRootRequest
type MyScopesRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MyScopesRootRequest) Reset() {
	*x = MyScopesRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyScopesRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyScopesRootRequest) ProtoMessage() {}

func (x *MyScopesRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyScopesRootRequest.ProtoReflect.Descriptor instead.
func (*MyScopesRootRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{179}
}

// MultiScopeDepsResponse
type MultiScopeDepsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// scopes is a list of low-level scopes and their dependencies.
	ScopeDeps []*ScopeDeps `protobuf:"bytes,2,rep,name=scope_deps,json=scopeDeps,proto3" json:"scope_deps,omitempty"`
	// endpoint_scopes is a listof all the publicly available endponts which can be
	// used as scopes as well. A call to each of those endpoint depends on a subset
	// of the above "scopes"
	EndpointDeps []*EndpointDeps `protobuf:"bytes,3,rep,name=endpoint_deps,json=endpointDeps,proto3" json:"endpoint_deps,omitempty"`
}

func (x *MultiScopeDepsResponse) Reset() {
	*x = MultiScopeDepsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeDepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeDepsResponse) ProtoMessage() {}

func (x *MultiScopeDepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeDepsResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeDepsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{180}
}

func (x *MultiScopeDepsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeDepsResponse) GetScopeDeps() []*ScopeDeps {
	if x != nil {
		return x.ScopeDeps
	}
	return nil
}

func (x *MultiScopeDepsResponse) GetEndpointDeps() []*EndpointDeps {
	if x != nil {
		return x.EndpointDeps
	}
	return nil
}

// MultiScopeResponse
type MultiScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// This is a list of the scopes that your key has.
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// The app that the key has access to.
	App *App `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	// This is a list of endpoint permissions that your key has.
	Endpoints        []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	UserFeatureFlags string   `protobuf:"bytes,5,opt,name=user_feature_flags,json=userFeatureFlags,proto3" json:"user_feature_flags,omitempty"`
}

func (x *MultiScopeResponse) Reset() {
	*x = MultiScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeResponse) ProtoMessage() {}

func (x *MultiScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{181}
}

func (x *MultiScopeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *MultiScopeResponse) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *MultiScopeResponse) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MultiScopeResponse) GetUserFeatureFlags() string {
	if x != nil {
		return x.UserFeatureFlags
	}
	return ""
}

// MultiScopeUserResponse
type MultiScopeUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// This is a list of the scopes that your key has.
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// This is a list of endpoint permissions that your key has.
	Endpoints        []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	UserFeatureFlags string   `protobuf:"bytes,5,opt,name=user_feature_flags,json=userFeatureFlags,proto3" json:"user_feature_flags,omitempty"`
}

func (x *MultiScopeUserResponse) Reset() {
	*x = MultiScopeUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeUserResponse) ProtoMessage() {}

func (x *MultiScopeUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeUserResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{182}
}

func (x *MultiScopeUserResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeUserResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *MultiScopeUserResponse) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MultiScopeUserResponse) GetUserFeatureFlags() string {
	if x != nil {
		return x.UserFeatureFlags
	}
	return ""
}

// MultiScopeRootResponse
type MultiScopeRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// This is a list of the scopes that your key has.
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// This is a list of endpoint permissions that your key has.
	Endpoints        []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	UserFeatureFlags string   `protobuf:"bytes,5,opt,name=user_feature_flags,json=userFeatureFlags,proto3" json:"user_feature_flags,omitempty"`
}

func (x *MultiScopeRootResponse) Reset() {
	*x = MultiScopeRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeRootResponse) ProtoMessage() {}

func (x *MultiScopeRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeRootResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeRootResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{183}
}

func (x *MultiScopeRootResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeRootResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *MultiScopeRootResponse) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MultiScopeRootResponse) GetUserFeatureFlags() string {
	if x != nil {
		return x.UserFeatureFlags
	}
	return ""
}

// GetSearchRequest
type GetSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSearchRequest) Reset() {
	*x = GetSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchRequest) ProtoMessage() {}

func (x *GetSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchRequest.ProtoReflect.Descriptor instead.
func (*GetSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{184}
}

func (x *GetSearchRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetSearchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListSearchesRequest
type ListSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListSearchesRequest) Reset() {
	*x = ListSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSearchesRequest) ProtoMessage() {}

func (x *ListSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSearchesRequest.ProtoReflect.Descriptor instead.
func (*ListSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{185}
}

func (x *ListSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListSearchesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSearchesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostSearchesRequest
type PostSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The query; this specifies how the data to be searched
	// this will be replaced by "Searches"
	//
	// Deprecated: Do not use.
	Query *Query `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The searched to be executed or saved
	// Eventually the request level fields will be deprecated in favor of this object
	Searches []*Search `protobuf:"bytes,3,rep,name=searches,proto3" json:"searches,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostSearchesRequest) Reset() {
	*x = PostSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSearchesRequest) ProtoMessage() {}

func (x *PostSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{186}
}

func (x *PostSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// Deprecated: Do not use.
func (x *PostSearchesRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PostSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PostSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PatchInputsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searches to be patched
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// The action to perform on the patched Search objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchInputsSearchesRequest) Reset() {
	*x = PatchInputsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInputsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInputsSearchesRequest) ProtoMessage() {}

func (x *PatchInputsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInputsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PatchInputsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{187}
}

func (x *PatchInputsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchInputsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PatchInputsSearchesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PatchAnnotationsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searches to be patched
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// The action to perform on the patched Search objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAnnotationsSearchesRequest) Reset() {
	*x = PatchAnnotationsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsSearchesRequest) ProtoMessage() {}

func (x *PatchAnnotationsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{188}
}

func (x *PatchAnnotationsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PatchAnnotationsSearchesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchSearchesRequest
type PatchSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searches to be patched
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// The action to perform on the patched Search objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchSearchesRequest) Reset() {
	*x = PatchSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchSearchesRequest) ProtoMessage() {}

func (x *PatchSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchSearchesRequest.ProtoReflect.Descriptor instead.
func (*PatchSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{189}
}

func (x *PatchSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PatchSearchesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PostSearchesByIDRequest performs returns results of a saved search given its ID
type PostSearchesByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// ID for saves search to be executed
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostSearchesByIDRequest) Reset() {
	*x = PostSearchesByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSearchesByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSearchesByIDRequest) ProtoMessage() {}

func (x *PostSearchesByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSearchesByIDRequest.ProtoReflect.Descriptor instead.
func (*PostSearchesByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{190}
}

func (x *PostSearchesByIDRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostSearchesByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostSearchesByIDRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// DeleteSearchRequest
type DeleteSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSearchRequest) Reset() {
	*x = DeleteSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSearchRequest) ProtoMessage() {}

func (x *DeleteSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSearchRequest.ProtoReflect.Descriptor instead.
func (*DeleteSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{191}
}

func (x *DeleteSearchRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteSearchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Execute a new annotation search and optionally save it
// annotation search over annotations using rank and filter proto
type PostAnnotationsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searched to be executed or saved
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostAnnotationsSearchesRequest) Reset() {
	*x = PostAnnotationsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationsSearchesRequest) ProtoMessage() {}

func (x *PostAnnotationsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{192}
}

func (x *PostAnnotationsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PostAnnotationsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// DeleteAnnotationSearchMetricsRequest
type DeleteAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAnnotationSearchMetricsRequest) Reset() {
	*x = DeleteAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *DeleteAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{193}
}

func (x *DeleteAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationSearchMetricsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Execute a new input search and optionally save it
type PostInputsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searched to be executed or saved
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// If only_count is set, then the response will not contain hits,
	// but hit_counts instead.
	OnlyCount bool `protobuf:"varint,4,opt,name=only_count,json=onlyCount,proto3" json:"only_count,omitempty"`
}

func (x *PostInputsSearchesRequest) Reset() {
	*x = PostInputsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsSearchesRequest) ProtoMessage() {}

func (x *PostInputsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostInputsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{194}
}

func (x *PostInputsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PostInputsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *PostInputsSearchesRequest) GetOnlyCount() bool {
	if x != nil {
		return x.OnlyCount
	}
	return false
}

// SingleSearchResponse returns saved search in response to GetSearchRequest
type SingleSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of whether the search was successful.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Search *Search        `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *SingleSearchResponse) Reset() {
	*x = SingleSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSearchResponse) ProtoMessage() {}

func (x *SingleSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSearchResponse.ProtoReflect.Descriptor instead.
func (*SingleSearchResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{195}
}

func (x *SingleSearchResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleSearchResponse) GetSearch() *Search {
	if x != nil {
		return x.Search
	}
	return nil
}

// MultiSearchResponse
type MultiSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of whether the search was successful.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// A unique id which uniquely identifies a search
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The list of search result Hits.
	Hits []*Hit `protobuf:"bytes,3,rep,name=hits,proto3" json:"hits,omitempty"`
	// The original query provided in the request.
	Query *Query `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	// The original Searches provided in the request.
	Searches []*Search `protobuf:"bytes,5,rep,name=searches,proto3" json:"searches,omitempty"`
	// The counts of hits for each search, in the same order as searches.
	// Only returned if the request set only_count.
	HitCounts []*HitCount `protobuf:"bytes,6,rep,name=hit_counts,json=hitCounts,proto3" json:"hit_counts,omitempty"`
}

func (x *MultiSearchResponse) Reset() {
	*x = MultiSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSearchResponse) ProtoMessage() {}

func (x *MultiSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSearchResponse.ProtoReflect.Descriptor instead.
func (*MultiSearchResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{196}
}

func (x *MultiSearchResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiSearchResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultiSearchResponse) GetHits() []*Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *MultiSearchResponse) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *MultiSearchResponse) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *MultiSearchResponse) GetHitCounts() []*HitCount {
	if x != nil {
		return x.HitCounts
	}
	return nil
}

// PostAnnotationSearchMetricsRequest
type PostAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// A unique customer facing id to identify this eval request
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The ground truth we are evaluating against
	GroundTruth *Search `protobuf:"bytes,3,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"`
	// The set we are evaluating
	SearchToEval *Search `protobuf:"bytes,4,opt,name=search_to_eval,json=searchToEval,proto3" json:"search_to_eval,omitempty"`
	// List of concepts to evaluate are expected to be in data.concepts
	// If nil, then all app concepts are used
	Data *Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// The type of evaluation to use
	EvaluationType EvaluationType `protobuf:"varint,6,opt,name=evaluation_type,json=evaluationType,proto3,enum=clarifai.api.EvaluationType" json:"evaluation_type,omitempty"`
}

func (x *PostAnnotationSearchMetricsRequest) Reset() {
	*x = PostAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *PostAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{197}
}

func (x *PostAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostAnnotationSearchMetricsRequest) GetGroundTruth() *Search {
	if x != nil {
		return x.GroundTruth
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetSearchToEval() *Search {
	if x != nil {
		return x.SearchToEval
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetEvaluationType() EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return EvaluationType_Undefined
}

// GetAnnotationSearchMetricsRequest
type GetAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Unique custom facing id that identifies the eval to get
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAnnotationSearchMetricsRequest) Reset() {
	*x = GetAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *GetAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{198}
}

func (x *GetAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAnnotationSearchMetricsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListAnnotationSearchMetricsRequest
type ListAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListAnnotationSearchMetricsRequest) Reset() {
	*x = ListAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *ListAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{199}
}

func (x *ListAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MultiAnnotationSearchMetricsResponse
type MultiAnnotationSearchMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the request
	Status                  *status.Status             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AnnotationSearchMetrics []*AnnotationSearchMetrics `protobuf:"bytes,2,rep,name=annotation_search_metrics,json=annotationSearchMetrics,proto3" json:"annotation_search_metrics,omitempty"`
}

func (x *MultiAnnotationSearchMetricsResponse) Reset() {
	*x = MultiAnnotationSearchMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnnotationSearchMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnnotationSearchMetricsResponse) ProtoMessage() {}

func (x *MultiAnnotationSearchMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnnotationSearchMetricsResponse.ProtoReflect.Descriptor instead.
func (*MultiAnnotationSearchMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{200}
}

func (x *MultiAnnotationSearchMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAnnotationSearchMetricsResponse) GetAnnotationSearchMetrics() []*AnnotationSearchMetrics {
	if x != nil {
		return x.AnnotationSearchMetrics
	}
	return nil
}

// ListAnnotationFiltersRequest
type ListAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListAnnotationFiltersRequest) Reset() {
	*x = ListAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationFiltersRequest) ProtoMessage() {}

func (x *ListAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{201}
}

func (x *ListAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAnnotationFiltersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnnotationFiltersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetAnnotationFilterRequest
type GetAnnotationFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify annotation filter by id.
	AnnotationFilterId string `protobuf:"bytes,2,opt,name=annotation_filter_id,json=annotationFilterId,proto3" json:"annotation_filter_id,omitempty"`
}

func (x *GetAnnotationFilterRequest) Reset() {
	*x = GetAnnotationFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnnotationFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnnotationFilterRequest) ProtoMessage() {}

func (x *GetAnnotationFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnnotationFilterRequest.ProtoReflect.Descriptor instead.
func (*GetAnnotationFilterRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{202}
}

func (x *GetAnnotationFilterRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAnnotationFilterRequest) GetAnnotationFilterId() string {
	if x != nil {
		return x.AnnotationFilterId
	}
	return ""
}

// Request to add one or more annotation filters.
type PostAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of annotation filters that are requested to be added.
	AnnotationFilters []*AnnotationFilter `protobuf:"bytes,2,rep,name=annotation_filters,json=annotationFilters,proto3" json:"annotation_filters,omitempty"`
}

func (x *PostAnnotationFiltersRequest) Reset() {
	*x = PostAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationFiltersRequest) ProtoMessage() {}

func (x *PostAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{203}
}

func (x *PostAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationFiltersRequest) GetAnnotationFilters() []*AnnotationFilter {
	if x != nil {
		return x.AnnotationFilters
	}
	return nil
}

// Request to patch several annotation filters.
type PatchAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of annotation filters that are requested to be updated.
	AnnotationFilters []*AnnotationFilter `protobuf:"bytes,2,rep,name=annotation_filters,json=annotationFilters,proto3" json:"annotation_filters,omitempty"`
	// The action to perform on the patched objects
	// For now, only 'overwrite' action is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAnnotationFiltersRequest) Reset() {
	*x = PatchAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationFiltersRequest) ProtoMessage() {}

func (x *PatchAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{204}
}

func (x *PatchAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationFiltersRequest) GetAnnotationFilters() []*AnnotationFilter {
	if x != nil {
		return x.AnnotationFilters
	}
	return nil
}

func (x *PatchAnnotationFiltersRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several annotation filters by list of ids.
type DeleteAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Specify which filters to delete.
	AnnotationFilterIds []string `protobuf:"bytes,2,rep,name=annotation_filter_ids,json=annotationFilterIds,proto3" json:"annotation_filter_ids,omitempty"`
}

func (x *DeleteAnnotationFiltersRequest) Reset() {
	*x = DeleteAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationFiltersRequest) ProtoMessage() {}

func (x *DeleteAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{205}
}

func (x *DeleteAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationFiltersRequest) GetAnnotationFilterIds() []string {
	if x != nil {
		return x.AnnotationFilterIds
	}
	return nil
}

// MultiAnnotationFilterResponse
type MultiAnnotationFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AnnotationFilters []*AnnotationFilter `protobuf:"bytes,2,rep,name=annotation_filters,json=annotationFilters,proto3" json:"annotation_filters,omitempty"`
}

func (x *MultiAnnotationFilterResponse) Reset() {
	*x = MultiAnnotationFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnnotationFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnnotationFilterResponse) ProtoMessage() {}

func (x *MultiAnnotationFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnnotationFilterResponse.ProtoReflect.Descriptor instead.
func (*MultiAnnotationFilterResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{206}
}

func (x *MultiAnnotationFilterResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAnnotationFilterResponse) GetAnnotationFilters() []*AnnotationFilter {
	if x != nil {
		return x.AnnotationFilters
	}
	return nil
}

// SingleAnnotationFilterResponse
type SingleAnnotationFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AnnotationFilter *AnnotationFilter `protobuf:"bytes,2,opt,name=annotation_filter,json=annotationFilter,proto3" json:"annotation_filter,omitempty"`
}

func (x *SingleAnnotationFilterResponse) Reset() {
	*x = SingleAnnotationFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAnnotationFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAnnotationFilterResponse) ProtoMessage() {}

func (x *SingleAnnotationFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAnnotationFilterResponse.ProtoReflect.Descriptor instead.
func (*SingleAnnotationFilterResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{207}
}

func (x *SingleAnnotationFilterResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAnnotationFilterResponse) GetAnnotationFilter() *AnnotationFilter {
	if x != nil {
		return x.AnnotationFilter
	}
	return nil
}

// GetUserRequest
type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// we used to have user_id but moved to the standard convention. Since this endpoint
	// hasn't been exposed and only used by portal as a url this won't effect anything external.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,2,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{208}
}

func (x *GetUserRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetUserRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// SingleUserResponse
type SingleUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	User   *User          `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SingleUserResponse) Reset() {
	*x = SingleUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUserResponse) ProtoMessage() {}

func (x *SingleUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUserResponse.ProtoReflect.Descriptor instead.
func (*SingleUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{209}
}

func (x *SingleUserResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// PostValidatePasswordRequest
type PostValidatePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// password to be validated
	Password *Password `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PostValidatePasswordRequest) Reset() {
	*x = PostValidatePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostValidatePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostValidatePasswordRequest) ProtoMessage() {}

func (x *PostValidatePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostValidatePasswordRequest.ProtoReflect.Descriptor instead.
func (*PostValidatePasswordRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{210}
}

func (x *PostValidatePasswordRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostValidatePasswordRequest) GetPassword() *Password {
	if x != nil {
		return x.Password
	}
	return nil
}

// SinglePasswordValidationResponse
type SinglePasswordValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard clarifai status code
	Status             *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PasswordViolations *PasswordViolations `protobuf:"bytes,2,opt,name=password_violations,json=passwordViolations,proto3" json:"password_violations,omitempty"`
}

func (x *SinglePasswordValidationResponse) Reset() {
	*x = SinglePasswordValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinglePasswordValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinglePasswordValidationResponse) ProtoMessage() {}

func (x *SinglePasswordValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinglePasswordValidationResponse.ProtoReflect.Descriptor instead.
func (*SinglePasswordValidationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{211}
}

func (x *SinglePasswordValidationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SinglePasswordValidationResponse) GetPasswordViolations() *PasswordViolations {
	if x != nil {
		return x.PasswordViolations
	}
	return nil
}

// GetWorkflowRequest
type GetWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Workflow ID to retrieve
	// If no ID is specified we return default workflow of the application
	// If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Use this flag to look into clarifai published workflows first for a Workflow ID
	FavorClarifaiWorkflows bool `protobuf:"varint,3,opt,name=favor_clarifai_workflows,json=favorClarifaiWorkflows,proto3" json:"favor_clarifai_workflows,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,4,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// if true will not expand search to clarifai workflows
	ExcludeClarifaiWorkflows bool `protobuf:"varint,5,opt,name=exclude_clarifai_workflows,json=excludeClarifaiWorkflows,proto3" json:"exclude_clarifai_workflows,omitempty"`
}

func (x *GetWorkflowRequest) Reset() {
	*x = GetWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowRequest) ProtoMessage() {}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{212}
}

func (x *GetWorkflowRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowRequest) GetFavorClarifaiWorkflows() bool {
	if x != nil {
		return x.FavorClarifaiWorkflows
	}
	return false
}

func (x *GetWorkflowRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *GetWorkflowRequest) GetExcludeClarifaiWorkflows() bool {
	if x != nil {
		return x.ExcludeClarifaiWorkflows
	}
	return false
}

// ListWorkflowsRequest
type ListWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,10,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,5,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//
	//	*ListWorkflowsRequest_SortById
	//	*ListWorkflowsRequest_SortByModifiedAt
	//	*ListWorkflowsRequest_SortByCreatedAt
	//	*ListWorkflowsRequest_SortByStarCount
	SortBy isListWorkflowsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	// If true, we only return workflows that are handpicked by clarifai staff
	FeaturedOnly bool `protobuf:"varint,9,opt,name=featured_only,json=featuredOnly,proto3" json:"featured_only,omitempty"`
	// If true, we only return workflows that are starred by the requesting user
	StarredOnly bool `protobuf:"varint,11,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// Filter workflows by bookmark. If set, only return bookmarked workflows. Otherwise none bookmarked workflows only.
	Bookmark bool `protobuf:"varint,15,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	// Searching options:
	// Specify a search parameter in order to perform keyword search on the
	// following fields of the workflow:
	//   - id
	//   - description
	//   - notes
	//   - user_id (unless user_app_id.user_id is already set)
	//
	// Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
	// and used for partial prefix-matching (so searching for "clari" matches "clarifai").
	//
	// NOTE: Both the list of fields searched and the exact keyword matching
	// rules are subject to change and not guaranteed to be backwards-compatible.
	Search string `protobuf:"bytes,16,opt,name=search,proto3" json:"search,omitempty"`
	// Query various text fields (id, description and notes) that can contain the words in the query string.
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Query string `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	// Filter by the id of the workflow. This supports wilcard queries like "gen*" to match "general" as an example.
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Full text and prefix matching on id, owner id, description and notes. Searchable fields may be added
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	SearchTerm string `protobuf:"bytes,12,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
}

func (x *ListWorkflowsRequest) Reset() {
	*x = ListWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsRequest) ProtoMessage() {}

func (x *ListWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{213}
}

func (x *ListWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListWorkflowsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWorkflowsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListWorkflowsRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListWorkflowsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListWorkflowsRequest) GetSortBy() isListWorkflowsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListWorkflowsRequest) GetSortById() bool {
	if x, ok := x.GetSortBy().(*ListWorkflowsRequest_SortById); ok {
		return x.SortById
	}
	return false
}

func (x *ListWorkflowsRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListWorkflowsRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListWorkflowsRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListWorkflowsRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

func (x *ListWorkflowsRequest) GetSortByStarCount() bool {
	if x, ok := x.GetSortBy().(*ListWorkflowsRequest_SortByStarCount); ok {
		return x.SortByStarCount
	}
	return false
}

func (x *ListWorkflowsRequest) GetFeaturedOnly() bool {
	if x != nil {
		return x.FeaturedOnly
	}
	return false
}

func (x *ListWorkflowsRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListWorkflowsRequest) GetBookmark() bool {
	if x != nil {
		return x.Bookmark
	}
	return false
}

func (x *ListWorkflowsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListWorkflowsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListWorkflowsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListWorkflowsRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

type isListWorkflowsRequest_SortBy interface {
	isListWorkflowsRequest_SortBy()
}

type ListWorkflowsRequest_SortById struct {
	// Whether to order by the name
	SortById bool `protobuf:"varint,6,opt,name=sort_by_id,json=sortById,proto3,oneof"`
}

type ListWorkflowsRequest_SortByModifiedAt struct {
	// Whether to order by the modified_at time.
	// If none of the sort options is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,7,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

type ListWorkflowsRequest_SortByCreatedAt struct {
	// Whether to order by the created_at time.
	SortByCreatedAt bool `protobuf:"varint,13,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

type ListWorkflowsRequest_SortByStarCount struct {
	// Whether to order by the number of users stared the workflow
	SortByStarCount bool `protobuf:"varint,14,opt,name=sort_by_star_count,json=sortByStarCount,proto3,oneof"`
}

func (*ListWorkflowsRequest_SortById) isListWorkflowsRequest_SortBy() {}

func (*ListWorkflowsRequest_SortByModifiedAt) isListWorkflowsRequest_SortBy() {}

func (*ListWorkflowsRequest_SortByCreatedAt) isListWorkflowsRequest_SortBy() {}

func (*ListWorkflowsRequest_SortByStarCount) isListWorkflowsRequest_SortBy() {}

// PostWorkflowsRequest
type PostWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Workflows []*Workflow   `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
}

func (x *PostWorkflowsRequest) Reset() {
	*x = PostWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowsRequest) ProtoMessage() {}

func (x *PostWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{214}
}

func (x *PostWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowsRequest) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

// PatchWorkflowsRequest
type PatchWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Workflows []*Workflow   `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	//
	// Note that 'remove' can be used to remove the workflow image by setting
	// 'image.url' in the request to the current value returned for that workflow.
	// This cannot be used in a request that is patching other fields as well.
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchWorkflowsRequest) Reset() {
	*x = PatchWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchWorkflowsRequest) ProtoMessage() {}

func (x *PatchWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*PatchWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{215}
}

func (x *PatchWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchWorkflowsRequest) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *PatchWorkflowsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchWorkflowIdsRequest
type PatchWorkflowIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array containing 1 entry
	Ids []*IdUpdateSource `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchWorkflowIdsRequest) Reset() {
	*x = PatchWorkflowIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchWorkflowIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchWorkflowIdsRequest) ProtoMessage() {}

func (x *PatchWorkflowIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchWorkflowIdsRequest.ProtoReflect.Descriptor instead.
func (*PatchWorkflowIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{216}
}

func (x *PatchWorkflowIdsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchWorkflowIdsRequest) GetIds() []*IdUpdateSource {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PatchWorkflowIdsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteWorkflowRequest
type DeleteWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId string        `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *DeleteWorkflowRequest) Reset() {
	*x = DeleteWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowRequest) ProtoMessage() {}

func (x *DeleteWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{217}
}

func (x *DeleteWorkflowRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteWorkflowsRequest) Reset() {
	*x = DeleteWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowsRequest) ProtoMessage() {}

func (x *DeleteWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{218}
}

func (x *DeleteWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteWorkflowsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// SingleWorkflowResponse
type SingleWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflow *Workflow      `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *SingleWorkflowResponse) Reset() {
	*x = SingleWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWorkflowResponse) ProtoMessage() {}

func (x *SingleWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWorkflowResponse.ProtoReflect.Descriptor instead.
func (*SingleWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{219}
}

func (x *SingleWorkflowResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleWorkflowResponse) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

// MultiWorkflowResponse
type MultiWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflows []*Workflow    `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
}

func (x *MultiWorkflowResponse) Reset() {
	*x = MultiWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkflowResponse) ProtoMessage() {}

func (x *MultiWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkflowResponse.ProtoReflect.Descriptor instead.
func (*MultiWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{220}
}

func (x *MultiWorkflowResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWorkflowResponse) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

// PostWorkflowResultsRequest
type PostWorkflowResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Workflow ID to retrieve
	// If no ID is specified we return default workflow of the application
	// If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Workflow version ID to retrieve
	// If no ID is specified, latest workflow version is used
	VersionId string   `protobuf:"bytes,7,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Inputs    []*Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// FIXME(zeiler): the request for post workflows is using an outputconfig object that is supposed
	// to be within models. This is not consistent with setting this on the request for post model
	// outputs where it is inside a model object. To make this consistent we would send in the
	// workflow object so that each model can have it's own output config. If nobody is setting
	// this OutputConfig it would probably be easier to just remove it for now to keep things simpler
	// and then it's more consistent we just don't support the OutputConfig on workflows.
	OutputConfig *OutputConfig `protobuf:"bytes,4,opt,name=output_config,json=outputConfig,proto3" json:"output_config,omitempty"`
	// Use this flag to look into clarifai published workflows first for a Workflow ID
	FavorClarifaiWorkflows bool `protobuf:"varint,5,opt,name=favor_clarifai_workflows,json=favorClarifaiWorkflows,proto3" json:"favor_clarifai_workflows,omitempty"`
	// A workflow state to be maintained across PostWorkflowResults requests/responses.
	// If it is not sent in the initial request with workflow_state.id = "init" then no
	// state will be saved or returned in PostWorkflowResultsResponse.
	WorkflowState *WorkflowState `protobuf:"bytes,6,opt,name=workflow_state,json=workflowState,proto3" json:"workflow_state,omitempty"`
}

func (x *PostWorkflowResultsRequest) Reset() {
	*x = PostWorkflowResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsRequest) ProtoMessage() {}

func (x *PostWorkflowResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{221}
}

func (x *PostWorkflowResultsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowResultsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowResultsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostWorkflowResultsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PostWorkflowResultsRequest) GetOutputConfig() *OutputConfig {
	if x != nil {
		return x.OutputConfig
	}
	return nil
}

func (x *PostWorkflowResultsRequest) GetFavorClarifaiWorkflows() bool {
	if x != nil {
		return x.FavorClarifaiWorkflows
	}
	return false
}

func (x *PostWorkflowResultsRequest) GetWorkflowState() *WorkflowState {
	if x != nil {
		return x.WorkflowState
	}
	return nil
}

// PostWorkflowResultsResponse
type PostWorkflowResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The workflow that was used in predictions with PostWorkflowResults
	Workflow *Workflow `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	// The resulting predictions of all models in the workflow.
	Results []*WorkflowResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// A workflow state to be maintained across PostWorkflowResults requests/responses.
	// This WorkflowState should be passed in to subsequent PostWorkflowResults calls
	// if you want to keep track of state across requests.
	// If no WorkflowState was initialized in a request then no WorkflowState will be returned in this
	// response.
	WorkflowState *WorkflowState `protobuf:"bytes,4,opt,name=workflow_state,json=workflowState,proto3" json:"workflow_state,omitempty"`
}

func (x *PostWorkflowResultsResponse) Reset() {
	*x = PostWorkflowResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsResponse) ProtoMessage() {}

func (x *PostWorkflowResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsResponse.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{222}
}

func (x *PostWorkflowResultsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostWorkflowResultsResponse) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *PostWorkflowResultsResponse) GetResults() []*WorkflowResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PostWorkflowResultsResponse) GetWorkflowState() *WorkflowState {
	if x != nil {
		return x.WorkflowState
	}
	return nil
}

// PostWorkflowResultsSimilarityRequest
type PostWorkflowResultsSimilarityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId string        `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Workflow version ID to retrieve
	// If no ID is specified, latest workflow version is used
	VersionId string `protobuf:"bytes,7,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The specific model version whose outputs we are comparing
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// Each probe is compared against every pool input
	ProbeInputs []*Input `protobuf:"bytes,4,rep,name=probe_inputs,json=probeInputs,proto3" json:"probe_inputs,omitempty"`
	// Each pool input is compared against ever probe input
	PoolInputs []*Input `protobuf:"bytes,5,rep,name=pool_inputs,json=poolInputs,proto3" json:"pool_inputs,omitempty"`
	// Use this flag to look into clarifai published workflows first for a Workflow ID
	FavorClarifaiWorkflows bool `protobuf:"varint,6,opt,name=favor_clarifai_workflows,json=favorClarifaiWorkflows,proto3" json:"favor_clarifai_workflows,omitempty"`
}

func (x *PostWorkflowResultsSimilarityRequest) Reset() {
	*x = PostWorkflowResultsSimilarityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsSimilarityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsSimilarityRequest) ProtoMessage() {}

func (x *PostWorkflowResultsSimilarityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsSimilarityRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsSimilarityRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{223}
}

func (x *PostWorkflowResultsSimilarityRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowResultsSimilarityRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostWorkflowResultsSimilarityRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *PostWorkflowResultsSimilarityRequest) GetProbeInputs() []*Input {
	if x != nil {
		return x.ProbeInputs
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityRequest) GetPoolInputs() []*Input {
	if x != nil {
		return x.PoolInputs
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityRequest) GetFavorClarifaiWorkflows() bool {
	if x != nil {
		return x.FavorClarifaiWorkflows
	}
	return false
}

// PostWorkflowResultsSimilarityResponse
type PostWorkflowResultsSimilarityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status               `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Results []*WorkflowResultsSimilarity `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *PostWorkflowResultsSimilarityResponse) Reset() {
	*x = PostWorkflowResultsSimilarityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsSimilarityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsSimilarityResponse) ProtoMessage() {}

func (x *PostWorkflowResultsSimilarityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsSimilarityResponse.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsSimilarityResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{224}
}

func (x *PostWorkflowResultsSimilarityResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityResponse) GetResults() []*WorkflowResultsSimilarity {
	if x != nil {
		return x.Results
	}
	return nil
}

// ListWorkflowVersionsRequest
type ListWorkflowVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List versions for the workflow identified by this id
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListWorkflowVersionsRequest) Reset() {
	*x = ListWorkflowVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowVersionsRequest) ProtoMessage() {}

func (x *ListWorkflowVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{225}
}

func (x *ListWorkflowVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListWorkflowVersionsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListWorkflowVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWorkflowVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetWorkflowVersionRequest
type GetWorkflowVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The id of the workflow that has the requested version.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Get the identified by this id
	WorkflowVersionId string `protobuf:"bytes,3,opt,name=workflow_version_id,json=workflowVersionId,proto3" json:"workflow_version_id,omitempty"`
}

func (x *GetWorkflowVersionRequest) Reset() {
	*x = GetWorkflowVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowVersionRequest) ProtoMessage() {}

func (x *GetWorkflowVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowVersionRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{226}
}

func (x *GetWorkflowVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetWorkflowVersionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowVersionRequest) GetWorkflowVersionId() string {
	if x != nil {
		return x.WorkflowVersionId
	}
	return ""
}

// DeleteWorkflowVersionsRequest
type DeleteWorkflowVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The id of the workflow that has the requested versions to delete.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Delete the versions identified by these ids
	WorkflowVersionIds []string `protobuf:"bytes,3,rep,name=workflow_version_ids,json=workflowVersionIds,proto3" json:"workflow_version_ids,omitempty"`
}

func (x *DeleteWorkflowVersionsRequest) Reset() {
	*x = DeleteWorkflowVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowVersionsRequest) ProtoMessage() {}

func (x *DeleteWorkflowVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{227}
}

func (x *DeleteWorkflowVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowVersionsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *DeleteWorkflowVersionsRequest) GetWorkflowVersionIds() []string {
	if x != nil {
		return x.WorkflowVersionIds
	}
	return nil
}

// PatchWorkflowVersionsRequest
type PatchWorkflowVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The id of the workflow that has the requested versions to patch.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Patch these versions.
	WorkflowVersions []*WorkflowVersion `protobuf:"bytes,3,rep,name=workflow_versions,json=workflowVersions,proto3" json:"workflow_versions,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchWorkflowVersionsRequest) Reset() {
	*x = PatchWorkflowVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchWorkflowVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchWorkflowVersionsRequest) ProtoMessage() {}

func (x *PatchWorkflowVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchWorkflowVersionsRequest.ProtoReflect.Descriptor instead.
func (*PatchWorkflowVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{228}
}

func (x *PatchWorkflowVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchWorkflowVersionsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PatchWorkflowVersionsRequest) GetWorkflowVersions() []*WorkflowVersion {
	if x != nil {
		return x.WorkflowVersions
	}
	return nil
}

func (x *PatchWorkflowVersionsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// MultiWorkflowVersionResponse
type MultiWorkflowVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WorkflowVersions []*WorkflowVersion `protobuf:"bytes,2,rep,name=workflow_versions,json=workflowVersions,proto3" json:"workflow_versions,omitempty"`
}

func (x *MultiWorkflowVersionResponse) Reset() {
	*x = MultiWorkflowVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkflowVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkflowVersionResponse) ProtoMessage() {}

func (x *MultiWorkflowVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkflowVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiWorkflowVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{229}
}

func (x *MultiWorkflowVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWorkflowVersionResponse) GetWorkflowVersions() []*WorkflowVersion {
	if x != nil {
		return x.WorkflowVersions
	}
	return nil
}

// SingleWorkflowVersionResponse
type SingleWorkflowVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WorkflowVersion *WorkflowVersion `protobuf:"bytes,2,opt,name=workflow_version,json=workflowVersion,proto3" json:"workflow_version,omitempty"`
}

func (x *SingleWorkflowVersionResponse) Reset() {
	*x = SingleWorkflowVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWorkflowVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWorkflowVersionResponse) ProtoMessage() {}

func (x *SingleWorkflowVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWorkflowVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleWorkflowVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{230}
}

func (x *SingleWorkflowVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleWorkflowVersionResponse) GetWorkflowVersion() *WorkflowVersion {
	if x != nil {
		return x.WorkflowVersion
	}
	return nil
}

// Request to start app duplication jobs.
type PostAppDuplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user and application ID of the source application to duplicate.
	UserAppId       *UserAppIDSet     `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	AppDuplications []*AppDuplication `protobuf:"bytes,2,rep,name=app_duplications,json=appDuplications,proto3" json:"app_duplications,omitempty"`
}

func (x *PostAppDuplicationsRequest) Reset() {
	*x = PostAppDuplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppDuplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppDuplicationsRequest) ProtoMessage() {}

func (x *PostAppDuplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppDuplicationsRequest.ProtoReflect.Descriptor instead.
func (*PostAppDuplicationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{231}
}

func (x *PostAppDuplicationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAppDuplicationsRequest) GetAppDuplications() []*AppDuplication {
	if x != nil {
		return x.AppDuplications
	}
	return nil
}

// Request to get an app duplication job.
type GetAppDuplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user that created the app duplication job.
	UserAppId        *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	AppDuplicationId string        `protobuf:"bytes,2,opt,name=app_duplication_id,json=appDuplicationId,proto3" json:"app_duplication_id,omitempty"`
}

func (x *GetAppDuplicationRequest) Reset() {
	*x = GetAppDuplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppDuplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppDuplicationRequest) ProtoMessage() {}

func (x *GetAppDuplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppDuplicationRequest.ProtoReflect.Descriptor instead.
func (*GetAppDuplicationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{232}
}

func (x *GetAppDuplicationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAppDuplicationRequest) GetAppDuplicationId() string {
	if x != nil {
		return x.AppDuplicationId
	}
	return ""
}

// Request to list all the app duplication jobs that a user created.
type ListAppDuplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user whose app duplication jobs to list.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListAppDuplicationsRequest) Reset() {
	*x = ListAppDuplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppDuplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppDuplicationsRequest) ProtoMessage() {}

func (x *ListAppDuplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppDuplicationsRequest.ProtoReflect.Descriptor instead.
func (*ListAppDuplicationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{233}
}

func (x *ListAppDuplicationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAppDuplicationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAppDuplicationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// MultiAppDuplicationsResponse
type MultiAppDuplicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AppDuplications []*AppDuplication `protobuf:"bytes,2,rep,name=app_duplications,json=appDuplications,proto3" json:"app_duplications,omitempty"`
}

func (x *MultiAppDuplicationsResponse) Reset() {
	*x = MultiAppDuplicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAppDuplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAppDuplicationsResponse) ProtoMessage() {}

func (x *MultiAppDuplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAppDuplicationsResponse.ProtoReflect.Descriptor instead.
func (*MultiAppDuplicationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{234}
}

func (x *MultiAppDuplicationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAppDuplicationsResponse) GetAppDuplications() []*AppDuplication {
	if x != nil {
		return x.AppDuplications
	}
	return nil
}

// SingleAppDuplicationResponse
type SingleAppDuplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AppDuplication *AppDuplication `protobuf:"bytes,2,opt,name=app_duplication,json=appDuplication,proto3" json:"app_duplication,omitempty"`
}

func (x *SingleAppDuplicationResponse) Reset() {
	*x = SingleAppDuplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAppDuplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAppDuplicationResponse) ProtoMessage() {}

func (x *SingleAppDuplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAppDuplicationResponse.ProtoReflect.Descriptor instead.
func (*SingleAppDuplicationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{235}
}

func (x *SingleAppDuplicationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAppDuplicationResponse) GetAppDuplication() *AppDuplication {
	if x != nil {
		return x.AppDuplication
	}
	return nil
}

// Request to create Tasks.
type PostTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Tasks     []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *PostTasksRequest) Reset() {
	*x = PostTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTasksRequest) ProtoMessage() {}

func (x *PostTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTasksRequest.ProtoReflect.Descriptor instead.
func (*PostTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{236}
}

func (x *PostTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostTasksRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Request to get one task.
type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response.
	// Currently supported additional fields:
	// - all
	// - worker.users
	// - review.users
	// - metrics.work.inputs_count_estimated
	// - metrics.work.inputs_percent_estimated
	AdditionalFields []string `protobuf:"bytes,3,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{237}
}

func (x *GetTaskRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// Request to list multiple tasks.
type ListTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Get tasks that have ANY user from this list assigned as worker.
	WorkerUserIds []string `protobuf:"bytes,4,rep,name=worker_user_ids,json=workerUserIds,proto3" json:"worker_user_ids,omitempty"`
	// Get tasks that have ANY user from this list assigned as reviewer.
	ReviewUserIds []string `protobuf:"bytes,5,rep,name=review_user_ids,json=reviewUserIds,proto3" json:"review_user_ids,omitempty"`
	// Get tasks that are associated to ANY label order from this list.
	LabelOrderIds []string `protobuf:"bytes,8,rep,name=label_order_ids,json=labelOrderIds,proto3" json:"label_order_ids,omitempty"`
	// Get label order tasks as well
	// It is automatically set to true if label_order_ids is set.
	IncludingLabelOrderTasks bool `protobuf:"varint,6,opt,name=including_label_order_tasks,json=includingLabelOrderTasks,proto3" json:"including_label_order_tasks,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response.
	// Currently supported additional fields:
	// - all
	// - worker.users
	// - review.users
	// - metrics.work.inputs_count_estimated
	// - metrics.work.inputs_percent_estimated
	AdditionalFields []string `protobuf:"bytes,7,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// (optional) task IDs to filter on
	Ids []string `protobuf:"bytes,9,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{238}
}

func (x *ListTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListTasksRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTasksRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListTasksRequest) GetWorkerUserIds() []string {
	if x != nil {
		return x.WorkerUserIds
	}
	return nil
}

func (x *ListTasksRequest) GetReviewUserIds() []string {
	if x != nil {
		return x.ReviewUserIds
	}
	return nil
}

func (x *ListTasksRequest) GetLabelOrderIds() []string {
	if x != nil {
		return x.LabelOrderIds
	}
	return nil
}

func (x *ListTasksRequest) GetIncludingLabelOrderTasks() bool {
	if x != nil {
		return x.IncludingLabelOrderTasks
	}
	return false
}

func (x *ListTasksRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListTasksRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request to patch a list of tasks.
type PatchTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Tasks     []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchTasksRequest) Reset() {
	*x = PatchTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTasksRequest) ProtoMessage() {}

func (x *PatchTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTasksRequest.ProtoReflect.Descriptor instead.
func (*PatchTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{239}
}

func (x *PatchTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchTasksRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *PatchTasksRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete a list of tasks.
type DeleteTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteTasksRequest) Reset() {
	*x = DeleteTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTasksRequest) ProtoMessage() {}

func (x *DeleteTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTasksRequest.ProtoReflect.Descriptor instead.
func (*DeleteTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{240}
}

func (x *DeleteTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteTasksRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Response with multiple Tasks.
type MultiTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Tasks  []*Task        `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *MultiTaskResponse) Reset() {
	*x = MultiTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTaskResponse) ProtoMessage() {}

func (x *MultiTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTaskResponse.ProtoReflect.Descriptor instead.
func (*MultiTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{241}
}

func (x *MultiTaskResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTaskResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Response with a single Task.
type SingleTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Task   *Task          `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *SingleTaskResponse) Reset() {
	*x = SingleTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTaskResponse) ProtoMessage() {}

func (x *SingleTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTaskResponse.ProtoReflect.Descriptor instead.
func (*SingleTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{242}
}

func (x *SingleTaskResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// GetTaskCountRequest can be used for fetching -
// 1. Task annotation count per user, per status
// 1. Task input (anchor annotations) count per user, per status
type GetTaskCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// task_id for which count per user per status is needed
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// for given task_id, user_ids to filter on (optional)
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GetTaskCountRequest) Reset() {
	*x = GetTaskCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountRequest) ProtoMessage() {}

func (x *GetTaskCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountRequest.ProtoReflect.Descriptor instead.
func (*GetTaskCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{243}
}

func (x *GetTaskCountRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetTaskCountRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskCountRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// SingleTaskCountResponse represent counts of annotations or inputs(anchor annotations) for labelers in given task
type SingleTaskCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AppId  string                    `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TaskId string                    `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Counts []*TaskStatusCountPerUser `protobuf:"bytes,4,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *SingleTaskCountResponse) Reset() {
	*x = SingleTaskCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTaskCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTaskCountResponse) ProtoMessage() {}

func (x *SingleTaskCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTaskCountResponse.ProtoReflect.Descriptor instead.
func (*SingleTaskCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{244}
}

func (x *SingleTaskCountResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleTaskCountResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SingleTaskCountResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SingleTaskCountResponse) GetCounts() []*TaskStatusCountPerUser {
	if x != nil {
		return x.Counts
	}
	return nil
}

// Request to create label orders.
type PostLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LabelOrders []*LabelOrder `protobuf:"bytes,2,rep,name=label_orders,json=labelOrders,proto3" json:"label_orders,omitempty"`
}

func (x *PostLabelOrdersRequest) Reset() {
	*x = PostLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLabelOrdersRequest) ProtoMessage() {}

func (x *PostLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*PostLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{245}
}

func (x *PostLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostLabelOrdersRequest) GetLabelOrders() []*LabelOrder {
	if x != nil {
		return x.LabelOrders
	}
	return nil
}

// Request to get one label order.
type GetLabelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LabelOrderId string        `protobuf:"bytes,2,opt,name=label_order_id,json=labelOrderId,proto3" json:"label_order_id,omitempty"`
}

func (x *GetLabelOrderRequest) Reset() {
	*x = GetLabelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelOrderRequest) ProtoMessage() {}

func (x *GetLabelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelOrderRequest.ProtoReflect.Descriptor instead.
func (*GetLabelOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{246}
}

func (x *GetLabelOrderRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetLabelOrderRequest) GetLabelOrderId() string {
	if x != nil {
		return x.LabelOrderId
	}
	return ""
}

// Request to list multiple label orders.
type ListLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListLabelOrdersRequest) Reset() {
	*x = ListLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelOrdersRequest) ProtoMessage() {}

func (x *ListLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{247}
}

func (x *ListLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListLabelOrdersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLabelOrdersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Request to patch a list of label orders.
type PatchLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LabelOrders []*LabelOrder `protobuf:"bytes,2,rep,name=label_orders,json=labelOrders,proto3" json:"label_orders,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchLabelOrdersRequest) Reset() {
	*x = PatchLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchLabelOrdersRequest) ProtoMessage() {}

func (x *PatchLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*PatchLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{248}
}

func (x *PatchLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchLabelOrdersRequest) GetLabelOrders() []*LabelOrder {
	if x != nil {
		return x.LabelOrders
	}
	return nil
}

func (x *PatchLabelOrdersRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete a list of label orders.
type DeleteLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteLabelOrdersRequest) Reset() {
	*x = DeleteLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelOrdersRequest) ProtoMessage() {}

func (x *DeleteLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{249}
}

func (x *DeleteLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteLabelOrdersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Response with multiple label order.
type MultiLabelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LabelOrders []*LabelOrder  `protobuf:"bytes,2,rep,name=label_orders,json=labelOrders,proto3" json:"label_orders,omitempty"`
}

func (x *MultiLabelOrderResponse) Reset() {
	*x = MultiLabelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLabelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLabelOrderResponse) ProtoMessage() {}

func (x *MultiLabelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLabelOrderResponse.ProtoReflect.Descriptor instead.
func (*MultiLabelOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{250}
}

func (x *MultiLabelOrderResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiLabelOrderResponse) GetLabelOrders() []*LabelOrder {
	if x != nil {
		return x.LabelOrders
	}
	return nil
}

// Response with a label order.
type SingleLabelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LabelOrder *LabelOrder    `protobuf:"bytes,2,opt,name=label_order,json=labelOrder,proto3" json:"label_order,omitempty"`
}

func (x *SingleLabelOrderResponse) Reset() {
	*x = SingleLabelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleLabelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleLabelOrderResponse) ProtoMessage() {}

func (x *SingleLabelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleLabelOrderResponse.ProtoReflect.Descriptor instead.
func (*SingleLabelOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{251}
}

func (x *SingleLabelOrderResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleLabelOrderResponse) GetLabelOrder() *LabelOrder {
	if x != nil {
		return x.LabelOrder
	}
	return nil
}

// Request to create Collectors.
type PostCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collectors []*Collector  `protobuf:"bytes,2,rep,name=collectors,proto3" json:"collectors,omitempty"`
}

func (x *PostCollectorsRequest) Reset() {
	*x = PostCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCollectorsRequest) ProtoMessage() {}

func (x *PostCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCollectorsRequest.ProtoReflect.Descriptor instead.
func (*PostCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{252}
}

func (x *PostCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostCollectorsRequest) GetCollectors() []*Collector {
	if x != nil {
		return x.Collectors
	}
	return nil
}

// PatchCollectorsRequest
type PatchCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collectors []*Collector  `protobuf:"bytes,2,rep,name=collectors,proto3" json:"collectors,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchCollectorsRequest) Reset() {
	*x = PatchCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCollectorsRequest) ProtoMessage() {}

func (x *PatchCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCollectorsRequest.ProtoReflect.Descriptor instead.
func (*PatchCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{253}
}

func (x *PatchCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchCollectorsRequest) GetCollectors() []*Collector {
	if x != nil {
		return x.Collectors
	}
	return nil
}

func (x *PatchCollectorsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteCollectorsRequest) Reset() {
	*x = DeleteCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectorsRequest) ProtoMessage() {}

func (x *DeleteCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectorsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{254}
}

func (x *DeleteCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteCollectorsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteCollectorsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// Request to GET a single Collector.
type GetCollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	CollectorId string        `protobuf:"bytes,2,opt,name=collector_id,json=collectorId,proto3" json:"collector_id,omitempty"`
}

func (x *GetCollectorRequest) Reset() {
	*x = GetCollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectorRequest) ProtoMessage() {}

func (x *GetCollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectorRequest.ProtoReflect.Descriptor instead.
func (*GetCollectorRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{255}
}

func (x *GetCollectorRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetCollectorRequest) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

// Request to GET all the Collectors.
type ListCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListCollectorsRequest) Reset() {
	*x = ListCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectorsRequest) ProtoMessage() {}

func (x *ListCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectorsRequest.ProtoReflect.Descriptor instead.
func (*ListCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{256}
}

func (x *ListCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListCollectorsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCollectorsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Response with multiple Collectors.
type MultiCollectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collectors []*Collector   `protobuf:"bytes,2,rep,name=collectors,proto3" json:"collectors,omitempty"`
}

func (x *MultiCollectorResponse) Reset() {
	*x = MultiCollectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCollectorResponse) ProtoMessage() {}

func (x *MultiCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCollectorResponse.ProtoReflect.Descriptor instead.
func (*MultiCollectorResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{257}
}

func (x *MultiCollectorResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiCollectorResponse) GetCollectors() []*Collector {
	if x != nil {
		return x.Collectors
	}
	return nil
}

// Response with a single Collector.
type SingleCollectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collector *Collector     `protobuf:"bytes,2,opt,name=collector,proto3" json:"collector,omitempty"`
}

func (x *SingleCollectorResponse) Reset() {
	*x = SingleCollectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleCollectorResponse) ProtoMessage() {}

func (x *SingleCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleCollectorResponse.ProtoReflect.Descriptor instead.
func (*SingleCollectorResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{258}
}

func (x *SingleCollectorResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleCollectorResponse) GetCollector() *Collector {
	if x != nil {
		return x.Collector
	}
	return nil
}

// PostStatValuesRequest
type PostStatValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user and app information for the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The stats to post, can post more than one at a time.
	StatValues []*StatValue `protobuf:"bytes,2,rep,name=stat_values,json=statValues,proto3" json:"stat_values,omitempty"`
}

func (x *PostStatValuesRequest) Reset() {
	*x = PostStatValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStatValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStatValuesRequest) ProtoMessage() {}

func (x *PostStatValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStatValuesRequest.ProtoReflect.Descriptor instead.
func (*PostStatValuesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{259}
}

func (x *PostStatValuesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostStatValuesRequest) GetStatValues() []*StatValue {
	if x != nil {
		return x.StatValues
	}
	return nil
}

// MultiStatValueResponse
type MultiStatValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned stats values.
	StatValues []*StatValue `protobuf:"bytes,2,rep,name=stat_values,json=statValues,proto3" json:"stat_values,omitempty"`
}

func (x *MultiStatValueResponse) Reset() {
	*x = MultiStatValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiStatValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStatValueResponse) ProtoMessage() {}

func (x *MultiStatValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStatValueResponse.ProtoReflect.Descriptor instead.
func (*MultiStatValueResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{260}
}

func (x *MultiStatValueResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiStatValueResponse) GetStatValues() []*StatValue {
	if x != nil {
		return x.StatValues
	}
	return nil
}

// PostStatValuesAggregateRequest
type PostStatValuesAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids present in the url of the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Query to retrieve aggregate values.
	StatValueAggregateQueries []*StatValueAggregateQuery `protobuf:"bytes,2,rep,name=stat_value_aggregate_queries,json=statValueAggregateQueries,proto3" json:"stat_value_aggregate_queries,omitempty"`
}

func (x *PostStatValuesAggregateRequest) Reset() {
	*x = PostStatValuesAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStatValuesAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStatValuesAggregateRequest) ProtoMessage() {}

func (x *PostStatValuesAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStatValuesAggregateRequest.ProtoReflect.Descriptor instead.
func (*PostStatValuesAggregateRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{261}
}

func (x *PostStatValuesAggregateRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostStatValuesAggregateRequest) GetStatValueAggregateQueries() []*StatValueAggregateQuery {
	if x != nil {
		return x.StatValueAggregateQueries
	}
	return nil
}

// MultiStatValueAggregateResponse
type MultiStatValueAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The aggregate results for each query passedin.
	StatValueAggregateResults []*StatValueAggregateResult `protobuf:"bytes,2,rep,name=stat_value_aggregate_results,json=statValueAggregateResults,proto3" json:"stat_value_aggregate_results,omitempty"`
}

func (x *MultiStatValueAggregateResponse) Reset() {
	*x = MultiStatValueAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiStatValueAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStatValueAggregateResponse) ProtoMessage() {}

func (x *MultiStatValueAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStatValueAggregateResponse.ProtoReflect.Descriptor instead.
func (*MultiStatValueAggregateResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{262}
}

func (x *MultiStatValueAggregateResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiStatValueAggregateResponse) GetStatValueAggregateResults() []*StatValueAggregateResult {
	if x != nil {
		return x.StatValueAggregateResults
	}
	return nil
}

// PostTrendingMetricsViewRequest
type PostTrendingMetricsViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// For now view types 'apps', 'workflows', and 'models' are supported.
	ViewType string `protobuf:"bytes,2,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	// ID of the views object.
	ObjectId string `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *PostTrendingMetricsViewRequest) Reset() {
	*x = PostTrendingMetricsViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTrendingMetricsViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTrendingMetricsViewRequest) ProtoMessage() {}

func (x *PostTrendingMetricsViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTrendingMetricsViewRequest.ProtoReflect.Descriptor instead.
func (*PostTrendingMetricsViewRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{263}
}

func (x *PostTrendingMetricsViewRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostTrendingMetricsViewRequest) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *PostTrendingMetricsViewRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

// ListTrendingMetricsViewsRequest
type ListTrendingMetricsViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// For now view types 'apps', 'workflows', and 'models' are supported.
	ViewType string `protobuf:"bytes,2,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListTrendingMetricsViewsRequest) Reset() {
	*x = ListTrendingMetricsViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrendingMetricsViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrendingMetricsViewsRequest) ProtoMessage() {}

func (x *ListTrendingMetricsViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrendingMetricsViewsRequest.ProtoReflect.Descriptor instead.
func (*ListTrendingMetricsViewsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{264}
}

func (x *ListTrendingMetricsViewsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListTrendingMetricsViewsRequest) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *ListTrendingMetricsViewsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTrendingMetricsViewsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// MultiTrendingMetricsViewResponse
type MultiTrendingMetricsViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metrics []*TrendingMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MultiTrendingMetricsViewResponse) Reset() {
	*x = MultiTrendingMetricsViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTrendingMetricsViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTrendingMetricsViewResponse) ProtoMessage() {}

func (x *MultiTrendingMetricsViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTrendingMetricsViewResponse.ProtoReflect.Descriptor instead.
func (*MultiTrendingMetricsViewResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{265}
}

func (x *MultiTrendingMetricsViewResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTrendingMetricsViewResponse) GetMetrics() []*TrendingMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// GetModuleRequest
type GetModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId        *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId         string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	AdditionalFields []string      `protobuf:"bytes,3,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetModuleRequest) Reset() {
	*x = GetModuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleRequest) ProtoMessage() {}

func (x *GetModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleRequest.ProtoReflect.Descriptor instead.
func (*GetModuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{266}
}

func (x *GetModuleRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModuleRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *GetModuleRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// ListModulesRequest
type ListModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage          uint32   `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	AdditionalFields []string `protobuf:"bytes,5,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,6,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//
	//	*ListModulesRequest_SortByCreatedAt
	//	*ListModulesRequest_SortByStarCount
	//	*ListModulesRequest_SortByModifiedAt
	//	*ListModulesRequest_SortById
	SortBy isListModulesRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	StarredOnly bool `protobuf:"varint,4,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// Filter modules by bookmark. If set, only return bookmarked modules. Otherwise none bookmarked modules only.
	Bookmark bool `protobuf:"varint,10,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	// Searching options:
	// Specify a search parameter in order to perform keyword search on the
	// following fields of the module:
	//   - id
	//   - description
	//   - user_id (unless user_app_id.user_id is already set)
	//
	// Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
	// and used for partial prefix-matching (so searching for "clari" matches "clarifai").
	//
	// NOTE: Both the list of fields searched and the exact keyword matching
	// rules are subject to change and not guaranteed to be backwards-compatible.
	Search string `protobuf:"bytes,14,opt,name=search,proto3" json:"search,omitempty"`
	// Filter by the id and description of the module. This supports wildcard queries like "gen*" to match "general" as an example.
	// Deprecated: use search instead.
	//
	// Deprecated: Do not use.
	Name string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Filter by the application owner whose this module belongs to
	// Deprecated: use search instead of name.
	//
	// Deprecated: Do not use.
	FilterByUserId bool `protobuf:"varint,13,opt,name=filter_by_user_id,json=filterByUserId,proto3" json:"filter_by_user_id,omitempty"`
}

func (x *ListModulesRequest) Reset() {
	*x = ListModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModulesRequest) ProtoMessage() {}

func (x *ListModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModulesRequest.ProtoReflect.Descriptor instead.
func (*ListModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{267}
}

func (x *ListModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModulesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModulesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListModulesRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListModulesRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListModulesRequest) GetSortBy() isListModulesRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListModulesRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListModulesRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

func (x *ListModulesRequest) GetSortByStarCount() bool {
	if x, ok := x.GetSortBy().(*ListModulesRequest_SortByStarCount); ok {
		return x.SortByStarCount
	}
	return false
}

func (x *ListModulesRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListModulesRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListModulesRequest) GetSortById() bool {
	if x, ok := x.GetSortBy().(*ListModulesRequest_SortById); ok {
		return x.SortById
	}
	return false
}

func (x *ListModulesRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListModulesRequest) GetBookmark() bool {
	if x != nil {
		return x.Bookmark
	}
	return false
}

func (x *ListModulesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListModulesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListModulesRequest) GetFilterByUserId() bool {
	if x != nil {
		return x.FilterByUserId
	}
	return false
}

type isListModulesRequest_SortBy interface {
	isListModulesRequest_SortBy()
}

type ListModulesRequest_SortByCreatedAt struct {
	// Whether to order by the created_at time.
	SortByCreatedAt bool `protobuf:"varint,7,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

type ListModulesRequest_SortByStarCount struct {
	// Whether to order by the number of users stared the app
	SortByStarCount bool `protobuf:"varint,8,opt,name=sort_by_star_count,json=sortByStarCount,proto3,oneof"`
}

type ListModulesRequest_SortByModifiedAt struct {
	// If neither sort option is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,9,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

type ListModulesRequest_SortById struct {
	// Whether to order by the external id
	SortById bool `protobuf:"varint,11,opt,name=sort_by_id,json=sortById,proto3,oneof"`
}

func (*ListModulesRequest_SortByCreatedAt) isListModulesRequest_SortBy() {}

func (*ListModulesRequest_SortByStarCount) isListModulesRequest_SortBy() {}

func (*ListModulesRequest_SortByModifiedAt) isListModulesRequest_SortBy() {}

func (*ListModulesRequest_SortById) isListModulesRequest_SortBy() {}

// PostModulesRequest
type PostModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// This allows you to create one or more module by posting it to the API.
	Modules []*Module `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *PostModulesRequest) Reset() {
	*x = PostModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModulesRequest) ProtoMessage() {}

func (x *PostModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModulesRequest.ProtoReflect.Descriptor instead.
func (*PostModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{268}
}

func (x *PostModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModulesRequest) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

// PatchModulesRequest
type PatchModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Modules   []*Module     `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	// The action to perform on the patched objects
	// Supported values: 'overwrite' and 'remove'.
	//
	// Note that 'remove' can only be used to remove the module image by setting
	// 'image.url' in the request to the current value returned for that module.
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModulesRequest) Reset() {
	*x = PatchModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModulesRequest) ProtoMessage() {}

func (x *PatchModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModulesRequest.ProtoReflect.Descriptor instead.
func (*PatchModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{269}
}

func (x *PatchModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModulesRequest) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *PatchModulesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteModulesRequest) Reset() {
	*x = DeleteModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModulesRequest) ProtoMessage() {}

func (x *DeleteModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModulesRequest.ProtoReflect.Descriptor instead.
func (*DeleteModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{270}
}

func (x *DeleteModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModulesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleModuleResponse
type SingleModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Module *Module        `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *SingleModuleResponse) Reset() {
	*x = SingleModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModuleResponse) ProtoMessage() {}

func (x *SingleModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModuleResponse.ProtoReflect.Descriptor instead.
func (*SingleModuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{271}
}

func (x *SingleModuleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModuleResponse) GetModule() *Module {
	if x != nil {
		return x.Module
	}
	return nil
}

// MultiModuleResponse
type MultiModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Modules []*Module      `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *MultiModuleResponse) Reset() {
	*x = MultiModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModuleResponse) ProtoMessage() {}

func (x *MultiModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModuleResponse.ProtoReflect.Descriptor instead.
func (*MultiModuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{272}
}

func (x *MultiModuleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModuleResponse) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

// request for different endpoints currently.
type GetModuleVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId       *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId        string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ModuleVersionId string        `protobuf:"bytes,3,opt,name=module_version_id,json=moduleVersionId,proto3" json:"module_version_id,omitempty"`
}

func (x *GetModuleVersionRequest) Reset() {
	*x = GetModuleVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleVersionRequest) ProtoMessage() {}

func (x *GetModuleVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleVersionRequest.ProtoReflect.Descriptor instead.
func (*GetModuleVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{273}
}

func (x *GetModuleVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModuleVersionRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *GetModuleVersionRequest) GetModuleVersionId() string {
	if x != nil {
		return x.ModuleVersionId
	}
	return ""
}

// ListModuleVersionsRequest
type ListModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModuleVersionsRequest) Reset() {
	*x = ListModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModuleVersionsRequest) ProtoMessage() {}

func (x *ListModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{274}
}

func (x *ListModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModuleVersionsRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *ListModuleVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModuleVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostModuleVersionsRequest
type PostModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// This allows you to create one or more module by posting it to the API.
	ModuleVersions []*ModuleVersion `protobuf:"bytes,3,rep,name=module_versions,json=moduleVersions,proto3" json:"module_versions,omitempty"`
}

func (x *PostModuleVersionsRequest) Reset() {
	*x = PostModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModuleVersionsRequest) ProtoMessage() {}

func (x *PostModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{275}
}

func (x *PostModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModuleVersionsRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *PostModuleVersionsRequest) GetModuleVersions() []*ModuleVersion {
	if x != nil {
		return x.ModuleVersions
	}
	return nil
}

// PatchModuleVersionsRequest
type PatchModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// This allows you to modify the module version details.
	// ########## Supported fields ##########
	// - description
	// - id
	// - metadata.fields
	// - module_nav.module_sub_navs[].query_key
	// - module_nav.module_sub_navs[].query_value
	// - module_nav.module_sub_navs[].title
	// - module_nav.title
	// - notes
	// - visibility.gettable
	ModuleVersions []*ModuleVersion `protobuf:"bytes,3,rep,name=module_versions,json=moduleVersions,proto3" json:"module_versions,omitempty"`
	// The action to perform on the patched objects
	// For now only action 'merge' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModuleVersionsRequest) Reset() {
	*x = PatchModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModuleVersionsRequest) ProtoMessage() {}

func (x *PatchModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*PatchModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{276}
}

func (x *PatchModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModuleVersionsRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *PatchModuleVersionsRequest) GetModuleVersions() []*ModuleVersion {
	if x != nil {
		return x.ModuleVersions
	}
	return nil
}

func (x *PatchModuleVersionsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several module versions by the list of ids.
type DeleteModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	Ids       []string      `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteModuleVersionsRequest) Reset() {
	*x = DeleteModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModuleVersionsRequest) ProtoMessage() {}

func (x *DeleteModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{277}
}

func (x *DeleteModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModuleVersionsRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *DeleteModuleVersionsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request to get the number of installations (by all users) for the module version
type GetModuleVersionUsageCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId       *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId        string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ModuleVersionId string        `protobuf:"bytes,3,opt,name=module_version_id,json=moduleVersionId,proto3" json:"module_version_id,omitempty"`
}

func (x *GetModuleVersionUsageCountRequest) Reset() {
	*x = GetModuleVersionUsageCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleVersionUsageCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleVersionUsageCountRequest) ProtoMessage() {}

func (x *GetModuleVersionUsageCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleVersionUsageCountRequest.ProtoReflect.Descriptor instead.
func (*GetModuleVersionUsageCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{278}
}

func (x *GetModuleVersionUsageCountRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModuleVersionUsageCountRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *GetModuleVersionUsageCountRequest) GetModuleVersionId() string {
	if x != nil {
		return x.ModuleVersionId
	}
	return ""
}

// SingleModuleVersionResponse
type SingleModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModuleVersion *ModuleVersion `protobuf:"bytes,2,opt,name=module_version,json=moduleVersion,proto3" json:"module_version,omitempty"`
}

func (x *SingleModuleVersionResponse) Reset() {
	*x = SingleModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModuleVersionResponse) ProtoMessage() {}

func (x *SingleModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{279}
}

func (x *SingleModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModuleVersionResponse) GetModuleVersion() *ModuleVersion {
	if x != nil {
		return x.ModuleVersion
	}
	return nil
}

// MultiModuleVersionResponse
type MultiModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModuleVersions []*ModuleVersion `protobuf:"bytes,2,rep,name=module_versions,json=moduleVersions,proto3" json:"module_versions,omitempty"`
}

func (x *MultiModuleVersionResponse) Reset() {
	*x = MultiModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModuleVersionResponse) ProtoMessage() {}

func (x *MultiModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{280}
}

func (x *MultiModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModuleVersionResponse) GetModuleVersions() []*ModuleVersion {
	if x != nil {
		return x.ModuleVersions
	}
	return nil
}

// SingleModuleVersionUsageCountResponse
type SingleModuleVersionUsageCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UsageCount uint32         `protobuf:"varint,2,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
}

func (x *SingleModuleVersionUsageCountResponse) Reset() {
	*x = SingleModuleVersionUsageCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModuleVersionUsageCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModuleVersionUsageCountResponse) ProtoMessage() {}

func (x *SingleModuleVersionUsageCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModuleVersionUsageCountResponse.ProtoReflect.Descriptor instead.
func (*SingleModuleVersionUsageCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{281}
}

func (x *SingleModuleVersionUsageCountResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModuleVersionUsageCountResponse) GetUsageCount() uint32 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

// GetInstalledModuleVersionRequest
type GetInstalledModuleVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// the ID to get of the install module version.
	InstalledModuleVersionId string `protobuf:"bytes,2,opt,name=installed_module_version_id,json=installedModuleVersionId,proto3" json:"installed_module_version_id,omitempty"`
}

func (x *GetInstalledModuleVersionRequest) Reset() {
	*x = GetInstalledModuleVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstalledModuleVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstalledModuleVersionRequest) ProtoMessage() {}

func (x *GetInstalledModuleVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstalledModuleVersionRequest.ProtoReflect.Descriptor instead.
func (*GetInstalledModuleVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{282}
}

func (x *GetInstalledModuleVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInstalledModuleVersionRequest) GetInstalledModuleVersionId() string {
	if x != nil {
		return x.InstalledModuleVersionId
	}
	return ""
}

// ListInstalledModuleVersionsRequest
type ListInstalledModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListInstalledModuleVersionsRequest) Reset() {
	*x = ListInstalledModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstalledModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstalledModuleVersionsRequest) ProtoMessage() {}

func (x *ListInstalledModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstalledModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListInstalledModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{283}
}

func (x *ListInstalledModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListInstalledModuleVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListInstalledModuleVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostInstalledModuleVersionsRequest to install a module version into the app in the URL
type PostInstalledModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// This allows you to create one or more module by posting it to the API.
	InstalledModuleVersions []*InstalledModuleVersion `protobuf:"bytes,2,rep,name=installed_module_versions,json=installedModuleVersions,proto3" json:"installed_module_versions,omitempty"`
}

func (x *PostInstalledModuleVersionsRequest) Reset() {
	*x = PostInstalledModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInstalledModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInstalledModuleVersionsRequest) ProtoMessage() {}

func (x *PostInstalledModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInstalledModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostInstalledModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{284}
}

func (x *PostInstalledModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInstalledModuleVersionsRequest) GetInstalledModuleVersions() []*InstalledModuleVersion {
	if x != nil {
		return x.InstalledModuleVersions
	}
	return nil
}

// PostInstalledModuleVersionsKeyRequest to associate a key of the caller's to the installed module
// version.
type PostInstalledModuleVersionsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// the ID to get of the install module version.
	InstalledModuleVersionId string `protobuf:"bytes,2,opt,name=installed_module_version_id,json=installedModuleVersionId,proto3" json:"installed_module_version_id,omitempty"`
}

func (x *PostInstalledModuleVersionsKeyRequest) Reset() {
	*x = PostInstalledModuleVersionsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInstalledModuleVersionsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInstalledModuleVersionsKeyRequest) ProtoMessage() {}

func (x *PostInstalledModuleVersionsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInstalledModuleVersionsKeyRequest.ProtoReflect.Descriptor instead.
func (*PostInstalledModuleVersionsKeyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{285}
}

func (x *PostInstalledModuleVersionsKeyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInstalledModuleVersionsKeyRequest) GetInstalledModuleVersionId() string {
	if x != nil {
		return x.InstalledModuleVersionId
	}
	return ""
}

// Request to delete several installed module versions by the list of ids.
type DeleteInstalledModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteInstalledModuleVersionsRequest) Reset() {
	*x = DeleteInstalledModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstalledModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstalledModuleVersionsRequest) ProtoMessage() {}

func (x *DeleteInstalledModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstalledModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstalledModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{286}
}

func (x *DeleteInstalledModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteInstalledModuleVersionsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleInstalledModuleVersionResponse
type SingleInstalledModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 *status.Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InstalledModuleVersion *InstalledModuleVersion `protobuf:"bytes,2,opt,name=installed_module_version,json=installedModuleVersion,proto3" json:"installed_module_version,omitempty"`
}

func (x *SingleInstalledModuleVersionResponse) Reset() {
	*x = SingleInstalledModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInstalledModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInstalledModuleVersionResponse) ProtoMessage() {}

func (x *SingleInstalledModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInstalledModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleInstalledModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{287}
}

func (x *SingleInstalledModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInstalledModuleVersionResponse) GetInstalledModuleVersion() *InstalledModuleVersion {
	if x != nil {
		return x.InstalledModuleVersion
	}
	return nil
}

// MultiInstalledModuleVersionResponse
type MultiInstalledModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                  *status.Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InstalledModuleVersions []*InstalledModuleVersion `protobuf:"bytes,2,rep,name=installed_module_versions,json=installedModuleVersions,proto3" json:"installed_module_versions,omitempty"`
}

func (x *MultiInstalledModuleVersionResponse) Reset() {
	*x = MultiInstalledModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInstalledModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInstalledModuleVersionResponse) ProtoMessage() {}

func (x *MultiInstalledModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInstalledModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiInstalledModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{288}
}

func (x *MultiInstalledModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInstalledModuleVersionResponse) GetInstalledModuleVersions() []*InstalledModuleVersion {
	if x != nil {
		return x.InstalledModuleVersions
	}
	return nil
}

// ListNextTaskAssignmentsRequest
type ListNextTaskAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *ListNextTaskAssignmentsRequest) Reset() {
	*x = ListNextTaskAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNextTaskAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextTaskAssignmentsRequest) ProtoMessage() {}

func (x *ListNextTaskAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextTaskAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ListNextTaskAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{289}
}

func (x *ListNextTaskAssignmentsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListNextTaskAssignmentsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Request to perform bulk operations on a list of inputs based on input source.
type PostBulkOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of bulk operation(s) to be performed e.g bulk update metadata or tags or labels etc.
	BulkOperations []*BulkOperation `protobuf:"bytes,2,rep,name=bulk_operations,json=bulkOperations,proto3" json:"bulk_operations,omitempty"`
}

func (x *PostBulkOperationsRequest) Reset() {
	*x = PostBulkOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostBulkOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostBulkOperationsRequest) ProtoMessage() {}

func (x *PostBulkOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostBulkOperationsRequest.ProtoReflect.Descriptor instead.
func (*PostBulkOperationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{290}
}

func (x *PostBulkOperationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostBulkOperationsRequest) GetBulkOperations() []*BulkOperation {
	if x != nil {
		return x.BulkOperations
	}
	return nil
}

// Request to list all the bulk operations.
type ListBulkOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListBulkOperationsRequest) Reset() {
	*x = ListBulkOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBulkOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBulkOperationsRequest) ProtoMessage() {}

func (x *ListBulkOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBulkOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListBulkOperationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{291}
}

func (x *ListBulkOperationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListBulkOperationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListBulkOperationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Request to get the details of a bulk operation by ID.
type GetBulkOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The bulk operation id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBulkOperationRequest) Reset() {
	*x = GetBulkOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkOperationRequest) ProtoMessage() {}

func (x *GetBulkOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkOperationRequest.ProtoReflect.Descriptor instead.
func (*GetBulkOperationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{292}
}

func (x *GetBulkOperationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetBulkOperationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Cancel a list of bulk operation ids
type CancelBulkOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of bulk operation ids to be cancelled
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CancelBulkOperationRequest) Reset() {
	*x = CancelBulkOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBulkOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBulkOperationRequest) ProtoMessage() {}

func (x *CancelBulkOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBulkOperationRequest.ProtoReflect.Descriptor instead.
func (*CancelBulkOperationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{293}
}

func (x *CancelBulkOperationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *CancelBulkOperationRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request to delete the terminated bulk operations by ID
// Only operations in terminated state can be deleted.
type DeleteBulkOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of bulk operation ids to be deleted
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteBulkOperationRequest) Reset() {
	*x = DeleteBulkOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBulkOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBulkOperationRequest) ProtoMessage() {}

func (x *DeleteBulkOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBulkOperationRequest.ProtoReflect.Descriptor instead.
func (*DeleteBulkOperationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{294}
}

func (x *DeleteBulkOperationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteBulkOperationRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleBulkOperationsResponse
type SingleBulkOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BulkOperation *BulkOperation `protobuf:"bytes,2,opt,name=bulk_operation,json=bulkOperation,proto3" json:"bulk_operation,omitempty"`
}

func (x *SingleBulkOperationsResponse) Reset() {
	*x = SingleBulkOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBulkOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBulkOperationsResponse) ProtoMessage() {}

func (x *SingleBulkOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBulkOperationsResponse.ProtoReflect.Descriptor instead.
func (*SingleBulkOperationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{295}
}

func (x *SingleBulkOperationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleBulkOperationsResponse) GetBulkOperation() *BulkOperation {
	if x != nil {
		return x.BulkOperation
	}
	return nil
}

// MultiBulkOperationsResponse
type MultiBulkOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BulkOperation []*BulkOperation `protobuf:"bytes,2,rep,name=bulk_operation,json=bulkOperation,proto3" json:"bulk_operation,omitempty"`
}

func (x *MultiBulkOperationsResponse) Reset() {
	*x = MultiBulkOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiBulkOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiBulkOperationsResponse) ProtoMessage() {}

func (x *MultiBulkOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiBulkOperationsResponse.ProtoReflect.Descriptor instead.
func (*MultiBulkOperationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{296}
}

func (x *MultiBulkOperationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiBulkOperationsResponse) GetBulkOperation() []*BulkOperation {
	if x != nil {
		return x.BulkOperation
	}
	return nil
}

// PutTaskAssignmentsRequest
type PutTaskAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Deprecated: use action and action_config instead.
	// Supported for backwards compatibility: setting this field is equivalent with
	// * action = LABEL_SUBMIT
	// * label_submit_config = [{"task_assignments": {"input": {"id": <input-id>}}}]
	InputId string `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	// Action to perform on selected task.
	Action PutTaskAssignmentsRequestAction `protobuf:"varint,4,opt,name=action,proto3,enum=clarifai.api.PutTaskAssignmentsRequestAction" json:"action,omitempty"`
	// Types that are assignable to ActionConfig:
	//
	//	*PutTaskAssignmentsRequest_LabelSubmitConfig
	ActionConfig isPutTaskAssignmentsRequest_ActionConfig `protobuf_oneof:"action_config"`
}

func (x *PutTaskAssignmentsRequest) Reset() {
	*x = PutTaskAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskAssignmentsRequest) ProtoMessage() {}

func (x *PutTaskAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*PutTaskAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{297}
}

func (x *PutTaskAssignmentsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutTaskAssignmentsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PutTaskAssignmentsRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *PutTaskAssignmentsRequest) GetAction() PutTaskAssignmentsRequestAction {
	if x != nil {
		return x.Action
	}
	return PutTaskAssignmentsRequestAction_PUT_TASK_ASSIGNMENTS_REQUEST_ACTION_NOT_SET
}

func (m *PutTaskAssignmentsRequest) GetActionConfig() isPutTaskAssignmentsRequest_ActionConfig {
	if m != nil {
		return m.ActionConfig
	}
	return nil
}

func (x *PutTaskAssignmentsRequest) GetLabelSubmitConfig() *LabelSubmitConfig {
	if x, ok := x.GetActionConfig().(*PutTaskAssignmentsRequest_LabelSubmitConfig); ok {
		return x.LabelSubmitConfig
	}
	return nil
}

type isPutTaskAssignmentsRequest_ActionConfig interface {
	isPutTaskAssignmentsRequest_ActionConfig()
}

type PutTaskAssignmentsRequest_LabelSubmitConfig struct {
	LabelSubmitConfig *LabelSubmitConfig `protobuf:"bytes,6,opt,name=label_submit_config,json=labelSubmitConfig,proto3,oneof"`
}

func (*PutTaskAssignmentsRequest_LabelSubmitConfig) isPutTaskAssignmentsRequest_ActionConfig() {}

type LabelSubmitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskAssignments []*TaskAssignment `protobuf:"bytes,1,rep,name=task_assignments,json=taskAssignments,proto3" json:"task_assignments,omitempty"`
}

func (x *LabelSubmitConfig) Reset() {
	*x = LabelSubmitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSubmitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSubmitConfig) ProtoMessage() {}

func (x *LabelSubmitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSubmitConfig.ProtoReflect.Descriptor instead.
func (*LabelSubmitConfig) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{298}
}

func (x *LabelSubmitConfig) GetTaskAssignments() []*TaskAssignment {
	if x != nil {
		return x.TaskAssignments
	}
	return nil
}

type MultiTaskAssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TaskAssignments []*TaskAssignment `protobuf:"bytes,2,rep,name=task_assignments,json=taskAssignments,proto3" json:"task_assignments,omitempty"`
}

func (x *MultiTaskAssignmentResponse) Reset() {
	*x = MultiTaskAssignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTaskAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTaskAssignmentResponse) ProtoMessage() {}

func (x *MultiTaskAssignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTaskAssignmentResponse.ProtoReflect.Descriptor instead.
func (*MultiTaskAssignmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{299}
}

func (x *MultiTaskAssignmentResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTaskAssignmentResponse) GetTaskAssignments() []*TaskAssignment {
	if x != nil {
		return x.TaskAssignments
	}
	return nil
}

// List all the input ingestion jobs
type ListInputsAddJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListInputsAddJobsRequest) Reset() {
	*x = ListInputsAddJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInputsAddJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInputsAddJobsRequest) ProtoMessage() {}

func (x *ListInputsAddJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInputsAddJobsRequest.ProtoReflect.Descriptor instead.
func (*ListInputsAddJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{300}
}

func (x *ListInputsAddJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListInputsAddJobsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListInputsAddJobsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GetInputsAddJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of add inputs job
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInputsAddJobRequest) Reset() {
	*x = GetInputsAddJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputsAddJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputsAddJobRequest) ProtoMessage() {}

func (x *GetInputsAddJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputsAddJobRequest.ProtoReflect.Descriptor instead.
func (*GetInputsAddJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{301}
}

func (x *GetInputsAddJobRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInputsAddJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelInputsAddJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of add inputs job to be cancelled
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelInputsAddJobRequest) Reset() {
	*x = CancelInputsAddJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInputsAddJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInputsAddJobRequest) ProtoMessage() {}

func (x *CancelInputsAddJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInputsAddJobRequest.ProtoReflect.Descriptor instead.
func (*CancelInputsAddJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{302}
}

func (x *CancelInputsAddJobRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *CancelInputsAddJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// MultiInputsAddJobResponse
type MultiInputsAddJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InputsAddJobs []*InputsAddJob `protobuf:"bytes,2,rep,name=inputs_add_jobs,json=inputsAddJobs,proto3" json:"inputs_add_jobs,omitempty"`
}

func (x *MultiInputsAddJobResponse) Reset() {
	*x = MultiInputsAddJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInputsAddJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInputsAddJobResponse) ProtoMessage() {}

func (x *MultiInputsAddJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInputsAddJobResponse.ProtoReflect.Descriptor instead.
func (*MultiInputsAddJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{303}
}

func (x *MultiInputsAddJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInputsAddJobResponse) GetInputsAddJobs() []*InputsAddJob {
	if x != nil {
		return x.InputsAddJobs
	}
	return nil
}

// SingleInputsAddJobResponse
type SingleInputsAddJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InputsAddJob *InputsAddJob  `protobuf:"bytes,2,opt,name=inputs_add_job,json=inputsAddJob,proto3" json:"inputs_add_job,omitempty"`
}

func (x *SingleInputsAddJobResponse) Reset() {
	*x = SingleInputsAddJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInputsAddJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInputsAddJobResponse) ProtoMessage() {}

func (x *SingleInputsAddJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInputsAddJobResponse.ProtoReflect.Descriptor instead.
func (*SingleInputsAddJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{304}
}

func (x *SingleInputsAddJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInputsAddJobResponse) GetInputsAddJob() *InputsAddJob {
	if x != nil {
		return x.InputsAddJob
	}
	return nil
}

// Start a multipart upload
type PostUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Uploads   []*Upload     `protobuf:"bytes,2,rep,name=uploads,proto3" json:"uploads,omitempty"`
}

func (x *PostUploadsRequest) Reset() {
	*x = PostUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUploadsRequest) ProtoMessage() {}

func (x *PostUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUploadsRequest.ProtoReflect.Descriptor instead.
func (*PostUploadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{305}
}

func (x *PostUploadsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostUploadsRequest) GetUploads() []*Upload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

// Stops or deletes multipart upload
type DeleteUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteUploadsRequest) Reset() {
	*x = DeleteUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUploadsRequest) ProtoMessage() {}

func (x *DeleteUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUploadsRequest.ProtoReflect.Descriptor instead.
func (*DeleteUploadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{306}
}

func (x *DeleteUploadsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteUploadsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListUploadsRequest) Reset() {
	*x = ListUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUploadsRequest) ProtoMessage() {}

func (x *ListUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUploadsRequest.ProtoReflect.Descriptor instead.
func (*ListUploadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{307}
}

func (x *ListUploadsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListUploadsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUploadsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GetUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Upload ID
	UploadId string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
}

func (x *GetUploadRequest) Reset() {
	*x = GetUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadRequest) ProtoMessage() {}

func (x *GetUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadRequest.ProtoReflect.Descriptor instead.
func (*GetUploadRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{308}
}

func (x *GetUploadRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetUploadRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

type SingleUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Upload *Upload        `protobuf:"bytes,2,opt,name=upload,proto3" json:"upload,omitempty"`
}

func (x *SingleUploadResponse) Reset() {
	*x = SingleUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUploadResponse) ProtoMessage() {}

func (x *SingleUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUploadResponse.ProtoReflect.Descriptor instead.
func (*SingleUploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{309}
}

func (x *SingleUploadResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleUploadResponse) GetUpload() *Upload {
	if x != nil {
		return x.Upload
	}
	return nil
}

type MultiUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Uploads []*Upload      `protobuf:"bytes,2,rep,name=uploads,proto3" json:"uploads,omitempty"`
}

func (x *MultiUploadResponse) Reset() {
	*x = MultiUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUploadResponse) ProtoMessage() {}

func (x *MultiUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUploadResponse.ProtoReflect.Descriptor instead.
func (*MultiUploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{310}
}

func (x *MultiUploadResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiUploadResponse) GetUploads() []*Upload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

// Upload a part of a multipart upload.
// Behaviour on completion depends on the endpoint that was used to initiate the upload.
type PutUploadContentPartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet        `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	UploadId     string               `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	ContentParts []*UploadContentPart `protobuf:"bytes,3,rep,name=content_parts,json=contentParts,proto3" json:"content_parts,omitempty"`
}

func (x *PutUploadContentPartsRequest) Reset() {
	*x = PutUploadContentPartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUploadContentPartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUploadContentPartsRequest) ProtoMessage() {}

func (x *PutUploadContentPartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUploadContentPartsRequest.ProtoReflect.Descriptor instead.
func (*PutUploadContentPartsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{311}
}

func (x *PutUploadContentPartsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutUploadContentPartsRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *PutUploadContentPartsRequest) GetContentParts() []*UploadContentPart {
	if x != nil {
		return x.ContentParts
	}
	return nil
}

// Initiates retrieval of inputs from cloud storage from a user provided data source.
// Will create and return an inputs-add-job for tracking progress.
// Archives will be extracted and their contents will be processed as inputs.
//
// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
// files in the images_folder beginning with abc or in a subfolder beginning with abc.
// For example:
// bucket/images_folder/abcImage.png
// bucket/images_folder/abc-1/Data.zip
//
// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
// in which case it only requires rights to access that particular file.
type PostInputsDataSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet       `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	DataSources []*InputsDataSource `protobuf:"bytes,2,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	// If call back url is set, we will send a Post request to this endpoint with job status.
	CallBackUrl string `protobuf:"bytes,3,opt,name=call_back_url,json=callBackUrl,proto3" json:"call_back_url,omitempty"`
	// Personal Access Token to the application to which inputs are added
	AppPat string `protobuf:"bytes,4,opt,name=app_pat,json=appPat,proto3" json:"app_pat,omitempty"`
}

func (x *PostInputsDataSourcesRequest) Reset() {
	*x = PostInputsDataSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsDataSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsDataSourcesRequest) ProtoMessage() {}

func (x *PostInputsDataSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsDataSourcesRequest.ProtoReflect.Descriptor instead.
func (*PostInputsDataSourcesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{312}
}

func (x *PostInputsDataSourcesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsDataSourcesRequest) GetDataSources() []*InputsDataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *PostInputsDataSourcesRequest) GetCallBackUrl() string {
	if x != nil {
		return x.CallBackUrl
	}
	return ""
}

func (x *PostInputsDataSourcesRequest) GetAppPat() string {
	if x != nil {
		return x.AppPat
	}
	return ""
}

type GetInputsExtractionJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId             *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputsExtractionJobId string        `protobuf:"bytes,2,opt,name=inputs_extraction_job_id,json=inputsExtractionJobId,proto3" json:"inputs_extraction_job_id,omitempty"`
}

func (x *GetInputsExtractionJobRequest) Reset() {
	*x = GetInputsExtractionJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputsExtractionJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputsExtractionJobRequest) ProtoMessage() {}

func (x *GetInputsExtractionJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputsExtractionJobRequest.ProtoReflect.Descriptor instead.
func (*GetInputsExtractionJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{313}
}

func (x *GetInputsExtractionJobRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInputsExtractionJobRequest) GetInputsExtractionJobId() string {
	if x != nil {
		return x.InputsExtractionJobId
	}
	return ""
}

type ListInputsExtractionJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListInputsExtractionJobsRequest) Reset() {
	*x = ListInputsExtractionJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInputsExtractionJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInputsExtractionJobsRequest) ProtoMessage() {}

func (x *ListInputsExtractionJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInputsExtractionJobsRequest.ProtoReflect.Descriptor instead.
func (*ListInputsExtractionJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{314}
}

func (x *ListInputsExtractionJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListInputsExtractionJobsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListInputsExtractionJobsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type SingleInputsExtractionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *status.Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InputsExtractionJob *InputsExtractionJob `protobuf:"bytes,2,opt,name=inputs_extraction_job,json=inputsExtractionJob,proto3" json:"inputs_extraction_job,omitempty"`
}

func (x *SingleInputsExtractionJobResponse) Reset() {
	*x = SingleInputsExtractionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInputsExtractionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInputsExtractionJobResponse) ProtoMessage() {}

func (x *SingleInputsExtractionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInputsExtractionJobResponse.ProtoReflect.Descriptor instead.
func (*SingleInputsExtractionJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{315}
}

func (x *SingleInputsExtractionJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInputsExtractionJobResponse) GetInputsExtractionJob() *InputsExtractionJob {
	if x != nil {
		return x.InputsExtractionJob
	}
	return nil
}

type MultiInputsExtractionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InputsExtractionJobs []*InputsExtractionJob `protobuf:"bytes,2,rep,name=inputs_extraction_jobs,json=inputsExtractionJobs,proto3" json:"inputs_extraction_jobs,omitempty"`
}

func (x *MultiInputsExtractionJobResponse) Reset() {
	*x = MultiInputsExtractionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInputsExtractionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInputsExtractionJobResponse) ProtoMessage() {}

func (x *MultiInputsExtractionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInputsExtractionJobResponse.ProtoReflect.Descriptor instead.
func (*MultiInputsExtractionJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{316}
}

func (x *MultiInputsExtractionJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInputsExtractionJobResponse) GetInputsExtractionJobs() []*InputsExtractionJob {
	if x != nil {
		return x.InputsExtractionJobs
	}
	return nil
}

// Cancel a list of extraction job ids
type CancelInputsExtractionJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of extraction job ids to be cancelled
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CancelInputsExtractionJobsRequest) Reset() {
	*x = CancelInputsExtractionJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInputsExtractionJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInputsExtractionJobsRequest) ProtoMessage() {}

func (x *CancelInputsExtractionJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInputsExtractionJobsRequest.ProtoReflect.Descriptor instead.
func (*CancelInputsExtractionJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{317}
}

func (x *CancelInputsExtractionJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *CancelInputsExtractionJobsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Start uploading a file archive containing inputs.
// Will create and return an inputs-add-job for tracking progress.
//
// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
type PostInputsUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputsUploads []*InputsUpload `protobuf:"bytes,2,rep,name=inputs_uploads,json=inputsUploads,proto3" json:"inputs_uploads,omitempty"`
}

func (x *PostInputsUploadsRequest) Reset() {
	*x = PostInputsUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsUploadsRequest) ProtoMessage() {}

func (x *PostInputsUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsUploadsRequest.ProtoReflect.Descriptor instead.
func (*PostInputsUploadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{318}
}

func (x *PostInputsUploadsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsUploadsRequest) GetInputsUploads() []*InputsUpload {
	if x != nil {
		return x.InputsUploads
	}
	return nil
}

// GetRunnerRequest
type GetRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	RunnerId  string        `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *GetRunnerRequest) Reset() {
	*x = GetRunnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerRequest) ProtoMessage() {}

func (x *GetRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerRequest.ProtoReflect.Descriptor instead.
func (*GetRunnerRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{319}
}

func (x *GetRunnerRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetRunnerRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

// ListRunnersRequest
type ListRunnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListRunnersRequest) Reset() {
	*x = ListRunnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnersRequest) ProtoMessage() {}

func (x *ListRunnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnersRequest.ProtoReflect.Descriptor instead.
func (*ListRunnersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{320}
}

func (x *ListRunnersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListRunnersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRunnersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostRunnersRequest
type PostRunnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// This allows you to create one or more runner by posting it to the API.
	Runners []*Runner `protobuf:"bytes,3,rep,name=runners,proto3" json:"runners,omitempty"`
}

func (x *PostRunnersRequest) Reset() {
	*x = PostRunnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostRunnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostRunnersRequest) ProtoMessage() {}

func (x *PostRunnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostRunnersRequest.ProtoReflect.Descriptor instead.
func (*PostRunnersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{321}
}

func (x *PostRunnersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostRunnersRequest) GetRunners() []*Runner {
	if x != nil {
		return x.Runners
	}
	return nil
}

// Request to delete several things by the list of ids.
type DeleteRunnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteRunnersRequest) Reset() {
	*x = DeleteRunnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRunnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunnersRequest) ProtoMessage() {}

func (x *DeleteRunnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunnersRequest.ProtoReflect.Descriptor instead.
func (*DeleteRunnersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{322}
}

func (x *DeleteRunnersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteRunnersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleRunnerResponse
type SingleRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Runner *Runner        `protobuf:"bytes,2,opt,name=runner,proto3" json:"runner,omitempty"`
}

func (x *SingleRunnerResponse) Reset() {
	*x = SingleRunnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRunnerResponse) ProtoMessage() {}

func (x *SingleRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRunnerResponse.ProtoReflect.Descriptor instead.
func (*SingleRunnerResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{323}
}

func (x *SingleRunnerResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleRunnerResponse) GetRunner() *Runner {
	if x != nil {
		return x.Runner
	}
	return nil
}

// MultiRunnerResponse
type MultiRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Runners []*Runner      `protobuf:"bytes,2,rep,name=runners,proto3" json:"runners,omitempty"`
}

func (x *MultiRunnerResponse) Reset() {
	*x = MultiRunnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRunnerResponse) ProtoMessage() {}

func (x *MultiRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRunnerResponse.ProtoReflect.Descriptor instead.
func (*MultiRunnerResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{324}
}

func (x *MultiRunnerResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiRunnerResponse) GetRunners() []*Runner {
	if x != nil {
		return x.Runners
	}
	return nil
}

type ListRunnerItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	RunnerId  string        `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *ListRunnerItemsRequest) Reset() {
	*x = ListRunnerItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunnerItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerItemsRequest) ProtoMessage() {}

func (x *ListRunnerItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerItemsRequest.ProtoReflect.Descriptor instead.
func (*ListRunnerItemsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{325}
}

func (x *ListRunnerItemsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListRunnerItemsRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

// PostRunnerItemOutputsRequest
type PostRunnerItemOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	RunnerId  string        `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	ItemId    string        `protobuf:"bytes,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// This allows you to create one or more runner by posting it to the API.
	RunnerItemOutputs []*RunnerItemOutput `protobuf:"bytes,4,rep,name=runner_item_outputs,json=runnerItemOutputs,proto3" json:"runner_item_outputs,omitempty"`
}

func (x *PostRunnerItemOutputsRequest) Reset() {
	*x = PostRunnerItemOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostRunnerItemOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostRunnerItemOutputsRequest) ProtoMessage() {}

func (x *PostRunnerItemOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostRunnerItemOutputsRequest.ProtoReflect.Descriptor instead.
func (*PostRunnerItemOutputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{326}
}

func (x *PostRunnerItemOutputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostRunnerItemOutputsRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *PostRunnerItemOutputsRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *PostRunnerItemOutputsRequest) GetRunnerItemOutputs() []*RunnerItemOutput {
	if x != nil {
		return x.RunnerItemOutputs
	}
	return nil
}

// MultiRunnerItemResponse
type MultiRunnerItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Items  []*RunnerItem  `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MultiRunnerItemResponse) Reset() {
	*x = MultiRunnerItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRunnerItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRunnerItemResponse) ProtoMessage() {}

func (x *MultiRunnerItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRunnerItemResponse.ProtoReflect.Descriptor instead.
func (*MultiRunnerItemResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{327}
}

func (x *MultiRunnerItemResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiRunnerItemResponse) GetItems() []*RunnerItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type RunnerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A UUID hash for this work item.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A description of the work to be done in case needed for UIs.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// TODO(zeiler): make these options a oneof.
	// first work to do would be an inference runner.
	PostModelOutputsRequest *PostModelOutputsRequest `protobuf:"bytes,3,opt,name=post_model_outputs_request,json=postModelOutputsRequest,proto3" json:"post_model_outputs_request,omitempty"` // training request next.
}

func (x *RunnerItem) Reset() {
	*x = RunnerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerItem) ProtoMessage() {}

func (x *RunnerItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerItem.ProtoReflect.Descriptor instead.
func (*RunnerItem) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{328}
}

func (x *RunnerItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunnerItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RunnerItem) GetPostModelOutputsRequest() *PostModelOutputsRequest {
	if x != nil {
		return x.PostModelOutputsRequest
	}
	return nil
}

type RunnerItemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output of the first task type.
	// TODO(zeiler): should the interface be more like pairs of things wiht request/response in one "item"?
	MultiOutputResponse *MultiOutputResponse `protobuf:"bytes,1,opt,name=multi_output_response,json=multiOutputResponse,proto3" json:"multi_output_response,omitempty"`
}

func (x *RunnerItemOutput) Reset() {
	*x = RunnerItemOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerItemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerItemOutput) ProtoMessage() {}

func (x *RunnerItemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerItemOutput.ProtoReflect.Descriptor instead.
func (*RunnerItemOutput) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{329}
}

func (x *RunnerItemOutput) GetMultiOutputResponse() *MultiOutputResponse {
	if x != nil {
		return x.MultiOutputResponse
	}
	return nil
}

type MultiRunnerItemOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RunnerItemOutputs []*RunnerItemOutput `protobuf:"bytes,2,rep,name=runner_item_outputs,json=runnerItemOutputs,proto3" json:"runner_item_outputs,omitempty"`
}

func (x *MultiRunnerItemOutputResponse) Reset() {
	*x = MultiRunnerItemOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRunnerItemOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRunnerItemOutputResponse) ProtoMessage() {}

func (x *MultiRunnerItemOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRunnerItemOutputResponse.ProtoReflect.Descriptor instead.
func (*MultiRunnerItemOutputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{330}
}

func (x *MultiRunnerItemOutputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiRunnerItemOutputResponse) GetRunnerItemOutputs() []*RunnerItemOutput {
	if x != nil {
		return x.RunnerItemOutputs
	}
	return nil
}

// Get the estimated training time for a model version
type PostModelVersionsTrainingTimeEstimateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId           *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId             string          `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersions       []*ModelVersion `protobuf:"bytes,3,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
	EstimatedInputCount uint64          `protobuf:"varint,4,opt,name=estimated_input_count,json=estimatedInputCount,proto3" json:"estimated_input_count,omitempty"`
}

func (x *PostModelVersionsTrainingTimeEstimateRequest) Reset() {
	*x = PostModelVersionsTrainingTimeEstimateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsTrainingTimeEstimateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsTrainingTimeEstimateRequest) ProtoMessage() {}

func (x *PostModelVersionsTrainingTimeEstimateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsTrainingTimeEstimateRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsTrainingTimeEstimateRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{331}
}

func (x *PostModelVersionsTrainingTimeEstimateRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsTrainingTimeEstimateRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsTrainingTimeEstimateRequest) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

func (x *PostModelVersionsTrainingTimeEstimateRequest) GetEstimatedInputCount() uint64 {
	if x != nil {
		return x.EstimatedInputCount
	}
	return 0
}

// Estimated training time in seconds
type MultiTrainingTimeEstimateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TrainingTimeEstimates []*durationpb.Duration `protobuf:"bytes,2,rep,name=training_time_estimates,json=trainingTimeEstimates,proto3" json:"training_time_estimates,omitempty"`
}

func (x *MultiTrainingTimeEstimateResponse) Reset() {
	*x = MultiTrainingTimeEstimateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTrainingTimeEstimateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTrainingTimeEstimateResponse) ProtoMessage() {}

func (x *MultiTrainingTimeEstimateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTrainingTimeEstimateResponse.ProtoReflect.Descriptor instead.
func (*MultiTrainingTimeEstimateResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{332}
}

func (x *MultiTrainingTimeEstimateResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTrainingTimeEstimateResponse) GetTrainingTimeEstimates() []*durationpb.Duration {
	if x != nil {
		return x.TrainingTimeEstimates
	}
	return nil
}

var File_proto_clarifai_api_service_proto protoreflect.FileDescriptor

var file_proto_clarifai_api_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x49, 0x64, 0x22, 0xb3, 0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xda, 0x01,
	0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0xad, 0x02, 0x0a, 0x1d, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x1e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90,
	0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x40, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xd9, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x80, 0x01,
	0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x22, 0x78, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd9, 0x04, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x22, 0x74, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0x4e, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a,
	0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04,
	0x61, 0x70, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x70, 0x70, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x61, 0x70, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x74, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x18,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x61, 0x70, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xab,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x9d, 0x01, 0x0a,
	0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x34, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x6b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x18,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x22, 0x9a, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x44, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x14,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x58, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x50,
	0x6f, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x22,
	0xa5, 0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x10,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0x67, 0x0a, 0x1e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22, 0x70, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22,
	0x88, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x91, 0x02, 0x0a, 0x11, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x1c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x44, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x19, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x75,
	0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x72, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69,
	0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x22, 0x81, 0x01,
	0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xf9, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x18, 0x50,
	0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x75, 0x6c,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x22, 0x92, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc0,
	0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1f, 0x50, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x21, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x27, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x73, 0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x17, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x7f,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x74, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x65, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a,
	0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x11,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x74, 0x0a, 0x10, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x65, 0x79, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd3, 0x07, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x6f,
	0x6e, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x6f, 0x6e, 0x74, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x22, 0xa6, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x1a,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6f,
	0x6c, 0x6b, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f,
	0x6c, 0x6b, 0x69, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x22, 0x6f, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x22, 0x95, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0e, 0x49, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x49,
	0x64, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x22, 0xcc, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x75, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x7c, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd7, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x22,
	0x91, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x09, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a,
	0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a,
	0x1f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x1d, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x97, 0x01, 0x0a, 0x20, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x24, 0x50,
	0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x51, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1f, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x1f, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x3d, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xca, 0x01, 0x0a, 0x21, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x01, 0x0a,
	0x16, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0xd0, 0x06, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x72, 0x6f, 0x63, 0x5f, 0x61, 0x75, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x6f, 0x63, 0x41, 0x75, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x31, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x46, 0x31, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a,
	0x1a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x41,
	0x76, 0x67, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x76,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0xe3, 0x01, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x65, 0x76, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xfb,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x8e, 0x01, 0x0a,
	0x19, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x88, 0x02,
	0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x33, 0x0a,
	0x09, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xc8, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x71, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x5f, 0x65, 0x6e, 0x76, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x61, 0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x61, 0x45, 0x6e, 0x76, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xc4, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0xc4, 0x01, 0x0a, 0x26, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x65, 0x0a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x18, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x25, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0xa2, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x13, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x44, 0x65, 0x70, 0x73, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65,
	0x70, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x65, 0x70, 0x73, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x65, 0x70, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb1, 0x01, 0x0a,
	0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9f, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x72, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x14, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x22, 0x9b, 0x02, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x69, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x68,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x68, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x72, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x22, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a,
	0x24, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x19, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x89, 0x01,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b,
	0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x50, 0x6f,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22,
	0xde, 0x04, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x18, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x22, 0x88, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x15,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9d, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x74, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x81, 0x01,
	0x0a, 0x16, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3a, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x84, 0x03, 0x0a,
	0x1a, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12,
	0x42, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x24, 0x50, 0x6f, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x25, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x1c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x50, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x87, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22,
	0x92, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x78, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x71, 0x0a, 0x12,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0x85, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x78, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x22, 0x74, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8d,
	0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc4,
	0x01, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x66, 0x0a,
	0x1c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67,
	0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x73, 0x74,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x98,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xab, 0x04, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x79, 0x0a, 0x14,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd3,
	0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0xa8, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x25, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x25, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x74,
	0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x24, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x5e, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x23, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x66, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x75, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x62, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a,
	0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x62, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x96, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x75, 0x6c, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x19, 0x50, 0x75,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x11,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x5c, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x67, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x19,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48,
	0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64,
	0x4a, 0x6f, 0x62, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x22, 0x80,
	0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x22, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x7a, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x07,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xbd, 0x01, 0x0a,
	0x1c, 0x50, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x22, 0xda, 0x01, 0x0a,
	0x1c, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x22, 0x8c, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x21, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x13, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x22, 0xb0, 0x01, 0x0a, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x14,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x73, 0x22, 0x71, 0x0a, 0x21, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x79, 0x0a, 0x14, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x71, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x1c,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x4e,
	0x0a, 0x13, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x11, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x10, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x55,
	0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x13,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x11, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x2c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xab, 0x01, 0x0a, 0x21, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x17,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x2a,
	0x70, 0x0a, 0x1c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0xb7, 0x01, 0x0a, 0x1f, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x0c, 0x32, 0x82, 0x99, 0x03, 0x0a,
	0x02, 0x56, 0x32, 0x12, 0xae, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xab, 0x01, 0x12, 0x59, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x4e, 0x12, 0x4c, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x0b, 0x12, 0xe3, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x22, 0x59, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xe2, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x2a, 0x59, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0d, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12,
	0xe0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c,
	0x27, 0x05, 0x12, 0xd5, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e,
	0x12, 0x4f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xbd, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x42, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5a, 0x0e,
	0x12, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xbd, 0x02, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xc4, 0x01, 0x12, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5a, 0x6c, 0x12, 0x6a,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xee, 0x01, 0x0a, 0x14, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x22, 0x4b, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x22, 0x15, 0x2f,
	0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xc7, 0x01, 0x0a, 0x0c,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x42, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xc9, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x32, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x11,
	0x32, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27,
	0x0b, 0x12, 0x98, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x98, 0x01, 0x12, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x5a, 0x30,
	0x12, 0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x85, 0x02, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x12, 0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x5a, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x0b, 0x12, 0x8f, 0x02, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x22, 0x59,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x91, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x88, 0x01, 0x32, 0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x28, 0x32, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xf5, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x76,
	0x12, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x0b, 0x12, 0xff, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x92, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x22, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0a,
	0x90, 0x9c, 0x27, 0x0b, 0x12, 0x82, 0x02, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x76, 0x22, 0x50, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x97, 0x02, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9e,
	0x01, 0x12, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x33, 0x12, 0x31, 0x2f, 0x76,
	0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x0f, 0x12, 0xd4, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x12, 0x45, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5a, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xe7, 0x01, 0x0a, 0x0f, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x60, 0x22, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x14,
	0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f,
	0x90, 0x9c, 0x27, 0x13, 0x12, 0xe9, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60,
	0x32, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x32, 0x0f, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x25,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f,
	0x12, 0xf8, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x32,
	0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xa0, 0x02, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x9e, 0x01, 0x2a, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x33, 0x2a,
	0x31, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c,
	0x27, 0x28, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xd4,
	0x02, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xf3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd0, 0x01, 0x2a, 0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x2a, 0x16, 0x2f, 0x76,
	0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x4a, 0x2a, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x2a, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x28, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf7, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x32, 0x4e, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x1d, 0x32, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x73, 0x90, 0x9c, 0x27, 0x72, 0x12,
	0x85, 0x02, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x72, 0x22, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x03, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xf1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6a, 0x12, 0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x32, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xd5, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5e, 0x12, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x05, 0x12, 0xcd, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5e, 0x12, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5a, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x05, 0x12, 0x81, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x80, 0x01, 0x12, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5a, 0x24, 0x12,
	0x22, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xcf, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x12,
	0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x17, 0x12, 0x15,
	0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0x80, 0x02, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x84, 0x01, 0x12, 0x5a, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5a, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x32, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xbb, 0x01, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5a, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x32, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xd6, 0x01, 0x0a, 0x0a, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x22, 0x0a, 0x2f, 0x76,
	0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x13, 0x12, 0xcf, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x32,
	0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x32, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x25, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xe9, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x66, 0x2a, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x5a, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x28, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x04, 0x90, 0x9c, 0x27, 0x08, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x13, 0x12, 0xdb, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x56, 0x2a, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x2a, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x28, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x04, 0x90,
	0x9c, 0x27, 0x08, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12,
	0xe2, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x32, 0x49, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x32, 0x13, 0x2f, 0x76,
	0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x73,
	0x90, 0x9c, 0x27, 0x72, 0x12, 0xf1, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68,
	0x22, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x18,
	0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f,
	0x90, 0x9c, 0x27, 0x03, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xa0, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x25, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa6,
	0x02, 0x22, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x38, 0x22, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x58, 0x22, 0x53, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x02, 0x12, 0xef, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x12, 0x42, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x5a, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5a, 0x0e, 0x12,
	0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xd9, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x12, 0x4f, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x1b, 0x12, 0x19,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xcb, 0x01, 0x0a, 0x0c, 0x50, 0x6f,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90,
	0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xcd, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x32, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x11, 0x32, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90,
	0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x2a, 0x42, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x11, 0x2a, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69,
	0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x6b, 0x12, 0x81, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69,
	0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x95, 0x02, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x92, 0x01, 0x12, 0x61, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2d, 0x12,
	0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x26,
	0x90, 0x9c, 0x27, 0x0b, 0x12, 0x8c, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x82, 0x01, 0x22, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x12, 0x86, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x82, 0x01, 0x2a, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x2a,
	0x20, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69,
	0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x6b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0x84, 0x02, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x80, 0x01, 0x12, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x24, 0x12,
	0x22, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90,
	0x9c, 0x27, 0x72, 0x12, 0xab, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xaa, 0x01, 0x12, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27,
	0x72, 0x12, 0xea, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xba, 0x01, 0x12, 0x75, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5a, 0x41, 0x12, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x69, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0x92,
	0x02, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x86, 0x01, 0x22, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x13, 0x12, 0x8c, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x32, 0x58, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x27, 0x32, 0x22, 0x2f, 0x76, 0x32,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c,
	0x27, 0x6a, 0x12, 0x8a, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x86, 0x01, 0x2a, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x27, 0x2a, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x6b, 0x12,
	0xd4, 0x02, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xc0, 0x01, 0x1a, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x44, 0x1a, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x12, 0xe9, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x0f, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xcb,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5c, 0x12, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5a, 0x12, 0x12, 0x10,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xca, 0x01, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x66, 0x12, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x9a, 0x03, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc1, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xaa, 0x02, 0x12, 0x57, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5a, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5a, 0x6f, 0x12, 0x6d, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5a, 0x39, 0x12, 0x37, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xe2, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x7a, 0x12, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x5a, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5a, 0x0c, 0x12,
	0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xeb, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27,
	0x6d, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xdf, 0x01, 0x0a, 0x12, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x68, 0x22, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xca, 0x01, 0x0a, 0x0a,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x22, 0x0a, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f,
	0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xc7, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x56, 0x32, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x32, 0x0a, 0x2f, 0x76, 0x32,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c,
	0x27, 0x1a, 0x12, 0xb6, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x49, 0x32, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xdd, 0x01, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x2a, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90,
	0x9c, 0x27, 0x11, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xce, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x2a, 0x40, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x0f, 0x2a, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e,
	0x90, 0x9c, 0x27, 0x11, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x95, 0x02, 0x0a,
	0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8a, 0x01, 0x32, 0x5a,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x32,
	0x24, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf9, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f,
	0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x32, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x23, 0x32, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f,
	0x12, 0xf9, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x7e, 0x32, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x32, 0x1e, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xff, 0x01, 0x0a,
	0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x80, 0x01, 0x32, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x32, 0x1f,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x94,
	0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x02, 0x88, 0x02, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96, 0x02, 0x12, 0x52, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5a, 0x1e, 0x12, 0x1c, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5a, 0x6a, 0x12, 0x68, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5a, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x8d, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x92, 0x01, 0x12, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf5, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x78, 0x12, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x20, 0x12, 0x1e, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xbc, 0x02,
	0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8c, 0x01,
	0x22, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a,
	0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x78, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b,
	0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a,
	0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x12, 0xb4, 0x02, 0x0a,
	0x1b, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x30, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x22, 0x59, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x32,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x77, 0x90,
	0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e, 0x90,
	0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35, 0x90,
	0x9c, 0x27, 0x36, 0x12, 0xa1, 0x02, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x22, 0x53, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x75, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x90,
	0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x12, 0xaa, 0x02, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x80, 0x01, 0x22, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x24,
	0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x76,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e,
	0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35,
	0x90, 0x9c, 0x27, 0x36, 0x12, 0x91, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x22, 0x54,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13,
	0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x12, 0xdf, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x32, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c,
	0x27, 0x0f, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x1a, 0x12, 0x98, 0x02, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x92, 0x01, 0x2a, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2d, 0x2a, 0x2b, 0x2f, 0x76,
	0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x11, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xb9, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x28, 0x01, 0x30,
	0x01, 0x12, 0xb1, 0x02, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xa2, 0x01, 0x1a, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5a, 0x35,
	0x1a, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xab, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xa2, 0x01, 0x12, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5a, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x0f, 0x12, 0xb7, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa2, 0x01, 0x12,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5a, 0x35, 0x12, 0x33, 0x2f, 0x76,
	0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0xd3, 0x02,
	0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xdf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa8, 0x01, 0x22, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x32,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35, 0x90,
	0x9c, 0x27, 0x36, 0x12, 0xed, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf3, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbc, 0x01, 0x22, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x42, 0x22, 0x3d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35, 0x90,
	0x9c, 0x27, 0x36, 0x12, 0xd3, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb6, 0x01, 0x12, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x3f, 0x12, 0x3d,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0xf1, 0x02, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xfa, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd7, 0x01, 0x12, 0x83, 0x01, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x5a, 0x4f, 0x12, 0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0xf8, 0x01,
	0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x76, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x22, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e,
	0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13,
	0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x12, 0x8e, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x89, 0x01, 0x12, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x2d, 0x12, 0x2b, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x11, 0x12, 0x0f, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0xfb, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x7a, 0x12, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0xfb, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf2, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd7, 0x01, 0x12, 0x83, 0x01, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x4f, 0x12,
	0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xda, 0x02, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbc, 0x01, 0x12,
	0x76, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5a, 0x42, 0x12, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xe0, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x12, 0x51, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x1d, 0x12, 0x1b, 0x2f,
	0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xf5, 0x01, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x83, 0x01, 0x12,
	0x43, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x5a, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x5a, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c,
	0x27, 0x13, 0x12, 0xd0, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x22, 0x43, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x12, 0x22,
	0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x01,
	0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x12, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xd2, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x32, 0x43, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x12, 0x32, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x0f, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xc2, 0x01, 0x0a, 0x10, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x32, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x13, 0x12,
	0xe7, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x72, 0x2a, 0x51, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x12, 0x90, 0x9c, 0x27, 0x15, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xd2, 0x01, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x2a, 0x43,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x12, 0x2a, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x15, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x8a,
	0x03, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xfe, 0x01, 0x22, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x5e, 0x22, 0x59, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x32,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xc9, 0x03, 0x0a, 0x1d,
	0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9f, 0x02,
	0x22, 0x7a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x5a,
	0x69, 0x22, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x5a, 0x33, 0x22, 0x2e, 0x2f, 0x76,
	0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x8b, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x84,
	0x01, 0x12, 0x5a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x26, 0x12,
	0x24, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xb4, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb0, 0x01, 0x12, 0x70, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x3c,
	0x12, 0x3a, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f,
	0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x90, 0x02, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8a,
	0x01, 0x2a, 0x5a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x29, 0x2a, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x15, 0x12,
	0x97, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8a, 0x01, 0x32, 0x5a, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x32, 0x24, 0x2f, 0x76,
	0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x12, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27,
	0x30, 0x12, 0x7f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x30, 0x12, 0xa3, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x98, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x30, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x31, 0x90, 0x9c, 0x27, 0x30,
	0x12, 0x8a, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x30, 0x12, 0x88, 0x01,
	0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x32, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x30, 0x12, 0xbc, 0x01, 0x0a, 0x08, 0x4d, 0x79, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x65, 0x12, 0x42,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x79, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x79, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x5a, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x4d, 0x79, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x79, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x12, 0x75, 0x0a, 0x0c, 0x4d, 0x79, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x79,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x72, 0x6f, 0x6f, 0x74, 0x98, 0x9c, 0x27, 0x05, 0x12, 0x87,
	0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x13,
	0x12, 0x8f, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x12, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x5a, 0x0a, 0x12, 0x08, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x13, 0x12, 0xa5, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x2a, 0x39, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90, 0x9c,
	0x27, 0x2e, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x92, 0x01, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x12, 0x12,
	0x88, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x32, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c,
	0x27, 0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x49, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x32, 0x28, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x69, 0x64, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90, 0x9c, 0x27, 0x2d, 0x12,
	0x9c, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x12, 0x1d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x32, 0x39, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0x9f,
	0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x13,
	0x12, 0x76, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x12, 0xcf, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x52, 0x22, 0x31, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x22, 0x15, 0x2f, 0x76,
	0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xc1, 0x01, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5e, 0x12, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x13, 0x12,
	0x11, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xbc,
	0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x42, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xc8, 0x01,
	0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x32, 0x42,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x11, 0x32, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x73, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xda, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x83, 0x01, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x42, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x03, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xd8, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x22, 0x47, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x03,
	0x12, 0xb3, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01,
	0x22, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c,
	0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x90, 0x9c,
	0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xa9, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x86, 0x01, 0x12, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x5a, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x35, 0x12, 0xa0, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0x9a, 0x02, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x2a, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x27, 0x2a, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x90, 0x9c,
	0x27, 0x3f, 0x12, 0xce, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5e, 0x2a, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x13, 0x2a, 0x11, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x73, 0x90,
	0x9c, 0x27, 0x74, 0x12, 0xec, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x12, 0x4c,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5a, 0x18, 0x12, 0x16,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x72, 0x12, 0x99, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96, 0x01, 0x12, 0x63, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x5a, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xf7,
	0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x22, 0x4c, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x22, 0x16, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x73, 0x12, 0xf9, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x32, 0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x32, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x72,
	0x90, 0x9c, 0x27, 0x73, 0x12, 0xf1, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x2a, 0x4c, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x2a, 0x16, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x73, 0x12, 0x7c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x98, 0x9c, 0x27, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x98,
	0x9c, 0x27, 0x01, 0x12, 0xc3, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12,
	0x48, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xc2, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x32, 0x12, 0xc9,
	0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x22, 0x47,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x33, 0x90, 0x9c, 0x27, 0x32, 0x12, 0xcf, 0x01, 0x0a, 0x12, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x32, 0x47, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x33, 0x90, 0x9c, 0x27, 0x32, 0x90, 0x9c, 0x27, 0x34, 0x12, 0xd2, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x33, 0x90, 0x9c, 0x27, 0x32, 0x90, 0x9c, 0x27, 0x34, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27,
	0x38, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xc6, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22, 0x46,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27,
	0x2d, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x12, 0xb6, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c,
	0x27, 0x05, 0x12, 0xd9, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x22, 0x3f, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0e,
	0x22, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c,
	0x27, 0x05, 0x90, 0x9c, 0x27, 0x03, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c,
	0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x12, 0xfe,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x12, 0x5b, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5a, 0x27, 0x12, 0x25, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x38, 0x12,
	0xee, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x38,
	0x12, 0xd0, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d,
	0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90,
	0x9c, 0x27, 0x0f, 0x12, 0xbe, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x3f, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5a, 0x0b, 0x12, 0x09, 0x2f,
	0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13,
	0x90, 0x9c, 0x27, 0x0f, 0x12, 0xd7, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x32, 0x3f,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x0e, 0x32, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c,
	0x27, 0x38, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c,
	0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x12, 0xc2,
	0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x20,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x2a, 0x3f, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x0e, 0x2a, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27, 0x38, 0x90,
	0x9c, 0x27, 0x46, 0x12, 0xf5, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x22, 0x46, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x32, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x44, 0x90,
	0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x72, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf6, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x7e, 0x12, 0x57, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x0b,
	0x90, 0x9c, 0x27, 0x38, 0x12, 0xd6, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x12, 0x46, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x5a, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x38, 0x12, 0xeb, 0x01,
	0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x32, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x32, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x44, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x46, 0x12, 0xe5, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x62, 0x2a, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x15, 0x2a, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90,
	0x9c, 0x27, 0x45, 0x90, 0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x44, 0x90, 0x9c, 0x27, 0x37, 0x90,
	0x9c, 0x27, 0x38, 0x12, 0xf2, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x22, 0x44, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x29,
	0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f,
	0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xe3, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x76, 0x12, 0x53, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x2a, 0x12, 0xc7,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x58, 0x12, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x2a, 0x12, 0xd3, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e,
	0x32, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x13, 0x32, 0x0e, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x29, 0x90, 0x9c, 0x27, 0x2a, 0x12, 0xd6,
	0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x2a, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x13,
	0x2a, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x29, 0x90,
	0x9c, 0x27, 0x2b, 0x90, 0x9c, 0x27, 0x2a, 0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x22, 0x46, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x12, 0xfd, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x76, 0x22, 0x50, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x12, 0xe3, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x22, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x12, 0x8f, 0x02, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x12,
	0x5c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x5a, 0x28, 0x12,
	0x26, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x12, 0xb2, 0x01, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12, 0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6d,
	0x12, 0xe4, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7d, 0x12, 0x41,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x5a, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x5a, 0x0d, 0x12, 0x0b,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xb0, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x46, 0x22, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xb2, 0x01, 0x0a, 0x0c, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x32, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6d, 0x12,
	0xd0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46,
	0x2a, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6e, 0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x70, 0x90, 0x9c,
	0x27, 0x6f, 0x90, 0x9c, 0x27, 0x71, 0x90, 0x9c, 0x27, 0x31, 0x90, 0x9c, 0x27, 0x30, 0x90, 0x9c,
	0x27, 0x2f, 0x12, 0xe4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x6c, 0x12, 0x6a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xd3, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x12, 0x56, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6d, 0x12,
	0xda, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5b, 0x22, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xdc, 0x01, 0x0a,
	0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b,
	0x32, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xf4, 0x01, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x2a, 0x56, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6e, 0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x70, 0x90, 0x9c,
	0x27, 0x6f, 0x90, 0x9c, 0x27, 0x71, 0x90, 0x9c, 0x27, 0x31, 0x90, 0x9c, 0x27, 0x30, 0x90, 0x9c,
	0x27, 0x2f, 0x12, 0x93, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x78,
	0x12, 0x76, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x70, 0x12, 0x8f, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x73, 0x12, 0x71, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x70, 0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x30, 0x12, 0xf3, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x12, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x70, 0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x30,
	0x12, 0xf6, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x22, 0x53, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x6f, 0x90, 0x9c, 0x27,
	0x70, 0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0xfb, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x2a, 0x53, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x6d, 0x90,
	0x9c, 0x27, 0x6f, 0x90, 0x9c, 0x27, 0x70, 0x90, 0x9c, 0x27, 0x71, 0x90, 0x9c, 0x27, 0x31, 0x90,
	0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x30, 0x12, 0x95, 0x02, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x22, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x6f, 0x90, 0x9c, 0x27, 0x70, 0x90,
	0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x30, 0x12,
	0xf5, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x68, 0x22, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x7a, 0x90, 0x9c, 0x27, 0x79, 0x90, 0x9c, 0x27, 0x25, 0x90,
	0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x28, 0x12, 0xde, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x7a, 0x12, 0xe5, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x12, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x7a,
	0x12, 0xeb, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x32, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x32, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x79, 0x90, 0x9c, 0x27, 0x7a, 0x12, 0xf4,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x2a, 0x49, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x2a, 0x13, 0x2f,
	0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x28, 0x90, 0x9c, 0x27, 0x79, 0x90, 0x9c, 0x27,
	0x7a, 0x90, 0x9c, 0x27, 0x7b, 0x12, 0x88, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x12, 0x55, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x26,
	0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x69,
	0x12, 0xeb, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5a, 0x1a, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c,
	0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x69, 0x12, 0xda,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64,
	0x4a, 0x6f, 0x62, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64,
	0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f,
	0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xe1, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12,
	0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x12, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05, 0x12,
	0xf2, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x72, 0x32, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x32, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x04,
	0x90, 0x9c, 0x27, 0x05, 0x12, 0xc4, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x58, 0x22, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x2d, 0x90, 0x9c, 0x27, 0x81, 0x01, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x12, 0x8c, 0x02, 0x0a, 0x15,
	0x50, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x89, 0x01, 0x1a,
	0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2f, 0x7b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x27, 0x1a, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x7b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d,
	0x90, 0x9c, 0x27, 0x81, 0x01, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x12, 0xce, 0x01, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6a, 0x12, 0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x7b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x7d, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2f, 0x7b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x12, 0xb9, 0x01, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5a, 0x0d, 0x12, 0x0b, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x2d, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x12, 0xcd, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x2a, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x10,
	0x2a, 0x0b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x90, 0x9c, 0x27,
	0x81, 0x01, 0x90, 0x9c, 0x27, 0x82, 0x01, 0x12, 0x8d, 0x02, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70, 0x22,
	0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xb2, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa6, 0x01, 0x12, 0x6b, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62,
	0x73, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x32, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xfe, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x70, 0x12, 0x50, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x05, 0x12, 0x8c, 0x02,
	0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2f, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x76, 0x32, 0x50, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x32, 0x1a, 0x2f,
	0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x12, 0x85, 0x02, 0x0a,
	0x11, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x22, 0x48, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x32,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c,
	0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x0f, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x81, 0x01, 0x90,
	0x9c, 0x27, 0x80, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x83, 0x01,
	0x12, 0x90, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x83, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x22, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x83, 0x01, 0x90, 0x9c, 0x27, 0x84, 0x01, 0x12, 0xa1,
	0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a,
	0x27, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x83, 0x01, 0x90, 0x9c, 0x27, 0x84, 0x01, 0x90, 0x9c, 0x27,
	0x85, 0x01, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c,
	0x27, 0x83, 0x01, 0x90, 0x9c, 0x27, 0x86, 0x01, 0x12, 0xdf, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x50, 0x22, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x83, 0x01,
	0x90, 0x9c, 0x27, 0x86, 0x01, 0x90, 0x9c, 0x27, 0x87, 0x01, 0x12, 0xc4, 0x02, 0x0a, 0x25, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9a, 0x01, 0x22, 0x62, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x5a, 0x31, 0x22, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x0f, 0x42, 0x59, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x04, 0x43, 0x41, 0x49, 0x50, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_clarifai_api_service_proto_rawDescOnce sync.Once
	file_proto_clarifai_api_service_proto_rawDescData = file_proto_clarifai_api_service_proto_rawDesc
)

func file_proto_clarifai_api_service_proto_rawDescGZIP() []byte {
	file_proto_clarifai_api_service_proto_rawDescOnce.Do(func() {
		file_proto_clarifai_api_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_clarifai_api_service_proto_rawDescData)
	})
	return file_proto_clarifai_api_service_proto_rawDescData
}

var file_proto_clarifai_api_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_clarifai_api_service_proto_msgTypes = make([]protoimpl.MessageInfo, 333)
var file_proto_clarifai_api_service_proto_goTypes = []interface{}{
	(OrganizationInvitationStatus)(0),                    // 0: clarifai.api.OrganizationInvitationStatus
	(PutTaskAssignmentsRequestAction)(0),                 // 1: clarifai.api.PutTaskAssignmentsRequestAction
	(*Pagination)(nil),                                   // 2: clarifai.api.Pagination
	(*GetAnnotationRequest)(nil),                         // 3: clarifai.api.GetAnnotationRequest
	(*ListAnnotationsRequest)(nil),                       // 4: clarifai.api.ListAnnotationsRequest
	(*PostAnnotationsRequest)(nil),                       // 5: clarifai.api.PostAnnotationsRequest
	(*PatchAnnotationsRequest)(nil),                      // 6: clarifai.api.PatchAnnotationsRequest
	(*PatchAnnotationsStatusRequest)(nil),                // 7: clarifai.api.PatchAnnotationsStatusRequest
	(*PatchAnnotationsStatusResponse)(nil),               // 8: clarifai.api.PatchAnnotationsStatusResponse
	(*DeleteAnnotationRequest)(nil),                      // 9: clarifai.api.DeleteAnnotationRequest
	(*DeleteAnnotationsRequest)(nil),                     // 10: clarifai.api.DeleteAnnotationsRequest
	(*SingleAnnotationResponse)(nil),                     // 11: clarifai.api.SingleAnnotationResponse
	(*MultiAnnotationResponse)(nil),                      // 12: clarifai.api.MultiAnnotationResponse
	(*ListAnnotationWorkersRequest)(nil),                 // 13: clarifai.api.ListAnnotationWorkersRequest
	(*MultiWorkerResponse)(nil),                          // 14: clarifai.api.MultiWorkerResponse
	(*GetAppRequest)(nil),                                // 15: clarifai.api.GetAppRequest
	(*ListAppsRequest)(nil),                              // 16: clarifai.api.ListAppsRequest
	(*PostAppsRequest)(nil),                              // 17: clarifai.api.PostAppsRequest
	(*DeleteAppRequest)(nil),                             // 18: clarifai.api.DeleteAppRequest
	(*PatchAppsRequest)(nil),                             // 19: clarifai.api.PatchAppsRequest
	(*PatchAppRequest)(nil),                              // 20: clarifai.api.PatchAppRequest
	(*PatchAppsIdsRequest)(nil),                          // 21: clarifai.api.PatchAppsIdsRequest
	(*PostAppsSearchesRequest)(nil),                      // 22: clarifai.api.PostAppsSearchesRequest
	(*SingleAppResponse)(nil),                            // 23: clarifai.api.SingleAppResponse
	(*MultiAppResponse)(nil),                             // 24: clarifai.api.MultiAppResponse
	(*ListCollaboratorsRequest)(nil),                     // 25: clarifai.api.ListCollaboratorsRequest
	(*PostCollaboratorsRequest)(nil),                     // 26: clarifai.api.PostCollaboratorsRequest
	(*PatchCollaboratorsRequest)(nil),                    // 27: clarifai.api.PatchCollaboratorsRequest
	(*DeleteCollaboratorsRequest)(nil),                   // 28: clarifai.api.DeleteCollaboratorsRequest
	(*MultiCollaboratorsResponse)(nil),                   // 29: clarifai.api.MultiCollaboratorsResponse
	(*ListCollaborationsRequest)(nil),                    // 30: clarifai.api.ListCollaborationsRequest
	(*MultiCollaborationsResponse)(nil),                  // 31: clarifai.api.MultiCollaborationsResponse
	(*GetResourcePriceRequest)(nil),                      // 32: clarifai.api.GetResourcePriceRequest
	(*GetResourcePriceResponse)(nil),                     // 33: clarifai.api.GetResourcePriceResponse
	(*GetStatusCodeRequest)(nil),                         // 34: clarifai.api.GetStatusCodeRequest
	(*ListStatusCodesRequest)(nil),                       // 35: clarifai.api.ListStatusCodesRequest
	(*SingleStatusCodeResponse)(nil),                     // 36: clarifai.api.SingleStatusCodeResponse
	(*MultiStatusCodeResponse)(nil),                      // 37: clarifai.api.MultiStatusCodeResponse
	(*GetConceptRequest)(nil),                            // 38: clarifai.api.GetConceptRequest
	(*ListConceptsRequest)(nil),                          // 39: clarifai.api.ListConceptsRequest
	(*ListModelConceptsRequest)(nil),                     // 40: clarifai.api.ListModelConceptsRequest
	(*PostConceptsSearchesRequest)(nil),                  // 41: clarifai.api.PostConceptsSearchesRequest
	(*ConceptExtraInfoRequest)(nil),                      // 42: clarifai.api.ConceptExtraInfoRequest
	(*PostConceptsRequest)(nil),                          // 43: clarifai.api.PostConceptsRequest
	(*PatchConceptsRequest)(nil),                         // 44: clarifai.api.PatchConceptsRequest
	(*GetConceptCountsRequest)(nil),                      // 45: clarifai.api.GetConceptCountsRequest
	(*SingleConceptResponse)(nil),                        // 46: clarifai.api.SingleConceptResponse
	(*MultiConceptResponse)(nil),                         // 47: clarifai.api.MultiConceptResponse
	(*MultiConceptCountResponse)(nil),                    // 48: clarifai.api.MultiConceptCountResponse
	(*ListConceptRelationsRequest)(nil),                  // 49: clarifai.api.ListConceptRelationsRequest
	(*PostConceptRelationsRequest)(nil),                  // 50: clarifai.api.PostConceptRelationsRequest
	(*DeleteConceptRelationsRequest)(nil),                // 51: clarifai.api.DeleteConceptRelationsRequest
	(*ListKnowledgeGraphsRequest)(nil),                   // 52: clarifai.api.ListKnowledgeGraphsRequest
	(*PostKnowledgeGraphsRequest)(nil),                   // 53: clarifai.api.PostKnowledgeGraphsRequest
	(*PostConceptMappingJobsRequest)(nil),                // 54: clarifai.api.PostConceptMappingJobsRequest
	(*MultiConceptRelationResponse)(nil),                 // 55: clarifai.api.MultiConceptRelationResponse
	(*MultiKnowledgeGraphResponse)(nil),                  // 56: clarifai.api.MultiKnowledgeGraphResponse
	(*MultiConceptMappingJobResponse)(nil),               // 57: clarifai.api.MultiConceptMappingJobResponse
	(*GetConceptLanguageRequest)(nil),                    // 58: clarifai.api.GetConceptLanguageRequest
	(*ListConceptLanguagesRequest)(nil),                  // 59: clarifai.api.ListConceptLanguagesRequest
	(*PatchConceptLanguagesRequest)(nil),                 // 60: clarifai.api.PatchConceptLanguagesRequest
	(*PostConceptLanguagesRequest)(nil),                  // 61: clarifai.api.PostConceptLanguagesRequest
	(*SingleConceptLanguageResponse)(nil),                // 62: clarifai.api.SingleConceptLanguageResponse
	(*MultiConceptLanguageResponse)(nil),                 // 63: clarifai.api.MultiConceptLanguageResponse
	(*GetInputRequest)(nil),                              // 64: clarifai.api.GetInputRequest
	(*GetVideoManifestRequest)(nil),                      // 65: clarifai.api.GetVideoManifestRequest
	(*GetInputSamplesRequest)(nil),                       // 66: clarifai.api.GetInputSamplesRequest
	(*ListInputsRequest)(nil),                            // 67: clarifai.api.ListInputsRequest
	(*StreamInputsRequest)(nil),                          // 68: clarifai.api.StreamInputsRequest
	(*PostInputsRequest)(nil),                            // 69: clarifai.api.PostInputsRequest
	(*PatchInputsRequest)(nil),                           // 70: clarifai.api.PatchInputsRequest
	(*DeleteInputRequest)(nil),                           // 71: clarifai.api.DeleteInputRequest
	(*DeleteInputsRequest)(nil),                          // 72: clarifai.api.DeleteInputsRequest
	(*SingleInputResponse)(nil),                          // 73: clarifai.api.SingleInputResponse
	(*GetVideoManifestResponse)(nil),                     // 74: clarifai.api.GetVideoManifestResponse
	(*MultiInputResponse)(nil),                           // 75: clarifai.api.MultiInputResponse
	(*MultiInputAnnotationResponse)(nil),                 // 76: clarifai.api.MultiInputAnnotationResponse
	(*SingleInputCountResponse)(nil),                     // 77: clarifai.api.SingleInputCountResponse
	(*GetInputCountRequest)(nil),                         // 78: clarifai.api.GetInputCountRequest
	(*ListDatasetsRequest)(nil),                          // 79: clarifai.api.ListDatasetsRequest
	(*GetDatasetRequest)(nil),                            // 80: clarifai.api.GetDatasetRequest
	(*PostDatasetsRequest)(nil),                          // 81: clarifai.api.PostDatasetsRequest
	(*PatchDatasetsRequest)(nil),                         // 82: clarifai.api.PatchDatasetsRequest
	(*DeleteDatasetsRequest)(nil),                        // 83: clarifai.api.DeleteDatasetsRequest
	(*MultiDatasetResponse)(nil),                         // 84: clarifai.api.MultiDatasetResponse
	(*SingleDatasetResponse)(nil),                        // 85: clarifai.api.SingleDatasetResponse
	(*ListDatasetInputsRequest)(nil),                     // 86: clarifai.api.ListDatasetInputsRequest
	(*GetDatasetInputRequest)(nil),                       // 87: clarifai.api.GetDatasetInputRequest
	(*PostDatasetInputsRequest)(nil),                     // 88: clarifai.api.PostDatasetInputsRequest
	(*DeleteDatasetInputsRequest)(nil),                   // 89: clarifai.api.DeleteDatasetInputsRequest
	(*MultiDatasetInputResponse)(nil),                    // 90: clarifai.api.MultiDatasetInputResponse
	(*SingleDatasetInputResponse)(nil),                   // 91: clarifai.api.SingleDatasetInputResponse
	(*ListDatasetVersionsRequest)(nil),                   // 92: clarifai.api.ListDatasetVersionsRequest
	(*GetDatasetVersionRequest)(nil),                     // 93: clarifai.api.GetDatasetVersionRequest
	(*ListDatasetVersionMetricsGroupsRequest)(nil),       // 94: clarifai.api.ListDatasetVersionMetricsGroupsRequest
	(*PostDatasetVersionsRequest)(nil),                   // 95: clarifai.api.PostDatasetVersionsRequest
	(*PatchDatasetVersionsRequest)(nil),                  // 96: clarifai.api.PatchDatasetVersionsRequest
	(*DeleteDatasetVersionsRequest)(nil),                 // 97: clarifai.api.DeleteDatasetVersionsRequest
	(*PutDatasetVersionExportsRequest)(nil),              // 98: clarifai.api.PutDatasetVersionExportsRequest
	(*MultiDatasetVersionResponse)(nil),                  // 99: clarifai.api.MultiDatasetVersionResponse
	(*MultiDatasetVersionExportResponse)(nil),            // 100: clarifai.api.MultiDatasetVersionExportResponse
	(*MultiDatasetVersionMetricsGroupResponse)(nil),      // 101: clarifai.api.MultiDatasetVersionMetricsGroupResponse
	(*SingleDatasetVersionResponse)(nil),                 // 102: clarifai.api.SingleDatasetVersionResponse
	(*PostModelOutputsRequest)(nil),                      // 103: clarifai.api.PostModelOutputsRequest
	(*ListModelInputsRequest)(nil),                       // 104: clarifai.api.ListModelInputsRequest
	(*GetKeyRequest)(nil),                                // 105: clarifai.api.GetKeyRequest
	(*ListKeysRequest)(nil),                              // 106: clarifai.api.ListKeysRequest
	(*ListAppKeysRequest)(nil),                           // 107: clarifai.api.ListAppKeysRequest
	(*PostKeysRequest)(nil),                              // 108: clarifai.api.PostKeysRequest
	(*DeleteKeyRequest)(nil),                             // 109: clarifai.api.DeleteKeyRequest
	(*PatchKeysRequest)(nil),                             // 110: clarifai.api.PatchKeysRequest
	(*SingleKeyResponse)(nil),                            // 111: clarifai.api.SingleKeyResponse
	(*MultiKeyResponse)(nil),                             // 112: clarifai.api.MultiKeyResponse
	(*GetModelRequest)(nil),                              // 113: clarifai.api.GetModelRequest
	(*ListModelsRequest)(nil),                            // 114: clarifai.api.ListModelsRequest
	(*GetResourceCountsRequest)(nil),                     // 115: clarifai.api.GetResourceCountsRequest
	(*GetResourceCountsResponse)(nil),                    // 116: clarifai.api.GetResourceCountsResponse
	(*PatchModelToolkitsRequest)(nil),                    // 117: clarifai.api.PatchModelToolkitsRequest
	(*PatchModelCheckConsentsRequest)(nil),               // 118: clarifai.api.PatchModelCheckConsentsRequest
	(*PatchModelUseCasesRequest)(nil),                    // 119: clarifai.api.PatchModelUseCasesRequest
	(*PatchModelLanguagesRequest)(nil),                   // 120: clarifai.api.PatchModelLanguagesRequest
	(*MultiModelToolkitResponse)(nil),                    // 121: clarifai.api.MultiModelToolkitResponse
	(*MultiModelCheckConsentResponse)(nil),               // 122: clarifai.api.MultiModelCheckConsentResponse
	(*MultiModelUseCaseResponse)(nil),                    // 123: clarifai.api.MultiModelUseCaseResponse
	(*MultiModelLanguageResponse)(nil),                   // 124: clarifai.api.MultiModelLanguageResponse
	(*PostModelsRequest)(nil),                            // 125: clarifai.api.PostModelsRequest
	(*PatchModelsRequest)(nil),                           // 126: clarifai.api.PatchModelsRequest
	(*IdUpdateSource)(nil),                               // 127: clarifai.api.IdUpdateSource
	(*PatchModelIdsRequest)(nil),                         // 128: clarifai.api.PatchModelIdsRequest
	(*DeleteModelRequest)(nil),                           // 129: clarifai.api.DeleteModelRequest
	(*DeleteModelsRequest)(nil),                          // 130: clarifai.api.DeleteModelsRequest
	(*PostModelsSearchesRequest)(nil),                    // 131: clarifai.api.PostModelsSearchesRequest
	(*SingleModelResponse)(nil),                          // 132: clarifai.api.SingleModelResponse
	(*MultiModelResponse)(nil),                           // 133: clarifai.api.MultiModelResponse
	(*PatchModelVersionsRequest)(nil),                    // 134: clarifai.api.PatchModelVersionsRequest
	(*GetModelVersionRequest)(nil),                       // 135: clarifai.api.GetModelVersionRequest
	(*ListModelVersionsRequest)(nil),                     // 136: clarifai.api.ListModelVersionsRequest
	(*DeleteModelVersionRequest)(nil),                    // 137: clarifai.api.DeleteModelVersionRequest
	(*SingleModelVersionResponse)(nil),                   // 138: clarifai.api.SingleModelVersionResponse
	(*MultiModelVersionResponse)(nil),                    // 139: clarifai.api.MultiModelVersionResponse
	(*PostModelVersionsRequest)(nil),                     // 140: clarifai.api.PostModelVersionsRequest
	(*PostModelVersionsUploadRequest)(nil),               // 141: clarifai.api.PostModelVersionsUploadRequest
	(*PostModelVersionsUploadResponse)(nil),              // 142: clarifai.api.PostModelVersionsUploadResponse
	(*PostModelVersionsUploadConfig)(nil),                // 143: clarifai.api.PostModelVersionsUploadConfig
	(*PutModelVersionExportsRequest)(nil),                // 144: clarifai.api.PutModelVersionExportsRequest
	(*GetModelVersionExportRequest)(nil),                 // 145: clarifai.api.GetModelVersionExportRequest
	(*SingleModelVersionExportResponse)(nil),             // 146: clarifai.api.SingleModelVersionExportResponse
	(*PostWorkflowVersionsUnPublishRequest)(nil),         // 147: clarifai.api.PostWorkflowVersionsUnPublishRequest
	(*PostWorkflowVersionsPublishRequest)(nil),           // 148: clarifai.api.PostWorkflowVersionsPublishRequest
	(*WorkflowVersionPublishRequest)(nil),                // 149: clarifai.api.WorkflowVersionPublishRequest
	(*WorkflowVersionUnPublishRequest)(nil),              // 150: clarifai.api.WorkflowVersionUnPublishRequest
	(*ModelVersionPublishRequest)(nil),                   // 151: clarifai.api.ModelVersionPublishRequest
	(*PostModelVersionsPublishRequest)(nil),              // 152: clarifai.api.PostModelVersionsPublishRequest
	(*ModelVersionUnpublishRequest)(nil),                 // 153: clarifai.api.ModelVersionUnpublishRequest
	(*PostModelVersionsUnPublishRequest)(nil),            // 154: clarifai.api.PostModelVersionsUnPublishRequest
	(*PostEvaluationsRequest)(nil),                       // 155: clarifai.api.PostEvaluationsRequest
	(*ListEvaluationsRequest)(nil),                       // 156: clarifai.api.ListEvaluationsRequest
	(*GetEvaluationRequest)(nil),                         // 157: clarifai.api.GetEvaluationRequest
	(*PostModelVersionEvaluationsRequest)(nil),           // 158: clarifai.api.PostModelVersionEvaluationsRequest
	(*ListModelVersionEvaluationsRequest)(nil),           // 159: clarifai.api.ListModelVersionEvaluationsRequest
	(*GetModelVersionEvaluationRequest)(nil),             // 160: clarifai.api.GetModelVersionEvaluationRequest
	(*SingleEvalMetricsResponse)(nil),                    // 161: clarifai.api.SingleEvalMetricsResponse
	(*MultiEvalMetricsResponse)(nil),                     // 162: clarifai.api.MultiEvalMetricsResponse
	(*PostModelVersionMetricsRequest)(nil),               // 163: clarifai.api.PostModelVersionMetricsRequest
	(*GetModelVersionMetricsRequest)(nil),                // 164: clarifai.api.GetModelVersionMetricsRequest
	(*GetModelTypeRequest)(nil),                          // 165: clarifai.api.GetModelTypeRequest
	(*ListModelTypesRequest)(nil),                        // 166: clarifai.api.ListModelTypesRequest
	(*ListOpenSourceLicensesRequest)(nil),                // 167: clarifai.api.ListOpenSourceLicensesRequest
	(*ListOpenSourceLicensesResponse)(nil),               // 168: clarifai.api.ListOpenSourceLicensesResponse
	(*SingleModelTypeResponse)(nil),                      // 169: clarifai.api.SingleModelTypeResponse
	(*MultiModelTypeResponse)(nil),                       // 170: clarifai.api.MultiModelTypeResponse
	(*GetModelVersionInputExampleRequest)(nil),           // 171: clarifai.api.GetModelVersionInputExampleRequest
	(*ListModelVersionInputExamplesRequest)(nil),         // 172: clarifai.api.ListModelVersionInputExamplesRequest
	(*SingleModelVersionInputExampleResponse)(nil),       // 173: clarifai.api.SingleModelVersionInputExampleResponse
	(*MultiModelVersionInputExampleResponse)(nil),        // 174: clarifai.api.MultiModelVersionInputExampleResponse
	(*ListModelReferencesRequest)(nil),                   // 175: clarifai.api.ListModelReferencesRequest
	(*MultiModelReferenceResponse)(nil),                  // 176: clarifai.api.MultiModelReferenceResponse
	(*MultiOutputResponse)(nil),                          // 177: clarifai.api.MultiOutputResponse
	(*ListScopesRequest)(nil),                            // 178: clarifai.api.ListScopesRequest
	(*MyScopesRequest)(nil),                              // 179: clarifai.api.MyScopesRequest
	(*MyScopesUserRequest)(nil),                          // 180: clarifai.api.MyScopesUserRequest
	(*MyScopesRootRequest)(nil),                          // 181: clarifai.api.MyScopesRootRequest
	(*MultiScopeDepsResponse)(nil),                       // 182: clarifai.api.MultiScopeDepsResponse
	(*MultiScopeResponse)(nil),                           // 183: clarifai.api.MultiScopeResponse
	(*MultiScopeUserResponse)(nil),                       // 184: clarifai.api.MultiScopeUserResponse
	(*MultiScopeRootResponse)(nil),                       // 185: clarifai.api.MultiScopeRootResponse
	(*GetSearchRequest)(nil),                             // 186: clarifai.api.GetSearchRequest
	(*ListSearchesRequest)(nil),                          // 187: clarifai.api.ListSearchesRequest
	(*PostSearchesRequest)(nil),                          // 188: clarifai.api.PostSearchesRequest
	(*PatchInputsSearchesRequest)(nil),                   // 189: clarifai.api.PatchInputsSearchesRequest
	(*PatchAnnotationsSearchesRequest)(nil),              // 190: clarifai.api.PatchAnnotationsSearchesRequest
	(*PatchSearchesRequest)(nil),                         // 191: clarifai.api.PatchSearchesRequest
	(*PostSearchesByIDRequest)(nil),                      // 192: clarifai.api.PostSearchesByIDRequest
	(*DeleteSearchRequest)(nil),                          // 193: clarifai.api.DeleteSearchRequest
	(*PostAnnotationsSearchesRequest)(nil),               // 194: clarifai.api.PostAnnotationsSearchesRequest
	(*DeleteAnnotationSearchMetricsRequest)(nil),         // 195: clarifai.api.DeleteAnnotationSearchMetricsRequest
	(*PostInputsSearchesRequest)(nil),                    // 196: clarifai.api.PostInputsSearchesRequest
	(*SingleSearchResponse)(nil),                         // 197: clarifai.api.SingleSearchResponse
	(*MultiSearchResponse)(nil),                          // 198: clarifai.api.MultiSearchResponse
	(*PostAnnotationSearchMetricsRequest)(nil),           // 199: clarifai.api.PostAnnotationSearchMetricsRequest
	(*GetAnnotationSearchMetricsRequest)(nil),            // 200: clarifai.api.GetAnnotationSearchMetricsRequest
	(*ListAnnotationSearchMetricsRequest)(nil),           // 201: clarifai.api.ListAnnotationSearchMetricsRequest
	(*MultiAnnotationSearchMetricsResponse)(nil),         // 202: clarifai.api.MultiAnnotationSearchMetricsResponse
	(*ListAnnotationFiltersRequest)(nil),                 // 203: clarifai.api.ListAnnotationFiltersRequest
	(*GetAnnotationFilterRequest)(nil),                   // 204: clarifai.api.GetAnnotationFilterRequest
	(*PostAnnotationFiltersRequest)(nil),                 // 205: clarifai.api.PostAnnotationFiltersRequest
	(*PatchAnnotationFiltersRequest)(nil),                // 206: clarifai.api.PatchAnnotationFiltersRequest
	(*DeleteAnnotationFiltersRequest)(nil),               // 207: clarifai.api.DeleteAnnotationFiltersRequest
	(*MultiAnnotationFilterResponse)(nil),                // 208: clarifai.api.MultiAnnotationFilterResponse
	(*SingleAnnotationFilterResponse)(nil),               // 209: clarifai.api.SingleAnnotationFilterResponse
	(*GetUserRequest)(nil),                               // 210: clarifai.api.GetUserRequest
	(*SingleUserResponse)(nil),                           // 211: clarifai.api.SingleUserResponse
	(*PostValidatePasswordRequest)(nil),                  // 212: clarifai.api.PostValidatePasswordRequest
	(*SinglePasswordValidationResponse)(nil),             // 213: clarifai.api.SinglePasswordValidationResponse
	(*GetWorkflowRequest)(nil),                           // 214: clarifai.api.GetWorkflowRequest
	(*ListWorkflowsRequest)(nil),                         // 215: clarifai.api.ListWorkflowsRequest
	(*PostWorkflowsRequest)(nil),                         // 216: clarifai.api.PostWorkflowsRequest
	(*PatchWorkflowsRequest)(nil),                        // 217: clarifai.api.PatchWorkflowsRequest
	(*PatchWorkflowIdsRequest)(nil),                      // 218: clarifai.api.PatchWorkflowIdsRequest
	(*DeleteWorkflowRequest)(nil),                        // 219: clarifai.api.DeleteWorkflowRequest
	(*DeleteWorkflowsRequest)(nil),                       // 220: clarifai.api.DeleteWorkflowsRequest
	(*SingleWorkflowResponse)(nil),                       // 221: clarifai.api.SingleWorkflowResponse
	(*MultiWorkflowResponse)(nil),                        // 222: clarifai.api.MultiWorkflowResponse
	(*PostWorkflowResultsRequest)(nil),                   // 223: clarifai.api.PostWorkflowResultsRequest
	(*PostWorkflowResultsResponse)(nil),                  // 224: clarifai.api.PostWorkflowResultsResponse
	(*PostWorkflowResultsSimilarityRequest)(nil),         // 225: clarifai.api.PostWorkflowResultsSimilarityRequest
	(*PostWorkflowResultsSimilarityResponse)(nil),        // 226: clarifai.api.PostWorkflowResultsSimilarityResponse
	(*ListWorkflowVersionsRequest)(nil),                  // 227: clarifai.api.ListWorkflowVersionsRequest
	(*GetWorkflowVersionRequest)(nil),                    // 228: clarifai.api.GetWorkflowVersionRequest
	(*DeleteWorkflowVersionsRequest)(nil),                // 229: clarifai.api.DeleteWorkflowVersionsRequest
	(*PatchWorkflowVersionsRequest)(nil),                 // 230: clarifai.api.PatchWorkflowVersionsRequest
	(*MultiWorkflowVersionResponse)(nil),                 // 231: clarifai.api.MultiWorkflowVersionResponse
	(*SingleWorkflowVersionResponse)(nil),                // 232: clarifai.api.SingleWorkflowVersionResponse
	(*PostAppDuplicationsRequest)(nil),                   // 233: clarifai.api.PostAppDuplicationsRequest
	(*GetAppDuplicationRequest)(nil),                     // 234: clarifai.api.GetAppDuplicationRequest
	(*ListAppDuplicationsRequest)(nil),                   // 235: clarifai.api.ListAppDuplicationsRequest
	(*MultiAppDuplicationsResponse)(nil),                 // 236: clarifai.api.MultiAppDuplicationsResponse
	(*SingleAppDuplicationResponse)(nil),                 // 237: clarifai.api.SingleAppDuplicationResponse
	(*PostTasksRequest)(nil),                             // 238: clarifai.api.PostTasksRequest
	(*GetTaskRequest)(nil),                               // 239: clarifai.api.GetTaskRequest
	(*ListTasksRequest)(nil),                             // 240: clarifai.api.ListTasksRequest
	(*PatchTasksRequest)(nil),                            // 241: clarifai.api.PatchTasksRequest
	(*DeleteTasksRequest)(nil),                           // 242: clarifai.api.DeleteTasksRequest
	(*MultiTaskResponse)(nil),                            // 243: clarifai.api.MultiTaskResponse
	(*SingleTaskResponse)(nil),                           // 244: clarifai.api.SingleTaskResponse
	(*GetTaskCountRequest)(nil),                          // 245: clarifai.api.GetTaskCountRequest
	(*SingleTaskCountResponse)(nil),                      // 246: clarifai.api.SingleTaskCountResponse
	(*PostLabelOrdersRequest)(nil),                       // 247: clarifai.api.PostLabelOrdersRequest
	(*GetLabelOrderRequest)(nil),                         // 248: clarifai.api.GetLabelOrderRequest
	(*ListLabelOrdersRequest)(nil),                       // 249: clarifai.api.ListLabelOrdersRequest
	(*PatchLabelOrdersRequest)(nil),                      // 250: clarifai.api.PatchLabelOrdersRequest
	(*DeleteLabelOrdersRequest)(nil),                     // 251: clarifai.api.DeleteLabelOrdersRequest
	(*MultiLabelOrderResponse)(nil),                      // 252: clarifai.api.MultiLabelOrderResponse
	(*SingleLabelOrderResponse)(nil),                     // 253: clarifai.api.SingleLabelOrderResponse
	(*PostCollectorsRequest)(nil),                        // 254: clarifai.api.PostCollectorsRequest
	(*PatchCollectorsRequest)(nil),                       // 255: clarifai.api.PatchCollectorsRequest
	(*DeleteCollectorsRequest)(nil),                      // 256: clarifai.api.DeleteCollectorsRequest
	(*GetCollectorRequest)(nil),                          // 257: clarifai.api.GetCollectorRequest
	(*ListCollectorsRequest)(nil),                        // 258: clarifai.api.ListCollectorsRequest
	(*MultiCollectorResponse)(nil),                       // 259: clarifai.api.MultiCollectorResponse
	(*SingleCollectorResponse)(nil),                      // 260: clarifai.api.SingleCollectorResponse
	(*PostStatValuesRequest)(nil),                        // 261: clarifai.api.PostStatValuesRequest
	(*MultiStatValueResponse)(nil),                       // 262: clarifai.api.MultiStatValueResponse
	(*PostStatValuesAggregateRequest)(nil),               // 263: clarifai.api.PostStatValuesAggregateRequest
	(*MultiStatValueAggregateResponse)(nil),              // 264: clarifai.api.MultiStatValueAggregateResponse
	(*PostTrendingMetricsViewRequest)(nil),               // 265: clarifai.api.PostTrendingMetricsViewRequest
	(*ListTrendingMetricsViewsRequest)(nil),              // 266: clarifai.api.ListTrendingMetricsViewsRequest
	(*MultiTrendingMetricsViewResponse)(nil),             // 267: clarifai.api.MultiTrendingMetricsViewResponse
	(*GetModuleRequest)(nil),                             // 268: clarifai.api.GetModuleRequest
	(*ListModulesRequest)(nil),                           // 269: clarifai.api.ListModulesRequest
	(*PostModulesRequest)(nil),                           // 270: clarifai.api.PostModulesRequest
	(*PatchModulesRequest)(nil),                          // 271: clarifai.api.PatchModulesRequest
	(*DeleteModulesRequest)(nil),                         // 272: clarifai.api.DeleteModulesRequest
	(*SingleModuleResponse)(nil),                         // 273: clarifai.api.SingleModuleResponse
	(*MultiModuleResponse)(nil),                          // 274: clarifai.api.MultiModuleResponse
	(*GetModuleVersionRequest)(nil),                      // 275: clarifai.api.GetModuleVersionRequest
	(*ListModuleVersionsRequest)(nil),                    // 276: clarifai.api.ListModuleVersionsRequest
	(*PostModuleVersionsRequest)(nil),                    // 277: clarifai.api.PostModuleVersionsRequest
	(*PatchModuleVersionsRequest)(nil),                   // 278: clarifai.api.PatchModuleVersionsRequest
	(*DeleteModuleVersionsRequest)(nil),                  // 279: clarifai.api.DeleteModuleVersionsRequest
	(*GetModuleVersionUsageCountRequest)(nil),            // 280: clarifai.api.GetModuleVersionUsageCountRequest
	(*SingleModuleVersionResponse)(nil),                  // 281: clarifai.api.SingleModuleVersionResponse
	(*MultiModuleVersionResponse)(nil),                   // 282: clarifai.api.MultiModuleVersionResponse
	(*SingleModuleVersionUsageCountResponse)(nil),        // 283: clarifai.api.SingleModuleVersionUsageCountResponse
	(*GetInstalledModuleVersionRequest)(nil),             // 284: clarifai.api.GetInstalledModuleVersionRequest
	(*ListInstalledModuleVersionsRequest)(nil),           // 285: clarifai.api.ListInstalledModuleVersionsRequest
	(*PostInstalledModuleVersionsRequest)(nil),           // 286: clarifai.api.PostInstalledModuleVersionsRequest
	(*PostInstalledModuleVersionsKeyRequest)(nil),        // 287: clarifai.api.PostInstalledModuleVersionsKeyRequest
	(*DeleteInstalledModuleVersionsRequest)(nil),         // 288: clarifai.api.DeleteInstalledModuleVersionsRequest
	(*SingleInstalledModuleVersionResponse)(nil),         // 289: clarifai.api.SingleInstalledModuleVersionResponse
	(*MultiInstalledModuleVersionResponse)(nil),          // 290: clarifai.api.MultiInstalledModuleVersionResponse
	(*ListNextTaskAssignmentsRequest)(nil),               // 291: clarifai.api.ListNextTaskAssignmentsRequest
	(*PostBulkOperationsRequest)(nil),                    // 292: clarifai.api.PostBulkOperationsRequest
	(*ListBulkOperationsRequest)(nil),                    // 293: clarifai.api.ListBulkOperationsRequest
	(*GetBulkOperationRequest)(nil),                      // 294: clarifai.api.GetBulkOperationRequest
	(*CancelBulkOperationRequest)(nil),                   // 295: clarifai.api.CancelBulkOperationRequest
	(*DeleteBulkOperationRequest)(nil),                   // 296: clarifai.api.DeleteBulkOperationRequest
	(*SingleBulkOperationsResponse)(nil),                 // 297: clarifai.api.SingleBulkOperationsResponse
	(*MultiBulkOperationsResponse)(nil),                  // 298: clarifai.api.MultiBulkOperationsResponse
	(*PutTaskAssignmentsRequest)(nil),                    // 299: clarifai.api.PutTaskAssignmentsRequest
	(*LabelSubmitConfig)(nil),                            // 300: clarifai.api.LabelSubmitConfig
	(*MultiTaskAssignmentResponse)(nil),                  // 301: clarifai.api.MultiTaskAssignmentResponse
	(*ListInputsAddJobsRequest)(nil),                     // 302: clarifai.api.ListInputsAddJobsRequest
	(*GetInputsAddJobRequest)(nil),                       // 303: clarifai.api.GetInputsAddJobRequest
	(*CancelInputsAddJobRequest)(nil),                    // 304: clarifai.api.CancelInputsAddJobRequest
	(*MultiInputsAddJobResponse)(nil),                    // 305: clarifai.api.MultiInputsAddJobResponse
	(*SingleInputsAddJobResponse)(nil),                   // 306: clarifai.api.SingleInputsAddJobResponse
	(*PostUploadsRequest)(nil),                           // 307: clarifai.api.PostUploadsRequest
	(*DeleteUploadsRequest)(nil),                         // 308: clarifai.api.DeleteUploadsRequest
	(*ListUploadsRequest)(nil),                           // 309: clarifai.api.ListUploadsRequest
	(*GetUploadRequest)(nil),                             // 310: clarifai.api.GetUploadRequest
	(*SingleUploadResponse)(nil),                         // 311: clarifai.api.SingleUploadResponse
	(*MultiUploadResponse)(nil),                          // 312: clarifai.api.MultiUploadResponse
	(*PutUploadContentPartsRequest)(nil),                 // 313: clarifai.api.PutUploadContentPartsRequest
	(*PostInputsDataSourcesRequest)(nil),                 // 314: clarifai.api.PostInputsDataSourcesRequest
	(*GetInputsExtractionJobRequest)(nil),                // 315: clarifai.api.GetInputsExtractionJobRequest
	(*ListInputsExtractionJobsRequest)(nil),              // 316: clarifai.api.ListInputsExtractionJobsRequest
	(*SingleInputsExtractionJobResponse)(nil),            // 317: clarifai.api.SingleInputsExtractionJobResponse
	(*MultiInputsExtractionJobResponse)(nil),             // 318: clarifai.api.MultiInputsExtractionJobResponse
	(*CancelInputsExtractionJobsRequest)(nil),            // 319: clarifai.api.CancelInputsExtractionJobsRequest
	(*PostInputsUploadsRequest)(nil),                     // 320: clarifai.api.PostInputsUploadsRequest
	(*GetRunnerRequest)(nil),                             // 321: clarifai.api.GetRunnerRequest
	(*ListRunnersRequest)(nil),                           // 322: clarifai.api.ListRunnersRequest
	(*PostRunnersRequest)(nil),                           // 323: clarifai.api.PostRunnersRequest
	(*DeleteRunnersRequest)(nil),                         // 324: clarifai.api.DeleteRunnersRequest
	(*SingleRunnerResponse)(nil),                         // 325: clarifai.api.SingleRunnerResponse
	(*MultiRunnerResponse)(nil),                          // 326: clarifai.api.MultiRunnerResponse
	(*ListRunnerItemsRequest)(nil),                       // 327: clarifai.api.ListRunnerItemsRequest
	(*PostRunnerItemOutputsRequest)(nil),                 // 328: clarifai.api.PostRunnerItemOutputsRequest
	(*MultiRunnerItemResponse)(nil),                      // 329: clarifai.api.MultiRunnerItemResponse
	(*RunnerItem)(nil),                                   // 330: clarifai.api.RunnerItem
	(*RunnerItemOutput)(nil),                             // 331: clarifai.api.RunnerItemOutput
	(*MultiRunnerItemOutputResponse)(nil),                // 332: clarifai.api.MultiRunnerItemOutputResponse
	(*PostModelVersionsTrainingTimeEstimateRequest)(nil), // 333: clarifai.api.PostModelVersionsTrainingTimeEstimateRequest
	(*MultiTrainingTimeEstimateResponse)(nil),            // 334: clarifai.api.MultiTrainingTimeEstimateResponse
	(*UserAppIDSet)(nil),                                 // 335: clarifai.api.UserAppIDSet
	(*status.Status)(nil),                                // 336: clarifai.api.status.Status
	(*Annotation)(nil),                                   // 337: clarifai.api.Annotation
	(status.StatusCode)(0),                               // 338: clarifai.api.status.StatusCode
	(*Worker)(nil),                                       // 339: clarifai.api.Worker
	(*App)(nil),                                          // 340: clarifai.api.App
	(*PatchAction)(nil),                                  // 341: clarifai.api.PatchAction
	(*AppQuery)(nil),                                     // 342: clarifai.api.AppQuery
	(*Collaborator)(nil),                                 // 343: clarifai.api.Collaborator
	(*User)(nil),                                         // 344: clarifai.api.User
	(*Collaboration)(nil),                                // 345: clarifai.api.Collaboration
	(*Model)(nil),                                        // 346: clarifai.api.Model
	(*Workflow)(nil),                                     // 347: clarifai.api.Workflow
	(*ConceptQuery)(nil),                                 // 348: clarifai.api.ConceptQuery
	(*Concept)(nil),                                      // 349: clarifai.api.Concept
	(*ConceptCount)(nil),                                 // 350: clarifai.api.ConceptCount
	(*ConceptRelation)(nil),                              // 351: clarifai.api.ConceptRelation
	(*KnowledgeGraph)(nil),                               // 352: clarifai.api.KnowledgeGraph
	(*ConceptMappingJob)(nil),                            // 353: clarifai.api.ConceptMappingJob
	(*ConceptLanguage)(nil),                              // 354: clarifai.api.ConceptLanguage
	(*Input)(nil),                                        // 355: clarifai.api.Input
	(InputIDConflictResolution)(0),                       // 356: clarifai.api.InputIDConflictResolution
	(*InputsAddJob)(nil),                                 // 357: clarifai.api.InputsAddJob
	(*Hit)(nil),                                          // 358: clarifai.api.Hit
	(*InputCount)(nil),                                   // 359: clarifai.api.InputCount
	(*Dataset)(nil),                                      // 360: clarifai.api.Dataset
	(*DatasetInput)(nil),                                 // 361: clarifai.api.DatasetInput
	(*Search)(nil),                                       // 362: clarifai.api.Search
	(*BulkOperation)(nil),                                // 363: clarifai.api.BulkOperation
	(DatasetVersionMetricsGroupType)(0),                  // 364: clarifai.api.DatasetVersionMetricsGroupType
	(*structpb.Value)(nil),                               // 365: google.protobuf.Value
	(*DatasetVersion)(nil),                               // 366: clarifai.api.DatasetVersion
	(*DatasetVersionExport)(nil),                         // 367: clarifai.api.DatasetVersionExport
	(*DatasetVersionMetricsGroup)(nil),                   // 368: clarifai.api.DatasetVersionMetricsGroup
	(*Key)(nil),                                          // 369: clarifai.api.Key
	(*ModelQuery)(nil),                                   // 370: clarifai.api.ModelQuery
	(*ModelVersion)(nil),                                 // 371: clarifai.api.ModelVersion
	(*EvalInfo)(nil),                                     // 372: clarifai.api.EvalInfo
	(*UploadContentPart)(nil),                            // 373: clarifai.api.UploadContentPart
	(*ModelVersionExport)(nil),                           // 374: clarifai.api.ModelVersionExport
	(*EvalMetrics)(nil),                                  // 375: clarifai.api.EvalMetrics
	(*FieldsValue)(nil),                                  // 376: clarifai.api.FieldsValue
	(*ModelType)(nil),                                    // 377: clarifai.api.ModelType
	(*ModelTypeField)(nil),                               // 378: clarifai.api.ModelTypeField
	(*TritonCondaEnvInfo)(nil),                           // 379: clarifai.api.TritonCondaEnvInfo
	(*ModelVersionInputExample)(nil),                     // 380: clarifai.api.ModelVersionInputExample
	(*ModelReference)(nil),                               // 381: clarifai.api.ModelReference
	(*Output)(nil),                                       // 382: clarifai.api.Output
	(*ScopeDeps)(nil),                                    // 383: clarifai.api.ScopeDeps
	(*EndpointDeps)(nil),                                 // 384: clarifai.api.EndpointDeps
	(*Query)(nil),                                        // 385: clarifai.api.Query
	(*HitCount)(nil),                                     // 386: clarifai.api.HitCount
	(*Data)(nil),                                         // 387: clarifai.api.Data
	(EvaluationType)(0),                                  // 388: clarifai.api.EvaluationType
	(*AnnotationSearchMetrics)(nil),                      // 389: clarifai.api.AnnotationSearchMetrics
	(*AnnotationFilter)(nil),                             // 390: clarifai.api.AnnotationFilter
	(*Password)(nil),                                     // 391: clarifai.api.Password
	(*PasswordViolations)(nil),                           // 392: clarifai.api.PasswordViolations
	(*OutputConfig)(nil),                                 // 393: clarifai.api.OutputConfig
	(*WorkflowState)(nil),                                // 394: clarifai.api.WorkflowState
	(*WorkflowResult)(nil),                               // 395: clarifai.api.WorkflowResult
	(*WorkflowResultsSimilarity)(nil),                    // 396: clarifai.api.WorkflowResultsSimilarity
	(*WorkflowVersion)(nil),                              // 397: clarifai.api.WorkflowVersion
	(*AppDuplication)(nil),                               // 398: clarifai.api.AppDuplication
	(*Task)(nil),                                         // 399: clarifai.api.Task
	(*TaskStatusCountPerUser)(nil),                       // 400: clarifai.api.TaskStatusCountPerUser
	(*LabelOrder)(nil),                                   // 401: clarifai.api.LabelOrder
	(*Collector)(nil),                                    // 402: clarifai.api.Collector
	(*StatValue)(nil),                                    // 403: clarifai.api.StatValue
	(*StatValueAggregateQuery)(nil),                      // 404: clarifai.api.StatValueAggregateQuery
	(*StatValueAggregateResult)(nil),                     // 405: clarifai.api.StatValueAggregateResult
	(*TrendingMetric)(nil),                               // 406: clarifai.api.TrendingMetric
	(*Module)(nil),                                       // 407: clarifai.api.Module
	(*ModuleVersion)(nil),                                // 408: clarifai.api.ModuleVersion
	(*InstalledModuleVersion)(nil),                       // 409: clarifai.api.InstalledModuleVersion
	(*TaskAssignment)(nil),                               // 410: clarifai.api.TaskAssignment
	(*Upload)(nil),                                       // 411: clarifai.api.Upload
	(*InputsDataSource)(nil),                             // 412: clarifai.api.InputsDataSource
	(*InputsExtractionJob)(nil),                          // 413: clarifai.api.InputsExtractionJob
	(*InputsUpload)(nil),                                 // 414: clarifai.api.InputsUpload
	(*Runner)(nil),                                       // 415: clarifai.api.Runner
	(*durationpb.Duration)(nil),                          // 416: google.protobuf.Duration
	(*status.BaseResponse)(nil),                          // 417: clarifai.api.status.BaseResponse
}
var file_proto_clarifai_api_service_proto_depIdxs = []int32{
	335, // 0: clarifai.api.GetAnnotationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 1: clarifai.api.ListAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 2: clarifai.api.ListAnnotationsRequest.statuses:type_name -> clarifai.api.status.Status
	335, // 3: clarifai.api.PostAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	337, // 4: clarifai.api.PostAnnotationsRequest.annotations:type_name -> clarifai.api.Annotation
	335, // 5: clarifai.api.PatchAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	337, // 6: clarifai.api.PatchAnnotationsRequest.annotations:type_name -> clarifai.api.Annotation
	335, // 7: clarifai.api.PatchAnnotationsStatusRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	338, // 8: clarifai.api.PatchAnnotationsStatusRequest.status_codes:type_name -> clarifai.api.status.StatusCode
	338, // 9: clarifai.api.PatchAnnotationsStatusRequest.status_code:type_name -> clarifai.api.status.StatusCode
	336, // 10: clarifai.api.PatchAnnotationsStatusResponse.status:type_name -> clarifai.api.status.Status
	335, // 11: clarifai.api.DeleteAnnotationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 12: clarifai.api.DeleteAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 13: clarifai.api.SingleAnnotationResponse.status:type_name -> clarifai.api.status.Status
	337, // 14: clarifai.api.SingleAnnotationResponse.annotation:type_name -> clarifai.api.Annotation
	336, // 15: clarifai.api.MultiAnnotationResponse.status:type_name -> clarifai.api.status.Status
	337, // 16: clarifai.api.MultiAnnotationResponse.annotations:type_name -> clarifai.api.Annotation
	335, // 17: clarifai.api.ListAnnotationWorkersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 18: clarifai.api.MultiWorkerResponse.status:type_name -> clarifai.api.status.Status
	339, // 19: clarifai.api.MultiWorkerResponse.workers:type_name -> clarifai.api.Worker
	335, // 20: clarifai.api.GetAppRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 21: clarifai.api.ListAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 22: clarifai.api.PostAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	340, // 23: clarifai.api.PostAppsRequest.apps:type_name -> clarifai.api.App
	335, // 24: clarifai.api.DeleteAppRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 25: clarifai.api.PatchAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	340, // 26: clarifai.api.PatchAppsRequest.apps:type_name -> clarifai.api.App
	341, // 27: clarifai.api.PatchAppsRequest.metadata_action:type_name -> clarifai.api.PatchAction
	335, // 28: clarifai.api.PatchAppRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	340, // 29: clarifai.api.PatchAppRequest.app:type_name -> clarifai.api.App
	341, // 30: clarifai.api.PatchAppRequest.metadata_action:type_name -> clarifai.api.PatchAction
	335, // 31: clarifai.api.PatchAppsIdsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	127, // 32: clarifai.api.PatchAppsIdsRequest.ids:type_name -> clarifai.api.IdUpdateSource
	335, // 33: clarifai.api.PostAppsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	342, // 34: clarifai.api.PostAppsSearchesRequest.app_query:type_name -> clarifai.api.AppQuery
	2,   // 35: clarifai.api.PostAppsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	336, // 36: clarifai.api.SingleAppResponse.status:type_name -> clarifai.api.status.Status
	340, // 37: clarifai.api.SingleAppResponse.app:type_name -> clarifai.api.App
	336, // 38: clarifai.api.MultiAppResponse.status:type_name -> clarifai.api.status.Status
	340, // 39: clarifai.api.MultiAppResponse.apps:type_name -> clarifai.api.App
	335, // 40: clarifai.api.ListCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 41: clarifai.api.PostCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	343, // 42: clarifai.api.PostCollaboratorsRequest.collaborators:type_name -> clarifai.api.Collaborator
	335, // 43: clarifai.api.PatchCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	343, // 44: clarifai.api.PatchCollaboratorsRequest.collaborators:type_name -> clarifai.api.Collaborator
	335, // 45: clarifai.api.DeleteCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 46: clarifai.api.MultiCollaboratorsResponse.status:type_name -> clarifai.api.status.Status
	343, // 47: clarifai.api.MultiCollaboratorsResponse.collaborators:type_name -> clarifai.api.Collaborator
	344, // 48: clarifai.api.MultiCollaboratorsResponse.app_owner:type_name -> clarifai.api.User
	335, // 49: clarifai.api.ListCollaborationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 50: clarifai.api.MultiCollaborationsResponse.status:type_name -> clarifai.api.status.Status
	345, // 51: clarifai.api.MultiCollaborationsResponse.collaborations:type_name -> clarifai.api.Collaboration
	335, // 52: clarifai.api.GetResourcePriceRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	346, // 53: clarifai.api.GetResourcePriceRequest.model:type_name -> clarifai.api.Model
	347, // 54: clarifai.api.GetResourcePriceRequest.workflow:type_name -> clarifai.api.Workflow
	336, // 55: clarifai.api.GetResourcePriceResponse.status:type_name -> clarifai.api.status.Status
	336, // 56: clarifai.api.SingleStatusCodeResponse.status:type_name -> clarifai.api.status.Status
	336, // 57: clarifai.api.MultiStatusCodeResponse.status:type_name -> clarifai.api.status.Status
	336, // 58: clarifai.api.MultiStatusCodeResponse.statuses:type_name -> clarifai.api.status.Status
	335, // 59: clarifai.api.GetConceptRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 60: clarifai.api.ListConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 61: clarifai.api.ListModelConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 62: clarifai.api.PostConceptsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	348, // 63: clarifai.api.PostConceptsSearchesRequest.concept_query:type_name -> clarifai.api.ConceptQuery
	42,  // 64: clarifai.api.PostConceptsSearchesRequest.extra_info:type_name -> clarifai.api.ConceptExtraInfoRequest
	2,   // 65: clarifai.api.PostConceptsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	346, // 66: clarifai.api.ConceptExtraInfoRequest.rankable_model:type_name -> clarifai.api.Model
	335, // 67: clarifai.api.PostConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	349, // 68: clarifai.api.PostConceptsRequest.concepts:type_name -> clarifai.api.Concept
	335, // 69: clarifai.api.PatchConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	349, // 70: clarifai.api.PatchConceptsRequest.concepts:type_name -> clarifai.api.Concept
	335, // 71: clarifai.api.GetConceptCountsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 72: clarifai.api.SingleConceptResponse.status:type_name -> clarifai.api.status.Status
	349, // 73: clarifai.api.SingleConceptResponse.concept:type_name -> clarifai.api.Concept
	336, // 74: clarifai.api.MultiConceptResponse.status:type_name -> clarifai.api.status.Status
	349, // 75: clarifai.api.MultiConceptResponse.concepts:type_name -> clarifai.api.Concept
	336, // 76: clarifai.api.MultiConceptCountResponse.status:type_name -> clarifai.api.status.Status
	350, // 77: clarifai.api.MultiConceptCountResponse.concept_counts:type_name -> clarifai.api.ConceptCount
	335, // 78: clarifai.api.ListConceptRelationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 79: clarifai.api.PostConceptRelationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	351, // 80: clarifai.api.PostConceptRelationsRequest.concept_relations:type_name -> clarifai.api.ConceptRelation
	335, // 81: clarifai.api.DeleteConceptRelationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 82: clarifai.api.ListKnowledgeGraphsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 83: clarifai.api.PostKnowledgeGraphsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	352, // 84: clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs:type_name -> clarifai.api.KnowledgeGraph
	335, // 85: clarifai.api.PostConceptMappingJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	353, // 86: clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs:type_name -> clarifai.api.ConceptMappingJob
	336, // 87: clarifai.api.MultiConceptRelationResponse.status:type_name -> clarifai.api.status.Status
	351, // 88: clarifai.api.MultiConceptRelationResponse.concept_relations:type_name -> clarifai.api.ConceptRelation
	336, // 89: clarifai.api.MultiKnowledgeGraphResponse.status:type_name -> clarifai.api.status.Status
	352, // 90: clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs:type_name -> clarifai.api.KnowledgeGraph
	336, // 91: clarifai.api.MultiConceptMappingJobResponse.status:type_name -> clarifai.api.status.Status
	335, // 92: clarifai.api.GetConceptLanguageRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 93: clarifai.api.ListConceptLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 94: clarifai.api.PatchConceptLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	354, // 95: clarifai.api.PatchConceptLanguagesRequest.concept_languages:type_name -> clarifai.api.ConceptLanguage
	335, // 96: clarifai.api.PostConceptLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	354, // 97: clarifai.api.PostConceptLanguagesRequest.concept_languages:type_name -> clarifai.api.ConceptLanguage
	336, // 98: clarifai.api.SingleConceptLanguageResponse.status:type_name -> clarifai.api.status.Status
	354, // 99: clarifai.api.SingleConceptLanguageResponse.concept_language:type_name -> clarifai.api.ConceptLanguage
	336, // 100: clarifai.api.MultiConceptLanguageResponse.status:type_name -> clarifai.api.status.Status
	354, // 101: clarifai.api.MultiConceptLanguageResponse.concept_languages:type_name -> clarifai.api.ConceptLanguage
	335, // 102: clarifai.api.GetInputRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 103: clarifai.api.GetVideoManifestRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 104: clarifai.api.GetInputSamplesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 105: clarifai.api.ListInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 106: clarifai.api.ListInputsRequest.status:type_name -> clarifai.api.status.Status
	335, // 107: clarifai.api.StreamInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 108: clarifai.api.PostInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	355, // 109: clarifai.api.PostInputsRequest.inputs:type_name -> clarifai.api.Input
	356, // 110: clarifai.api.PostInputsRequest.input_id_conflict_resolution:type_name -> clarifai.api.InputIDConflictResolution
	335, // 111: clarifai.api.PatchInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	355, // 112: clarifai.api.PatchInputsRequest.inputs:type_name -> clarifai.api.Input
	335, // 113: clarifai.api.DeleteInputRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 114: clarifai.api.DeleteInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 115: clarifai.api.SingleInputResponse.status:type_name -> clarifai.api.status.Status
	355, // 116: clarifai.api.SingleInputResponse.input:type_name -> clarifai.api.Input
	336, // 117: clarifai.api.GetVideoManifestResponse.status:type_name -> clarifai.api.status.Status
	336, // 118: clarifai.api.MultiInputResponse.status:type_name -> clarifai.api.status.Status
	355, // 119: clarifai.api.MultiInputResponse.inputs:type_name -> clarifai.api.Input
	357, // 120: clarifai.api.MultiInputResponse.inputs_add_job:type_name -> clarifai.api.InputsAddJob
	336, // 121: clarifai.api.MultiInputAnnotationResponse.status:type_name -> clarifai.api.status.Status
	358, // 122: clarifai.api.MultiInputAnnotationResponse.hits:type_name -> clarifai.api.Hit
	336, // 123: clarifai.api.SingleInputCountResponse.status:type_name -> clarifai.api.status.Status
	359, // 124: clarifai.api.SingleInputCountResponse.counts:type_name -> clarifai.api.InputCount
	335, // 125: clarifai.api.GetInputCountRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 126: clarifai.api.ListDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 127: clarifai.api.GetDatasetRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 128: clarifai.api.PostDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	360, // 129: clarifai.api.PostDatasetsRequest.datasets:type_name -> clarifai.api.Dataset
	335, // 130: clarifai.api.PatchDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	360, // 131: clarifai.api.PatchDatasetsRequest.datasets:type_name -> clarifai.api.Dataset
	335, // 132: clarifai.api.DeleteDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 133: clarifai.api.MultiDatasetResponse.status:type_name -> clarifai.api.status.Status
	360, // 134: clarifai.api.MultiDatasetResponse.datasets:type_name -> clarifai.api.Dataset
	336, // 135: clarifai.api.SingleDatasetResponse.status:type_name -> clarifai.api.status.Status
	360, // 136: clarifai.api.SingleDatasetResponse.dataset:type_name -> clarifai.api.Dataset
	335, // 137: clarifai.api.ListDatasetInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 138: clarifai.api.GetDatasetInputRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 139: clarifai.api.PostDatasetInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	361, // 140: clarifai.api.PostDatasetInputsRequest.dataset_inputs:type_name -> clarifai.api.DatasetInput
	362, // 141: clarifai.api.PostDatasetInputsRequest.search:type_name -> clarifai.api.Search
	335, // 142: clarifai.api.DeleteDatasetInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 143: clarifai.api.MultiDatasetInputResponse.status:type_name -> clarifai.api.status.Status
	361, // 144: clarifai.api.MultiDatasetInputResponse.dataset_inputs:type_name -> clarifai.api.DatasetInput
	363, // 145: clarifai.api.MultiDatasetInputResponse.bulk_operation:type_name -> clarifai.api.BulkOperation
	336, // 146: clarifai.api.SingleDatasetInputResponse.status:type_name -> clarifai.api.status.Status
	361, // 147: clarifai.api.SingleDatasetInputResponse.dataset_input:type_name -> clarifai.api.DatasetInput
	335, // 148: clarifai.api.ListDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 149: clarifai.api.GetDatasetVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 150: clarifai.api.ListDatasetVersionMetricsGroupsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	364, // 151: clarifai.api.ListDatasetVersionMetricsGroupsRequest.types:type_name -> clarifai.api.DatasetVersionMetricsGroupType
	365, // 152: clarifai.api.ListDatasetVersionMetricsGroupsRequest.values:type_name -> google.protobuf.Value
	335, // 153: clarifai.api.PostDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	366, // 154: clarifai.api.PostDatasetVersionsRequest.dataset_versions:type_name -> clarifai.api.DatasetVersion
	335, // 155: clarifai.api.PatchDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	366, // 156: clarifai.api.PatchDatasetVersionsRequest.dataset_versions:type_name -> clarifai.api.DatasetVersion
	335, // 157: clarifai.api.DeleteDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 158: clarifai.api.PutDatasetVersionExportsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	367, // 159: clarifai.api.PutDatasetVersionExportsRequest.exports:type_name -> clarifai.api.DatasetVersionExport
	336, // 160: clarifai.api.MultiDatasetVersionResponse.status:type_name -> clarifai.api.status.Status
	366, // 161: clarifai.api.MultiDatasetVersionResponse.dataset_versions:type_name -> clarifai.api.DatasetVersion
	336, // 162: clarifai.api.MultiDatasetVersionExportResponse.status:type_name -> clarifai.api.status.Status
	367, // 163: clarifai.api.MultiDatasetVersionExportResponse.exports:type_name -> clarifai.api.DatasetVersionExport
	336, // 164: clarifai.api.MultiDatasetVersionMetricsGroupResponse.status:type_name -> clarifai.api.status.Status
	368, // 165: clarifai.api.MultiDatasetVersionMetricsGroupResponse.dataset_version_metrics_groups:type_name -> clarifai.api.DatasetVersionMetricsGroup
	336, // 166: clarifai.api.SingleDatasetVersionResponse.status:type_name -> clarifai.api.status.Status
	366, // 167: clarifai.api.SingleDatasetVersionResponse.dataset_version:type_name -> clarifai.api.DatasetVersion
	335, // 168: clarifai.api.PostModelOutputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	355, // 169: clarifai.api.PostModelOutputsRequest.inputs:type_name -> clarifai.api.Input
	346, // 170: clarifai.api.PostModelOutputsRequest.model:type_name -> clarifai.api.Model
	335, // 171: clarifai.api.ListModelInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 172: clarifai.api.GetKeyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 173: clarifai.api.ListKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 174: clarifai.api.ListAppKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 175: clarifai.api.PostKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	369, // 176: clarifai.api.PostKeysRequest.keys:type_name -> clarifai.api.Key
	335, // 177: clarifai.api.DeleteKeyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 178: clarifai.api.PatchKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	369, // 179: clarifai.api.PatchKeysRequest.keys:type_name -> clarifai.api.Key
	336, // 180: clarifai.api.SingleKeyResponse.status:type_name -> clarifai.api.status.Status
	369, // 181: clarifai.api.SingleKeyResponse.key:type_name -> clarifai.api.Key
	336, // 182: clarifai.api.MultiKeyResponse.status:type_name -> clarifai.api.status.Status
	369, // 183: clarifai.api.MultiKeyResponse.keys:type_name -> clarifai.api.Key
	335, // 184: clarifai.api.GetModelRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 185: clarifai.api.ListModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 186: clarifai.api.GetResourceCountsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 187: clarifai.api.GetResourceCountsResponse.status:type_name -> clarifai.api.status.Status
	335, // 188: clarifai.api.PatchModelToolkitsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 189: clarifai.api.PatchModelCheckConsentsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 190: clarifai.api.PatchModelUseCasesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 191: clarifai.api.PatchModelLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 192: clarifai.api.MultiModelToolkitResponse.status:type_name -> clarifai.api.status.Status
	336, // 193: clarifai.api.MultiModelCheckConsentResponse.status:type_name -> clarifai.api.status.Status
	336, // 194: clarifai.api.MultiModelUseCaseResponse.status:type_name -> clarifai.api.status.Status
	336, // 195: clarifai.api.MultiModelLanguageResponse.status:type_name -> clarifai.api.status.Status
	335, // 196: clarifai.api.PostModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	346, // 197: clarifai.api.PostModelsRequest.model:type_name -> clarifai.api.Model
	346, // 198: clarifai.api.PostModelsRequest.models:type_name -> clarifai.api.Model
	335, // 199: clarifai.api.PatchModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	346, // 200: clarifai.api.PatchModelsRequest.models:type_name -> clarifai.api.Model
	335, // 201: clarifai.api.PatchModelIdsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	127, // 202: clarifai.api.PatchModelIdsRequest.ids:type_name -> clarifai.api.IdUpdateSource
	335, // 203: clarifai.api.DeleteModelRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 204: clarifai.api.DeleteModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 205: clarifai.api.PostModelsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	370, // 206: clarifai.api.PostModelsSearchesRequest.model_query:type_name -> clarifai.api.ModelQuery
	2,   // 207: clarifai.api.PostModelsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	336, // 208: clarifai.api.SingleModelResponse.status:type_name -> clarifai.api.status.Status
	346, // 209: clarifai.api.SingleModelResponse.model:type_name -> clarifai.api.Model
	336, // 210: clarifai.api.MultiModelResponse.status:type_name -> clarifai.api.status.Status
	346, // 211: clarifai.api.MultiModelResponse.models:type_name -> clarifai.api.Model
	335, // 212: clarifai.api.PatchModelVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	371, // 213: clarifai.api.PatchModelVersionsRequest.model_versions:type_name -> clarifai.api.ModelVersion
	335, // 214: clarifai.api.GetModelVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 215: clarifai.api.ListModelVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 216: clarifai.api.DeleteModelVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 217: clarifai.api.SingleModelVersionResponse.status:type_name -> clarifai.api.status.Status
	371, // 218: clarifai.api.SingleModelVersionResponse.model_version:type_name -> clarifai.api.ModelVersion
	336, // 219: clarifai.api.MultiModelVersionResponse.status:type_name -> clarifai.api.status.Status
	371, // 220: clarifai.api.MultiModelVersionResponse.model_versions:type_name -> clarifai.api.ModelVersion
	335, // 221: clarifai.api.PostModelVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	371, // 222: clarifai.api.PostModelVersionsRequest.model_versions:type_name -> clarifai.api.ModelVersion
	372, // 223: clarifai.api.PostModelVersionsRequest.eval_info:type_name -> clarifai.api.EvalInfo
	143, // 224: clarifai.api.PostModelVersionsUploadRequest.upload_config:type_name -> clarifai.api.PostModelVersionsUploadConfig
	373, // 225: clarifai.api.PostModelVersionsUploadRequest.content_part:type_name -> clarifai.api.UploadContentPart
	336, // 226: clarifai.api.PostModelVersionsUploadResponse.status:type_name -> clarifai.api.status.Status
	335, // 227: clarifai.api.PostModelVersionsUploadConfig.user_app_id:type_name -> clarifai.api.UserAppIDSet
	371, // 228: clarifai.api.PostModelVersionsUploadConfig.model_version:type_name -> clarifai.api.ModelVersion
	335, // 229: clarifai.api.PutModelVersionExportsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 230: clarifai.api.GetModelVersionExportRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 231: clarifai.api.SingleModelVersionExportResponse.status:type_name -> clarifai.api.status.Status
	374, // 232: clarifai.api.SingleModelVersionExportResponse.export:type_name -> clarifai.api.ModelVersionExport
	335, // 233: clarifai.api.PostWorkflowVersionsUnPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	150, // 234: clarifai.api.PostWorkflowVersionsUnPublishRequest.publications:type_name -> clarifai.api.WorkflowVersionUnPublishRequest
	335, // 235: clarifai.api.PostWorkflowVersionsPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	149, // 236: clarifai.api.PostWorkflowVersionsPublishRequest.publications:type_name -> clarifai.api.WorkflowVersionPublishRequest
	335, // 237: clarifai.api.PostModelVersionsPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	151, // 238: clarifai.api.PostModelVersionsPublishRequest.publications:type_name -> clarifai.api.ModelVersionPublishRequest
	335, // 239: clarifai.api.PostModelVersionsUnPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	153, // 240: clarifai.api.PostModelVersionsUnPublishRequest.publications:type_name -> clarifai.api.ModelVersionUnpublishRequest
	335, // 241: clarifai.api.PostEvaluationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	375, // 242: clarifai.api.PostEvaluationsRequest.eval_metrics:type_name -> clarifai.api.EvalMetrics
	335, // 243: clarifai.api.ListEvaluationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 244: clarifai.api.GetEvaluationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	376, // 245: clarifai.api.GetEvaluationRequest.fields:type_name -> clarifai.api.FieldsValue
	335, // 246: clarifai.api.PostModelVersionEvaluationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	375, // 247: clarifai.api.PostModelVersionEvaluationsRequest.eval_metrics:type_name -> clarifai.api.EvalMetrics
	335, // 248: clarifai.api.ListModelVersionEvaluationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 249: clarifai.api.GetModelVersionEvaluationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	376, // 250: clarifai.api.GetModelVersionEvaluationRequest.fields:type_name -> clarifai.api.FieldsValue
	336, // 251: clarifai.api.SingleEvalMetricsResponse.status:type_name -> clarifai.api.status.Status
	375, // 252: clarifai.api.SingleEvalMetricsResponse.eval_metrics:type_name -> clarifai.api.EvalMetrics
	336, // 253: clarifai.api.MultiEvalMetricsResponse.status:type_name -> clarifai.api.status.Status
	375, // 254: clarifai.api.MultiEvalMetricsResponse.eval_metrics:type_name -> clarifai.api.EvalMetrics
	335, // 255: clarifai.api.PostModelVersionMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	362, // 256: clarifai.api.PostModelVersionMetricsRequest.test_search:type_name -> clarifai.api.Search
	372, // 257: clarifai.api.PostModelVersionMetricsRequest.eval_info:type_name -> clarifai.api.EvalInfo
	335, // 258: clarifai.api.GetModelVersionMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	376, // 259: clarifai.api.GetModelVersionMetricsRequest.fields:type_name -> clarifai.api.FieldsValue
	335, // 260: clarifai.api.GetModelTypeRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 261: clarifai.api.ListModelTypesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 262: clarifai.api.ListOpenSourceLicensesResponse.status:type_name -> clarifai.api.status.Status
	336, // 263: clarifai.api.SingleModelTypeResponse.status:type_name -> clarifai.api.status.Status
	377, // 264: clarifai.api.SingleModelTypeResponse.model_type:type_name -> clarifai.api.ModelType
	336, // 265: clarifai.api.MultiModelTypeResponse.status:type_name -> clarifai.api.status.Status
	377, // 266: clarifai.api.MultiModelTypeResponse.model_types:type_name -> clarifai.api.ModelType
	378, // 267: clarifai.api.MultiModelTypeResponse.model_importers:type_name -> clarifai.api.ModelTypeField
	379, // 268: clarifai.api.MultiModelTypeResponse.triton_conda_envs_info:type_name -> clarifai.api.TritonCondaEnvInfo
	335, // 269: clarifai.api.GetModelVersionInputExampleRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 270: clarifai.api.ListModelVersionInputExamplesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 271: clarifai.api.SingleModelVersionInputExampleResponse.status:type_name -> clarifai.api.status.Status
	380, // 272: clarifai.api.SingleModelVersionInputExampleResponse.model_version_input_example:type_name -> clarifai.api.ModelVersionInputExample
	336, // 273: clarifai.api.MultiModelVersionInputExampleResponse.status:type_name -> clarifai.api.status.Status
	380, // 274: clarifai.api.MultiModelVersionInputExampleResponse.model_version_input_examples:type_name -> clarifai.api.ModelVersionInputExample
	335, // 275: clarifai.api.ListModelReferencesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 276: clarifai.api.MultiModelReferenceResponse.status:type_name -> clarifai.api.status.Status
	381, // 277: clarifai.api.MultiModelReferenceResponse.model_references:type_name -> clarifai.api.ModelReference
	336, // 278: clarifai.api.MultiOutputResponse.status:type_name -> clarifai.api.status.Status
	382, // 279: clarifai.api.MultiOutputResponse.outputs:type_name -> clarifai.api.Output
	335, // 280: clarifai.api.ListScopesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 281: clarifai.api.MyScopesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 282: clarifai.api.MyScopesUserRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 283: clarifai.api.MultiScopeDepsResponse.status:type_name -> clarifai.api.status.Status
	383, // 284: clarifai.api.MultiScopeDepsResponse.scope_deps:type_name -> clarifai.api.ScopeDeps
	384, // 285: clarifai.api.MultiScopeDepsResponse.endpoint_deps:type_name -> clarifai.api.EndpointDeps
	336, // 286: clarifai.api.MultiScopeResponse.status:type_name -> clarifai.api.status.Status
	340, // 287: clarifai.api.MultiScopeResponse.app:type_name -> clarifai.api.App
	336, // 288: clarifai.api.MultiScopeUserResponse.status:type_name -> clarifai.api.status.Status
	336, // 289: clarifai.api.MultiScopeRootResponse.status:type_name -> clarifai.api.status.Status
	335, // 290: clarifai.api.GetSearchRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 291: clarifai.api.ListSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 292: clarifai.api.PostSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	385, // 293: clarifai.api.PostSearchesRequest.query:type_name -> clarifai.api.Query
	362, // 294: clarifai.api.PostSearchesRequest.searches:type_name -> clarifai.api.Search
	2,   // 295: clarifai.api.PostSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	335, // 296: clarifai.api.PatchInputsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	362, // 297: clarifai.api.PatchInputsSearchesRequest.searches:type_name -> clarifai.api.Search
	335, // 298: clarifai.api.PatchAnnotationsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	362, // 299: clarifai.api.PatchAnnotationsSearchesRequest.searches:type_name -> clarifai.api.Search
	335, // 300: clarifai.api.PatchSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	362, // 301: clarifai.api.PatchSearchesRequest.searches:type_name -> clarifai.api.Search
	335, // 302: clarifai.api.PostSearchesByIDRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	2,   // 303: clarifai.api.PostSearchesByIDRequest.pagination:type_name -> clarifai.api.Pagination
	335, // 304: clarifai.api.DeleteSearchRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 305: clarifai.api.PostAnnotationsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	362, // 306: clarifai.api.PostAnnotationsSearchesRequest.searches:type_name -> clarifai.api.Search
	2,   // 307: clarifai.api.PostAnnotationsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	335, // 308: clarifai.api.DeleteAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 309: clarifai.api.PostInputsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	362, // 310: clarifai.api.PostInputsSearchesRequest.searches:type_name -> clarifai.api.Search
	2,   // 311: clarifai.api.PostInputsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	336, // 312: clarifai.api.SingleSearchResponse.status:type_name -> clarifai.api.status.Status
	362, // 313: clarifai.api.SingleSearchResponse.search:type_name -> clarifai.api.Search
	336, // 314: clarifai.api.MultiSearchResponse.status:type_name -> clarifai.api.status.Status
	358, // 315: clarifai.api.MultiSearchResponse.hits:type_name -> clarifai.api.Hit
	385, // 316: clarifai.api.MultiSearchResponse.query:type_name -> clarifai.api.Query
	362, // 317: clarifai.api.MultiSearchResponse.searches:type_name -> clarifai.api.Search
	386, // 318: clarifai.api.MultiSearchResponse.hit_counts:type_name -> clarifai.api.HitCount
	335, // 319: clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	362, // 320: clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth:type_name -> clarifai.api.Search
	362, // 321: clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval:type_name -> clarifai.api.Search
	387, // 322: clarifai.api.PostAnnotationSearchMetricsRequest.data:type_name -> clarifai.api.Data
	388, // 323: clarifai.api.PostAnnotationSearchMetricsRequest.evaluation_type:type_name -> clarifai.api.EvaluationType
	335, // 324: clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 325: clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 326: clarifai.api.MultiAnnotationSearchMetricsResponse.status:type_name -> clarifai.api.status.Status
	389, // 327: clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics:type_name -> clarifai.api.AnnotationSearchMetrics
	335, // 328: clarifai.api.ListAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 329: clarifai.api.GetAnnotationFilterRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 330: clarifai.api.PostAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	390, // 331: clarifai.api.PostAnnotationFiltersRequest.annotation_filters:type_name -> clarifai.api.AnnotationFilter
	335, // 332: clarifai.api.PatchAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	390, // 333: clarifai.api.PatchAnnotationFiltersRequest.annotation_filters:type_name -> clarifai.api.AnnotationFilter
	335, // 334: clarifai.api.DeleteAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 335: clarifai.api.MultiAnnotationFilterResponse.status:type_name -> clarifai.api.status.Status
	390, // 336: clarifai.api.MultiAnnotationFilterResponse.annotation_filters:type_name -> clarifai.api.AnnotationFilter
	336, // 337: clarifai.api.SingleAnnotationFilterResponse.status:type_name -> clarifai.api.status.Status
	390, // 338: clarifai.api.SingleAnnotationFilterResponse.annotation_filter:type_name -> clarifai.api.AnnotationFilter
	335, // 339: clarifai.api.GetUserRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 340: clarifai.api.SingleUserResponse.status:type_name -> clarifai.api.status.Status
	344, // 341: clarifai.api.SingleUserResponse.user:type_name -> clarifai.api.User
	335, // 342: clarifai.api.PostValidatePasswordRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	391, // 343: clarifai.api.PostValidatePasswordRequest.password:type_name -> clarifai.api.Password
	336, // 344: clarifai.api.SinglePasswordValidationResponse.status:type_name -> clarifai.api.status.Status
	392, // 345: clarifai.api.SinglePasswordValidationResponse.password_violations:type_name -> clarifai.api.PasswordViolations
	335, // 346: clarifai.api.GetWorkflowRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 347: clarifai.api.ListWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 348: clarifai.api.PostWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	347, // 349: clarifai.api.PostWorkflowsRequest.workflows:type_name -> clarifai.api.Workflow
	335, // 350: clarifai.api.PatchWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	347, // 351: clarifai.api.PatchWorkflowsRequest.workflows:type_name -> clarifai.api.Workflow
	335, // 352: clarifai.api.PatchWorkflowIdsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	127, // 353: clarifai.api.PatchWorkflowIdsRequest.ids:type_name -> clarifai.api.IdUpdateSource
	335, // 354: clarifai.api.DeleteWorkflowRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 355: clarifai.api.DeleteWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 356: clarifai.api.SingleWorkflowResponse.status:type_name -> clarifai.api.status.Status
	347, // 357: clarifai.api.SingleWorkflowResponse.workflow:type_name -> clarifai.api.Workflow
	336, // 358: clarifai.api.MultiWorkflowResponse.status:type_name -> clarifai.api.status.Status
	347, // 359: clarifai.api.MultiWorkflowResponse.workflows:type_name -> clarifai.api.Workflow
	335, // 360: clarifai.api.PostWorkflowResultsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	355, // 361: clarifai.api.PostWorkflowResultsRequest.inputs:type_name -> clarifai.api.Input
	393, // 362: clarifai.api.PostWorkflowResultsRequest.output_config:type_name -> clarifai.api.OutputConfig
	394, // 363: clarifai.api.PostWorkflowResultsRequest.workflow_state:type_name -> clarifai.api.WorkflowState
	336, // 364: clarifai.api.PostWorkflowResultsResponse.status:type_name -> clarifai.api.status.Status
	347, // 365: clarifai.api.PostWorkflowResultsResponse.workflow:type_name -> clarifai.api.Workflow
	395, // 366: clarifai.api.PostWorkflowResultsResponse.results:type_name -> clarifai.api.WorkflowResult
	394, // 367: clarifai.api.PostWorkflowResultsResponse.workflow_state:type_name -> clarifai.api.WorkflowState
	335, // 368: clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	355, // 369: clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs:type_name -> clarifai.api.Input
	355, // 370: clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs:type_name -> clarifai.api.Input
	336, // 371: clarifai.api.PostWorkflowResultsSimilarityResponse.status:type_name -> clarifai.api.status.Status
	396, // 372: clarifai.api.PostWorkflowResultsSimilarityResponse.results:type_name -> clarifai.api.WorkflowResultsSimilarity
	335, // 373: clarifai.api.ListWorkflowVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 374: clarifai.api.GetWorkflowVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 375: clarifai.api.DeleteWorkflowVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 376: clarifai.api.PatchWorkflowVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	397, // 377: clarifai.api.PatchWorkflowVersionsRequest.workflow_versions:type_name -> clarifai.api.WorkflowVersion
	336, // 378: clarifai.api.MultiWorkflowVersionResponse.status:type_name -> clarifai.api.status.Status
	397, // 379: clarifai.api.MultiWorkflowVersionResponse.workflow_versions:type_name -> clarifai.api.WorkflowVersion
	336, // 380: clarifai.api.SingleWorkflowVersionResponse.status:type_name -> clarifai.api.status.Status
	397, // 381: clarifai.api.SingleWorkflowVersionResponse.workflow_version:type_name -> clarifai.api.WorkflowVersion
	335, // 382: clarifai.api.PostAppDuplicationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	398, // 383: clarifai.api.PostAppDuplicationsRequest.app_duplications:type_name -> clarifai.api.AppDuplication
	335, // 384: clarifai.api.GetAppDuplicationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 385: clarifai.api.ListAppDuplicationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 386: clarifai.api.MultiAppDuplicationsResponse.status:type_name -> clarifai.api.status.Status
	398, // 387: clarifai.api.MultiAppDuplicationsResponse.app_duplications:type_name -> clarifai.api.AppDuplication
	336, // 388: clarifai.api.SingleAppDuplicationResponse.status:type_name -> clarifai.api.status.Status
	398, // 389: clarifai.api.SingleAppDuplicationResponse.app_duplication:type_name -> clarifai.api.AppDuplication
	335, // 390: clarifai.api.PostTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	399, // 391: clarifai.api.PostTasksRequest.tasks:type_name -> clarifai.api.Task
	335, // 392: clarifai.api.GetTaskRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 393: clarifai.api.ListTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 394: clarifai.api.PatchTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	399, // 395: clarifai.api.PatchTasksRequest.tasks:type_name -> clarifai.api.Task
	335, // 396: clarifai.api.DeleteTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 397: clarifai.api.MultiTaskResponse.status:type_name -> clarifai.api.status.Status
	399, // 398: clarifai.api.MultiTaskResponse.tasks:type_name -> clarifai.api.Task
	336, // 399: clarifai.api.SingleTaskResponse.status:type_name -> clarifai.api.status.Status
	399, // 400: clarifai.api.SingleTaskResponse.task:type_name -> clarifai.api.Task
	335, // 401: clarifai.api.GetTaskCountRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 402: clarifai.api.SingleTaskCountResponse.status:type_name -> clarifai.api.status.Status
	400, // 403: clarifai.api.SingleTaskCountResponse.counts:type_name -> clarifai.api.TaskStatusCountPerUser
	335, // 404: clarifai.api.PostLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	401, // 405: clarifai.api.PostLabelOrdersRequest.label_orders:type_name -> clarifai.api.LabelOrder
	335, // 406: clarifai.api.GetLabelOrderRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 407: clarifai.api.ListLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 408: clarifai.api.PatchLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	401, // 409: clarifai.api.PatchLabelOrdersRequest.label_orders:type_name -> clarifai.api.LabelOrder
	335, // 410: clarifai.api.DeleteLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 411: clarifai.api.MultiLabelOrderResponse.status:type_name -> clarifai.api.status.Status
	401, // 412: clarifai.api.MultiLabelOrderResponse.label_orders:type_name -> clarifai.api.LabelOrder
	336, // 413: clarifai.api.SingleLabelOrderResponse.status:type_name -> clarifai.api.status.Status
	401, // 414: clarifai.api.SingleLabelOrderResponse.label_order:type_name -> clarifai.api.LabelOrder
	335, // 415: clarifai.api.PostCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	402, // 416: clarifai.api.PostCollectorsRequest.collectors:type_name -> clarifai.api.Collector
	335, // 417: clarifai.api.PatchCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	402, // 418: clarifai.api.PatchCollectorsRequest.collectors:type_name -> clarifai.api.Collector
	335, // 419: clarifai.api.DeleteCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 420: clarifai.api.GetCollectorRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 421: clarifai.api.ListCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 422: clarifai.api.MultiCollectorResponse.status:type_name -> clarifai.api.status.Status
	402, // 423: clarifai.api.MultiCollectorResponse.collectors:type_name -> clarifai.api.Collector
	336, // 424: clarifai.api.SingleCollectorResponse.status:type_name -> clarifai.api.status.Status
	402, // 425: clarifai.api.SingleCollectorResponse.collector:type_name -> clarifai.api.Collector
	335, // 426: clarifai.api.PostStatValuesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	403, // 427: clarifai.api.PostStatValuesRequest.stat_values:type_name -> clarifai.api.StatValue
	336, // 428: clarifai.api.MultiStatValueResponse.status:type_name -> clarifai.api.status.Status
	403, // 429: clarifai.api.MultiStatValueResponse.stat_values:type_name -> clarifai.api.StatValue
	335, // 430: clarifai.api.PostStatValuesAggregateRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	404, // 431: clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries:type_name -> clarifai.api.StatValueAggregateQuery
	336, // 432: clarifai.api.MultiStatValueAggregateResponse.status:type_name -> clarifai.api.status.Status
	405, // 433: clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results:type_name -> clarifai.api.StatValueAggregateResult
	335, // 434: clarifai.api.PostTrendingMetricsViewRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 435: clarifai.api.ListTrendingMetricsViewsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 436: clarifai.api.MultiTrendingMetricsViewResponse.status:type_name -> clarifai.api.status.Status
	406, // 437: clarifai.api.MultiTrendingMetricsViewResponse.metrics:type_name -> clarifai.api.TrendingMetric
	335, // 438: clarifai.api.GetModuleRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 439: clarifai.api.ListModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 440: clarifai.api.PostModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	407, // 441: clarifai.api.PostModulesRequest.modules:type_name -> clarifai.api.Module
	335, // 442: clarifai.api.PatchModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	407, // 443: clarifai.api.PatchModulesRequest.modules:type_name -> clarifai.api.Module
	335, // 444: clarifai.api.DeleteModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 445: clarifai.api.SingleModuleResponse.status:type_name -> clarifai.api.status.Status
	407, // 446: clarifai.api.SingleModuleResponse.module:type_name -> clarifai.api.Module
	336, // 447: clarifai.api.MultiModuleResponse.status:type_name -> clarifai.api.status.Status
	407, // 448: clarifai.api.MultiModuleResponse.modules:type_name -> clarifai.api.Module
	335, // 449: clarifai.api.GetModuleVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 450: clarifai.api.ListModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 451: clarifai.api.PostModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	408, // 452: clarifai.api.PostModuleVersionsRequest.module_versions:type_name -> clarifai.api.ModuleVersion
	335, // 453: clarifai.api.PatchModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	408, // 454: clarifai.api.PatchModuleVersionsRequest.module_versions:type_name -> clarifai.api.ModuleVersion
	335, // 455: clarifai.api.DeleteModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 456: clarifai.api.GetModuleVersionUsageCountRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 457: clarifai.api.SingleModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	408, // 458: clarifai.api.SingleModuleVersionResponse.module_version:type_name -> clarifai.api.ModuleVersion
	336, // 459: clarifai.api.MultiModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	408, // 460: clarifai.api.MultiModuleVersionResponse.module_versions:type_name -> clarifai.api.ModuleVersion
	336, // 461: clarifai.api.SingleModuleVersionUsageCountResponse.status:type_name -> clarifai.api.status.Status
	335, // 462: clarifai.api.GetInstalledModuleVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 463: clarifai.api.ListInstalledModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 464: clarifai.api.PostInstalledModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	409, // 465: clarifai.api.PostInstalledModuleVersionsRequest.installed_module_versions:type_name -> clarifai.api.InstalledModuleVersion
	335, // 466: clarifai.api.PostInstalledModuleVersionsKeyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 467: clarifai.api.DeleteInstalledModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 468: clarifai.api.SingleInstalledModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	409, // 469: clarifai.api.SingleInstalledModuleVersionResponse.installed_module_version:type_name -> clarifai.api.InstalledModuleVersion
	336, // 470: clarifai.api.MultiInstalledModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	409, // 471: clarifai.api.MultiInstalledModuleVersionResponse.installed_module_versions:type_name -> clarifai.api.InstalledModuleVersion
	335, // 472: clarifai.api.ListNextTaskAssignmentsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 473: clarifai.api.PostBulkOperationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	363, // 474: clarifai.api.PostBulkOperationsRequest.bulk_operations:type_name -> clarifai.api.BulkOperation
	335, // 475: clarifai.api.ListBulkOperationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 476: clarifai.api.GetBulkOperationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 477: clarifai.api.CancelBulkOperationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 478: clarifai.api.DeleteBulkOperationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 479: clarifai.api.SingleBulkOperationsResponse.status:type_name -> clarifai.api.status.Status
	363, // 480: clarifai.api.SingleBulkOperationsResponse.bulk_operation:type_name -> clarifai.api.BulkOperation
	336, // 481: clarifai.api.MultiBulkOperationsResponse.status:type_name -> clarifai.api.status.Status
	363, // 482: clarifai.api.MultiBulkOperationsResponse.bulk_operation:type_name -> clarifai.api.BulkOperation
	335, // 483: clarifai.api.PutTaskAssignmentsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	1,   // 484: clarifai.api.PutTaskAssignmentsRequest.action:type_name -> clarifai.api.PutTaskAssignmentsRequestAction
	300, // 485: clarifai.api.PutTaskAssignmentsRequest.label_submit_config:type_name -> clarifai.api.LabelSubmitConfig
	410, // 486: clarifai.api.LabelSubmitConfig.task_assignments:type_name -> clarifai.api.TaskAssignment
	336, // 487: clarifai.api.MultiTaskAssignmentResponse.status:type_name -> clarifai.api.status.Status
	410, // 488: clarifai.api.MultiTaskAssignmentResponse.task_assignments:type_name -> clarifai.api.TaskAssignment
	335, // 489: clarifai.api.ListInputsAddJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 490: clarifai.api.GetInputsAddJobRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 491: clarifai.api.CancelInputsAddJobRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 492: clarifai.api.MultiInputsAddJobResponse.status:type_name -> clarifai.api.status.Status
	357, // 493: clarifai.api.MultiInputsAddJobResponse.inputs_add_jobs:type_name -> clarifai.api.InputsAddJob
	336, // 494: clarifai.api.SingleInputsAddJobResponse.status:type_name -> clarifai.api.status.Status
	357, // 495: clarifai.api.SingleInputsAddJobResponse.inputs_add_job:type_name -> clarifai.api.InputsAddJob
	335, // 496: clarifai.api.PostUploadsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	411, // 497: clarifai.api.PostUploadsRequest.uploads:type_name -> clarifai.api.Upload
	335, // 498: clarifai.api.DeleteUploadsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 499: clarifai.api.ListUploadsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 500: clarifai.api.GetUploadRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 501: clarifai.api.SingleUploadResponse.status:type_name -> clarifai.api.status.Status
	411, // 502: clarifai.api.SingleUploadResponse.upload:type_name -> clarifai.api.Upload
	336, // 503: clarifai.api.MultiUploadResponse.status:type_name -> clarifai.api.status.Status
	411, // 504: clarifai.api.MultiUploadResponse.uploads:type_name -> clarifai.api.Upload
	335, // 505: clarifai.api.PutUploadContentPartsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	373, // 506: clarifai.api.PutUploadContentPartsRequest.content_parts:type_name -> clarifai.api.UploadContentPart
	335, // 507: clarifai.api.PostInputsDataSourcesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	412, // 508: clarifai.api.PostInputsDataSourcesRequest.data_sources:type_name -> clarifai.api.InputsDataSource
	335, // 509: clarifai.api.GetInputsExtractionJobRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 510: clarifai.api.ListInputsExtractionJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 511: clarifai.api.SingleInputsExtractionJobResponse.status:type_name -> clarifai.api.status.Status
	413, // 512: clarifai.api.SingleInputsExtractionJobResponse.inputs_extraction_job:type_name -> clarifai.api.InputsExtractionJob
	336, // 513: clarifai.api.MultiInputsExtractionJobResponse.status:type_name -> clarifai.api.status.Status
	413, // 514: clarifai.api.MultiInputsExtractionJobResponse.inputs_extraction_jobs:type_name -> clarifai.api.InputsExtractionJob
	335, // 515: clarifai.api.CancelInputsExtractionJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 516: clarifai.api.PostInputsUploadsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	414, // 517: clarifai.api.PostInputsUploadsRequest.inputs_uploads:type_name -> clarifai.api.InputsUpload
	335, // 518: clarifai.api.GetRunnerRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 519: clarifai.api.ListRunnersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 520: clarifai.api.PostRunnersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	415, // 521: clarifai.api.PostRunnersRequest.runners:type_name -> clarifai.api.Runner
	335, // 522: clarifai.api.DeleteRunnersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	336, // 523: clarifai.api.SingleRunnerResponse.status:type_name -> clarifai.api.status.Status
	415, // 524: clarifai.api.SingleRunnerResponse.runner:type_name -> clarifai.api.Runner
	336, // 525: clarifai.api.MultiRunnerResponse.status:type_name -> clarifai.api.status.Status
	415, // 526: clarifai.api.MultiRunnerResponse.runners:type_name -> clarifai.api.Runner
	335, // 527: clarifai.api.ListRunnerItemsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	335, // 528: clarifai.api.PostRunnerItemOutputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	331, // 529: clarifai.api.PostRunnerItemOutputsRequest.runner_item_outputs:type_name -> clarifai.api.RunnerItemOutput
	336, // 530: clarifai.api.MultiRunnerItemResponse.status:type_name -> clarifai.api.status.Status
	330, // 531: clarifai.api.MultiRunnerItemResponse.items:type_name -> clarifai.api.RunnerItem
	103, // 532: clarifai.api.RunnerItem.post_model_outputs_request:type_name -> clarifai.api.PostModelOutputsRequest
	177, // 533: clarifai.api.RunnerItemOutput.multi_output_response:type_name -> clarifai.api.MultiOutputResponse
	336, // 534: clarifai.api.MultiRunnerItemOutputResponse.status:type_name -> clarifai.api.status.Status
	331, // 535: clarifai.api.MultiRunnerItemOutputResponse.runner_item_outputs:type_name -> clarifai.api.RunnerItemOutput
	335, // 536: clarifai.api.PostModelVersionsTrainingTimeEstimateRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	371, // 537: clarifai.api.PostModelVersionsTrainingTimeEstimateRequest.model_versions:type_name -> clarifai.api.ModelVersion
	336, // 538: clarifai.api.MultiTrainingTimeEstimateResponse.status:type_name -> clarifai.api.status.Status
	416, // 539: clarifai.api.MultiTrainingTimeEstimateResponse.training_time_estimates:type_name -> google.protobuf.Duration
	49,  // 540: clarifai.api.V2.ListConceptRelations:input_type -> clarifai.api.ListConceptRelationsRequest
	50,  // 541: clarifai.api.V2.PostConceptRelations:input_type -> clarifai.api.PostConceptRelationsRequest
	51,  // 542: clarifai.api.V2.DeleteConceptRelations:input_type -> clarifai.api.DeleteConceptRelationsRequest
	45,  // 543: clarifai.api.V2.GetConceptCounts:input_type -> clarifai.api.GetConceptCountsRequest
	38,  // 544: clarifai.api.V2.GetConcept:input_type -> clarifai.api.GetConceptRequest
	39,  // 545: clarifai.api.V2.ListConcepts:input_type -> clarifai.api.ListConceptsRequest
	40,  // 546: clarifai.api.V2.ListModelConcepts:input_type -> clarifai.api.ListModelConceptsRequest
	41,  // 547: clarifai.api.V2.PostConceptsSearches:input_type -> clarifai.api.PostConceptsSearchesRequest
	43,  // 548: clarifai.api.V2.PostConcepts:input_type -> clarifai.api.PostConceptsRequest
	44,  // 549: clarifai.api.V2.PatchConcepts:input_type -> clarifai.api.PatchConceptsRequest
	58,  // 550: clarifai.api.V2.GetConceptLanguage:input_type -> clarifai.api.GetConceptLanguageRequest
	59,  // 551: clarifai.api.V2.ListConceptLanguages:input_type -> clarifai.api.ListConceptLanguagesRequest
	61,  // 552: clarifai.api.V2.PostConceptLanguages:input_type -> clarifai.api.PostConceptLanguagesRequest
	60,  // 553: clarifai.api.V2.PatchConceptLanguages:input_type -> clarifai.api.PatchConceptLanguagesRequest
	52,  // 554: clarifai.api.V2.ListKnowledgeGraphs:input_type -> clarifai.api.ListKnowledgeGraphsRequest
	53,  // 555: clarifai.api.V2.PostKnowledgeGraphs:input_type -> clarifai.api.PostKnowledgeGraphsRequest
	54,  // 556: clarifai.api.V2.PostConceptMappingJobs:input_type -> clarifai.api.PostConceptMappingJobsRequest
	3,   // 557: clarifai.api.V2.GetAnnotation:input_type -> clarifai.api.GetAnnotationRequest
	4,   // 558: clarifai.api.V2.ListAnnotations:input_type -> clarifai.api.ListAnnotationsRequest
	5,   // 559: clarifai.api.V2.PostAnnotations:input_type -> clarifai.api.PostAnnotationsRequest
	6,   // 560: clarifai.api.V2.PatchAnnotations:input_type -> clarifai.api.PatchAnnotationsRequest
	7,   // 561: clarifai.api.V2.PatchAnnotationsStatus:input_type -> clarifai.api.PatchAnnotationsStatusRequest
	9,   // 562: clarifai.api.V2.DeleteAnnotation:input_type -> clarifai.api.DeleteAnnotationRequest
	10,  // 563: clarifai.api.V2.DeleteAnnotations:input_type -> clarifai.api.DeleteAnnotationsRequest
	190, // 564: clarifai.api.V2.PatchAnnotationsSearches:input_type -> clarifai.api.PatchAnnotationsSearchesRequest
	194, // 565: clarifai.api.V2.PostAnnotationsSearches:input_type -> clarifai.api.PostAnnotationsSearchesRequest
	13,  // 566: clarifai.api.V2.ListAnnotationWorkers:input_type -> clarifai.api.ListAnnotationWorkersRequest
	78,  // 567: clarifai.api.V2.GetInputCount:input_type -> clarifai.api.GetInputCountRequest
	68,  // 568: clarifai.api.V2.StreamInputs:input_type -> clarifai.api.StreamInputsRequest
	66,  // 569: clarifai.api.V2.GetInputSamples:input_type -> clarifai.api.GetInputSamplesRequest
	64,  // 570: clarifai.api.V2.GetInput:input_type -> clarifai.api.GetInputRequest
	65,  // 571: clarifai.api.V2.GetInputVideoManifest:input_type -> clarifai.api.GetVideoManifestRequest
	67,  // 572: clarifai.api.V2.ListInputs:input_type -> clarifai.api.ListInputsRequest
	69,  // 573: clarifai.api.V2.PostInputs:input_type -> clarifai.api.PostInputsRequest
	70,  // 574: clarifai.api.V2.PatchInputs:input_type -> clarifai.api.PatchInputsRequest
	71,  // 575: clarifai.api.V2.DeleteInput:input_type -> clarifai.api.DeleteInputRequest
	72,  // 576: clarifai.api.V2.DeleteInputs:input_type -> clarifai.api.DeleteInputsRequest
	189, // 577: clarifai.api.V2.PatchInputsSearches:input_type -> clarifai.api.PatchInputsSearchesRequest
	196, // 578: clarifai.api.V2.PostInputsSearches:input_type -> clarifai.api.PostInputsSearchesRequest
	103, // 579: clarifai.api.V2.PostModelOutputs:input_type -> clarifai.api.PostModelOutputsRequest
	79,  // 580: clarifai.api.V2.ListDatasets:input_type -> clarifai.api.ListDatasetsRequest
	80,  // 581: clarifai.api.V2.GetDataset:input_type -> clarifai.api.GetDatasetRequest
	81,  // 582: clarifai.api.V2.PostDatasets:input_type -> clarifai.api.PostDatasetsRequest
	82,  // 583: clarifai.api.V2.PatchDatasets:input_type -> clarifai.api.PatchDatasetsRequest
	83,  // 584: clarifai.api.V2.DeleteDatasets:input_type -> clarifai.api.DeleteDatasetsRequest
	86,  // 585: clarifai.api.V2.ListDatasetInputs:input_type -> clarifai.api.ListDatasetInputsRequest
	87,  // 586: clarifai.api.V2.GetDatasetInput:input_type -> clarifai.api.GetDatasetInputRequest
	88,  // 587: clarifai.api.V2.PostDatasetInputs:input_type -> clarifai.api.PostDatasetInputsRequest
	89,  // 588: clarifai.api.V2.DeleteDatasetInputs:input_type -> clarifai.api.DeleteDatasetInputsRequest
	92,  // 589: clarifai.api.V2.ListDatasetVersions:input_type -> clarifai.api.ListDatasetVersionsRequest
	93,  // 590: clarifai.api.V2.GetDatasetVersion:input_type -> clarifai.api.GetDatasetVersionRequest
	94,  // 591: clarifai.api.V2.ListDatasetVersionMetricsGroups:input_type -> clarifai.api.ListDatasetVersionMetricsGroupsRequest
	95,  // 592: clarifai.api.V2.PostDatasetVersions:input_type -> clarifai.api.PostDatasetVersionsRequest
	96,  // 593: clarifai.api.V2.PatchDatasetVersions:input_type -> clarifai.api.PatchDatasetVersionsRequest
	97,  // 594: clarifai.api.V2.DeleteDatasetVersions:input_type -> clarifai.api.DeleteDatasetVersionsRequest
	98,  // 595: clarifai.api.V2.PutDatasetVersionExports:input_type -> clarifai.api.PutDatasetVersionExportsRequest
	165, // 596: clarifai.api.V2.GetModelType:input_type -> clarifai.api.GetModelTypeRequest
	167, // 597: clarifai.api.V2.ListOpenSourceLicenses:input_type -> clarifai.api.ListOpenSourceLicensesRequest
	166, // 598: clarifai.api.V2.ListModelTypes:input_type -> clarifai.api.ListModelTypesRequest
	113, // 599: clarifai.api.V2.GetModel:input_type -> clarifai.api.GetModelRequest
	113, // 600: clarifai.api.V2.GetModelOutputInfo:input_type -> clarifai.api.GetModelRequest
	114, // 601: clarifai.api.V2.ListModels:input_type -> clarifai.api.ListModelsRequest
	115, // 602: clarifai.api.V2.GetResourceCounts:input_type -> clarifai.api.GetResourceCountsRequest
	131, // 603: clarifai.api.V2.PostModelsSearches:input_type -> clarifai.api.PostModelsSearchesRequest
	125, // 604: clarifai.api.V2.PostModels:input_type -> clarifai.api.PostModelsRequest
	126, // 605: clarifai.api.V2.PatchModels:input_type -> clarifai.api.PatchModelsRequest
	128, // 606: clarifai.api.V2.PatchModelIds:input_type -> clarifai.api.PatchModelIdsRequest
	129, // 607: clarifai.api.V2.DeleteModel:input_type -> clarifai.api.DeleteModelRequest
	130, // 608: clarifai.api.V2.DeleteModels:input_type -> clarifai.api.DeleteModelsRequest
	118, // 609: clarifai.api.V2.PatchModelCheckConsents:input_type -> clarifai.api.PatchModelCheckConsentsRequest
	117, // 610: clarifai.api.V2.PatchModelToolkits:input_type -> clarifai.api.PatchModelToolkitsRequest
	119, // 611: clarifai.api.V2.PatchModelUseCases:input_type -> clarifai.api.PatchModelUseCasesRequest
	120, // 612: clarifai.api.V2.PatchModelLanguages:input_type -> clarifai.api.PatchModelLanguagesRequest
	104, // 613: clarifai.api.V2.ListModelInputs:input_type -> clarifai.api.ListModelInputsRequest
	135, // 614: clarifai.api.V2.GetModelVersion:input_type -> clarifai.api.GetModelVersionRequest
	136, // 615: clarifai.api.V2.ListModelVersions:input_type -> clarifai.api.ListModelVersionsRequest
	147, // 616: clarifai.api.V2.PostWorkflowVersionsUnPublish:input_type -> clarifai.api.PostWorkflowVersionsUnPublishRequest
	148, // 617: clarifai.api.V2.PostWorkflowVersionsPublish:input_type -> clarifai.api.PostWorkflowVersionsPublishRequest
	152, // 618: clarifai.api.V2.PostModelVersionsPublish:input_type -> clarifai.api.PostModelVersionsPublishRequest
	154, // 619: clarifai.api.V2.PostModelVersionsUnPublish:input_type -> clarifai.api.PostModelVersionsUnPublishRequest
	140, // 620: clarifai.api.V2.PostModelVersions:input_type -> clarifai.api.PostModelVersionsRequest
	134, // 621: clarifai.api.V2.PatchModelVersions:input_type -> clarifai.api.PatchModelVersionsRequest
	137, // 622: clarifai.api.V2.DeleteModelVersion:input_type -> clarifai.api.DeleteModelVersionRequest
	141, // 623: clarifai.api.V2.PostModelVersionsUpload:input_type -> clarifai.api.PostModelVersionsUploadRequest
	144, // 624: clarifai.api.V2.PutModelVersionExports:input_type -> clarifai.api.PutModelVersionExportsRequest
	145, // 625: clarifai.api.V2.GetModelVersionExport:input_type -> clarifai.api.GetModelVersionExportRequest
	164, // 626: clarifai.api.V2.GetModelVersionMetrics:input_type -> clarifai.api.GetModelVersionMetricsRequest
	163, // 627: clarifai.api.V2.PostModelVersionMetrics:input_type -> clarifai.api.PostModelVersionMetricsRequest
	158, // 628: clarifai.api.V2.PostModelVersionEvaluations:input_type -> clarifai.api.PostModelVersionEvaluationsRequest
	159, // 629: clarifai.api.V2.ListModelVersionEvaluations:input_type -> clarifai.api.ListModelVersionEvaluationsRequest
	160, // 630: clarifai.api.V2.GetModelVersionEvaluation:input_type -> clarifai.api.GetModelVersionEvaluationRequest
	155, // 631: clarifai.api.V2.PostEvaluations:input_type -> clarifai.api.PostEvaluationsRequest
	156, // 632: clarifai.api.V2.ListEvaluations:input_type -> clarifai.api.ListEvaluationsRequest
	157, // 633: clarifai.api.V2.GetEvaluation:input_type -> clarifai.api.GetEvaluationRequest
	175, // 634: clarifai.api.V2.ListModelReferences:input_type -> clarifai.api.ListModelReferencesRequest
	171, // 635: clarifai.api.V2.GetModelVersionInputExample:input_type -> clarifai.api.GetModelVersionInputExampleRequest
	172, // 636: clarifai.api.V2.ListModelVersionInputExamples:input_type -> clarifai.api.ListModelVersionInputExamplesRequest
	214, // 637: clarifai.api.V2.GetWorkflow:input_type -> clarifai.api.GetWorkflowRequest
	215, // 638: clarifai.api.V2.ListWorkflows:input_type -> clarifai.api.ListWorkflowsRequest
	216, // 639: clarifai.api.V2.PostWorkflows:input_type -> clarifai.api.PostWorkflowsRequest
	217, // 640: clarifai.api.V2.PatchWorkflows:input_type -> clarifai.api.PatchWorkflowsRequest
	218, // 641: clarifai.api.V2.PatchWorkflowIds:input_type -> clarifai.api.PatchWorkflowIdsRequest
	219, // 642: clarifai.api.V2.DeleteWorkflow:input_type -> clarifai.api.DeleteWorkflowRequest
	220, // 643: clarifai.api.V2.DeleteWorkflows:input_type -> clarifai.api.DeleteWorkflowsRequest
	223, // 644: clarifai.api.V2.PostWorkflowResults:input_type -> clarifai.api.PostWorkflowResultsRequest
	225, // 645: clarifai.api.V2.PostWorkflowResultsSimilarity:input_type -> clarifai.api.PostWorkflowResultsSimilarityRequest
	227, // 646: clarifai.api.V2.ListWorkflowVersions:input_type -> clarifai.api.ListWorkflowVersionsRequest
	228, // 647: clarifai.api.V2.GetWorkflowVersion:input_type -> clarifai.api.GetWorkflowVersionRequest
	229, // 648: clarifai.api.V2.DeleteWorkflowVersions:input_type -> clarifai.api.DeleteWorkflowVersionsRequest
	230, // 649: clarifai.api.V2.PatchWorkflowVersions:input_type -> clarifai.api.PatchWorkflowVersionsRequest
	105, // 650: clarifai.api.V2.GetKey:input_type -> clarifai.api.GetKeyRequest
	106, // 651: clarifai.api.V2.ListKeys:input_type -> clarifai.api.ListKeysRequest
	107, // 652: clarifai.api.V2.ListAppKeys:input_type -> clarifai.api.ListAppKeysRequest
	109, // 653: clarifai.api.V2.DeleteKey:input_type -> clarifai.api.DeleteKeyRequest
	108, // 654: clarifai.api.V2.PostKeys:input_type -> clarifai.api.PostKeysRequest
	110, // 655: clarifai.api.V2.PatchKeys:input_type -> clarifai.api.PatchKeysRequest
	179, // 656: clarifai.api.V2.MyScopes:input_type -> clarifai.api.MyScopesRequest
	180, // 657: clarifai.api.V2.MyScopesUser:input_type -> clarifai.api.MyScopesUserRequest
	181, // 658: clarifai.api.V2.MyScopesRoot:input_type -> clarifai.api.MyScopesRootRequest
	178, // 659: clarifai.api.V2.ListScopes:input_type -> clarifai.api.ListScopesRequest
	15,  // 660: clarifai.api.V2.GetApp:input_type -> clarifai.api.GetAppRequest
	16,  // 661: clarifai.api.V2.ListApps:input_type -> clarifai.api.ListAppsRequest
	18,  // 662: clarifai.api.V2.DeleteApp:input_type -> clarifai.api.DeleteAppRequest
	17,  // 663: clarifai.api.V2.PostApps:input_type -> clarifai.api.PostAppsRequest
	19,  // 664: clarifai.api.V2.PatchApps:input_type -> clarifai.api.PatchAppsRequest
	21,  // 665: clarifai.api.V2.PatchAppsIds:input_type -> clarifai.api.PatchAppsIdsRequest
	20,  // 666: clarifai.api.V2.PatchApp:input_type -> clarifai.api.PatchAppRequest
	22,  // 667: clarifai.api.V2.PostAppsSearches:input_type -> clarifai.api.PostAppsSearchesRequest
	210, // 668: clarifai.api.V2.GetUser:input_type -> clarifai.api.GetUserRequest
	212, // 669: clarifai.api.V2.PostValidatePassword:input_type -> clarifai.api.PostValidatePasswordRequest
	186, // 670: clarifai.api.V2.GetSearch:input_type -> clarifai.api.GetSearchRequest
	187, // 671: clarifai.api.V2.ListSearches:input_type -> clarifai.api.ListSearchesRequest
	191, // 672: clarifai.api.V2.PatchSearches:input_type -> clarifai.api.PatchSearchesRequest
	188, // 673: clarifai.api.V2.PostSearches:input_type -> clarifai.api.PostSearchesRequest
	192, // 674: clarifai.api.V2.PostSearchesByID:input_type -> clarifai.api.PostSearchesByIDRequest
	199, // 675: clarifai.api.V2.PostAnnotationSearchMetrics:input_type -> clarifai.api.PostAnnotationSearchMetricsRequest
	200, // 676: clarifai.api.V2.GetAnnotationSearchMetrics:input_type -> clarifai.api.GetAnnotationSearchMetricsRequest
	201, // 677: clarifai.api.V2.ListAnnotationSearchMetrics:input_type -> clarifai.api.ListAnnotationSearchMetricsRequest
	195, // 678: clarifai.api.V2.DeleteAnnotationSearchMetrics:input_type -> clarifai.api.DeleteAnnotationSearchMetricsRequest
	193, // 679: clarifai.api.V2.DeleteSearch:input_type -> clarifai.api.DeleteSearchRequest
	203, // 680: clarifai.api.V2.ListAnnotationFilters:input_type -> clarifai.api.ListAnnotationFiltersRequest
	204, // 681: clarifai.api.V2.GetAnnotationFilter:input_type -> clarifai.api.GetAnnotationFilterRequest
	205, // 682: clarifai.api.V2.PostAnnotationFilters:input_type -> clarifai.api.PostAnnotationFiltersRequest
	206, // 683: clarifai.api.V2.PatchAnnotationFilters:input_type -> clarifai.api.PatchAnnotationFiltersRequest
	207, // 684: clarifai.api.V2.DeleteAnnotationFilters:input_type -> clarifai.api.DeleteAnnotationFiltersRequest
	35,  // 685: clarifai.api.V2.ListStatusCodes:input_type -> clarifai.api.ListStatusCodesRequest
	34,  // 686: clarifai.api.V2.GetStatusCode:input_type -> clarifai.api.GetStatusCodeRequest
	32,  // 687: clarifai.api.V2.GetResourcePrice:input_type -> clarifai.api.GetResourcePriceRequest
	25,  // 688: clarifai.api.V2.ListCollaborators:input_type -> clarifai.api.ListCollaboratorsRequest
	26,  // 689: clarifai.api.V2.PostCollaborators:input_type -> clarifai.api.PostCollaboratorsRequest
	27,  // 690: clarifai.api.V2.PatchCollaborators:input_type -> clarifai.api.PatchCollaboratorsRequest
	28,  // 691: clarifai.api.V2.DeleteCollaborators:input_type -> clarifai.api.DeleteCollaboratorsRequest
	30,  // 692: clarifai.api.V2.ListCollaborations:input_type -> clarifai.api.ListCollaborationsRequest
	233, // 693: clarifai.api.V2.PostAppDuplications:input_type -> clarifai.api.PostAppDuplicationsRequest
	235, // 694: clarifai.api.V2.ListAppDuplications:input_type -> clarifai.api.ListAppDuplicationsRequest
	234, // 695: clarifai.api.V2.GetAppDuplication:input_type -> clarifai.api.GetAppDuplicationRequest
	238, // 696: clarifai.api.V2.PostTasks:input_type -> clarifai.api.PostTasksRequest
	245, // 697: clarifai.api.V2.GetTaskAnnotationCount:input_type -> clarifai.api.GetTaskCountRequest
	245, // 698: clarifai.api.V2.GetTaskInputCount:input_type -> clarifai.api.GetTaskCountRequest
	239, // 699: clarifai.api.V2.GetTask:input_type -> clarifai.api.GetTaskRequest
	240, // 700: clarifai.api.V2.ListTasks:input_type -> clarifai.api.ListTasksRequest
	241, // 701: clarifai.api.V2.PatchTasks:input_type -> clarifai.api.PatchTasksRequest
	242, // 702: clarifai.api.V2.DeleteTasks:input_type -> clarifai.api.DeleteTasksRequest
	247, // 703: clarifai.api.V2.PostLabelOrders:input_type -> clarifai.api.PostLabelOrdersRequest
	248, // 704: clarifai.api.V2.GetLabelOrder:input_type -> clarifai.api.GetLabelOrderRequest
	249, // 705: clarifai.api.V2.ListLabelOrders:input_type -> clarifai.api.ListLabelOrdersRequest
	250, // 706: clarifai.api.V2.PatchLabelOrders:input_type -> clarifai.api.PatchLabelOrdersRequest
	251, // 707: clarifai.api.V2.DeleteLabelOrders:input_type -> clarifai.api.DeleteLabelOrdersRequest
	254, // 708: clarifai.api.V2.PostCollectors:input_type -> clarifai.api.PostCollectorsRequest
	257, // 709: clarifai.api.V2.GetCollector:input_type -> clarifai.api.GetCollectorRequest
	258, // 710: clarifai.api.V2.ListCollectors:input_type -> clarifai.api.ListCollectorsRequest
	255, // 711: clarifai.api.V2.PatchCollectors:input_type -> clarifai.api.PatchCollectorsRequest
	256, // 712: clarifai.api.V2.DeleteCollectors:input_type -> clarifai.api.DeleteCollectorsRequest
	261, // 713: clarifai.api.V2.PostStatValues:input_type -> clarifai.api.PostStatValuesRequest
	263, // 714: clarifai.api.V2.PostStatValuesAggregate:input_type -> clarifai.api.PostStatValuesAggregateRequest
	265, // 715: clarifai.api.V2.PostTrendingMetricsView:input_type -> clarifai.api.PostTrendingMetricsViewRequest
	266, // 716: clarifai.api.V2.ListTrendingMetricsViews:input_type -> clarifai.api.ListTrendingMetricsViewsRequest
	268, // 717: clarifai.api.V2.GetModule:input_type -> clarifai.api.GetModuleRequest
	269, // 718: clarifai.api.V2.ListModules:input_type -> clarifai.api.ListModulesRequest
	270, // 719: clarifai.api.V2.PostModules:input_type -> clarifai.api.PostModulesRequest
	271, // 720: clarifai.api.V2.PatchModules:input_type -> clarifai.api.PatchModulesRequest
	272, // 721: clarifai.api.V2.DeleteModules:input_type -> clarifai.api.DeleteModulesRequest
	275, // 722: clarifai.api.V2.GetModuleVersion:input_type -> clarifai.api.GetModuleVersionRequest
	276, // 723: clarifai.api.V2.ListModuleVersions:input_type -> clarifai.api.ListModuleVersionsRequest
	277, // 724: clarifai.api.V2.PostModuleVersions:input_type -> clarifai.api.PostModuleVersionsRequest
	278, // 725: clarifai.api.V2.PatchModuleVersions:input_type -> clarifai.api.PatchModuleVersionsRequest
	279, // 726: clarifai.api.V2.DeleteModuleVersions:input_type -> clarifai.api.DeleteModuleVersionsRequest
	280, // 727: clarifai.api.V2.GetModuleVersionUsageCount:input_type -> clarifai.api.GetModuleVersionUsageCountRequest
	284, // 728: clarifai.api.V2.GetInstalledModuleVersion:input_type -> clarifai.api.GetInstalledModuleVersionRequest
	285, // 729: clarifai.api.V2.ListInstalledModuleVersions:input_type -> clarifai.api.ListInstalledModuleVersionsRequest
	286, // 730: clarifai.api.V2.PostInstalledModuleVersions:input_type -> clarifai.api.PostInstalledModuleVersionsRequest
	288, // 731: clarifai.api.V2.DeleteInstalledModuleVersions:input_type -> clarifai.api.DeleteInstalledModuleVersionsRequest
	287, // 732: clarifai.api.V2.PostInstalledModuleVersionsKey:input_type -> clarifai.api.PostInstalledModuleVersionsKeyRequest
	292, // 733: clarifai.api.V2.PostBulkOperations:input_type -> clarifai.api.PostBulkOperationsRequest
	293, // 734: clarifai.api.V2.ListBulkOperations:input_type -> clarifai.api.ListBulkOperationsRequest
	294, // 735: clarifai.api.V2.GetBulkOperation:input_type -> clarifai.api.GetBulkOperationRequest
	295, // 736: clarifai.api.V2.CancelBulkOperations:input_type -> clarifai.api.CancelBulkOperationRequest
	296, // 737: clarifai.api.V2.DeleteBulkOperations:input_type -> clarifai.api.DeleteBulkOperationRequest
	291, // 738: clarifai.api.V2.ListNextTaskAssignments:input_type -> clarifai.api.ListNextTaskAssignmentsRequest
	299, // 739: clarifai.api.V2.PutTaskAssignments:input_type -> clarifai.api.PutTaskAssignmentsRequest
	302, // 740: clarifai.api.V2.ListInputsAddJobs:input_type -> clarifai.api.ListInputsAddJobsRequest
	303, // 741: clarifai.api.V2.GetInputsAddJob:input_type -> clarifai.api.GetInputsAddJobRequest
	304, // 742: clarifai.api.V2.CancelInputsAddJob:input_type -> clarifai.api.CancelInputsAddJobRequest
	307, // 743: clarifai.api.V2.PostUploads:input_type -> clarifai.api.PostUploadsRequest
	313, // 744: clarifai.api.V2.PutUploadContentParts:input_type -> clarifai.api.PutUploadContentPartsRequest
	310, // 745: clarifai.api.V2.GetUpload:input_type -> clarifai.api.GetUploadRequest
	309, // 746: clarifai.api.V2.ListUploads:input_type -> clarifai.api.ListUploadsRequest
	308, // 747: clarifai.api.V2.DeleteUploads:input_type -> clarifai.api.DeleteUploadsRequest
	314, // 748: clarifai.api.V2.PostInputsDataSources:input_type -> clarifai.api.PostInputsDataSourcesRequest
	315, // 749: clarifai.api.V2.GetInputsExtractionJob:input_type -> clarifai.api.GetInputsExtractionJobRequest
	316, // 750: clarifai.api.V2.ListInputsExtractionJobs:input_type -> clarifai.api.ListInputsExtractionJobsRequest
	319, // 751: clarifai.api.V2.CancelInputsExtractionJobs:input_type -> clarifai.api.CancelInputsExtractionJobsRequest
	320, // 752: clarifai.api.V2.PostInputsUploads:input_type -> clarifai.api.PostInputsUploadsRequest
	321, // 753: clarifai.api.V2.GetRunner:input_type -> clarifai.api.GetRunnerRequest
	322, // 754: clarifai.api.V2.ListRunners:input_type -> clarifai.api.ListRunnersRequest
	323, // 755: clarifai.api.V2.PostRunners:input_type -> clarifai.api.PostRunnersRequest
	324, // 756: clarifai.api.V2.DeleteRunners:input_type -> clarifai.api.DeleteRunnersRequest
	327, // 757: clarifai.api.V2.ListRunnerItems:input_type -> clarifai.api.ListRunnerItemsRequest
	328, // 758: clarifai.api.V2.PostRunnerItemOutputs:input_type -> clarifai.api.PostRunnerItemOutputsRequest
	333, // 759: clarifai.api.V2.PostModelVersionsTrainingTimeEstimate:input_type -> clarifai.api.PostModelVersionsTrainingTimeEstimateRequest
	55,  // 760: clarifai.api.V2.ListConceptRelations:output_type -> clarifai.api.MultiConceptRelationResponse
	55,  // 761: clarifai.api.V2.PostConceptRelations:output_type -> clarifai.api.MultiConceptRelationResponse
	417, // 762: clarifai.api.V2.DeleteConceptRelations:output_type -> clarifai.api.status.BaseResponse
	48,  // 763: clarifai.api.V2.GetConceptCounts:output_type -> clarifai.api.MultiConceptCountResponse
	46,  // 764: clarifai.api.V2.GetConcept:output_type -> clarifai.api.SingleConceptResponse
	47,  // 765: clarifai.api.V2.ListConcepts:output_type -> clarifai.api.MultiConceptResponse
	47,  // 766: clarifai.api.V2.ListModelConcepts:output_type -> clarifai.api.MultiConceptResponse
	47,  // 767: clarifai.api.V2.PostConceptsSearches:output_type -> clarifai.api.MultiConceptResponse
	47,  // 768: clarifai.api.V2.PostConcepts:output_type -> clarifai.api.MultiConceptResponse
	47,  // 769: clarifai.api.V2.PatchConcepts:output_type -> clarifai.api.MultiConceptResponse
	62,  // 770: clarifai.api.V2.GetConceptLanguage:output_type -> clarifai.api.SingleConceptLanguageResponse
	63,  // 771: clarifai.api.V2.ListConceptLanguages:output_type -> clarifai.api.MultiConceptLanguageResponse
	63,  // 772: clarifai.api.V2.PostConceptLanguages:output_type -> clarifai.api.MultiConceptLanguageResponse
	63,  // 773: clarifai.api.V2.PatchConceptLanguages:output_type -> clarifai.api.MultiConceptLanguageResponse
	56,  // 774: clarifai.api.V2.ListKnowledgeGraphs:output_type -> clarifai.api.MultiKnowledgeGraphResponse
	56,  // 775: clarifai.api.V2.PostKnowledgeGraphs:output_type -> clarifai.api.MultiKnowledgeGraphResponse
	57,  // 776: clarifai.api.V2.PostConceptMappingJobs:output_type -> clarifai.api.MultiConceptMappingJobResponse
	11,  // 777: clarifai.api.V2.GetAnnotation:output_type -> clarifai.api.SingleAnnotationResponse
	12,  // 778: clarifai.api.V2.ListAnnotations:output_type -> clarifai.api.MultiAnnotationResponse
	12,  // 779: clarifai.api.V2.PostAnnotations:output_type -> clarifai.api.MultiAnnotationResponse
	12,  // 780: clarifai.api.V2.PatchAnnotations:output_type -> clarifai.api.MultiAnnotationResponse
	8,   // 781: clarifai.api.V2.PatchAnnotationsStatus:output_type -> clarifai.api.PatchAnnotationsStatusResponse
	417, // 782: clarifai.api.V2.DeleteAnnotation:output_type -> clarifai.api.status.BaseResponse
	417, // 783: clarifai.api.V2.DeleteAnnotations:output_type -> clarifai.api.status.BaseResponse
	198, // 784: clarifai.api.V2.PatchAnnotationsSearches:output_type -> clarifai.api.MultiSearchResponse
	198, // 785: clarifai.api.V2.PostAnnotationsSearches:output_type -> clarifai.api.MultiSearchResponse
	14,  // 786: clarifai.api.V2.ListAnnotationWorkers:output_type -> clarifai.api.MultiWorkerResponse
	77,  // 787: clarifai.api.V2.GetInputCount:output_type -> clarifai.api.SingleInputCountResponse
	75,  // 788: clarifai.api.V2.StreamInputs:output_type -> clarifai.api.MultiInputResponse
	76,  // 789: clarifai.api.V2.GetInputSamples:output_type -> clarifai.api.MultiInputAnnotationResponse
	73,  // 790: clarifai.api.V2.GetInput:output_type -> clarifai.api.SingleInputResponse
	74,  // 791: clarifai.api.V2.GetInputVideoManifest:output_type -> clarifai.api.GetVideoManifestResponse
	75,  // 792: clarifai.api.V2.ListInputs:output_type -> clarifai.api.MultiInputResponse
	75,  // 793: clarifai.api.V2.PostInputs:output_type -> clarifai.api.MultiInputResponse
	75,  // 794: clarifai.api.V2.PatchInputs:output_type -> clarifai.api.MultiInputResponse
	417, // 795: clarifai.api.V2.DeleteInput:output_type -> clarifai.api.status.BaseResponse
	417, // 796: clarifai.api.V2.DeleteInputs:output_type -> clarifai.api.status.BaseResponse
	198, // 797: clarifai.api.V2.PatchInputsSearches:output_type -> clarifai.api.MultiSearchResponse
	198, // 798: clarifai.api.V2.PostInputsSearches:output_type -> clarifai.api.MultiSearchResponse
	177, // 799: clarifai.api.V2.PostModelOutputs:output_type -> clarifai.api.MultiOutputResponse
	84,  // 800: clarifai.api.V2.ListDatasets:output_type -> clarifai.api.MultiDatasetResponse
	85,  // 801: clarifai.api.V2.GetDataset:output_type -> clarifai.api.SingleDatasetResponse
	84,  // 802: clarifai.api.V2.PostDatasets:output_type -> clarifai.api.MultiDatasetResponse
	84,  // 803: clarifai.api.V2.PatchDatasets:output_type -> clarifai.api.MultiDatasetResponse
	417, // 804: clarifai.api.V2.DeleteDatasets:output_type -> clarifai.api.status.BaseResponse
	90,  // 805: clarifai.api.V2.ListDatasetInputs:output_type -> clarifai.api.MultiDatasetInputResponse
	91,  // 806: clarifai.api.V2.GetDatasetInput:output_type -> clarifai.api.SingleDatasetInputResponse
	90,  // 807: clarifai.api.V2.PostDatasetInputs:output_type -> clarifai.api.MultiDatasetInputResponse
	417, // 808: clarifai.api.V2.DeleteDatasetInputs:output_type -> clarifai.api.status.BaseResponse
	99,  // 809: clarifai.api.V2.ListDatasetVersions:output_type -> clarifai.api.MultiDatasetVersionResponse
	102, // 810: clarifai.api.V2.GetDatasetVersion:output_type -> clarifai.api.SingleDatasetVersionResponse
	101, // 811: clarifai.api.V2.ListDatasetVersionMetricsGroups:output_type -> clarifai.api.MultiDatasetVersionMetricsGroupResponse
	99,  // 812: clarifai.api.V2.PostDatasetVersions:output_type -> clarifai.api.MultiDatasetVersionResponse
	99,  // 813: clarifai.api.V2.PatchDatasetVersions:output_type -> clarifai.api.MultiDatasetVersionResponse
	417, // 814: clarifai.api.V2.DeleteDatasetVersions:output_type -> clarifai.api.status.BaseResponse
	100, // 815: clarifai.api.V2.PutDatasetVersionExports:output_type -> clarifai.api.MultiDatasetVersionExportResponse
	169, // 816: clarifai.api.V2.GetModelType:output_type -> clarifai.api.SingleModelTypeResponse
	168, // 817: clarifai.api.V2.ListOpenSourceLicenses:output_type -> clarifai.api.ListOpenSourceLicensesResponse
	170, // 818: clarifai.api.V2.ListModelTypes:output_type -> clarifai.api.MultiModelTypeResponse
	132, // 819: clarifai.api.V2.GetModel:output_type -> clarifai.api.SingleModelResponse
	132, // 820: clarifai.api.V2.GetModelOutputInfo:output_type -> clarifai.api.SingleModelResponse
	133, // 821: clarifai.api.V2.ListModels:output_type -> clarifai.api.MultiModelResponse
	116, // 822: clarifai.api.V2.GetResourceCounts:output_type -> clarifai.api.GetResourceCountsResponse
	133, // 823: clarifai.api.V2.PostModelsSearches:output_type -> clarifai.api.MultiModelResponse
	132, // 824: clarifai.api.V2.PostModels:output_type -> clarifai.api.SingleModelResponse
	133, // 825: clarifai.api.V2.PatchModels:output_type -> clarifai.api.MultiModelResponse
	133, // 826: clarifai.api.V2.PatchModelIds:output_type -> clarifai.api.MultiModelResponse
	417, // 827: clarifai.api.V2.DeleteModel:output_type -> clarifai.api.status.BaseResponse
	417, // 828: clarifai.api.V2.DeleteModels:output_type -> clarifai.api.status.BaseResponse
	122, // 829: clarifai.api.V2.PatchModelCheckConsents:output_type -> clarifai.api.MultiModelCheckConsentResponse
	121, // 830: clarifai.api.V2.PatchModelToolkits:output_type -> clarifai.api.MultiModelToolkitResponse
	123, // 831: clarifai.api.V2.PatchModelUseCases:output_type -> clarifai.api.MultiModelUseCaseResponse
	124, // 832: clarifai.api.V2.PatchModelLanguages:output_type -> clarifai.api.MultiModelLanguageResponse
	75,  // 833: clarifai.api.V2.ListModelInputs:output_type -> clarifai.api.MultiInputResponse
	138, // 834: clarifai.api.V2.GetModelVersion:output_type -> clarifai.api.SingleModelVersionResponse
	139, // 835: clarifai.api.V2.ListModelVersions:output_type -> clarifai.api.MultiModelVersionResponse
	417, // 836: clarifai.api.V2.PostWorkflowVersionsUnPublish:output_type -> clarifai.api.status.BaseResponse
	417, // 837: clarifai.api.V2.PostWorkflowVersionsPublish:output_type -> clarifai.api.status.BaseResponse
	417, // 838: clarifai.api.V2.PostModelVersionsPublish:output_type -> clarifai.api.status.BaseResponse
	417, // 839: clarifai.api.V2.PostModelVersionsUnPublish:output_type -> clarifai.api.status.BaseResponse
	132, // 840: clarifai.api.V2.PostModelVersions:output_type -> clarifai.api.SingleModelResponse
	139, // 841: clarifai.api.V2.PatchModelVersions:output_type -> clarifai.api.MultiModelVersionResponse
	417, // 842: clarifai.api.V2.DeleteModelVersion:output_type -> clarifai.api.status.BaseResponse
	142, // 843: clarifai.api.V2.PostModelVersionsUpload:output_type -> clarifai.api.PostModelVersionsUploadResponse
	146, // 844: clarifai.api.V2.PutModelVersionExports:output_type -> clarifai.api.SingleModelVersionExportResponse
	146, // 845: clarifai.api.V2.GetModelVersionExport:output_type -> clarifai.api.SingleModelVersionExportResponse
	138, // 846: clarifai.api.V2.GetModelVersionMetrics:output_type -> clarifai.api.SingleModelVersionResponse
	138, // 847: clarifai.api.V2.PostModelVersionMetrics:output_type -> clarifai.api.SingleModelVersionResponse
	162, // 848: clarifai.api.V2.PostModelVersionEvaluations:output_type -> clarifai.api.MultiEvalMetricsResponse
	162, // 849: clarifai.api.V2.ListModelVersionEvaluations:output_type -> clarifai.api.MultiEvalMetricsResponse
	161, // 850: clarifai.api.V2.GetModelVersionEvaluation:output_type -> clarifai.api.SingleEvalMetricsResponse
	162, // 851: clarifai.api.V2.PostEvaluations:output_type -> clarifai.api.MultiEvalMetricsResponse
	162, // 852: clarifai.api.V2.ListEvaluations:output_type -> clarifai.api.MultiEvalMetricsResponse
	161, // 853: clarifai.api.V2.GetEvaluation:output_type -> clarifai.api.SingleEvalMetricsResponse
	176, // 854: clarifai.api.V2.ListModelReferences:output_type -> clarifai.api.MultiModelReferenceResponse
	173, // 855: clarifai.api.V2.GetModelVersionInputExample:output_type -> clarifai.api.SingleModelVersionInputExampleResponse
	174, // 856: clarifai.api.V2.ListModelVersionInputExamples:output_type -> clarifai.api.MultiModelVersionInputExampleResponse
	221, // 857: clarifai.api.V2.GetWorkflow:output_type -> clarifai.api.SingleWorkflowResponse
	222, // 858: clarifai.api.V2.ListWorkflows:output_type -> clarifai.api.MultiWorkflowResponse
	222, // 859: clarifai.api.V2.PostWorkflows:output_type -> clarifai.api.MultiWorkflowResponse
	222, // 860: clarifai.api.V2.PatchWorkflows:output_type -> clarifai.api.MultiWorkflowResponse
	222, // 861: clarifai.api.V2.PatchWorkflowIds:output_type -> clarifai.api.MultiWorkflowResponse
	417, // 862: clarifai.api.V2.DeleteWorkflow:output_type -> clarifai.api.status.BaseResponse
	417, // 863: clarifai.api.V2.DeleteWorkflows:output_type -> clarifai.api.status.BaseResponse
	224, // 864: clarifai.api.V2.PostWorkflowResults:output_type -> clarifai.api.PostWorkflowResultsResponse
	226, // 865: clarifai.api.V2.PostWorkflowResultsSimilarity:output_type -> clarifai.api.PostWorkflowResultsSimilarityResponse
	231, // 866: clarifai.api.V2.ListWorkflowVersions:output_type -> clarifai.api.MultiWorkflowVersionResponse
	232, // 867: clarifai.api.V2.GetWorkflowVersion:output_type -> clarifai.api.SingleWorkflowVersionResponse
	417, // 868: clarifai.api.V2.DeleteWorkflowVersions:output_type -> clarifai.api.status.BaseResponse
	231, // 869: clarifai.api.V2.PatchWorkflowVersions:output_type -> clarifai.api.MultiWorkflowVersionResponse
	111, // 870: clarifai.api.V2.GetKey:output_type -> clarifai.api.SingleKeyResponse
	112, // 871: clarifai.api.V2.ListKeys:output_type -> clarifai.api.MultiKeyResponse
	112, // 872: clarifai.api.V2.ListAppKeys:output_type -> clarifai.api.MultiKeyResponse
	417, // 873: clarifai.api.V2.DeleteKey:output_type -> clarifai.api.status.BaseResponse
	112, // 874: clarifai.api.V2.PostKeys:output_type -> clarifai.api.MultiKeyResponse
	112, // 875: clarifai.api.V2.PatchKeys:output_type -> clarifai.api.MultiKeyResponse
	183, // 876: clarifai.api.V2.MyScopes:output_type -> clarifai.api.MultiScopeResponse
	184, // 877: clarifai.api.V2.MyScopesUser:output_type -> clarifai.api.MultiScopeUserResponse
	185, // 878: clarifai.api.V2.MyScopesRoot:output_type -> clarifai.api.MultiScopeRootResponse
	182, // 879: clarifai.api.V2.ListScopes:output_type -> clarifai.api.MultiScopeDepsResponse
	23,  // 880: clarifai.api.V2.GetApp:output_type -> clarifai.api.SingleAppResponse
	24,  // 881: clarifai.api.V2.ListApps:output_type -> clarifai.api.MultiAppResponse
	417, // 882: clarifai.api.V2.DeleteApp:output_type -> clarifai.api.status.BaseResponse
	24,  // 883: clarifai.api.V2.PostApps:output_type -> clarifai.api.MultiAppResponse
	24,  // 884: clarifai.api.V2.PatchApps:output_type -> clarifai.api.MultiAppResponse
	24,  // 885: clarifai.api.V2.PatchAppsIds:output_type -> clarifai.api.MultiAppResponse
	23,  // 886: clarifai.api.V2.PatchApp:output_type -> clarifai.api.SingleAppResponse
	24,  // 887: clarifai.api.V2.PostAppsSearches:output_type -> clarifai.api.MultiAppResponse
	211, // 888: clarifai.api.V2.GetUser:output_type -> clarifai.api.SingleUserResponse
	213, // 889: clarifai.api.V2.PostValidatePassword:output_type -> clarifai.api.SinglePasswordValidationResponse
	197, // 890: clarifai.api.V2.GetSearch:output_type -> clarifai.api.SingleSearchResponse
	198, // 891: clarifai.api.V2.ListSearches:output_type -> clarifai.api.MultiSearchResponse
	198, // 892: clarifai.api.V2.PatchSearches:output_type -> clarifai.api.MultiSearchResponse
	198, // 893: clarifai.api.V2.PostSearches:output_type -> clarifai.api.MultiSearchResponse
	198, // 894: clarifai.api.V2.PostSearchesByID:output_type -> clarifai.api.MultiSearchResponse
	202, // 895: clarifai.api.V2.PostAnnotationSearchMetrics:output_type -> clarifai.api.MultiAnnotationSearchMetricsResponse
	202, // 896: clarifai.api.V2.GetAnnotationSearchMetrics:output_type -> clarifai.api.MultiAnnotationSearchMetricsResponse
	202, // 897: clarifai.api.V2.ListAnnotationSearchMetrics:output_type -> clarifai.api.MultiAnnotationSearchMetricsResponse
	417, // 898: clarifai.api.V2.DeleteAnnotationSearchMetrics:output_type -> clarifai.api.status.BaseResponse
	417, // 899: clarifai.api.V2.DeleteSearch:output_type -> clarifai.api.status.BaseResponse
	208, // 900: clarifai.api.V2.ListAnnotationFilters:output_type -> clarifai.api.MultiAnnotationFilterResponse
	209, // 901: clarifai.api.V2.GetAnnotationFilter:output_type -> clarifai.api.SingleAnnotationFilterResponse
	208, // 902: clarifai.api.V2.PostAnnotationFilters:output_type -> clarifai.api.MultiAnnotationFilterResponse
	208, // 903: clarifai.api.V2.PatchAnnotationFilters:output_type -> clarifai.api.MultiAnnotationFilterResponse
	417, // 904: clarifai.api.V2.DeleteAnnotationFilters:output_type -> clarifai.api.status.BaseResponse
	37,  // 905: clarifai.api.V2.ListStatusCodes:output_type -> clarifai.api.MultiStatusCodeResponse
	36,  // 906: clarifai.api.V2.GetStatusCode:output_type -> clarifai.api.SingleStatusCodeResponse
	33,  // 907: clarifai.api.V2.GetResourcePrice:output_type -> clarifai.api.GetResourcePriceResponse
	29,  // 908: clarifai.api.V2.ListCollaborators:output_type -> clarifai.api.MultiCollaboratorsResponse
	29,  // 909: clarifai.api.V2.PostCollaborators:output_type -> clarifai.api.MultiCollaboratorsResponse
	29,  // 910: clarifai.api.V2.PatchCollaborators:output_type -> clarifai.api.MultiCollaboratorsResponse
	417, // 911: clarifai.api.V2.DeleteCollaborators:output_type -> clarifai.api.status.BaseResponse
	31,  // 912: clarifai.api.V2.ListCollaborations:output_type -> clarifai.api.MultiCollaborationsResponse
	236, // 913: clarifai.api.V2.PostAppDuplications:output_type -> clarifai.api.MultiAppDuplicationsResponse
	236, // 914: clarifai.api.V2.ListAppDuplications:output_type -> clarifai.api.MultiAppDuplicationsResponse
	237, // 915: clarifai.api.V2.GetAppDuplication:output_type -> clarifai.api.SingleAppDuplicationResponse
	243, // 916: clarifai.api.V2.PostTasks:output_type -> clarifai.api.MultiTaskResponse
	246, // 917: clarifai.api.V2.GetTaskAnnotationCount:output_type -> clarifai.api.SingleTaskCountResponse
	246, // 918: clarifai.api.V2.GetTaskInputCount:output_type -> clarifai.api.SingleTaskCountResponse
	244, // 919: clarifai.api.V2.GetTask:output_type -> clarifai.api.SingleTaskResponse
	243, // 920: clarifai.api.V2.ListTasks:output_type -> clarifai.api.MultiTaskResponse
	243, // 921: clarifai.api.V2.PatchTasks:output_type -> clarifai.api.MultiTaskResponse
	417, // 922: clarifai.api.V2.DeleteTasks:output_type -> clarifai.api.status.BaseResponse
	252, // 923: clarifai.api.V2.PostLabelOrders:output_type -> clarifai.api.MultiLabelOrderResponse
	253, // 924: clarifai.api.V2.GetLabelOrder:output_type -> clarifai.api.SingleLabelOrderResponse
	252, // 925: clarifai.api.V2.ListLabelOrders:output_type -> clarifai.api.MultiLabelOrderResponse
	252, // 926: clarifai.api.V2.PatchLabelOrders:output_type -> clarifai.api.MultiLabelOrderResponse
	417, // 927: clarifai.api.V2.DeleteLabelOrders:output_type -> clarifai.api.status.BaseResponse
	259, // 928: clarifai.api.V2.PostCollectors:output_type -> clarifai.api.MultiCollectorResponse
	260, // 929: clarifai.api.V2.GetCollector:output_type -> clarifai.api.SingleCollectorResponse
	259, // 930: clarifai.api.V2.ListCollectors:output_type -> clarifai.api.MultiCollectorResponse
	259, // 931: clarifai.api.V2.PatchCollectors:output_type -> clarifai.api.MultiCollectorResponse
	417, // 932: clarifai.api.V2.DeleteCollectors:output_type -> clarifai.api.status.BaseResponse
	262, // 933: clarifai.api.V2.PostStatValues:output_type -> clarifai.api.MultiStatValueResponse
	264, // 934: clarifai.api.V2.PostStatValuesAggregate:output_type -> clarifai.api.MultiStatValueAggregateResponse
	417, // 935: clarifai.api.V2.PostTrendingMetricsView:output_type -> clarifai.api.status.BaseResponse
	267, // 936: clarifai.api.V2.ListTrendingMetricsViews:output_type -> clarifai.api.MultiTrendingMetricsViewResponse
	273, // 937: clarifai.api.V2.GetModule:output_type -> clarifai.api.SingleModuleResponse
	274, // 938: clarifai.api.V2.ListModules:output_type -> clarifai.api.MultiModuleResponse
	274, // 939: clarifai.api.V2.PostModules:output_type -> clarifai.api.MultiModuleResponse
	274, // 940: clarifai.api.V2.PatchModules:output_type -> clarifai.api.MultiModuleResponse
	417, // 941: clarifai.api.V2.DeleteModules:output_type -> clarifai.api.status.BaseResponse
	281, // 942: clarifai.api.V2.GetModuleVersion:output_type -> clarifai.api.SingleModuleVersionResponse
	282, // 943: clarifai.api.V2.ListModuleVersions:output_type -> clarifai.api.MultiModuleVersionResponse
	282, // 944: clarifai.api.V2.PostModuleVersions:output_type -> clarifai.api.MultiModuleVersionResponse
	282, // 945: clarifai.api.V2.PatchModuleVersions:output_type -> clarifai.api.MultiModuleVersionResponse
	417, // 946: clarifai.api.V2.DeleteModuleVersions:output_type -> clarifai.api.status.BaseResponse
	283, // 947: clarifai.api.V2.GetModuleVersionUsageCount:output_type -> clarifai.api.SingleModuleVersionUsageCountResponse
	289, // 948: clarifai.api.V2.GetInstalledModuleVersion:output_type -> clarifai.api.SingleInstalledModuleVersionResponse
	290, // 949: clarifai.api.V2.ListInstalledModuleVersions:output_type -> clarifai.api.MultiInstalledModuleVersionResponse
	290, // 950: clarifai.api.V2.PostInstalledModuleVersions:output_type -> clarifai.api.MultiInstalledModuleVersionResponse
	417, // 951: clarifai.api.V2.DeleteInstalledModuleVersions:output_type -> clarifai.api.status.BaseResponse
	111, // 952: clarifai.api.V2.PostInstalledModuleVersionsKey:output_type -> clarifai.api.SingleKeyResponse
	298, // 953: clarifai.api.V2.PostBulkOperations:output_type -> clarifai.api.MultiBulkOperationsResponse
	298, // 954: clarifai.api.V2.ListBulkOperations:output_type -> clarifai.api.MultiBulkOperationsResponse
	297, // 955: clarifai.api.V2.GetBulkOperation:output_type -> clarifai.api.SingleBulkOperationsResponse
	298, // 956: clarifai.api.V2.CancelBulkOperations:output_type -> clarifai.api.MultiBulkOperationsResponse
	417, // 957: clarifai.api.V2.DeleteBulkOperations:output_type -> clarifai.api.status.BaseResponse
	75,  // 958: clarifai.api.V2.ListNextTaskAssignments:output_type -> clarifai.api.MultiInputResponse
	301, // 959: clarifai.api.V2.PutTaskAssignments:output_type -> clarifai.api.MultiTaskAssignmentResponse
	305, // 960: clarifai.api.V2.ListInputsAddJobs:output_type -> clarifai.api.MultiInputsAddJobResponse
	306, // 961: clarifai.api.V2.GetInputsAddJob:output_type -> clarifai.api.SingleInputsAddJobResponse
	306, // 962: clarifai.api.V2.CancelInputsAddJob:output_type -> clarifai.api.SingleInputsAddJobResponse
	312, // 963: clarifai.api.V2.PostUploads:output_type -> clarifai.api.MultiUploadResponse
	311, // 964: clarifai.api.V2.PutUploadContentParts:output_type -> clarifai.api.SingleUploadResponse
	311, // 965: clarifai.api.V2.GetUpload:output_type -> clarifai.api.SingleUploadResponse
	312, // 966: clarifai.api.V2.ListUploads:output_type -> clarifai.api.MultiUploadResponse
	417, // 967: clarifai.api.V2.DeleteUploads:output_type -> clarifai.api.status.BaseResponse
	305, // 968: clarifai.api.V2.PostInputsDataSources:output_type -> clarifai.api.MultiInputsAddJobResponse
	317, // 969: clarifai.api.V2.GetInputsExtractionJob:output_type -> clarifai.api.SingleInputsExtractionJobResponse
	318, // 970: clarifai.api.V2.ListInputsExtractionJobs:output_type -> clarifai.api.MultiInputsExtractionJobResponse
	318, // 971: clarifai.api.V2.CancelInputsExtractionJobs:output_type -> clarifai.api.MultiInputsExtractionJobResponse
	305, // 972: clarifai.api.V2.PostInputsUploads:output_type -> clarifai.api.MultiInputsAddJobResponse
	325, // 973: clarifai.api.V2.GetRunner:output_type -> clarifai.api.SingleRunnerResponse
	326, // 974: clarifai.api.V2.ListRunners:output_type -> clarifai.api.MultiRunnerResponse
	326, // 975: clarifai.api.V2.PostRunners:output_type -> clarifai.api.MultiRunnerResponse
	417, // 976: clarifai.api.V2.DeleteRunners:output_type -> clarifai.api.status.BaseResponse
	329, // 977: clarifai.api.V2.ListRunnerItems:output_type -> clarifai.api.MultiRunnerItemResponse
	332, // 978: clarifai.api.V2.PostRunnerItemOutputs:output_type -> clarifai.api.MultiRunnerItemOutputResponse
	334, // 979: clarifai.api.V2.PostModelVersionsTrainingTimeEstimate:output_type -> clarifai.api.MultiTrainingTimeEstimateResponse
	760, // [760:980] is the sub-list for method output_type
	540, // [540:760] is the sub-list for method input_type
	540, // [540:540] is the sub-list for extension type_name
	540, // [540:540] is the sub-list for extension extendee
	0,   // [0:540] is the sub-list for field type_name
}

func init() { file_proto_clarifai_api_service_proto_init() }
func file_proto_clarifai_api_service_proto_init() {
	if File_proto_clarifai_api_service_proto != nil {
		return
	}
	file_proto_clarifai_api_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_clarifai_api_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationWorkersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWorkerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAppsIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCollaboratorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollaborationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCollaborationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleStatusCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiStatusCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptExtraInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConceptRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKnowledgeGraphsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostKnowledgeGraphsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptMappingJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiKnowledgeGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptMappingJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchConceptLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptLanguageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptLanguageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoManifestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputSamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoManifestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInputAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInputCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostDatasetInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetVersionMetricsGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDatasetVersionExportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetVersionExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetVersionMetricsGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelToolkitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelCheckConsentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelUseCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelToolkitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelCheckConsentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelUseCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelLanguageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdUpdateSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsUploadConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutModelVersionExportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelVersionExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowVersionsUnPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowVersionsPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowVersionPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowVersionUnPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionUnpublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsUnPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostEvaluationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEvaluationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvaluationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionEvaluationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelVersionEvaluationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionEvaluationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEvalMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiEvalMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpenSourceLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpenSourceLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionInputExampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelVersionInputExamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelVersionInputExampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelVersionInputExampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyScopesUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyScopesRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeDepsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInputsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSearchesByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnnotationSearchMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnnotationFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnnotationFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAnnotationFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostValidatePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinglePasswordValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchWorkflowIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsSimilarityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsSimilarityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchWorkflowVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWorkflowVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWorkflowVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppDuplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppDuplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppDuplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAppDuplicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAppDuplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTaskCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLabelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleLabelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCollectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleCollectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStatValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiStatValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStatValuesAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiStatValueAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTrendingMetricsViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrendingMetricsViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTrendingMetricsViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleVersionUsageCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModuleVersionUsageCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstalledModuleVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstalledModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInstalledModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInstalledModuleVersionsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstalledModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInstalledModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInstalledModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNextTaskAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostBulkOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBulkOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBulkOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBulkOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBulkOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiBulkOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSubmitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTaskAssignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInputsAddJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputsAddJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInputsAddJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInputsAddJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInputsAddJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUploadContentPartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsDataSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputsExtractionJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInputsExtractionJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInputsExtractionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInputsExtractionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInputsExtractionJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostRunnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRunnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRunnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRunnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunnerItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostRunnerItemOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRunnerItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerItemOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRunnerItemOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsTrainingTimeEstimateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTrainingTimeEstimateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_clarifai_api_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ListAppsRequest_SortByName)(nil),
		(*ListAppsRequest_SortByModifiedAt)(nil),
		(*ListAppsRequest_SortByCreatedAt)(nil),
		(*ListAppsRequest_SortByStarCount)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*GetResourcePriceRequest_Model)(nil),
		(*GetResourcePriceRequest_Workflow)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*ListDatasetsRequest_SortByCreatedAt)(nil),
		(*ListDatasetsRequest_SortByStarCount)(nil),
		(*ListDatasetsRequest_SortByModifiedAt)(nil),
		(*ListDatasetsRequest_SortById)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*ListModelsRequest_SortByName)(nil),
		(*ListModelsRequest_SortByNumInputs)(nil),
		(*ListModelsRequest_SortByModifiedAt)(nil),
		(*ListModelsRequest_SortByCreatedAt)(nil),
		(*ListModelsRequest_SortByStarCount)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[134].OneofWrappers = []interface{}{
		(*ListModelVersionsRequest_SortByStatusCode)(nil),
		(*ListModelVersionsRequest_SortByNumInputs)(nil),
		(*ListModelVersionsRequest_SortByDescription)(nil),
		(*ListModelVersionsRequest_SortByCreatedAt)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[139].OneofWrappers = []interface{}{
		(*PostModelVersionsUploadRequest_UploadConfig)(nil),
		(*PostModelVersionsUploadRequest_ContentPart)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[154].OneofWrappers = []interface{}{
		(*ListEvaluationsRequest_SortByAppId)(nil),
		(*ListEvaluationsRequest_SortByRocAuc)(nil),
		(*ListEvaluationsRequest_SortByF1)(nil),
		(*ListEvaluationsRequest_SortByCreatedAt)(nil),
		(*ListEvaluationsRequest_SortByMeanAvgPrecision)(nil),
		(*ListEvaluationsRequest_SortByPrecision)(nil),
		(*ListEvaluationsRequest_SortByRecall)(nil),
		(*ListEvaluationsRequest_SortByModelId)(nil),
		(*ListEvaluationsRequest_SortByEvalDatasetId)(nil),
		(*ListEvaluationsRequest_SortByTrainDatasetId)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[213].OneofWrappers = []interface{}{
		(*ListWorkflowsRequest_SortById)(nil),
		(*ListWorkflowsRequest_SortByModifiedAt)(nil),
		(*ListWorkflowsRequest_SortByCreatedAt)(nil),
		(*ListWorkflowsRequest_SortByStarCount)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[267].OneofWrappers = []interface{}{
		(*ListModulesRequest_SortByCreatedAt)(nil),
		(*ListModulesRequest_SortByStarCount)(nil),
		(*ListModulesRequest_SortByModifiedAt)(nil),
		(*ListModulesRequest_SortById)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[297].OneofWrappers = []interface{}{
		(*PutTaskAssignmentsRequest_LabelSubmitConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_clarifai_api_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   333,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_clarifai_api_service_proto_goTypes,
		DependencyIndexes: file_proto_clarifai_api_service_proto_depIdxs,
		EnumInfos:         file_proto_clarifai_api_service_proto_enumTypes,
		MessageInfos:      file_proto_clarifai_api_service_proto_msgTypes,
	}.Build()
	File_proto_clarifai_api_service_proto = out.File
	file_proto_clarifai_api_service_proto_rawDesc = nil
	file_proto_clarifai_api_service_proto_goTypes = nil
	file_proto_clarifai_api_service_proto_depIdxs = nil
}
