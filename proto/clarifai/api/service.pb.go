/////////////////////////////////////////////// WARNING ///////////////////////////////////////////////
// Be aware that if you decide to add comments to this or any other non-private file, they could     //
// end up in our *public* auto-generated swagger documentation. In order to ensure that your         //
// comments are not included in our swagger docs, put one line of whitespace between your comment    //
// and any proto definitions.                                                                        //
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: proto/clarifai/api/service.proto

package api

import (
	status "clarifai/api/status"
	_ "clarifai/api/utils"
	scope "clarifai/auth/scope"
	_ "clarifai/auth/util"
	commands "clarifai/commands"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrganizationInvitationStatus
type OrganizationInvitationStatus int32

const (
	OrganizationInvitationStatus_NOT_SET   OrganizationInvitationStatus = 0
	OrganizationInvitationStatus_PENDING   OrganizationInvitationStatus = 1
	OrganizationInvitationStatus_ACCEPTED  OrganizationInvitationStatus = 2
	OrganizationInvitationStatus_CANCELLED OrganizationInvitationStatus = 3
	OrganizationInvitationStatus_DECLINED  OrganizationInvitationStatus = 4
	OrganizationInvitationStatus_EXPIRED   OrganizationInvitationStatus = 5
)

// Enum value maps for OrganizationInvitationStatus.
var (
	OrganizationInvitationStatus_name = map[int32]string{
		0: "NOT_SET",
		1: "PENDING",
		2: "ACCEPTED",
		3: "CANCELLED",
		4: "DECLINED",
		5: "EXPIRED",
	}
	OrganizationInvitationStatus_value = map[string]int32{
		"NOT_SET":   0,
		"PENDING":   1,
		"ACCEPTED":  2,
		"CANCELLED": 3,
		"DECLINED":  4,
		"EXPIRED":   5,
	}
)

func (x OrganizationInvitationStatus) Enum() *OrganizationInvitationStatus {
	p := new(OrganizationInvitationStatus)
	*p = x
	return p
}

func (x OrganizationInvitationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrganizationInvitationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_service_proto_enumTypes[0].Descriptor()
}

func (OrganizationInvitationStatus) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_service_proto_enumTypes[0]
}

func (x OrganizationInvitationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrganizationInvitationStatus.Descriptor instead.
func (OrganizationInvitationStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{0}
}

type TestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Value  string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Byts   []byte         `protobuf:"bytes,3,opt,name=byts,proto3" json:"byts,omitempty"`
	Int_32 uint32         `protobuf:"varint,4,opt,name=int_32,json=int32,proto3" json:"int_32,omitempty"`
	Int_64 uint64         `protobuf:"varint,5,opt,name=int_64,json=int64,proto3" json:"int_64,omitempty"`
	F_32   float32        `protobuf:"fixed32,6,opt,name=f_32,json=f32,proto3" json:"f_32,omitempty"`
	F_64   float64        `protobuf:"fixed64,7,opt,name=f_64,json=f64,proto3" json:"f_64,omitempty"`
	// To handle arbitrary json you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	S *structpb.Struct `protobuf:"bytes,8,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TestMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TestMessage) GetByts() []byte {
	if x != nil {
		return x.Byts
	}
	return nil
}

func (x *TestMessage) GetInt_32() uint32 {
	if x != nil {
		return x.Int_32
	}
	return 0
}

func (x *TestMessage) GetInt_64() uint64 {
	if x != nil {
		return x.Int_64
	}
	return 0
}

func (x *TestMessage) GetF_32() float32 {
	if x != nil {
		return x.F_32
	}
	return 0
}

func (x *TestMessage) GetF_64() float64 {
	if x != nil {
		return x.F_64
	}
	return 0
}

func (x *TestMessage) GetS() *structpb.Struct {
	if x != nil {
		return x.S
	}
	return nil
}

// Split the results into pages.
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) The page number. Pagination is used to split the results into chunks. Defaults to 1.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults to 128.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetAnnotationRequest
type GetAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	AnnotationId string        `protobuf:"bytes,2,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
	InputId      string        `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *GetAnnotationRequest) Reset() {
	*x = GetAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnnotationRequest) ProtoMessage() {}

func (x *GetAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnnotationRequest.ProtoReflect.Descriptor instead.
func (*GetAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetAnnotationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAnnotationRequest) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *GetAnnotationRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// ListAnnotationsRequest
type ListAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List annotations for these IDs
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// List annotations for these Input IDs
	// Note that 'ids' are optional but if the are provided the number and order in
	// 'ids' and 'input_ids' should match
	// If you do not specify 'ids' all the annotations for 'input_ids' are returned
	// If a you do not specify both 'input_ids' and 'ids' all the annotations in the app are returned
	InputIds []string `protobuf:"bytes,3,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
	// Only return the annotations that has one of these user IDs, effectively operating as an
	// OR among them to filter down the results.
	// If model_version_ids are also provided these user_ids are OR'd with them as well since
	// annotations are either provided by users or model versions and we want the union of any
	// provided user or model version annotations in the results of ListAnnotations request.
	// If no user_ids are provided then annotations from all users are returned.
	UserIds []string `protobuf:"bytes,9,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Only return the annotations that has one of these model version IDs, effectively operating as an
	// OR among them to filter down the results.
	// If user_ids are also provided these model_versions_ids are OR'd with them as well since
	// annotations are either provided by users or model versions and we want the union of any
	// provided user or model version annotations in the results of ListAnnotations request.
	// If no model_version_ids are provided then annotations from all model versions are returned.
	ModelVersionIds []string `protobuf:"bytes,10,rep,name=model_version_ids,json=modelVersionIds,proto3" json:"model_version_ids,omitempty"`
	// Set status to filter by a list of statuses
	// If not statuses are provided then annotations with any status will be returned.
	Statuses []*status.Status `protobuf:"bytes,5,rep,name=statuses,proto3" json:"statuses,omitempty"`
	// Set this flag to list both trusted and not trusted annotations
	// by default it's listing only trusted annotations
	ListAllAnnotations bool `protobuf:"varint,6,opt,name=list_all_annotations,json=listAllAnnotations,proto3" json:"list_all_annotations,omitempty"`
	// Set this flag to return the model output for model annotations in the response.
	ReturnModelOutput bool `protobuf:"varint,12,opt,name=return_model_output,json=returnModelOutput,proto3" json:"return_model_output,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,8,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Flag to filter annotations by task_id
	TaskId string `protobuf:"bytes,11,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *ListAnnotationsRequest) Reset() {
	*x = ListAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationsRequest) ProtoMessage() {}

func (x *ListAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAnnotationsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListAnnotationsRequest) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *ListAnnotationsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListAnnotationsRequest) GetModelVersionIds() []string {
	if x != nil {
		return x.ModelVersionIds
	}
	return nil
}

func (x *ListAnnotationsRequest) GetStatuses() []*status.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListAnnotationsRequest) GetListAllAnnotations() bool {
	if x != nil {
		return x.ListAllAnnotations
	}
	return false
}

func (x *ListAnnotationsRequest) GetReturnModelOutput() bool {
	if x != nil {
		return x.ReturnModelOutput
	}
	return false
}

func (x *ListAnnotationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnnotationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListAnnotationsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// PostAnnotationsRequest
type PostAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Annotations []*Annotation `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *PostAnnotationsRequest) Reset() {
	*x = PostAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationsRequest) ProtoMessage() {}

func (x *PostAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{4}
}

func (x *PostAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationsRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// PatchAnnotationsRequest
type PatchAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Annotations []*Annotation `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAnnotationsRequest) Reset() {
	*x = PatchAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsRequest) ProtoMessage() {}

func (x *PatchAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{5}
}

func (x *PatchAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationsRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *PatchAnnotationsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchAnnotationsStatusRequest
type PatchAnnotationsStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Annotation Status code
	StatusCode status.StatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=clarifai.api.status.StatusCode" json:"status_code,omitempty"`
	UserIds    []string          `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	TaskId     string            `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 'overwrite' is supported
	Action string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAnnotationsStatusRequest) Reset() {
	*x = PatchAnnotationsStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsStatusRequest) ProtoMessage() {}

func (x *PatchAnnotationsStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsStatusRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{6}
}

func (x *PatchAnnotationsStatusRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationsStatusRequest) GetStatusCode() status.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return status.StatusCode_ZERO
}

func (x *PatchAnnotationsStatusRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *PatchAnnotationsStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PatchAnnotationsStatusRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchAnnotationsStatusResponse
type PatchAnnotationsStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UserIds      []string       `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	UpdatedCount uint32         `protobuf:"varint,3,opt,name=updated_count,json=updatedCount,proto3" json:"updated_count,omitempty"`
}

func (x *PatchAnnotationsStatusResponse) Reset() {
	*x = PatchAnnotationsStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsStatusResponse) ProtoMessage() {}

func (x *PatchAnnotationsStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsStatusResponse.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{7}
}

func (x *PatchAnnotationsStatusResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PatchAnnotationsStatusResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *PatchAnnotationsStatusResponse) GetUpdatedCount() uint32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

// DeleteAnnotationRequest
type DeleteAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputId      string        `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	AnnotationId string        `protobuf:"bytes,3,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
}

func (x *DeleteAnnotationRequest) Reset() {
	*x = DeleteAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationRequest) ProtoMessage() {}

func (x *DeleteAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAnnotationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *DeleteAnnotationRequest) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Delete annotations with IDs
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// Delete annotations for these Input IDs
	// Note that 'ids' are optional but if the are provided the number and order in
	// 'ids' and 'input_ids' should match
	// If you do not specifiy 'ids' all the annotations for 'input_ids' are deleted
	// However you need to specify at least one value for 'input_ids'
	// i.e. this API does not support deleting all annotations
	InputIds []string `protobuf:"bytes,3,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
}

func (x *DeleteAnnotationsRequest) Reset() {
	*x = DeleteAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationsRequest) ProtoMessage() {}

func (x *DeleteAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteAnnotationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteAnnotationsRequest) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

// SingleAnnotationResponse
type SingleAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Annotation *Annotation    `protobuf:"bytes,2,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *SingleAnnotationResponse) Reset() {
	*x = SingleAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAnnotationResponse) ProtoMessage() {}

func (x *SingleAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAnnotationResponse.ProtoReflect.Descriptor instead.
func (*SingleAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{10}
}

func (x *SingleAnnotationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAnnotationResponse) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

// MultiAnnotationResponse
type MultiAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Annotations []*Annotation  `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *MultiAnnotationResponse) Reset() {
	*x = MultiAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnnotationResponse) ProtoMessage() {}

func (x *MultiAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnnotationResponse.ProtoReflect.Descriptor instead.
func (*MultiAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{11}
}

func (x *MultiAnnotationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAnnotationResponse) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// GetAppRequest
type GetAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,2,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetAppRequest) Reset() {
	*x = GetAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRequest) ProtoMessage() {}

func (x *GetAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRequest.ProtoReflect.Descriptor instead.
func (*GetAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetAppRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAppRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// ListAppsRequest
type ListAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Sorting opitons:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,5,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//	*ListAppsRequest_SortByName
	//	*ListAppsRequest_SortByModifiedAt
	SortBy isListAppsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	// Query various text fields that can contain the words in the query string
	Query string `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	// Filter by the name of the app. This supports wilcard queries like "gen*" to match "general" as an example.
	// Deprecated in favor of query
	//
	// Deprecated: Do not use.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// If true, we only return apps that are handpicked by clarifai staff
	FeaturedOnly bool `protobuf:"varint,9,opt,name=featured_only,json=featuredOnly,proto3" json:"featured_only,omitempty"`
	// If true, we only return apps that are starred by the requesting user
	StarredOnly bool `protobuf:"varint,11,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,10,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *ListAppsRequest) Reset() {
	*x = ListAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppsRequest) ProtoMessage() {}

func (x *ListAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppsRequest.ProtoReflect.Descriptor instead.
func (*ListAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAppsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAppsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListAppsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListAppsRequest) GetSortBy() isListAppsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListAppsRequest) GetSortByName() bool {
	if x, ok := x.GetSortBy().(*ListAppsRequest_SortByName); ok {
		return x.SortByName
	}
	return false
}

func (x *ListAppsRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListAppsRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListAppsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListAppsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListAppsRequest) GetFeaturedOnly() bool {
	if x != nil {
		return x.FeaturedOnly
	}
	return false
}

func (x *ListAppsRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListAppsRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

type isListAppsRequest_SortBy interface {
	isListAppsRequest_SortBy()
}

type ListAppsRequest_SortByName struct {
	// Whether to order by the name
	SortByName bool `protobuf:"varint,6,opt,name=sort_by_name,json=sortByName,proto3,oneof"`
}

type ListAppsRequest_SortByModifiedAt struct {
	// Whether to order by the modified_at time.
	// If neither sort option is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,7,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

func (*ListAppsRequest_SortByName) isListAppsRequest_SortBy() {}

func (*ListAppsRequest_SortByModifiedAt) isListAppsRequest_SortBy() {}

// PostAppsRequest
type PostAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Apps      []*App        `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *PostAppsRequest) Reset() {
	*x = PostAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppsRequest) ProtoMessage() {}

func (x *PostAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppsRequest.ProtoReflect.Descriptor instead.
func (*PostAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{14}
}

func (x *PostAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAppsRequest) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

// DeleteAppRequest
type DeleteAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *DeleteAppRequest) Reset() {
	*x = DeleteAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppRequest) ProtoMessage() {}

func (x *DeleteAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteAppRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PatchAppsRequest
type PatchAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Apps      []*App        `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
	// The action to perform on the patched App objects except App.Metadata
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// The action to perform on the patched App.Metadata
	MetadataAction *PatchAction `protobuf:"bytes,4,opt,name=metadata_action,json=metadataAction,proto3" json:"metadata_action,omitempty"`
	// If set, the app will be automatically reindexed upon change of its base workflow.
	Reindex bool `protobuf:"varint,5,opt,name=reindex,proto3" json:"reindex,omitempty"`
}

func (x *PatchAppsRequest) Reset() {
	*x = PatchAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAppsRequest) ProtoMessage() {}

func (x *PatchAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAppsRequest.ProtoReflect.Descriptor instead.
func (*PatchAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{16}
}

func (x *PatchAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAppsRequest) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *PatchAppsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchAppsRequest) GetMetadataAction() *PatchAction {
	if x != nil {
		return x.MetadataAction
	}
	return nil
}

func (x *PatchAppsRequest) GetReindex() bool {
	if x != nil {
		return x.Reindex
	}
	return false
}

// PatchAppRequest
type PatchAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	App       *App          `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	// The action to perform on the patched App object except App.Metadata
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// The action to perform on the patched App.Metadata
	MetadataAction *PatchAction `protobuf:"bytes,4,opt,name=metadata_action,json=metadataAction,proto3" json:"metadata_action,omitempty"`
	// If set, the app will be automatically reindexed upon change of its base workflow.
	Reindex bool `protobuf:"varint,5,opt,name=reindex,proto3" json:"reindex,omitempty"`
}

func (x *PatchAppRequest) Reset() {
	*x = PatchAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAppRequest) ProtoMessage() {}

func (x *PatchAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAppRequest.ProtoReflect.Descriptor instead.
func (*PatchAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{17}
}

func (x *PatchAppRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAppRequest) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *PatchAppRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchAppRequest) GetMetadataAction() *PatchAction {
	if x != nil {
		return x.MetadataAction
	}
	return nil
}

func (x *PatchAppRequest) GetReindex() bool {
	if x != nil {
		return x.Reindex
	}
	return false
}

type PatchAppOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	NewOwnerId string        `protobuf:"bytes,2,opt,name=new_owner_id,json=newOwnerId,proto3" json:"new_owner_id,omitempty"`
}

func (x *PatchAppOwnerRequest) Reset() {
	*x = PatchAppOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAppOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAppOwnerRequest) ProtoMessage() {}

func (x *PatchAppOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAppOwnerRequest.ProtoReflect.Descriptor instead.
func (*PatchAppOwnerRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{18}
}

func (x *PatchAppOwnerRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAppOwnerRequest) GetNewOwnerId() string {
	if x != nil {
		return x.NewOwnerId
	}
	return ""
}

// PatchAppsIdsRequest
type PatchAppsIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array containing 1 entry
	Ids []*IdUpdateSource `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAppsIdsRequest) Reset() {
	*x = PatchAppsIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAppsIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAppsIdsRequest) ProtoMessage() {}

func (x *PatchAppsIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAppsIdsRequest.ProtoReflect.Descriptor instead.
func (*PatchAppsIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{19}
}

func (x *PatchAppsIdsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAppsIdsRequest) GetIds() []*IdUpdateSource {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PatchAppsIdsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Search over the available applications.
type PostAppsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The body of the request.
	AppQuery *AppQuery `protobuf:"bytes,2,opt,name=app_query,json=appQuery,proto3" json:"app_query,omitempty"`
	// Pagination parameters here since there are no url args in this
	// POST request.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostAppsSearchesRequest) Reset() {
	*x = PostAppsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppsSearchesRequest) ProtoMessage() {}

func (x *PostAppsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostAppsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{20}
}

func (x *PostAppsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAppsSearchesRequest) GetAppQuery() *AppQuery {
	if x != nil {
		return x.AppQuery
	}
	return nil
}

func (x *PostAppsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// SingleAppResponse
type SingleAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	App    *App           `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *SingleAppResponse) Reset() {
	*x = SingleAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAppResponse) ProtoMessage() {}

func (x *SingleAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAppResponse.ProtoReflect.Descriptor instead.
func (*SingleAppResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{21}
}

func (x *SingleAppResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAppResponse) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

// MultiAppResponse
type MultiAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Apps   []*App         `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *MultiAppResponse) Reset() {
	*x = MultiAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAppResponse) ProtoMessage() {}

func (x *MultiAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAppResponse.ProtoReflect.Descriptor instead.
func (*MultiAppResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{22}
}

func (x *MultiAppResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAppResponse) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

// ListCollaboratorsRequest
type ListCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Set this flag to list both deleted and not deleted collaborators
	// by default it's listing only not deleted collaborators
	ListAllCollaborators bool `protobuf:"varint,2,opt,name=list_all_collaborators,json=listAllCollaborators,proto3" json:"list_all_collaborators,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListCollaboratorsRequest) Reset() {
	*x = ListCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollaboratorsRequest) ProtoMessage() {}

func (x *ListCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*ListCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListCollaboratorsRequest) GetListAllCollaborators() bool {
	if x != nil {
		return x.ListAllCollaborators
	}
	return false
}

func (x *ListCollaboratorsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCollaboratorsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostCollaboratorsRequest
type PostCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
}

func (x *PostCollaboratorsRequest) Reset() {
	*x = PostCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCollaboratorsRequest) ProtoMessage() {}

func (x *PostCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*PostCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{24}
}

func (x *PostCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostCollaboratorsRequest) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

// PatchCollaboratorsRequest
type PatchCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	// The action to perform on the patched objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchCollaboratorsRequest) Reset() {
	*x = PatchCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCollaboratorsRequest) ProtoMessage() {}

func (x *PatchCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*PatchCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{25}
}

func (x *PatchCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchCollaboratorsRequest) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *PatchCollaboratorsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteCollaboratorsRequest
type DeleteCollaboratorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId       *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	CollaboratorIds []string      `protobuf:"bytes,2,rep,name=collaborator_ids,json=collaboratorIds,proto3" json:"collaborator_ids,omitempty"`
	UserEmails      []string      `protobuf:"bytes,3,rep,name=user_emails,json=userEmails,proto3" json:"user_emails,omitempty"`
}

func (x *DeleteCollaboratorsRequest) Reset() {
	*x = DeleteCollaboratorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollaboratorsRequest) ProtoMessage() {}

func (x *DeleteCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteCollaboratorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteCollaboratorsRequest) GetCollaboratorIds() []string {
	if x != nil {
		return x.CollaboratorIds
	}
	return nil
}

func (x *DeleteCollaboratorsRequest) GetUserEmails() []string {
	if x != nil {
		return x.UserEmails
	}
	return nil
}

// MultiCollaboratorsResponse
type MultiCollaboratorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
}

func (x *MultiCollaboratorsResponse) Reset() {
	*x = MultiCollaboratorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCollaboratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCollaboratorsResponse) ProtoMessage() {}

func (x *MultiCollaboratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCollaboratorsResponse.ProtoReflect.Descriptor instead.
func (*MultiCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{27}
}

func (x *MultiCollaboratorsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiCollaboratorsResponse) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

// ListCollaborationsRequest
type ListCollaborationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListCollaborationsRequest) Reset() {
	*x = ListCollaborationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollaborationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollaborationsRequest) ProtoMessage() {}

func (x *ListCollaborationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollaborationsRequest.ProtoReflect.Descriptor instead.
func (*ListCollaborationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListCollaborationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListCollaborationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCollaborationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// MultiCollaborationsResponse
type MultiCollaborationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collaborations []*Collaboration `protobuf:"bytes,2,rep,name=collaborations,proto3" json:"collaborations,omitempty"`
}

func (x *MultiCollaborationsResponse) Reset() {
	*x = MultiCollaborationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCollaborationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCollaborationsResponse) ProtoMessage() {}

func (x *MultiCollaborationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCollaborationsResponse.ProtoReflect.Descriptor instead.
func (*MultiCollaborationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{29}
}

func (x *MultiCollaborationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiCollaborationsResponse) GetCollaborations() []*Collaboration {
	if x != nil {
		return x.Collaborations
	}
	return nil
}

// PostVerifyEmailRequest
type PostVerifyEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PostVerifyEmailRequest) Reset() {
	*x = PostVerifyEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVerifyEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVerifyEmailRequest) ProtoMessage() {}

func (x *PostVerifyEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVerifyEmailRequest.ProtoReflect.Descriptor instead.
func (*PostVerifyEmailRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{30}
}

func (x *PostVerifyEmailRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// SingleVerifyEmailResponse
type SingleVerifyEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SingleVerifyEmailResponse) Reset() {
	*x = SingleVerifyEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleVerifyEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleVerifyEmailResponse) ProtoMessage() {}

func (x *SingleVerifyEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleVerifyEmailResponse.ProtoReflect.Descriptor instead.
func (*SingleVerifyEmailResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{31}
}

func (x *SingleVerifyEmailResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// ListAuthMethodsRequest
type ListAuthMethodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) Recovery path that the user will be redirected back to after login
	RecoveryPath string        `protobuf:"bytes,1,opt,name=recovery_path,json=recoveryPath,proto3" json:"recovery_path,omitempty"`
	UserAppId    *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// this applies to org auth only. when true sso flows will redirect to 'recovery_path' upon successful redirect from idp (instead of doing additional actiosn to support id_login)
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// this applies to org auth only. when present finalizer will associate PAT with IDP
	AuthorizePat string `protobuf:"bytes,4,opt,name=authorize_pat,json=authorizePat,proto3" json:"authorize_pat,omitempty"`
}

func (x *ListAuthMethodsRequest) Reset() {
	*x = ListAuthMethodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthMethodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthMethodsRequest) ProtoMessage() {}

func (x *ListAuthMethodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthMethodsRequest.ProtoReflect.Descriptor instead.
func (*ListAuthMethodsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListAuthMethodsRequest) GetRecoveryPath() string {
	if x != nil {
		return x.RecoveryPath
	}
	return ""
}

func (x *ListAuthMethodsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAuthMethodsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ListAuthMethodsRequest) GetAuthorizePat() string {
	if x != nil {
		return x.AuthorizePat
	}
	return ""
}

// PostLinkIdpUserRequest
type PostLinkIdpUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LoginId   string        `protobuf:"bytes,2,opt,name=login_id,json=loginId,proto3" json:"login_id,omitempty"`
}

func (x *PostLinkIdpUserRequest) Reset() {
	*x = PostLinkIdpUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLinkIdpUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLinkIdpUserRequest) ProtoMessage() {}

func (x *PostLinkIdpUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLinkIdpUserRequest.ProtoReflect.Descriptor instead.
func (*PostLinkIdpUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{33}
}

func (x *PostLinkIdpUserRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostLinkIdpUserRequest) GetLoginId() string {
	if x != nil {
		return x.LoginId
	}
	return ""
}

// GetLoginInfoRequest
type GetLoginInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LoginId   string        `protobuf:"bytes,2,opt,name=login_id,json=loginId,proto3" json:"login_id,omitempty"`
}

func (x *GetLoginInfoRequest) Reset() {
	*x = GetLoginInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginInfoRequest) ProtoMessage() {}

func (x *GetLoginInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginInfoRequest.ProtoReflect.Descriptor instead.
func (*GetLoginInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetLoginInfoRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetLoginInfoRequest) GetLoginId() string {
	if x != nil {
		return x.LoginId
	}
	return ""
}

// GetLoginInfoResponse
type GetLoginInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SubjectEmail string         `protobuf:"bytes,2,opt,name=subject_email,json=subjectEmail,proto3" json:"subject_email,omitempty"`
	IdpName      string         `protobuf:"bytes,3,opt,name=idp_name,json=idpName,proto3" json:"idp_name,omitempty"`
	IdpId        string         `protobuf:"bytes,4,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	//this will be true if caller is linked to the authenticated subject from idp
	//if true then the idp linking step should be skipped and proceed to PostIdLoginFinalizer directly
	IsLinkedToSubject      bool `protobuf:"varint,5,opt,name=is_linked_to_subject,json=isLinkedToSubject,proto3" json:"is_linked_to_subject,omitempty"`
	SubjectAuthorizedAtIdp bool `protobuf:"varint,6,opt,name=subject_authorized_at_idp,json=subjectAuthorizedAtIdp,proto3" json:"subject_authorized_at_idp,omitempty"`
}

func (x *GetLoginInfoResponse) Reset() {
	*x = GetLoginInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginInfoResponse) ProtoMessage() {}

func (x *GetLoginInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLoginInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{35}
}

func (x *GetLoginInfoResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLoginInfoResponse) GetSubjectEmail() string {
	if x != nil {
		return x.SubjectEmail
	}
	return ""
}

func (x *GetLoginInfoResponse) GetIdpName() string {
	if x != nil {
		return x.IdpName
	}
	return ""
}

func (x *GetLoginInfoResponse) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *GetLoginInfoResponse) GetIsLinkedToSubject() bool {
	if x != nil {
		return x.IsLinkedToSubject
	}
	return false
}

func (x *GetLoginInfoResponse) GetSubjectAuthorizedAtIdp() bool {
	if x != nil {
		return x.SubjectAuthorizedAtIdp
	}
	return false
}

// PostLinkIdpUserResponse
type PostLinkIdpUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PostLinkIdpUserResponse) Reset() {
	*x = PostLinkIdpUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLinkIdpUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLinkIdpUserResponse) ProtoMessage() {}

func (x *PostLinkIdpUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLinkIdpUserResponse.ProtoReflect.Descriptor instead.
func (*PostLinkIdpUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{36}
}

func (x *PostLinkIdpUserResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// PostIdLoginFinalizerRequest
type PostIdLoginFinalizerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LoginId   string        `protobuf:"bytes,2,opt,name=login_id,json=loginId,proto3" json:"login_id,omitempty"`
}

func (x *PostIdLoginFinalizerRequest) Reset() {
	*x = PostIdLoginFinalizerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostIdLoginFinalizerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostIdLoginFinalizerRequest) ProtoMessage() {}

func (x *PostIdLoginFinalizerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostIdLoginFinalizerRequest.ProtoReflect.Descriptor instead.
func (*PostIdLoginFinalizerRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{37}
}

func (x *PostIdLoginFinalizerRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostIdLoginFinalizerRequest) GetLoginId() string {
	if x != nil {
		return x.LoginId
	}
	return ""
}

// PostIdLoginFinalizerResponse
type PostIdLoginFinalizerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RecoveryPath string         `protobuf:"bytes,2,opt,name=recovery_path,json=recoveryPath,proto3" json:"recovery_path,omitempty"`
}

func (x *PostIdLoginFinalizerResponse) Reset() {
	*x = PostIdLoginFinalizerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostIdLoginFinalizerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostIdLoginFinalizerResponse) ProtoMessage() {}

func (x *PostIdLoginFinalizerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostIdLoginFinalizerResponse.ProtoReflect.Descriptor instead.
func (*PostIdLoginFinalizerResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{38}
}

func (x *PostIdLoginFinalizerResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostIdLoginFinalizerResponse) GetRecoveryPath() string {
	if x != nil {
		return x.RecoveryPath
	}
	return ""
}

// ListAuthMethodsResponse
type ListAuthMethodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of authentication methods.
	AuthMethods []*AuthMethod `protobuf:"bytes,2,rep,name=auth_methods,json=authMethods,proto3" json:"auth_methods,omitempty"`
}

func (x *ListAuthMethodsResponse) Reset() {
	*x = ListAuthMethodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthMethodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthMethodsResponse) ProtoMessage() {}

func (x *ListAuthMethodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthMethodsResponse.ProtoReflect.Descriptor instead.
func (*ListAuthMethodsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{39}
}

func (x *ListAuthMethodsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListAuthMethodsResponse) GetAuthMethods() []*AuthMethod {
	if x != nil {
		return x.AuthMethods
	}
	return nil
}

// 2FA (Two factor authentication)
type List2FAMethodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the user_id. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *List2FAMethodsRequest) Reset() {
	*x = List2FAMethodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List2FAMethodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List2FAMethodsRequest) ProtoMessage() {}

func (x *List2FAMethodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List2FAMethodsRequest.ProtoReflect.Descriptor instead.
func (*List2FAMethodsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{40}
}

func (x *List2FAMethodsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// List2FAMethodsResponse
type List2FAMethodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of authentication methods.
	TwoFactorAuthMethods []*TwoFactorAuthMethod `protobuf:"bytes,2,rep,name=two_factor_auth_methods,json=twoFactorAuthMethods,proto3" json:"two_factor_auth_methods,omitempty"`
}

func (x *List2FAMethodsResponse) Reset() {
	*x = List2FAMethodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List2FAMethodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List2FAMethodsResponse) ProtoMessage() {}

func (x *List2FAMethodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List2FAMethodsResponse.ProtoReflect.Descriptor instead.
func (*List2FAMethodsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{41}
}

func (x *List2FAMethodsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *List2FAMethodsResponse) GetTwoFactorAuthMethods() []*TwoFactorAuthMethod {
	if x != nil {
		return x.TwoFactorAuthMethods
	}
	return nil
}

// PostAuth2FATotpRegisterEnableRequest
type PostAuth2FATotpRegisterEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the user_id. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostAuth2FATotpRegisterEnableRequest) Reset() {
	*x = PostAuth2FATotpRegisterEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpRegisterEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpRegisterEnableRequest) ProtoMessage() {}

func (x *PostAuth2FATotpRegisterEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpRegisterEnableRequest.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpRegisterEnableRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{42}
}

func (x *PostAuth2FATotpRegisterEnableRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostAuth2FATotpRegisterEnableResponse
type PostAuth2FATotpRegisterEnableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Secret string         `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	QrCode string         `protobuf:"bytes,3,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	State  string         `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PostAuth2FATotpRegisterEnableResponse) Reset() {
	*x = PostAuth2FATotpRegisterEnableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpRegisterEnableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpRegisterEnableResponse) ProtoMessage() {}

func (x *PostAuth2FATotpRegisterEnableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpRegisterEnableResponse.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpRegisterEnableResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{43}
}

func (x *PostAuth2FATotpRegisterEnableResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostAuth2FATotpRegisterEnableResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *PostAuth2FATotpRegisterEnableResponse) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *PostAuth2FATotpRegisterEnableResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// PostAuth2FATotpDisableRequest
type PostAuth2FATotpDisableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passcode string `protobuf:"bytes,1,opt,name=passcode,proto3" json:"passcode,omitempty"`
	// Contains the user_id. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostAuth2FATotpDisableRequest) Reset() {
	*x = PostAuth2FATotpDisableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpDisableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpDisableRequest) ProtoMessage() {}

func (x *PostAuth2FATotpDisableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpDisableRequest.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpDisableRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{44}
}

func (x *PostAuth2FATotpDisableRequest) GetPasscode() string {
	if x != nil {
		return x.Passcode
	}
	return ""
}

func (x *PostAuth2FATotpDisableRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostAuth2FATotpDisableResponse
type PostAuth2FATotpDisableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PostAuth2FATotpDisableResponse) Reset() {
	*x = PostAuth2FATotpDisableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpDisableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpDisableResponse) ProtoMessage() {}

func (x *PostAuth2FATotpDisableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpDisableResponse.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpDisableResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{45}
}

func (x *PostAuth2FATotpDisableResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// PostAuth2FATotpRegisterVerifyRequest
type PostAuth2FATotpRegisterVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passcode string `protobuf:"bytes,1,opt,name=passcode,proto3" json:"passcode,omitempty"`
	State    string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// Contains the user_id. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostAuth2FATotpRegisterVerifyRequest) Reset() {
	*x = PostAuth2FATotpRegisterVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpRegisterVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpRegisterVerifyRequest) ProtoMessage() {}

func (x *PostAuth2FATotpRegisterVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpRegisterVerifyRequest.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpRegisterVerifyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{46}
}

func (x *PostAuth2FATotpRegisterVerifyRequest) GetPasscode() string {
	if x != nil {
		return x.Passcode
	}
	return ""
}

func (x *PostAuth2FATotpRegisterVerifyRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PostAuth2FATotpRegisterVerifyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostAuth2FATotpRegisterVerifyResponse
type PostAuth2FATotpRegisterVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RecoveryKey string         `protobuf:"bytes,2,opt,name=recovery_key,json=recoveryKey,proto3" json:"recovery_key,omitempty"`
}

func (x *PostAuth2FATotpRegisterVerifyResponse) Reset() {
	*x = PostAuth2FATotpRegisterVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpRegisterVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpRegisterVerifyResponse) ProtoMessage() {}

func (x *PostAuth2FATotpRegisterVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpRegisterVerifyResponse.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpRegisterVerifyResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{47}
}

func (x *PostAuth2FATotpRegisterVerifyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostAuth2FATotpRegisterVerifyResponse) GetRecoveryKey() string {
	if x != nil {
		return x.RecoveryKey
	}
	return ""
}

// PostAuth2FATotpLoginRequest
type PostAuth2FATotpLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passcode  string `protobuf:"bytes,1,opt,name=passcode,proto3" json:"passcode,omitempty"`
	State     string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LongLived bool   `protobuf:"varint,4,opt,name=long_lived,json=longLived,proto3" json:"long_lived,omitempty"`
}

func (x *PostAuth2FATotpLoginRequest) Reset() {
	*x = PostAuth2FATotpLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpLoginRequest) ProtoMessage() {}

func (x *PostAuth2FATotpLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpLoginRequest.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpLoginRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{48}
}

func (x *PostAuth2FATotpLoginRequest) GetPasscode() string {
	if x != nil {
		return x.Passcode
	}
	return ""
}

func (x *PostAuth2FATotpLoginRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PostAuth2FATotpLoginRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PostAuth2FATotpLoginRequest) GetLongLived() bool {
	if x != nil {
		return x.LongLived
	}
	return false
}

// PostAuth2FATotpRecoverRequest
type PostAuth2FATotpRecoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	RecoveryCode string `protobuf:"bytes,2,opt,name=recovery_code,json=recoveryCode,proto3" json:"recovery_code,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PostAuth2FATotpRecoverRequest) Reset() {
	*x = PostAuth2FATotpRecoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpRecoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpRecoverRequest) ProtoMessage() {}

func (x *PostAuth2FATotpRecoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpRecoverRequest.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpRecoverRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{49}
}

func (x *PostAuth2FATotpRecoverRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PostAuth2FATotpRecoverRequest) GetRecoveryCode() string {
	if x != nil {
		return x.RecoveryCode
	}
	return ""
}

func (x *PostAuth2FATotpRecoverRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// PostAuth2FATotpRecoverResponse
type PostAuth2FATotpRecoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PostAuth2FATotpRecoverResponse) Reset() {
	*x = PostAuth2FATotpRecoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAuth2FATotpRecoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAuth2FATotpRecoverResponse) ProtoMessage() {}

func (x *PostAuth2FATotpRecoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAuth2FATotpRecoverResponse.ProtoReflect.Descriptor instead.
func (*PostAuth2FATotpRecoverResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{50}
}

func (x *PostAuth2FATotpRecoverResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// GetAuth2FATotpRecoverConfirmRequest
type GetAuth2FATotpRecoverConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required URL parameter) Confirmation secret for validation
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetAuth2FATotpRecoverConfirmRequest) Reset() {
	*x = GetAuth2FATotpRecoverConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuth2FATotpRecoverConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuth2FATotpRecoverConfirmRequest) ProtoMessage() {}

func (x *GetAuth2FATotpRecoverConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuth2FATotpRecoverConfirmRequest.ProtoReflect.Descriptor instead.
func (*GetAuth2FATotpRecoverConfirmRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{51}
}

func (x *GetAuth2FATotpRecoverConfirmRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// GetAuth2FATotpRecoverConfirmResponse
type GetAuth2FATotpRecoverConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetAuth2FATotpRecoverConfirmResponse) Reset() {
	*x = GetAuth2FATotpRecoverConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuth2FATotpRecoverConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuth2FATotpRecoverConfirmResponse) ProtoMessage() {}

func (x *GetAuth2FATotpRecoverConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuth2FATotpRecoverConfirmResponse.ProtoReflect.Descriptor instead.
func (*GetAuth2FATotpRecoverConfirmResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{52}
}

func (x *GetAuth2FATotpRecoverConfirmResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Reset Password
type RequestResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//To find associated account.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *RequestResetPasswordRequest) Reset() {
	*x = RequestResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResetPasswordRequest) ProtoMessage() {}

func (x *RequestResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*RequestResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{53}
}

func (x *RequestResetPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// CompleteResetPasswordRequest
type CompleteResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//key to retrieve user
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	//new password to set.
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *CompleteResetPasswordRequest) Reset() {
	*x = CompleteResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteResetPasswordRequest) ProtoMessage() {}

func (x *CompleteResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*CompleteResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{54}
}

func (x *CompleteResetPasswordRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CompleteResetPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

// Login and Signup
type PostLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	LongLived bool   `protobuf:"varint,3,opt,name=long_lived,json=longLived,proto3" json:"long_lived,omitempty"`
}

func (x *PostLoginRequest) Reset() {
	*x = PostLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLoginRequest) ProtoMessage() {}

func (x *PostLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLoginRequest.ProtoReflect.Descriptor instead.
func (*PostLoginRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{55}
}

func (x *PostLoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PostLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostLoginRequest) GetLongLived() bool {
	if x != nil {
		return x.LongLived
	}
	return false
}

// PostSignupRequest
type PostSignupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email                string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password             string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	FirstName            string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	CompanyName          string `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	CaptchaResponseToken string `protobuf:"bytes,6,opt,name=captcha_response_token,json=captchaResponseToken,proto3" json:"captcha_response_token,omitempty"`
	// same as captcha_response_token but for callers that are opted-in to v3 captcha
	CaptchaResponseTokenV3 string `protobuf:"bytes,14,opt,name=captcha_response_token_v3,json=captchaResponseTokenV3,proto3" json:"captcha_response_token_v3,omitempty"`
	// This field is only for registrations that come from the AWS marketplace
	AwsRegistrationToken string `protobuf:"bytes,7,opt,name=aws_registration_token,json=awsRegistrationToken,proto3" json:"aws_registration_token,omitempty"`
	GdprConsent          bool   `protobuf:"varint,8,opt,name=gdpr_consent,json=gdprConsent,proto3" json:"gdpr_consent,omitempty"`
	TosConsent           bool   `protobuf:"varint,9,opt,name=tos_consent,json=tosConsent,proto3" json:"tos_consent,omitempty"`
	MarketingConsent     bool   `protobuf:"varint,10,opt,name=marketing_consent,json=marketingConsent,proto3" json:"marketing_consent,omitempty"`
	JobTitle             string `protobuf:"bytes,11,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	JobRole              string `protobuf:"bytes,12,opt,name=job_role,json=jobRole,proto3" json:"job_role,omitempty"`
	Utm                  *Utm   `protobuf:"bytes,13,opt,name=utm,proto3" json:"utm,omitempty"`
}

func (x *PostSignupRequest) Reset() {
	*x = PostSignupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSignupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSignupRequest) ProtoMessage() {}

func (x *PostSignupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSignupRequest.ProtoReflect.Descriptor instead.
func (*PostSignupRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{56}
}

func (x *PostSignupRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PostSignupRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostSignupRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PostSignupRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PostSignupRequest) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *PostSignupRequest) GetCaptchaResponseToken() string {
	if x != nil {
		return x.CaptchaResponseToken
	}
	return ""
}

func (x *PostSignupRequest) GetCaptchaResponseTokenV3() string {
	if x != nil {
		return x.CaptchaResponseTokenV3
	}
	return ""
}

func (x *PostSignupRequest) GetAwsRegistrationToken() string {
	if x != nil {
		return x.AwsRegistrationToken
	}
	return ""
}

func (x *PostSignupRequest) GetGdprConsent() bool {
	if x != nil {
		return x.GdprConsent
	}
	return false
}

func (x *PostSignupRequest) GetTosConsent() bool {
	if x != nil {
		return x.TosConsent
	}
	return false
}

func (x *PostSignupRequest) GetMarketingConsent() bool {
	if x != nil {
		return x.MarketingConsent
	}
	return false
}

func (x *PostSignupRequest) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *PostSignupRequest) GetJobRole() string {
	if x != nil {
		return x.JobRole
	}
	return ""
}

func (x *PostSignupRequest) GetUtm() *Utm {
	if x != nil {
		return x.Utm
	}
	return nil
}

// Utm
type Utm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Medium   string `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Campaign string `protobuf:"bytes,3,opt,name=campaign,proto3" json:"campaign,omitempty"`
	Term     string `protobuf:"bytes,4,opt,name=term,proto3" json:"term,omitempty"`
	Content  string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Utm) Reset() {
	*x = Utm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utm) ProtoMessage() {}

func (x *Utm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utm.ProtoReflect.Descriptor instead.
func (*Utm) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{57}
}

func (x *Utm) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Utm) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *Utm) GetCampaign() string {
	if x != nil {
		return x.Campaign
	}
	return ""
}

func (x *Utm) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Utm) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// SingleLoginResponse
type SingleLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Email          string          `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FirstName      string          `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       string          `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	CompanyName    string          `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	DateJoined     string          `protobuf:"bytes,6,opt,name=date_joined,json=dateJoined,proto3" json:"date_joined,omitempty"`
	EmailAddresses []*EmailAddress `protobuf:"bytes,8,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	SessionToken   string          `protobuf:"bytes,9,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	TokenExpires   string          `protobuf:"bytes,10,opt,name=token_expires,json=tokenExpires,proto3" json:"token_expires,omitempty"`
	// This is deprecated in favor of user_id
	//
	// Deprecated: Do not use.
	V2UserId             string `protobuf:"bytes,11,opt,name=v2_user_id,json=v2UserId,proto3" json:"v2_user_id,omitempty"`
	DateGdprConsent      string `protobuf:"bytes,12,opt,name=date_gdpr_consent,json=dateGdprConsent,proto3" json:"date_gdpr_consent,omitempty"`
	DateTosConsent       string `protobuf:"bytes,13,opt,name=date_tos_consent,json=dateTosConsent,proto3" json:"date_tos_consent,omitempty"`
	DateMarketingConsent string `protobuf:"bytes,14,opt,name=date_marketing_consent,json=dateMarketingConsent,proto3" json:"date_marketing_consent,omitempty"`
	// For checking if password expired
	PasswordExpiredAt    string `protobuf:"bytes,15,opt,name=password_expired_at,json=passwordExpiredAt,proto3" json:"password_expired_at,omitempty"`
	IsNewUser            bool   `protobuf:"varint,16,opt,name=is_new_user,json=isNewUser,proto3" json:"is_new_user,omitempty"`
	TwoFactorAuthEnabled bool   `protobuf:"varint,17,opt,name=two_factor_auth_enabled,json=twoFactorAuthEnabled,proto3" json:"two_factor_auth_enabled,omitempty"`
	State                string `protobuf:"bytes,18,opt,name=state,proto3" json:"state,omitempty"`
	// User id
	UserId string `protobuf:"bytes,19,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SingleLoginResponse) Reset() {
	*x = SingleLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleLoginResponse) ProtoMessage() {}

func (x *SingleLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleLoginResponse.ProtoReflect.Descriptor instead.
func (*SingleLoginResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{58}
}

func (x *SingleLoginResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleLoginResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SingleLoginResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SingleLoginResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *SingleLoginResponse) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *SingleLoginResponse) GetDateJoined() string {
	if x != nil {
		return x.DateJoined
	}
	return ""
}

func (x *SingleLoginResponse) GetEmailAddresses() []*EmailAddress {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

func (x *SingleLoginResponse) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SingleLoginResponse) GetTokenExpires() string {
	if x != nil {
		return x.TokenExpires
	}
	return ""
}

// Deprecated: Do not use.
func (x *SingleLoginResponse) GetV2UserId() string {
	if x != nil {
		return x.V2UserId
	}
	return ""
}

func (x *SingleLoginResponse) GetDateGdprConsent() string {
	if x != nil {
		return x.DateGdprConsent
	}
	return ""
}

func (x *SingleLoginResponse) GetDateTosConsent() string {
	if x != nil {
		return x.DateTosConsent
	}
	return ""
}

func (x *SingleLoginResponse) GetDateMarketingConsent() string {
	if x != nil {
		return x.DateMarketingConsent
	}
	return ""
}

func (x *SingleLoginResponse) GetPasswordExpiredAt() string {
	if x != nil {
		return x.PasswordExpiredAt
	}
	return ""
}

func (x *SingleLoginResponse) GetIsNewUser() bool {
	if x != nil {
		return x.IsNewUser
	}
	return false
}

func (x *SingleLoginResponse) GetTwoFactorAuthEnabled() bool {
	if x != nil {
		return x.TwoFactorAuthEnabled
	}
	return false
}

func (x *SingleLoginResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SingleLoginResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// PostLogoutRequest
type PostLogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the user_id to logout. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostLogoutRequest) Reset() {
	*x = PostLogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLogoutRequest) ProtoMessage() {}

func (x *PostLogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLogoutRequest.ProtoReflect.Descriptor instead.
func (*PostLogoutRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{59}
}

func (x *PostLogoutRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// SingleLogoutResponse
type SingleLogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SingleLogoutResponse) Reset() {
	*x = SingleLogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleLogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleLogoutResponse) ProtoMessage() {}

func (x *SingleLogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleLogoutResponse.ProtoReflect.Descriptor instead.
func (*SingleLogoutResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{60}
}

func (x *SingleLogoutResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Billing Usage
type GetBillingUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the user_id. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetBillingUsageRequest) Reset() {
	*x = GetBillingUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingUsageRequest) ProtoMessage() {}

func (x *GetBillingUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingUsageRequest.ProtoReflect.Descriptor instead.
func (*GetBillingUsageRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{61}
}

func (x *GetBillingUsageRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// GetBillingUsageResponse
type GetBillingUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InvoiceItems []*InvoiceItem `protobuf:"bytes,2,rep,name=invoice_items,json=invoiceItems,proto3" json:"invoice_items,omitempty"`
	BillingCycle *BillingCycle  `protobuf:"bytes,3,opt,name=billing_cycle,json=billingCycle,proto3" json:"billing_cycle,omitempty"`
}

func (x *GetBillingUsageResponse) Reset() {
	*x = GetBillingUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingUsageResponse) ProtoMessage() {}

func (x *GetBillingUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingUsageResponse.ProtoReflect.Descriptor instead.
func (*GetBillingUsageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{62}
}

func (x *GetBillingUsageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetBillingUsageResponse) GetInvoiceItems() []*InvoiceItem {
	if x != nil {
		return x.InvoiceItems
	}
	return nil
}

func (x *GetBillingUsageResponse) GetBillingCycle() *BillingCycle {
	if x != nil {
		return x.BillingCycle
	}
	return nil
}

// GetStatusCodeRequest
type GetStatusCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCodeId string `protobuf:"bytes,1,opt,name=status_code_id,json=statusCodeId,proto3" json:"status_code_id,omitempty"`
}

func (x *GetStatusCodeRequest) Reset() {
	*x = GetStatusCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusCodeRequest) ProtoMessage() {}

func (x *GetStatusCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusCodeRequest.ProtoReflect.Descriptor instead.
func (*GetStatusCodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{63}
}

func (x *GetStatusCodeRequest) GetStatusCodeId() string {
	if x != nil {
		return x.StatusCodeId
	}
	return ""
}

// ListStatusCodesRequest
type ListStatusCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStatusCodesRequest) Reset() {
	*x = ListStatusCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusCodesRequest) ProtoMessage() {}

func (x *ListStatusCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusCodesRequest.ProtoReflect.Descriptor instead.
func (*ListStatusCodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{64}
}

// SingleStatusCodeResponse
type SingleStatusCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of this request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SingleStatusCodeResponse) Reset() {
	*x = SingleStatusCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleStatusCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleStatusCodeResponse) ProtoMessage() {}

func (x *SingleStatusCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleStatusCodeResponse.ProtoReflect.Descriptor instead.
func (*SingleStatusCodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{65}
}

func (x *SingleStatusCodeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// MultiStatusCodeResponse
type MultiStatusCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Statuses []*status.Status `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *MultiStatusCodeResponse) Reset() {
	*x = MultiStatusCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiStatusCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStatusCodeResponse) ProtoMessage() {}

func (x *MultiStatusCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStatusCodeResponse.ProtoReflect.Descriptor instead.
func (*MultiStatusCodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{66}
}

func (x *MultiStatusCodeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiStatusCodeResponse) GetStatuses() []*status.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// GetConceptRequest
type GetConceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept's id.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
}

func (x *GetConceptRequest) Reset() {
	*x = GetConceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptRequest) ProtoMessage() {}

func (x *GetConceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptRequest.ProtoReflect.Descriptor instead.
func (*GetConceptRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{67}
}

func (x *GetConceptRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetConceptRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

// ListConceptsRequest
type ListConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListConceptsRequest) Reset() {
	*x = ListConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptsRequest) ProtoMessage() {}

func (x *ListConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptsRequest.ProtoReflect.Descriptor instead.
func (*ListConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{68}
}

func (x *ListConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// ListModelConceptsRequest
type ListModelConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Model id
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Model version Id. Optional, if not provided latest model version is used.
	VersionId string `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelConceptsRequest) Reset() {
	*x = ListModelConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelConceptsRequest) ProtoMessage() {}

func (x *ListModelConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelConceptsRequest.ProtoReflect.Descriptor instead.
func (*ListModelConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{69}
}

func (x *ListModelConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelConceptsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelConceptsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ListModelConceptsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelConceptsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostConceptsSearchesRequest
type PostConceptsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids present in the url of the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The body of the request.
	ConceptQuery *ConceptQuery `protobuf:"bytes,2,opt,name=concept_query,json=conceptQuery,proto3" json:"concept_query,omitempty"`
	// Pagination parameters here since there are no url args in this
	// POST request.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostConceptsSearchesRequest) Reset() {
	*x = PostConceptsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptsSearchesRequest) ProtoMessage() {}

func (x *PostConceptsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostConceptsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{70}
}

func (x *PostConceptsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptsSearchesRequest) GetConceptQuery() *ConceptQuery {
	if x != nil {
		return x.ConceptQuery
	}
	return nil
}

func (x *PostConceptsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// PostConceptsRequest
type PostConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concepts to add.
	Concepts []*Concept `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *PostConceptsRequest) Reset() {
	*x = PostConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptsRequest) ProtoMessage() {}

func (x *PostConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptsRequest.ProtoReflect.Descriptor instead.
func (*PostConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{71}
}

func (x *PostConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptsRequest) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

// PatchConceptsRequest
type PatchConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concepts to patch.
	Concepts []*Concept `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
	// The action to perform on the patched objects
	// For now ony action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchConceptsRequest) Reset() {
	*x = PatchConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchConceptsRequest) ProtoMessage() {}

func (x *PatchConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchConceptsRequest.ProtoReflect.Descriptor instead.
func (*PatchConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{72}
}

func (x *PatchConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchConceptsRequest) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *PatchConceptsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// GetConceptCountsRequest
type GetConceptCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *GetConceptCountsRequest) Reset() {
	*x = GetConceptCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptCountsRequest) ProtoMessage() {}

func (x *GetConceptCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptCountsRequest.ProtoReflect.Descriptor instead.
func (*GetConceptCountsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{73}
}

func (x *GetConceptCountsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetConceptCountsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetConceptCountsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// SingleConceptResponse
type SingleConceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concept.
	Concept *Concept `protobuf:"bytes,2,opt,name=concept,proto3" json:"concept,omitempty"`
}

func (x *SingleConceptResponse) Reset() {
	*x = SingleConceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptResponse) ProtoMessage() {}

func (x *SingleConceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{74}
}

func (x *SingleConceptResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptResponse) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

// MultiConceptResponse
type MultiConceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concepts.
	Concepts []*Concept `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *MultiConceptResponse) Reset() {
	*x = MultiConceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptResponse) ProtoMessage() {}

func (x *MultiConceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{75}
}

func (x *MultiConceptResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptResponse) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

// MultiConceptCountResponse
type MultiConceptCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concept counts.
	ConceptCounts []*ConceptCount `protobuf:"bytes,2,rep,name=concept_counts,json=conceptCounts,proto3" json:"concept_counts,omitempty"`
}

func (x *MultiConceptCountResponse) Reset() {
	*x = MultiConceptCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptCountResponse) ProtoMessage() {}

func (x *MultiConceptCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptCountResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{76}
}

func (x *MultiConceptCountResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptCountResponse) GetConceptCounts() []*ConceptCount {
	if x != nil {
		return x.ConceptCounts
	}
	return nil
}

// GET all relations such that the concept_id refers to the subject of the relation
type ListConceptRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The subject concept id in your app to get all the relationships for.
	// Leave as an empty string (GET /concepts/relations) to list ALL the relations in the app.
	//
	// When listing all the relations it will only return one direction of the relationship
	// with the predicate acting on the subject and not the inverse like is done when providing a
	// concept_id so that we can return a reliable page size always.
	//
	// When providing a concept_id, if a hyponym is present in the DB such as:
	// 'honey' (subject), 'hyponym' (predict for "is a kind of"), 'food' (object)
	// then you can list the concept relations for 'honey' and get hyponym predicate with 'food'
	// object.
	// But you can also list the concept relations for 'food' and it will return the same hyponym
	// relationship with 'honey' as subject and 'food' as predicate.
	// Synonyms by nature are symmetrical relationships so either side can be the concept_id (subject)
	// when listing the relations.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// This is part of the url so we can extend to multiple link types in the future.
	// Valid predicates are:
	// 'hypernyms'
	// 'hyponyms'
	Predicate string `protobuf:"bytes,3,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// If knowledge_graph_id is provided then just list relations from that knowledge graph.
	// If not provided then list relations from all knowledge graphs including the global one for this
	// app one (ie. knowledge_graph "") and any specific ones in the app.
	KnowledgeGraphId string `protobuf:"bytes,4,opt,name=knowledge_graph_id,json=knowledgeGraphId,proto3" json:"knowledge_graph_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,6,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListConceptRelationsRequest) Reset() {
	*x = ListConceptRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptRelationsRequest) ProtoMessage() {}

func (x *ListConceptRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptRelationsRequest.ProtoReflect.Descriptor instead.
func (*ListConceptRelationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{77}
}

func (x *ListConceptRelationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptRelationsRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *ListConceptRelationsRequest) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *ListConceptRelationsRequest) GetKnowledgeGraphId() string {
	if x != nil {
		return x.KnowledgeGraphId
	}
	return ""
}

func (x *ListConceptRelationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptRelationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// POST new concept relations
type PostConceptRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The subject concept id you're going to add relations for.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// The relationships you're going to add.
	ConceptRelations []*ConceptRelation `protobuf:"bytes,3,rep,name=concept_relations,json=conceptRelations,proto3" json:"concept_relations,omitempty"`
}

func (x *PostConceptRelationsRequest) Reset() {
	*x = PostConceptRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptRelationsRequest) ProtoMessage() {}

func (x *PostConceptRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptRelationsRequest.ProtoReflect.Descriptor instead.
func (*PostConceptRelationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{78}
}

func (x *PostConceptRelationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptRelationsRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *PostConceptRelationsRequest) GetConceptRelations() []*ConceptRelation {
	if x != nil {
		return x.ConceptRelations
	}
	return nil
}

// DELETE concept relations
type DeleteConceptRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept to delete relationship for.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// The concept relationship ids to delete.
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteConceptRelationsRequest) Reset() {
	*x = DeleteConceptRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConceptRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConceptRelationsRequest) ProtoMessage() {}

func (x *DeleteConceptRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConceptRelationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteConceptRelationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{79}
}

func (x *DeleteConceptRelationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteConceptRelationsRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *DeleteConceptRelationsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// GET all knowledge graphs
type ListKnowledgeGraphsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListKnowledgeGraphsRequest) Reset() {
	*x = ListKnowledgeGraphsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKnowledgeGraphsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeGraphsRequest) ProtoMessage() {}

func (x *ListKnowledgeGraphsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeGraphsRequest.ProtoReflect.Descriptor instead.
func (*ListKnowledgeGraphsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{80}
}

func (x *ListKnowledgeGraphsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// POST new knowledge graphs
type PostKnowledgeGraphsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId       *UserAppIDSet     `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	KnowledgeGraphs []*KnowledgeGraph `protobuf:"bytes,2,rep,name=knowledge_graphs,json=knowledgeGraphs,proto3" json:"knowledge_graphs,omitempty"`
}

func (x *PostKnowledgeGraphsRequest) Reset() {
	*x = PostKnowledgeGraphsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostKnowledgeGraphsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostKnowledgeGraphsRequest) ProtoMessage() {}

func (x *PostKnowledgeGraphsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostKnowledgeGraphsRequest.ProtoReflect.Descriptor instead.
func (*PostKnowledgeGraphsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{81}
}

func (x *PostKnowledgeGraphsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostKnowledgeGraphsRequest) GetKnowledgeGraphs() []*KnowledgeGraph {
	if x != nil {
		return x.KnowledgeGraphs
	}
	return nil
}

// GET all concept mappings for the app
type ListConceptMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListConceptMappingsRequest) Reset() {
	*x = ListConceptMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptMappingsRequest) ProtoMessage() {}

func (x *ListConceptMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListConceptMappingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{82}
}

func (x *ListConceptMappingsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptMappingsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptMappingsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// POST concept mappings
type PostConceptMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept mappings that are being added
	ConceptMappings []*ConceptMapping `protobuf:"bytes,2,rep,name=concept_mappings,json=conceptMappings,proto3" json:"concept_mappings,omitempty"`
	// The knowledge graph that is being used for these concept mappings
	KnowledgeGraph *KnowledgeGraph `protobuf:"bytes,3,opt,name=knowledge_graph,json=knowledgeGraph,proto3" json:"knowledge_graph,omitempty"`
}

func (x *PostConceptMappingsRequest) Reset() {
	*x = PostConceptMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptMappingsRequest) ProtoMessage() {}

func (x *PostConceptMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptMappingsRequest.ProtoReflect.Descriptor instead.
func (*PostConceptMappingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{83}
}

func (x *PostConceptMappingsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptMappingsRequest) GetConceptMappings() []*ConceptMapping {
	if x != nil {
		return x.ConceptMappings
	}
	return nil
}

func (x *PostConceptMappingsRequest) GetKnowledgeGraph() *KnowledgeGraph {
	if x != nil {
		return x.KnowledgeGraph
	}
	return nil
}

// Start concept mapping jobs
type PostConceptMappingJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept mapping jobs that are being started
	ConceptMappingJobs []*ConceptMappingJob `protobuf:"bytes,2,rep,name=concept_mapping_jobs,json=conceptMappingJobs,proto3" json:"concept_mapping_jobs,omitempty"`
}

func (x *PostConceptMappingJobsRequest) Reset() {
	*x = PostConceptMappingJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptMappingJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptMappingJobsRequest) ProtoMessage() {}

func (x *PostConceptMappingJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptMappingJobsRequest.ProtoReflect.Descriptor instead.
func (*PostConceptMappingJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{84}
}

func (x *PostConceptMappingJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptMappingJobsRequest) GetConceptMappingJobs() []*ConceptMappingJob {
	if x != nil {
		return x.ConceptMappingJobs
	}
	return nil
}

// SingleConceptRelationResponse
type SingleConceptRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concept relation.
	ConceptRelation *ConceptRelation `protobuf:"bytes,2,opt,name=concept_relation,json=conceptRelation,proto3" json:"concept_relation,omitempty"`
}

func (x *SingleConceptRelationResponse) Reset() {
	*x = SingleConceptRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptRelationResponse) ProtoMessage() {}

func (x *SingleConceptRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptRelationResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptRelationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{85}
}

func (x *SingleConceptRelationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptRelationResponse) GetConceptRelation() *ConceptRelation {
	if x != nil {
		return x.ConceptRelation
	}
	return nil
}

// MultiConceptRelationResponse
type MultiConceptRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned concept relations.
	ConceptRelations []*ConceptRelation `protobuf:"bytes,2,rep,name=concept_relations,json=conceptRelations,proto3" json:"concept_relations,omitempty"`
}

func (x *MultiConceptRelationResponse) Reset() {
	*x = MultiConceptRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptRelationResponse) ProtoMessage() {}

func (x *MultiConceptRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptRelationResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptRelationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{86}
}

func (x *MultiConceptRelationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptRelationResponse) GetConceptRelations() []*ConceptRelation {
	if x != nil {
		return x.ConceptRelations
	}
	return nil
}

// SingleKnowledgeGraphResponse
type SingleKnowledgeGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned knowledge graph.
	KnowledgeGraph *KnowledgeGraph `protobuf:"bytes,2,opt,name=knowledge_graph,json=knowledgeGraph,proto3" json:"knowledge_graph,omitempty"`
}

func (x *SingleKnowledgeGraphResponse) Reset() {
	*x = SingleKnowledgeGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleKnowledgeGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleKnowledgeGraphResponse) ProtoMessage() {}

func (x *SingleKnowledgeGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleKnowledgeGraphResponse.ProtoReflect.Descriptor instead.
func (*SingleKnowledgeGraphResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{87}
}

func (x *SingleKnowledgeGraphResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleKnowledgeGraphResponse) GetKnowledgeGraph() *KnowledgeGraph {
	if x != nil {
		return x.KnowledgeGraph
	}
	return nil
}

// MultiKnowledgeGraphResponse
type MultiKnowledgeGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned knowledge graphs.
	KnowledgeGraphs []*KnowledgeGraph `protobuf:"bytes,2,rep,name=knowledge_graphs,json=knowledgeGraphs,proto3" json:"knowledge_graphs,omitempty"`
}

func (x *MultiKnowledgeGraphResponse) Reset() {
	*x = MultiKnowledgeGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiKnowledgeGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiKnowledgeGraphResponse) ProtoMessage() {}

func (x *MultiKnowledgeGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiKnowledgeGraphResponse.ProtoReflect.Descriptor instead.
func (*MultiKnowledgeGraphResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{88}
}

func (x *MultiKnowledgeGraphResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiKnowledgeGraphResponse) GetKnowledgeGraphs() []*KnowledgeGraph {
	if x != nil {
		return x.KnowledgeGraphs
	}
	return nil
}

// SingleConceptMappingResponse
type SingleConceptMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned mapped concept.
	ConceptMapping *ConceptMapping `protobuf:"bytes,2,opt,name=concept_mapping,json=conceptMapping,proto3" json:"concept_mapping,omitempty"`
}

func (x *SingleConceptMappingResponse) Reset() {
	*x = SingleConceptMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptMappingResponse) ProtoMessage() {}

func (x *SingleConceptMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptMappingResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptMappingResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{89}
}

func (x *SingleConceptMappingResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptMappingResponse) GetConceptMapping() *ConceptMapping {
	if x != nil {
		return x.ConceptMapping
	}
	return nil
}

// MultiConceptMappingResponse
type MultiConceptMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned mapped concepts.
	ConceptMappings []*ConceptMapping `protobuf:"bytes,2,rep,name=concept_mappings,json=conceptMappings,proto3" json:"concept_mappings,omitempty"`
}

func (x *MultiConceptMappingResponse) Reset() {
	*x = MultiConceptMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptMappingResponse) ProtoMessage() {}

func (x *MultiConceptMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptMappingResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptMappingResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{90}
}

func (x *MultiConceptMappingResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptMappingResponse) GetConceptMappings() []*ConceptMapping {
	if x != nil {
		return x.ConceptMappings
	}
	return nil
}

// SingleConceptMappingJobResponse
type SingleConceptMappingJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The id of the concept mapping job underway.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SingleConceptMappingJobResponse) Reset() {
	*x = SingleConceptMappingJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptMappingJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptMappingJobResponse) ProtoMessage() {}

func (x *SingleConceptMappingJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptMappingJobResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptMappingJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{91}
}

func (x *SingleConceptMappingJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptMappingJobResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// MultiConceptMappingJobResponse
type MultiConceptMappingJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The ids of the concept mapping jobs underway.
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MultiConceptMappingJobResponse) Reset() {
	*x = MultiConceptMappingJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptMappingJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptMappingJobResponse) ProtoMessage() {}

func (x *MultiConceptMappingJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptMappingJobResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptMappingJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{92}
}

func (x *MultiConceptMappingJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptMappingJobResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// GET single concept language for the given concept.
type GetConceptLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId string        `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// This is the language identifier.
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetConceptLanguageRequest) Reset() {
	*x = GetConceptLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptLanguageRequest) ProtoMessage() {}

func (x *GetConceptLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetConceptLanguageRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{93}
}

func (x *GetConceptLanguageRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetConceptLanguageRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *GetConceptLanguageRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// List multiple concept languages for the given concept.
type ListConceptLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId string        `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListConceptLanguagesRequest) Reset() {
	*x = ListConceptLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptLanguagesRequest) ProtoMessage() {}

func (x *ListConceptLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptLanguagesRequest.ProtoReflect.Descriptor instead.
func (*ListConceptLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{94}
}

func (x *ListConceptLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptLanguagesRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *ListConceptLanguagesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptLanguagesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PATCH multiple concept languages for the given concept.
type PatchConceptLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId        *UserAppIDSet      `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId        string             `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	ConceptLanguages []*ConceptLanguage `protobuf:"bytes,3,rep,name=concept_languages,json=conceptLanguages,proto3" json:"concept_languages,omitempty"`
	// The action to perform with the objects in the PATCH.
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchConceptLanguagesRequest) Reset() {
	*x = PatchConceptLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchConceptLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchConceptLanguagesRequest) ProtoMessage() {}

func (x *PatchConceptLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchConceptLanguagesRequest.ProtoReflect.Descriptor instead.
func (*PatchConceptLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{95}
}

func (x *PatchConceptLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchConceptLanguagesRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *PatchConceptLanguagesRequest) GetConceptLanguages() []*ConceptLanguage {
	if x != nil {
		return x.ConceptLanguages
	}
	return nil
}

func (x *PatchConceptLanguagesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// POST multiple concept languages for the given concept.
type PostConceptLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId        *UserAppIDSet      `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ConceptId        string             `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	ConceptLanguages []*ConceptLanguage `protobuf:"bytes,3,rep,name=concept_languages,json=conceptLanguages,proto3" json:"concept_languages,omitempty"`
}

func (x *PostConceptLanguagesRequest) Reset() {
	*x = PostConceptLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConceptLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConceptLanguagesRequest) ProtoMessage() {}

func (x *PostConceptLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConceptLanguagesRequest.ProtoReflect.Descriptor instead.
func (*PostConceptLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{96}
}

func (x *PostConceptLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostConceptLanguagesRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *PostConceptLanguagesRequest) GetConceptLanguages() []*ConceptLanguage {
	if x != nil {
		return x.ConceptLanguages
	}
	return nil
}

// SingleConceptLanguageResponse
type SingleConceptLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ConceptLanguage *ConceptLanguage `protobuf:"bytes,2,opt,name=concept_language,json=conceptLanguage,proto3" json:"concept_language,omitempty"`
}

func (x *SingleConceptLanguageResponse) Reset() {
	*x = SingleConceptLanguageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptLanguageResponse) ProtoMessage() {}

func (x *SingleConceptLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptLanguageResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptLanguageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{97}
}

func (x *SingleConceptLanguageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptLanguageResponse) GetConceptLanguage() *ConceptLanguage {
	if x != nil {
		return x.ConceptLanguage
	}
	return nil
}

// MultiConceptLanguageResponse
type MultiConceptLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ConceptLanguages []*ConceptLanguage `protobuf:"bytes,2,rep,name=concept_languages,json=conceptLanguages,proto3" json:"concept_languages,omitempty"`
}

func (x *MultiConceptLanguageResponse) Reset() {
	*x = MultiConceptLanguageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptLanguageResponse) ProtoMessage() {}

func (x *MultiConceptLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptLanguageResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptLanguageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{98}
}

func (x *MultiConceptLanguageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptLanguageResponse) GetConceptLanguages() []*ConceptLanguage {
	if x != nil {
		return x.ConceptLanguages
	}
	return nil
}

// ListConceptReferencesRequest
type ListConceptReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id and app id set in the url.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The concept id you want to list translations for.
	ConceptId string `protobuf:"bytes,2,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListConceptReferencesRequest) Reset() {
	*x = ListConceptReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConceptReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConceptReferencesRequest) ProtoMessage() {}

func (x *ListConceptReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConceptReferencesRequest.ProtoReflect.Descriptor instead.
func (*ListConceptReferencesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{99}
}

func (x *ListConceptReferencesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListConceptReferencesRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *ListConceptReferencesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConceptReferencesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// SingleConceptReferenceResponse
type SingleConceptReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ConceptReference *ConceptReference `protobuf:"bytes,2,opt,name=concept_reference,json=conceptReference,proto3" json:"concept_reference,omitempty"`
}

func (x *SingleConceptReferenceResponse) Reset() {
	*x = SingleConceptReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConceptReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConceptReferenceResponse) ProtoMessage() {}

func (x *SingleConceptReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConceptReferenceResponse.ProtoReflect.Descriptor instead.
func (*SingleConceptReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{100}
}

func (x *SingleConceptReferenceResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleConceptReferenceResponse) GetConceptReference() *ConceptReference {
	if x != nil {
		return x.ConceptReference
	}
	return nil
}

// MultiConceptReferenceResponse
type MultiConceptReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ConceptReferences []*ConceptReference `protobuf:"bytes,2,rep,name=concept_references,json=conceptReferences,proto3" json:"concept_references,omitempty"`
}

func (x *MultiConceptReferenceResponse) Reset() {
	*x = MultiConceptReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiConceptReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiConceptReferenceResponse) ProtoMessage() {}

func (x *MultiConceptReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiConceptReferenceResponse.ProtoReflect.Descriptor instead.
func (*MultiConceptReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{101}
}

func (x *MultiConceptReferenceResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiConceptReferenceResponse) GetConceptReferences() []*ConceptReference {
	if x != nil {
		return x.ConceptReferences
	}
	return nil
}

// GetHealthzRequest
type GetHealthzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHealthzRequest) Reset() {
	*x = GetHealthzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthzRequest) ProtoMessage() {}

func (x *GetHealthzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthzRequest.ProtoReflect.Descriptor instead.
func (*GetHealthzRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{102}
}

// GetHealthzResponse
type GetHealthzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Time   string         `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetHealthzResponse) Reset() {
	*x = GetHealthzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthzResponse) ProtoMessage() {}

func (x *GetHealthzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthzResponse.ProtoReflect.Descriptor instead.
func (*GetHealthzResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{103}
}

func (x *GetHealthzResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetHealthzResponse) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// GetInputRequest
type GetInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputId   string        `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *GetInputRequest) Reset() {
	*x = GetInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputRequest) ProtoMessage() {}

func (x *GetInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputRequest.ProtoReflect.Descriptor instead.
func (*GetInputRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{104}
}

func (x *GetInputRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInputRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// GetInputSamplesRequest
type GetInputSamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// URL param. If zero ids provided, returns for all task labelers
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GetInputSamplesRequest) Reset() {
	*x = GetInputSamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputSamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputSamplesRequest) ProtoMessage() {}

func (x *GetInputSamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputSamplesRequest.ProtoReflect.Descriptor instead.
func (*GetInputSamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{105}
}

func (x *GetInputSamplesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInputSamplesRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetInputSamplesRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// ListInputsRequest
type ListInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Set status to filter by status
	Status *status.Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Ids    []string       `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListInputsRequest) Reset() {
	*x = ListInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInputsRequest) ProtoMessage() {}

func (x *ListInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInputsRequest.ProtoReflect.Descriptor instead.
func (*ListInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{106}
}

func (x *ListInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListInputsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListInputsRequest) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListInputsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// StreamInputsRequest
type StreamInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	LastId  string `protobuf:"bytes,3,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	// By default, the endpoint return inputs by the time when it is added.
	// If this is set to true, we will return inputs by id.
	OrderById  bool `protobuf:"varint,5,opt,name=order_by_id,json=orderById,proto3" json:"order_by_id,omitempty"`
	Descending bool `protobuf:"varint,4,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *StreamInputsRequest) Reset() {
	*x = StreamInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInputsRequest) ProtoMessage() {}

func (x *StreamInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInputsRequest.ProtoReflect.Descriptor instead.
func (*StreamInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{107}
}

func (x *StreamInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *StreamInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *StreamInputsRequest) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

func (x *StreamInputsRequest) GetOrderById() bool {
	if x != nil {
		return x.OrderById
	}
	return false
}

func (x *StreamInputsRequest) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

// PostInputsRequest
type PostInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of inputs to post.
	// For each input, the following fields are used:
	// * id
	// * data
	// * dataset_ids
	Inputs []*Input `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Collect statistics about created inputs in job with given ID.
	// * If job ID is empty, then job is not created.
	// * If job ID is non-empty and doesn't already exist, then a new job will be created with given ID.
	// * If job ID does already exist, then new inputs statistics are merged with previous inputs statistics.
	InputsAddJobId string `protobuf:"bytes,3,opt,name=inputs_add_job_id,json=inputsAddJobId,proto3" json:"inputs_add_job_id,omitempty"`
}

func (x *PostInputsRequest) Reset() {
	*x = PostInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsRequest) ProtoMessage() {}

func (x *PostInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsRequest.ProtoReflect.Descriptor instead.
func (*PostInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{108}
}

func (x *PostInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PostInputsRequest) GetInputsAddJobId() string {
	if x != nil {
		return x.InputsAddJobId
	}
	return ""
}

// PostInputsFileRequest
type PostInputsFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// url to the file.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// type of the file. Currently only support `csv`
	Filetype string `protobuf:"bytes,3,opt,name=filetype,proto3" json:"filetype,omitempty"`
}

func (x *PostInputsFileRequest) Reset() {
	*x = PostInputsFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsFileRequest) ProtoMessage() {}

func (x *PostInputsFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsFileRequest.ProtoReflect.Descriptor instead.
func (*PostInputsFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{109}
}

func (x *PostInputsFileRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsFileRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PostInputsFileRequest) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

// PostInputsNiFiRequest
type PostInputsNiFiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet       `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Urls      *structpb.ListValue `protobuf:"bytes,2,opt,name=urls,proto3" json:"urls,omitempty"`
	// For arbitrary JSON input, use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	// The metadata contains info about the provenance of the files. The provenance info allows user
	// locate the original source files after ingestion. Metadata should be searchable and displayed
	// in output.
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The params contains key/value pairs sent by NiFi in case we need certain parameters to be set
	// to successfully ingest inputs.
	Params *structpb.Struct `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *PostInputsNiFiRequest) Reset() {
	*x = PostInputsNiFiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsNiFiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsNiFiRequest) ProtoMessage() {}

func (x *PostInputsNiFiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsNiFiRequest.ProtoReflect.Descriptor instead.
func (*PostInputsNiFiRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{110}
}

func (x *PostInputsNiFiRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsNiFiRequest) GetUrls() *structpb.ListValue {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *PostInputsNiFiRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PostInputsNiFiRequest) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

// PostInputsDocumentRequest
type PostInputsDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Body of the request
	Body *PostInputsDocumentRequestBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// Query parameter: send the status of the inputs to 3rd party using this url.
	// If empty, the status will not be sent.
	StatusCallbackUrl string `protobuf:"bytes,3,opt,name=statusCallbackUrl,proto3" json:"statusCallbackUrl,omitempty"`
	// Query parameter: send the prediction of the inputs (i.e. entities) to 3rd party using this url.
	// If empty, the entities will not be sent.
	EntityCallbackUrl string `protobuf:"bytes,4,opt,name=entityCallbackUrl,proto3" json:"entityCallbackUrl,omitempty"`
}

func (x *PostInputsDocumentRequest) Reset() {
	*x = PostInputsDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsDocumentRequest) ProtoMessage() {}

func (x *PostInputsDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsDocumentRequest.ProtoReflect.Descriptor instead.
func (*PostInputsDocumentRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{111}
}

func (x *PostInputsDocumentRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsDocumentRequest) GetBody() *PostInputsDocumentRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *PostInputsDocumentRequest) GetStatusCallbackUrl() string {
	if x != nil {
		return x.StatusCallbackUrl
	}
	return ""
}

func (x *PostInputsDocumentRequest) GetEntityCallbackUrl() string {
	if x != nil {
		return x.EntityCallbackUrl
	}
	return ""
}

// PostInputsDocumentRequestBody
type PostInputsDocumentRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Track batch status using this batch identifier.
	// 3rd party calls sent to statusCallbackUrl and entityCallbackUrl will use this batch id.
	BatchIdT string `protobuf:"bytes,1,opt,name=batchId_t,json=batchIdT,proto3" json:"batchId_t,omitempty"`
	// List of documents which contain inputs.
	Document *structpb.ListValue `protobuf:"bytes,2,opt,name=document,proto3" json:"document,omitempty"`
	// Not used, but needs to be supported.
	Complete *structpb.Struct `protobuf:"bytes,3,opt,name=complete,proto3" json:"complete,omitempty"`
	// Not used, but needs to be supported.
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PostInputsDocumentRequestBody) Reset() {
	*x = PostInputsDocumentRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsDocumentRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsDocumentRequestBody) ProtoMessage() {}

func (x *PostInputsDocumentRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsDocumentRequestBody.ProtoReflect.Descriptor instead.
func (*PostInputsDocumentRequestBody) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{112}
}

func (x *PostInputsDocumentRequestBody) GetBatchIdT() string {
	if x != nil {
		return x.BatchIdT
	}
	return ""
}

func (x *PostInputsDocumentRequestBody) GetDocument() *structpb.ListValue {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *PostInputsDocumentRequestBody) GetComplete() *structpb.Struct {
	if x != nil {
		return x.Complete
	}
	return nil
}

func (x *PostInputsDocumentRequestBody) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// PatchInputsRequest
type PatchInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of inputs to patch.
	// Inputs are identified by id field.
	// For each input, the following fields are patchable:
	// * data
	Inputs []*Input `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchInputsRequest) Reset() {
	*x = PatchInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInputsRequest) ProtoMessage() {}

func (x *PatchInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInputsRequest.ProtoReflect.Descriptor instead.
func (*PatchInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{113}
}

func (x *PatchInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchInputsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PatchInputsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteInputRequest
type DeleteInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputId   string        `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *DeleteInputRequest) Reset() {
	*x = DeleteInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInputRequest) ProtoMessage() {}

func (x *DeleteInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInputRequest.ProtoReflect.Descriptor instead.
func (*DeleteInputRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{114}
}

func (x *DeleteInputRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteInputRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteInputsRequest) Reset() {
	*x = DeleteInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInputsRequest) ProtoMessage() {}

func (x *DeleteInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInputsRequest.ProtoReflect.Descriptor instead.
func (*DeleteInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{115}
}

func (x *DeleteInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteInputsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleInputResponse
type SingleInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Input  *Input         `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *SingleInputResponse) Reset() {
	*x = SingleInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInputResponse) ProtoMessage() {}

func (x *SingleInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInputResponse.ProtoReflect.Descriptor instead.
func (*SingleInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{116}
}

func (x *SingleInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInputResponse) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

// MultiInputResponse
type MultiInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Inputs       []*Input       `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	InputsAddJob *InputsAddJob  `protobuf:"bytes,3,opt,name=inputs_add_job,json=inputsAddJob,proto3" json:"inputs_add_job,omitempty"`
}

func (x *MultiInputResponse) Reset() {
	*x = MultiInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInputResponse) ProtoMessage() {}

func (x *MultiInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInputResponse.ProtoReflect.Descriptor instead.
func (*MultiInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{117}
}

func (x *MultiInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInputResponse) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *MultiInputResponse) GetInputsAddJob() *InputsAddJob {
	if x != nil {
		return x.InputsAddJob
	}
	return nil
}

// MultiInputAnnotationResponse
type MultiInputAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Hits   []*Hit         `protobuf:"bytes,3,rep,name=hits,proto3" json:"hits,omitempty"`
}

func (x *MultiInputAnnotationResponse) Reset() {
	*x = MultiInputAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInputAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInputAnnotationResponse) ProtoMessage() {}

func (x *MultiInputAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInputAnnotationResponse.ProtoReflect.Descriptor instead.
func (*MultiInputAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{118}
}

func (x *MultiInputAnnotationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInputAnnotationResponse) GetHits() []*Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

// SingleInputCountResponse
type SingleInputCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Counts *InputCount    `protobuf:"bytes,2,opt,name=counts,proto3" json:"counts,omitempty"`
}

func (x *SingleInputCountResponse) Reset() {
	*x = SingleInputCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInputCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInputCountResponse) ProtoMessage() {}

func (x *SingleInputCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInputCountResponse.ProtoReflect.Descriptor instead.
func (*SingleInputCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{119}
}

func (x *SingleInputCountResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInputCountResponse) GetCounts() *InputCount {
	if x != nil {
		return x.Counts
	}
	return nil
}

// GetInputCountRequest
type GetInputCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetInputCountRequest) Reset() {
	*x = GetInputCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputCountRequest) ProtoMessage() {}

func (x *GetInputCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputCountRequest.ProtoReflect.Descriptor instead.
func (*GetInputCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{120}
}

func (x *GetInputCountRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// ListDatasetsRequest
type ListDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListDatasetsRequest) Reset() {
	*x = ListDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetsRequest) ProtoMessage() {}

func (x *ListDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{121}
}

func (x *ListDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetDatasetRequest
type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{122}
}

func (x *GetDatasetRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

// Request to add one or more datasets.
type PostDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of datasets that are requested to be added.
	Datasets []*Dataset `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *PostDatasetsRequest) Reset() {
	*x = PostDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDatasetsRequest) ProtoMessage() {}

func (x *PostDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDatasetsRequest.ProtoReflect.Descriptor instead.
func (*PostDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{123}
}

func (x *PostDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostDatasetsRequest) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

// Request to patch several datasets.
type PatchDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of datasets that are requested to be updated.
	Datasets []*Dataset `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
	// The action to perform on the patched objects
	// Supported values: 'overwrite' and 'merge'
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchDatasetsRequest) Reset() {
	*x = PatchDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDatasetsRequest) ProtoMessage() {}

func (x *PatchDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDatasetsRequest.ProtoReflect.Descriptor instead.
func (*PatchDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{124}
}

func (x *PatchDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchDatasetsRequest) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *PatchDatasetsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchDatasetIdsRequest
type PatchDatasetIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array containing 1 entry
	Ids []*IdUpdateSource `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchDatasetIdsRequest) Reset() {
	*x = PatchDatasetIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDatasetIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDatasetIdsRequest) ProtoMessage() {}

func (x *PatchDatasetIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDatasetIdsRequest.ProtoReflect.Descriptor instead.
func (*PatchDatasetIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{125}
}

func (x *PatchDatasetIdsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchDatasetIdsRequest) GetIds() []*IdUpdateSource {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PatchDatasetIdsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several datasets by list of ids.
type DeleteDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	DatasetIds []string      `protobuf:"bytes,2,rep,name=dataset_ids,json=datasetIds,proto3" json:"dataset_ids,omitempty"`
}

func (x *DeleteDatasetsRequest) Reset() {
	*x = DeleteDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetsRequest) ProtoMessage() {}

func (x *DeleteDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{126}
}

func (x *DeleteDatasetsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteDatasetsRequest) GetDatasetIds() []string {
	if x != nil {
		return x.DatasetIds
	}
	return nil
}

// MultiDatasetResponse
type MultiDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Datasets []*Dataset     `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *MultiDatasetResponse) Reset() {
	*x = MultiDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetResponse) ProtoMessage() {}

func (x *MultiDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{127}
}

func (x *MultiDatasetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetResponse) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

// SingleDatasetResponse
type SingleDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Dataset *Dataset       `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *SingleDatasetResponse) Reset() {
	*x = SingleDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetResponse) ProtoMessage() {}

func (x *SingleDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetResponse.ProtoReflect.Descriptor instead.
func (*SingleDatasetResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{128}
}

func (x *SingleDatasetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleDatasetResponse) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

// ListDatasetInputsRequest
type ListDatasetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListDatasetInputsRequest) Reset() {
	*x = ListDatasetInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetInputsRequest) ProtoMessage() {}

func (x *ListDatasetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetInputsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{129}
}

func (x *ListDatasetInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetInputsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListDatasetInputsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetDatasetInputRequest
type GetDatasetInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset input by id.
	InputId string `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *GetDatasetInputRequest) Reset() {
	*x = GetDatasetInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetInputRequest) ProtoMessage() {}

func (x *GetDatasetInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetInputRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetInputRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{130}
}

func (x *GetDatasetInputRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetDatasetInputRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetDatasetInputRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// Request to add one or more datasets.
type PostDatasetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// List of inputs that are requested to be added to this dataset.
	// Identify each input by id field. All other inputs fields are ignored.
	DatasetInputs []*DatasetInput `protobuf:"bytes,3,rep,name=dataset_inputs,json=datasetInputs,proto3" json:"dataset_inputs,omitempty"`
	// Query to search inputs to be added to this dataset.
	Search *Search `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *PostDatasetInputsRequest) Reset() {
	*x = PostDatasetInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostDatasetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDatasetInputsRequest) ProtoMessage() {}

func (x *PostDatasetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDatasetInputsRequest.ProtoReflect.Descriptor instead.
func (*PostDatasetInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{131}
}

func (x *PostDatasetInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostDatasetInputsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PostDatasetInputsRequest) GetDatasetInputs() []*DatasetInput {
	if x != nil {
		return x.DatasetInputs
	}
	return nil
}

func (x *PostDatasetInputsRequest) GetSearch() *Search {
	if x != nil {
		return x.Search
	}
	return nil
}

// Request to delete several dataset inputs by list of ids.
type DeleteDatasetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Specify which inputs to delete from dataset.
	InputIds []string `protobuf:"bytes,3,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
}

func (x *DeleteDatasetInputsRequest) Reset() {
	*x = DeleteDatasetInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetInputsRequest) ProtoMessage() {}

func (x *DeleteDatasetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetInputsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{132}
}

func (x *DeleteDatasetInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteDatasetInputsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DeleteDatasetInputsRequest) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

// MultiDatasetInputResponse
type MultiDatasetInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                    *status.Status             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetInputs             []*DatasetInput            `protobuf:"bytes,2,rep,name=dataset_inputs,json=datasetInputs,proto3" json:"dataset_inputs,omitempty"`
	DatasetInputsSearchAddJob *DatasetInputsSearchAddJob `protobuf:"bytes,3,opt,name=dataset_inputs_search_add_job,json=datasetInputsSearchAddJob,proto3" json:"dataset_inputs_search_add_job,omitempty"`
}

func (x *MultiDatasetInputResponse) Reset() {
	*x = MultiDatasetInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetInputResponse) ProtoMessage() {}

func (x *MultiDatasetInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetInputResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{133}
}

func (x *MultiDatasetInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetInputResponse) GetDatasetInputs() []*DatasetInput {
	if x != nil {
		return x.DatasetInputs
	}
	return nil
}

func (x *MultiDatasetInputResponse) GetDatasetInputsSearchAddJob() *DatasetInputsSearchAddJob {
	if x != nil {
		return x.DatasetInputsSearchAddJob
	}
	return nil
}

// SingleDatasetInputResponse
type SingleDatasetInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetInput *DatasetInput  `protobuf:"bytes,2,opt,name=dataset_input,json=datasetInput,proto3" json:"dataset_input,omitempty"`
}

func (x *SingleDatasetInputResponse) Reset() {
	*x = SingleDatasetInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetInputResponse) ProtoMessage() {}

func (x *SingleDatasetInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetInputResponse.ProtoReflect.Descriptor instead.
func (*SingleDatasetInputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{134}
}

func (x *SingleDatasetInputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleDatasetInputResponse) GetDatasetInput() *DatasetInput {
	if x != nil {
		return x.DatasetInput
	}
	return nil
}

// ListDatasetVersionsRequest
type ListDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListDatasetVersionsRequest) Reset() {
	*x = ListDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetVersionsRequest) ProtoMessage() {}

func (x *ListDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{135}
}

func (x *ListDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListDatasetVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetDatasetVersionRequest
type GetDatasetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset version by id.
	DatasetVersionId string `protobuf:"bytes,3,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
}

func (x *GetDatasetVersionRequest) Reset() {
	*x = GetDatasetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetVersionRequest) ProtoMessage() {}

func (x *GetDatasetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{136}
}

func (x *GetDatasetVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetDatasetVersionRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetDatasetVersionRequest) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

// ListDatasetVersionMetricsGroupsRequest
type ListDatasetVersionMetricsGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset version by id.
	DatasetVersionId string `protobuf:"bytes,3,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Filter by parent path. Multiple parent paths are OR-ed. Empty list results in no filter.
	ParentPaths []string `protobuf:"bytes,6,rep,name=parent_paths,json=parentPaths,proto3" json:"parent_paths,omitempty"`
	// Filter by parent type. Multiple types are OR-ed. Empty list results in no filter.
	Types []DatasetVersionMetricsGroupType `protobuf:"varint,7,rep,packed,name=types,proto3,enum=clarifai.api.DatasetVersionMetricsGroupType" json:"types,omitempty"`
	// Filter by value. Multiple values are OR-ed. Empty list results in no filter.
	Values []*structpb.Value `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListDatasetVersionMetricsGroupsRequest) Reset() {
	*x = ListDatasetVersionMetricsGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetVersionMetricsGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetVersionMetricsGroupsRequest) ProtoMessage() {}

func (x *ListDatasetVersionMetricsGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetVersionMetricsGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetVersionMetricsGroupsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{137}
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetParentPaths() []string {
	if x != nil {
		return x.ParentPaths
	}
	return nil
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetTypes() []DatasetVersionMetricsGroupType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListDatasetVersionMetricsGroupsRequest) GetValues() []*structpb.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// Request to add one or more dataset versions.
type PostDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// List of dataset versions that are requested to be added.
	DatasetVersions []*DatasetVersion `protobuf:"bytes,3,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
}

func (x *PostDatasetVersionsRequest) Reset() {
	*x = PostDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDatasetVersionsRequest) ProtoMessage() {}

func (x *PostDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{138}
}

func (x *PostDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PostDatasetVersionsRequest) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

// Request to patch several dataset versions.
type PatchDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// List of dataset versions that are requested to be updated.
	DatasetVersions []*DatasetVersion `protobuf:"bytes,3,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
	// The action to perform on the patched objects
	// For now, only 'overwrite' action is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchDatasetVersionsRequest) Reset() {
	*x = PatchDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDatasetVersionsRequest) ProtoMessage() {}

func (x *PatchDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*PatchDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{139}
}

func (x *PatchDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PatchDatasetVersionsRequest) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

func (x *PatchDatasetVersionsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several dataset versions by list of ids.
type DeleteDatasetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId         string   `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetVersionIds []string `protobuf:"bytes,3,rep,name=dataset_version_ids,json=datasetVersionIds,proto3" json:"dataset_version_ids,omitempty"`
}

func (x *DeleteDatasetVersionsRequest) Reset() {
	*x = DeleteDatasetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersionsRequest) ProtoMessage() {}

func (x *DeleteDatasetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{140}
}

func (x *DeleteDatasetVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteDatasetVersionsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DeleteDatasetVersionsRequest) GetDatasetVersionIds() []string {
	if x != nil {
		return x.DatasetVersionIds
	}
	return nil
}

// Request to create exports of a dataset version.
type PutDatasetVersionExportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify dataset by id.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Identify dataset version by id.
	DatasetVersionId string `protobuf:"bytes,3,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	// exports is the list of requested dataset version exports.
	// Only setting the 'format' field of the export is supported.
	Exports []*DatasetVersionExport `protobuf:"bytes,4,rep,name=exports,proto3" json:"exports,omitempty"`
}

func (x *PutDatasetVersionExportsRequest) Reset() {
	*x = PutDatasetVersionExportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDatasetVersionExportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDatasetVersionExportsRequest) ProtoMessage() {}

func (x *PutDatasetVersionExportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDatasetVersionExportsRequest.ProtoReflect.Descriptor instead.
func (*PutDatasetVersionExportsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{141}
}

func (x *PutDatasetVersionExportsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutDatasetVersionExportsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PutDatasetVersionExportsRequest) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *PutDatasetVersionExportsRequest) GetExports() []*DatasetVersionExport {
	if x != nil {
		return x.Exports
	}
	return nil
}

type MultiDatasetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetVersions []*DatasetVersion `protobuf:"bytes,2,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
}

func (x *MultiDatasetVersionResponse) Reset() {
	*x = MultiDatasetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetVersionResponse) ProtoMessage() {}

func (x *MultiDatasetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{142}
}

func (x *MultiDatasetVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetVersionResponse) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

type MultiDatasetVersionExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Exports []*DatasetVersionExport `protobuf:"bytes,2,rep,name=exports,proto3" json:"exports,omitempty"`
}

func (x *MultiDatasetVersionExportResponse) Reset() {
	*x = MultiDatasetVersionExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetVersionExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetVersionExportResponse) ProtoMessage() {}

func (x *MultiDatasetVersionExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetVersionExportResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetVersionExportResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{143}
}

func (x *MultiDatasetVersionExportResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetVersionExportResponse) GetExports() []*DatasetVersionExport {
	if x != nil {
		return x.Exports
	}
	return nil
}

type MultiDatasetVersionMetricsGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                      *status.Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetVersionMetricsGroups []*DatasetVersionMetricsGroup `protobuf:"bytes,2,rep,name=dataset_version_metrics_groups,json=datasetVersionMetricsGroups,proto3" json:"dataset_version_metrics_groups,omitempty"`
}

func (x *MultiDatasetVersionMetricsGroupResponse) Reset() {
	*x = MultiDatasetVersionMetricsGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDatasetVersionMetricsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDatasetVersionMetricsGroupResponse) ProtoMessage() {}

func (x *MultiDatasetVersionMetricsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDatasetVersionMetricsGroupResponse.ProtoReflect.Descriptor instead.
func (*MultiDatasetVersionMetricsGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{144}
}

func (x *MultiDatasetVersionMetricsGroupResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiDatasetVersionMetricsGroupResponse) GetDatasetVersionMetricsGroups() []*DatasetVersionMetricsGroup {
	if x != nil {
		return x.DatasetVersionMetricsGroups
	}
	return nil
}

type SingleDatasetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatasetVersion *DatasetVersion `protobuf:"bytes,2,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *SingleDatasetVersionResponse) Reset() {
	*x = SingleDatasetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetVersionResponse) ProtoMessage() {}

func (x *SingleDatasetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleDatasetVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{145}
}

func (x *SingleDatasetVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleDatasetVersionResponse) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type GetDatasetInputsSearchAddJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	JobId     string        `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetDatasetInputsSearchAddJobRequest) Reset() {
	*x = GetDatasetInputsSearchAddJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetInputsSearchAddJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetInputsSearchAddJobRequest) ProtoMessage() {}

func (x *GetDatasetInputsSearchAddJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetInputsSearchAddJobRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetInputsSearchAddJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{146}
}

func (x *GetDatasetInputsSearchAddJobRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetDatasetInputsSearchAddJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type SingleDatasetInputsSearchAddJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Job    *DatasetInputsSearchAddJob `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SingleDatasetInputsSearchAddJobResponse) Reset() {
	*x = SingleDatasetInputsSearchAddJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetInputsSearchAddJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetInputsSearchAddJobResponse) ProtoMessage() {}

func (x *SingleDatasetInputsSearchAddJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetInputsSearchAddJobResponse.ProtoReflect.Descriptor instead.
func (*SingleDatasetInputsSearchAddJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{147}
}

func (x *SingleDatasetInputsSearchAddJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleDatasetInputsSearchAddJobResponse) GetJob() *DatasetInputsSearchAddJob {
	if x != nil {
		return x.Job
	}
	return nil
}

////////////////////////////////////////////////////
// Model prediction related stuff needs inputs and produces outputs.
////////////////////////////////////////////////////
// Model prediction.
type PostModelOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Inputs    []*Input      `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// This allows you to specify config options for the model such as
	// the language which appear's in the model's output_info.
	Model *Model `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *PostModelOutputsRequest) Reset() {
	*x = PostModelOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelOutputsRequest) ProtoMessage() {}

func (x *PostModelOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelOutputsRequest.ProtoReflect.Descriptor instead.
func (*PostModelOutputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{148}
}

func (x *PostModelOutputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelOutputsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelOutputsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostModelOutputsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PostModelOutputsRequest) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

// Listing the inputs that went into training this model.
type ListModelInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelInputsRequest) Reset() {
	*x = ListModelInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelInputsRequest) ProtoMessage() {}

func (x *ListModelInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelInputsRequest.ProtoReflect.Descriptor instead.
func (*ListModelInputsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{149}
}

func (x *ListModelInputsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelInputsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelInputsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ListModelInputsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelInputsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetKeyRequest
type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	KeyId     string        `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{150}
}

func (x *GetKeyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

// ListKeysRequest
type ListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{151}
}

func (x *ListKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListKeysRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKeysRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// ListAppKeysRequest
type ListAppKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListAppKeysRequest) Reset() {
	*x = ListAppKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppKeysRequest) ProtoMessage() {}

func (x *ListAppKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppKeysRequest.ProtoReflect.Descriptor instead.
func (*ListAppKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{152}
}

func (x *ListAppKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAppKeysRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAppKeysRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostKeysRequest
type PostKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Keys      []*Key        `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *PostKeysRequest) Reset() {
	*x = PostKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostKeysRequest) ProtoMessage() {}

func (x *PostKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostKeysRequest.ProtoReflect.Descriptor instead.
func (*PostKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{153}
}

func (x *PostKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostKeysRequest) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

// DeleteKeyRequest
type DeleteKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	KeyId     string        `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *DeleteKeyRequest) Reset() {
	*x = DeleteKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyRequest) ProtoMessage() {}

func (x *DeleteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{154}
}

func (x *DeleteKeyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

// PatchKeysRequest
type PatchKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Keys      []*Key        `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// The action to perform on the patched objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchKeysRequest) Reset() {
	*x = PatchKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchKeysRequest) ProtoMessage() {}

func (x *PatchKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchKeysRequest.ProtoReflect.Descriptor instead.
func (*PatchKeysRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{155}
}

func (x *PatchKeysRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchKeysRequest) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PatchKeysRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// SingleKeyResponse
type SingleKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Key    *Key           `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SingleKeyResponse) Reset() {
	*x = SingleKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleKeyResponse) ProtoMessage() {}

func (x *SingleKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleKeyResponse.ProtoReflect.Descriptor instead.
func (*SingleKeyResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{156}
}

func (x *SingleKeyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleKeyResponse) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

// MultiKeyResponse
type MultiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Keys   []*Key         `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *MultiKeyResponse) Reset() {
	*x = MultiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiKeyResponse) ProtoMessage() {}

func (x *MultiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiKeyResponse.ProtoReflect.Descriptor instead.
func (*MultiKeyResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{157}
}

func (x *MultiKeyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiKeyResponse) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

// FetchLicenseRequest
type FetchLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseId string `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // public key generated in client side, per-activation scope (only created when client first fetches license file, but it is decided by client)
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *FetchLicenseRequest) Reset() {
	*x = FetchLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLicenseRequest) ProtoMessage() {}

func (x *FetchLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLicenseRequest.ProtoReflect.Descriptor instead.
func (*FetchLicenseRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{158}
}

func (x *FetchLicenseRequest) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *FetchLicenseRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *FetchLicenseRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// FetchLicenseResponse
type FetchLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EncryptedBytes []byte                 `protobuf:"bytes,2,opt,name=encrypted_bytes,json=encryptedBytes,proto3" json:"encrypted_bytes,omitempty"`
	ActivatedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"` // Date and time the deployment was activated
	PublicKey      string                 `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature      []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *FetchLicenseResponse) Reset() {
	*x = FetchLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLicenseResponse) ProtoMessage() {}

func (x *FetchLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLicenseResponse.ProtoReflect.Descriptor instead.
func (*FetchLicenseResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{159}
}

func (x *FetchLicenseResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FetchLicenseResponse) GetEncryptedBytes() []byte {
	if x != nil {
		return x.EncryptedBytes
	}
	return nil
}

func (x *FetchLicenseResponse) GetActivatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivatedAt
	}
	return nil
}

func (x *FetchLicenseResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *FetchLicenseResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// ValidateLicenseRequest
type ValidateLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseId string `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // used to prevent users providing faked but valid response
	//for example, returned by previous successful validation
	ActivatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
	PublicKey   string                 `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // public key generated in client side
	Signature   []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ValidateLicenseRequest) Reset() {
	*x = ValidateLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateLicenseRequest) ProtoMessage() {}

func (x *ValidateLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateLicenseRequest.ProtoReflect.Descriptor instead.
func (*ValidateLicenseRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{160}
}

func (x *ValidateLicenseRequest) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *ValidateLicenseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ValidateLicenseRequest) GetActivatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivatedAt
	}
	return nil
}

func (x *ValidateLicenseRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ValidateLicenseRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// ValidateLicenseResponse
type ValidateLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestId string          `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // mapping to the request_id in request
	Limits    []*LicenseLimit `protobuf:"bytes,3,rep,name=limits,proto3" json:"limits,omitempty"`
	Signature []byte          `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ValidateLicenseResponse) Reset() {
	*x = ValidateLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateLicenseResponse) ProtoMessage() {}

func (x *ValidateLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateLicenseResponse.ProtoReflect.Descriptor instead.
func (*ValidateLicenseResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{161}
}

func (x *ValidateLicenseResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValidateLicenseResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ValidateLicenseResponse) GetLimits() []*LicenseLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ValidateLicenseResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// ListLicensesRequest
type ListLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListLicensesRequest) Reset() {
	*x = ListLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLicensesRequest) ProtoMessage() {}

func (x *ListLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLicensesRequest.ProtoReflect.Descriptor instead.
func (*ListLicensesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{162}
}

func (x *ListLicensesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// GetLicenseRequest
type GetLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LicenseId string        `protobuf:"bytes,2,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
}

func (x *GetLicenseRequest) Reset() {
	*x = GetLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseRequest) ProtoMessage() {}

func (x *GetLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicenseRequest.ProtoReflect.Descriptor instead.
func (*GetLicenseRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{163}
}

func (x *GetLicenseRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetLicenseRequest) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

// SingleLicenseResponse
type SingleLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	License *License       `protobuf:"bytes,2,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *SingleLicenseResponse) Reset() {
	*x = SingleLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleLicenseResponse) ProtoMessage() {}

func (x *SingleLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleLicenseResponse.ProtoReflect.Descriptor instead.
func (*SingleLicenseResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{164}
}

func (x *SingleLicenseResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleLicenseResponse) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

// MultipleLicensesResponse
type MultipleLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Licenses []*License     `protobuf:"bytes,2,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *MultipleLicensesResponse) Reset() {
	*x = MultipleLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleLicensesResponse) ProtoMessage() {}

func (x *MultipleLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleLicensesResponse.ProtoReflect.Descriptor instead.
func (*MultipleLicensesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{165}
}

func (x *MultipleLicensesResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultipleLicensesResponse) GetLicenses() []*License {
	if x != nil {
		return x.Licenses
	}
	return nil
}

// GetModelRequest
type GetModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// This is included so that we can re-use this request for multiple
	// rpcs with and without the version_id.
	VersionId     string `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Language      string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	TrainedBefore bool   `protobuf:"varint,5,opt,name=trained_before,json=trainedBefore,proto3" json:"trained_before,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets
	AdditionalFields []string `protobuf:"bytes,19,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetModelRequest) Reset() {
	*x = GetModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelRequest) ProtoMessage() {}

func (x *GetModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelRequest.ProtoReflect.Descriptor instead.
func (*GetModelRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{166}
}

func (x *GetModelRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GetModelRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetModelRequest) GetTrainedBefore() bool {
	if x != nil {
		return x.TrainedBefore
	}
	return false
}

func (x *GetModelRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// ListModelsRequest
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,10,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//	*ListModelsRequest_SortByName
	//	*ListModelsRequest_SortByNumInputs
	//	*ListModelsRequest_SortByModifiedAt
	SortBy isListModelsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	// Query name, description and id fields, that can contain the words in the query string. Does NOT support wildcards - full words only. Supports operators "OR" and "-" as NOT.
	Query string `protobuf:"bytes,14,opt,name=query,proto3" json:"query,omitempty"`
	// Filter by the description and id of the model. This supports wildcard queries like "gen*" to match "general" as an example.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Extends the name filter to include the user_id of the application owner that the model belongs to.
	FilterByUserId bool `protobuf:"varint,22,opt,name=filter_by_user_id,json=filterByUserId,proto3" json:"filter_by_user_id,omitempty"`
	// Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
	// supported.
	ModelTypeId string `protobuf:"bytes,6,opt,name=model_type_id,json=modelTypeId,proto3" json:"model_type_id,omitempty"`
	// If true, we only return models that have the status MODEL_TRAINED, which includes non-trainable model types.
	TrainedOnly bool `protobuf:"varint,7,opt,name=trained_only,json=trainedOnly,proto3" json:"trained_only,omitempty"`
	// The list of input fields to the model.
	// For example, you can specify 'image', which will return models that make inferences on images like visual-classifier models.
	InputFields []string `protobuf:"bytes,8,rep,name=input_fields,json=inputFields,proto3" json:"input_fields,omitempty"`
	// The list of output fields to the model.
	// For example, you can specify 'regions[...].data.concepts', which will return visual-detector models.
	OutputFields []string `protobuf:"bytes,9,rep,name=output_fields,json=outputFields,proto3" json:"output_fields,omitempty"`
	// Filter by the license of the model version
	License string `protobuf:"bytes,15,opt,name=license,proto3" json:"license,omitempty"`
	// If true, we only return models that are handpicked by clarifai staff
	FeaturedOnly bool `protobuf:"varint,16,opt,name=featured_only,json=featuredOnly,proto3" json:"featured_only,omitempty"`
	// If true, we only return models that are starred by the requesting user
	StarredOnly bool `protobuf:"varint,20,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// List of toolkit tags to filter by
	Toolkits []string `protobuf:"bytes,17,rep,name=toolkits,proto3" json:"toolkits,omitempty"`
	// List of use_case tags to filter by
	UseCases []string `protobuf:"bytes,18,rep,name=use_cases,json=useCases,proto3" json:"use_cases,omitempty"`
	// List of language tags to filter by
	Languages []string `protobuf:"bytes,21,rep,name=languages,proto3" json:"languages,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets
	AdditionalFields []string `protobuf:"bytes,19,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{167}
}

func (x *ListModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListModelsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListModelsRequest) GetSortBy() isListModelsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListModelsRequest) GetSortByName() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByName); ok {
		return x.SortByName
	}
	return false
}

func (x *ListModelsRequest) GetSortByNumInputs() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByNumInputs); ok {
		return x.SortByNumInputs
	}
	return false
}

func (x *ListModelsRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListModelsRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListModelsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListModelsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListModelsRequest) GetFilterByUserId() bool {
	if x != nil {
		return x.FilterByUserId
	}
	return false
}

func (x *ListModelsRequest) GetModelTypeId() string {
	if x != nil {
		return x.ModelTypeId
	}
	return ""
}

func (x *ListModelsRequest) GetTrainedOnly() bool {
	if x != nil {
		return x.TrainedOnly
	}
	return false
}

func (x *ListModelsRequest) GetInputFields() []string {
	if x != nil {
		return x.InputFields
	}
	return nil
}

func (x *ListModelsRequest) GetOutputFields() []string {
	if x != nil {
		return x.OutputFields
	}
	return nil
}

func (x *ListModelsRequest) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *ListModelsRequest) GetFeaturedOnly() bool {
	if x != nil {
		return x.FeaturedOnly
	}
	return false
}

func (x *ListModelsRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListModelsRequest) GetToolkits() []string {
	if x != nil {
		return x.Toolkits
	}
	return nil
}

func (x *ListModelsRequest) GetUseCases() []string {
	if x != nil {
		return x.UseCases
	}
	return nil
}

func (x *ListModelsRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *ListModelsRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

type isListModelsRequest_SortBy interface {
	isListModelsRequest_SortBy()
}

type ListModelsRequest_SortByName struct {
	// Whether to order by the name
	SortByName bool `protobuf:"varint,11,opt,name=sort_by_name,json=sortByName,proto3,oneof"`
}

type ListModelsRequest_SortByNumInputs struct {
	// Whether to order by the number of training inputs
	SortByNumInputs bool `protobuf:"varint,12,opt,name=sort_by_num_inputs,json=sortByNumInputs,proto3,oneof"`
}

type ListModelsRequest_SortByModifiedAt struct {
	// Whether to order by the modified_at time of the latest model version.
	// If neither sort option is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,13,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

func (*ListModelsRequest_SortByName) isListModelsRequest_SortBy() {}

func (*ListModelsRequest_SortByNumInputs) isListModelsRequest_SortBy() {}

func (*ListModelsRequest_SortByModifiedAt) isListModelsRequest_SortBy() {}

type PatchModelToolkitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Toolkits  []string      `protobuf:"bytes,3,rep,name=toolkits,proto3" json:"toolkits,omitempty"`
	//overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelToolkitsRequest) Reset() {
	*x = PatchModelToolkitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelToolkitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelToolkitsRequest) ProtoMessage() {}

func (x *PatchModelToolkitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelToolkitsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelToolkitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{168}
}

func (x *PatchModelToolkitsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelToolkitsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelToolkitsRequest) GetToolkits() []string {
	if x != nil {
		return x.Toolkits
	}
	return nil
}

func (x *PatchModelToolkitsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchModelCheckConsentsRequest
type PatchModelCheckConsentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// the model id
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// the consents
	CheckConsents []string `protobuf:"bytes,3,rep,name=check_consents,json=checkConsents,proto3" json:"check_consents,omitempty"`
	//overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelCheckConsentsRequest) Reset() {
	*x = PatchModelCheckConsentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelCheckConsentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelCheckConsentsRequest) ProtoMessage() {}

func (x *PatchModelCheckConsentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelCheckConsentsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelCheckConsentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{169}
}

func (x *PatchModelCheckConsentsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelCheckConsentsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelCheckConsentsRequest) GetCheckConsents() []string {
	if x != nil {
		return x.CheckConsents
	}
	return nil
}

func (x *PatchModelCheckConsentsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PatchModelUseCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Usecases  []string      `protobuf:"bytes,3,rep,name=usecases,proto3" json:"usecases,omitempty"`
	//overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelUseCasesRequest) Reset() {
	*x = PatchModelUseCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelUseCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelUseCasesRequest) ProtoMessage() {}

func (x *PatchModelUseCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelUseCasesRequest.ProtoReflect.Descriptor instead.
func (*PatchModelUseCasesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{170}
}

func (x *PatchModelUseCasesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelUseCasesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelUseCasesRequest) GetUsecases() []string {
	if x != nil {
		return x.Usecases
	}
	return nil
}

func (x *PatchModelUseCasesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PatchModelLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Languages []string      `protobuf:"bytes,3,rep,name=languages,proto3" json:"languages,omitempty"`
	// Only overwrite supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelLanguagesRequest) Reset() {
	*x = PatchModelLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelLanguagesRequest) ProtoMessage() {}

func (x *PatchModelLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelLanguagesRequest.ProtoReflect.Descriptor instead.
func (*PatchModelLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{171}
}

func (x *PatchModelLanguagesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelLanguagesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelLanguagesRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *PatchModelLanguagesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type MultiModelToolkitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Toolkits []string       `protobuf:"bytes,2,rep,name=toolkits,proto3" json:"toolkits,omitempty"`
}

func (x *MultiModelToolkitResponse) Reset() {
	*x = MultiModelToolkitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelToolkitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelToolkitResponse) ProtoMessage() {}

func (x *MultiModelToolkitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelToolkitResponse.ProtoReflect.Descriptor instead.
func (*MultiModelToolkitResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{172}
}

func (x *MultiModelToolkitResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelToolkitResponse) GetToolkits() []string {
	if x != nil {
		return x.Toolkits
	}
	return nil
}

type MultiModelCheckConsentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CheckConsents []string       `protobuf:"bytes,2,rep,name=check_consents,json=checkConsents,proto3" json:"check_consents,omitempty"`
}

func (x *MultiModelCheckConsentResponse) Reset() {
	*x = MultiModelCheckConsentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelCheckConsentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelCheckConsentResponse) ProtoMessage() {}

func (x *MultiModelCheckConsentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelCheckConsentResponse.ProtoReflect.Descriptor instead.
func (*MultiModelCheckConsentResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{173}
}

func (x *MultiModelCheckConsentResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelCheckConsentResponse) GetCheckConsents() []string {
	if x != nil {
		return x.CheckConsents
	}
	return nil
}

type MultiModelUseCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Usecases []string       `protobuf:"bytes,2,rep,name=usecases,proto3" json:"usecases,omitempty"`
}

func (x *MultiModelUseCaseResponse) Reset() {
	*x = MultiModelUseCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelUseCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelUseCaseResponse) ProtoMessage() {}

func (x *MultiModelUseCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelUseCaseResponse.ProtoReflect.Descriptor instead.
func (*MultiModelUseCaseResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{174}
}

func (x *MultiModelUseCaseResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelUseCaseResponse) GetUsecases() []string {
	if x != nil {
		return x.Usecases
	}
	return nil
}

type MultiModelLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Languages []string       `protobuf:"bytes,2,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *MultiModelLanguageResponse) Reset() {
	*x = MultiModelLanguageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelLanguageResponse) ProtoMessage() {}

func (x *MultiModelLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelLanguageResponse.ProtoReflect.Descriptor instead.
func (*MultiModelLanguageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{175}
}

func (x *MultiModelLanguageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelLanguageResponse) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

// PostModelsRequest
type PostModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// NOTE: inconsistent since "model" is not plural, please use "models" below.
	// Previously you could only create one model at a time.
	// We still support this but you should pass it as models=[model] so
	// that this endpoint is consistent with the rest of our API.
	//
	// Deprecated: Do not use.
	Model *Model `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// This allows you to create one or more model by posting it to the API.
	Models []*Model `protobuf:"bytes,3,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *PostModelsRequest) Reset() {
	*x = PostModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelsRequest) ProtoMessage() {}

func (x *PostModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelsRequest.ProtoReflect.Descriptor instead.
func (*PostModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{176}
}

func (x *PostModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// Deprecated: Do not use.
func (x *PostModelsRequest) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *PostModelsRequest) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// PatchModelsRequest
type PatchModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Models    []*Model      `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelsRequest) Reset() {
	*x = PatchModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelsRequest) ProtoMessage() {}

func (x *PatchModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{177}
}

func (x *PatchModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelsRequest) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *PatchModelsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type IdUpdateSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//old id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//new id
	NewId string `protobuf:"bytes,2,opt,name=new_id,json=newId,proto3" json:"new_id,omitempty"`
}

func (x *IdUpdateSource) Reset() {
	*x = IdUpdateSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdUpdateSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdUpdateSource) ProtoMessage() {}

func (x *IdUpdateSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdUpdateSource.ProtoReflect.Descriptor instead.
func (*IdUpdateSource) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{178}
}

func (x *IdUpdateSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdUpdateSource) GetNewId() string {
	if x != nil {
		return x.NewId
	}
	return ""
}

// PatchModelIdsRequest
type PatchModelIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array containing 1 entry
	Ids []*IdUpdateSource `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelIdsRequest) Reset() {
	*x = PatchModelIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelIdsRequest) ProtoMessage() {}

func (x *PatchModelIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelIdsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{179}
}

func (x *PatchModelIdsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelIdsRequest) GetIds() []*IdUpdateSource {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PatchModelIdsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteModelRequest
type DeleteModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (x *DeleteModelRequest) Reset() {
	*x = DeleteModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelRequest) ProtoMessage() {}

func (x *DeleteModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{180}
}

func (x *DeleteModelRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteModelsRequest) Reset() {
	*x = DeleteModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelsRequest) ProtoMessage() {}

func (x *DeleteModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelsRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{181}
}

func (x *DeleteModelsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteModelsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// Search over the available models.
type PostModelsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids present in the url of the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The body of the request.
	ModelQuery *ModelQuery `protobuf:"bytes,2,opt,name=model_query,json=modelQuery,proto3" json:"model_query,omitempty"`
	// Pagination parameters here since there are no url args in this
	// POST request.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostModelsSearchesRequest) Reset() {
	*x = PostModelsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelsSearchesRequest) ProtoMessage() {}

func (x *PostModelsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostModelsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{182}
}

func (x *PostModelsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelsSearchesRequest) GetModelQuery() *ModelQuery {
	if x != nil {
		return x.ModelQuery
	}
	return nil
}

func (x *PostModelsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// SingleModelResponse
type SingleModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Model  *Model         `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *SingleModelResponse) Reset() {
	*x = SingleModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelResponse) ProtoMessage() {}

func (x *SingleModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelResponse.ProtoReflect.Descriptor instead.
func (*SingleModelResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{183}
}

func (x *SingleModelResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelResponse) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

// MultiModelResponse
type MultiModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Models []*Model       `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *MultiModelResponse) Reset() {
	*x = MultiModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelResponse) ProtoMessage() {}

func (x *MultiModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelResponse.ProtoReflect.Descriptor instead.
func (*MultiModelResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{184}
}

func (x *MultiModelResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// PatchModelVersionsRequest
type PatchModelVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId       string          `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersions []*ModelVersion `protobuf:"bytes,3,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModelVersionsRequest) Reset() {
	*x = PatchModelVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelVersionsRequest) ProtoMessage() {}

func (x *PatchModelVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelVersionsRequest.ProtoReflect.Descriptor instead.
func (*PatchModelVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{185}
}

func (x *PatchModelVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModelVersionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PatchModelVersionsRequest) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

func (x *PatchModelVersionsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// request for different endpoints currently.
type GetModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *GetModelVersionRequest) Reset() {
	*x = GetModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionRequest) ProtoMessage() {}

func (x *GetModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{186}
}

func (x *GetModelVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// ListModelVersionsRequest
type ListModelVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// To list only the model versions that have these concept ids present in them.
	ConceptIds []string `protobuf:"bytes,5,rep,name=concept_ids,json=conceptIds,proto3" json:"concept_ids,omitempty"`
}

func (x *ListModelVersionsRequest) Reset() {
	*x = ListModelVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelVersionsRequest) ProtoMessage() {}

func (x *ListModelVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListModelVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{187}
}

func (x *ListModelVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelVersionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListModelVersionsRequest) GetConceptIds() []string {
	if x != nil {
		return x.ConceptIds
	}
	return nil
}

// DeleteModelVersionRequest
type DeleteModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,4,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *DeleteModelVersionRequest) Reset() {
	*x = DeleteModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersionRequest) ProtoMessage() {}

func (x *DeleteModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersionRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{188}
}

func (x *DeleteModelVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelVersionRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *DeleteModelVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// SingleModelVersionResponse
type SingleModelVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModelVersion *ModelVersion  `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *SingleModelVersionResponse) Reset() {
	*x = SingleModelVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelVersionResponse) ProtoMessage() {}

func (x *SingleModelVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleModelVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{189}
}

func (x *SingleModelVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelVersionResponse) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

// MultiModelVersionResponse
type MultiModelVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModelVersions []*ModelVersion `protobuf:"bytes,2,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
}

func (x *MultiModelVersionResponse) Reset() {
	*x = MultiModelVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelVersionResponse) ProtoMessage() {}

func (x *MultiModelVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiModelVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{190}
}

func (x *MultiModelVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelVersionResponse) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

// Create (train) a new model version.
type PostModelVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// This lets you post an existing model version rather than training a new one.
	// For internal Clarifai use only to start.
	ModelVersions []*ModelVersion `protobuf:"bytes,3,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
	// Use this to filter inputs that are used in training
	// Alternatively, use train_search & test_search fields OR dataset_version field.
	//
	// Deprecated: Do not use.
	Search *Search `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	//train_search is used to specify what data to train on.
	// Alternatively, use dataset_version field.
	TrainSearch *Search `protobuf:"bytes,5,opt,name=train_search,json=trainSearch,proto3" json:"train_search,omitempty"`
	//test_search is used to specify what data to test on.
	// Alternatively, use dataset_version field.
	TestSearch *Search `protobuf:"bytes,6,opt,name=test_search,json=testSearch,proto3" json:"test_search,omitempty"`
	// whether to evaluate the transfer trained model after training
	EvaluateAfterTraining bool `protobuf:"varint,7,opt,name=evaluate_after_training,json=evaluateAfterTraining,proto3" json:"evaluate_after_training,omitempty"`
	// Description about this training run
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// Use the data from this dataset version for training.
	// Set dataset_version.dataset_id to identify the dataset that you would like to use.
	// When dataset_version.id field is set,
	// the system will reuse the data from provided dataset version.
	// When dataset_version.id is not set,
	// a new dataset version will be created in the dataset using provided dataset_version fields.
	DatasetVersion *DatasetVersion `protobuf:"bytes,9,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
	// When evaluate_after_training set to true, we will do evaluation immediately after training finishes.
	// We will merge this with default_eval_info.
	EvalInfo *EvalInfo `protobuf:"bytes,10,opt,name=eval_info,json=evalInfo,proto3" json:"eval_info,omitempty"`
}

func (x *PostModelVersionsRequest) Reset() {
	*x = PostModelVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsRequest) ProtoMessage() {}

func (x *PostModelVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{191}
}

func (x *PostModelVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsRequest) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

// Deprecated: Do not use.
func (x *PostModelVersionsRequest) GetSearch() *Search {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *PostModelVersionsRequest) GetTrainSearch() *Search {
	if x != nil {
		return x.TrainSearch
	}
	return nil
}

func (x *PostModelVersionsRequest) GetTestSearch() *Search {
	if x != nil {
		return x.TestSearch
	}
	return nil
}

func (x *PostModelVersionsRequest) GetEvaluateAfterTraining() bool {
	if x != nil {
		return x.EvaluateAfterTraining
	}
	return false
}

func (x *PostModelVersionsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PostModelVersionsRequest) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

func (x *PostModelVersionsRequest) GetEvalInfo() *EvalInfo {
	if x != nil {
		return x.EvalInfo
	}
	return nil
}

type PostWorkflowVersionsUnPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                      `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId   string                             `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Publications []*WorkflowVersionUnPublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostWorkflowVersionsUnPublishRequest) Reset() {
	*x = PostWorkflowVersionsUnPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowVersionsUnPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowVersionsUnPublishRequest) ProtoMessage() {}

func (x *PostWorkflowVersionsUnPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowVersionsUnPublishRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowVersionsUnPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{192}
}

func (x *PostWorkflowVersionsUnPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowVersionsUnPublishRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowVersionsUnPublishRequest) GetPublications() []*WorkflowVersionUnPublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

type PostWorkflowVersionsPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                    `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId   string                           `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Publications []*WorkflowVersionPublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostWorkflowVersionsPublishRequest) Reset() {
	*x = PostWorkflowVersionsPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowVersionsPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowVersionsPublishRequest) ProtoMessage() {}

func (x *PostWorkflowVersionsPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowVersionsPublishRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowVersionsPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{193}
}

func (x *PostWorkflowVersionsPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowVersionsPublishRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowVersionsPublishRequest) GetPublications() []*WorkflowVersionPublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

type WorkflowVersionPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *WorkflowVersionPublishRequest) Reset() {
	*x = WorkflowVersionPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersionPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersionPublishRequest) ProtoMessage() {}

func (x *WorkflowVersionPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersionPublishRequest.ProtoReflect.Descriptor instead.
func (*WorkflowVersionPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{194}
}

func (x *WorkflowVersionPublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type WorkflowVersionUnPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *WorkflowVersionUnPublishRequest) Reset() {
	*x = WorkflowVersionUnPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersionUnPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersionUnPublishRequest) ProtoMessage() {}

func (x *WorkflowVersionUnPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersionUnPublishRequest.ProtoReflect.Descriptor instead.
func (*WorkflowVersionUnPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{195}
}

func (x *WorkflowVersionUnPublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// ModelVersionPublishRequest
type ModelVersionPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *ModelVersionPublishRequest) Reset() {
	*x = ModelVersionPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionPublishRequest) ProtoMessage() {}

func (x *ModelVersionPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionPublishRequest.ProtoReflect.Descriptor instead.
func (*ModelVersionPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{196}
}

func (x *ModelVersionPublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// PostModelVersionsPublishRequest
type PostModelVersionsPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                 `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId      string                        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Publications []*ModelVersionPublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostModelVersionsPublishRequest) Reset() {
	*x = PostModelVersionsPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsPublishRequest) ProtoMessage() {}

func (x *PostModelVersionsPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsPublishRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{197}
}

func (x *PostModelVersionsPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsPublishRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsPublishRequest) GetPublications() []*ModelVersionPublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

// ModelVersionUnpublishRequest
type ModelVersionUnpublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *ModelVersionUnpublishRequest) Reset() {
	*x = ModelVersionUnpublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionUnpublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionUnpublishRequest) ProtoMessage() {}

func (x *ModelVersionUnpublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionUnpublishRequest.ProtoReflect.Descriptor instead.
func (*ModelVersionUnpublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{198}
}

func (x *ModelVersionUnpublishRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

// PostModelVersionsUnPublishRequest
type PostModelVersionsUnPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet                   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId      string                          `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Publications []*ModelVersionUnpublishRequest `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *PostModelVersionsUnPublishRequest) Reset() {
	*x = PostModelVersionsUnPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionsUnPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionsUnPublishRequest) ProtoMessage() {}

func (x *PostModelVersionsUnPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionsUnPublishRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionsUnPublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{199}
}

func (x *PostModelVersionsUnPublishRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionsUnPublishRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionsUnPublishRequest) GetPublications() []*ModelVersionUnpublishRequest {
	if x != nil {
		return x.Publications
	}
	return nil
}

// Evaluate this model version.
type PostModelVersionMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId     string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId   string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	MaxExamples uint32        `protobuf:"varint,4,opt,name=max_examples,json=maxExamples,proto3" json:"max_examples,omitempty"`
	// Use this to filter inputs that are used in evaluation
	TestSearch *Search `protobuf:"bytes,5,opt,name=test_search,json=testSearch,proto3" json:"test_search,omitempty"`
	// evaluation info. Such as dataset used for evaluation.
	EvalInfo *EvalInfo `protobuf:"bytes,10,opt,name=eval_info,json=evalInfo,proto3" json:"eval_info,omitempty"`
}

func (x *PostModelVersionMetricsRequest) Reset() {
	*x = PostModelVersionMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionMetricsRequest) ProtoMessage() {}

func (x *PostModelVersionMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionMetricsRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{200}
}

func (x *PostModelVersionMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionMetricsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionMetricsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostModelVersionMetricsRequest) GetMaxExamples() uint32 {
	if x != nil {
		return x.MaxExamples
	}
	return 0
}

func (x *PostModelVersionMetricsRequest) GetTestSearch() *Search {
	if x != nil {
		return x.TestSearch
	}
	return nil
}

func (x *PostModelVersionMetricsRequest) GetEvalInfo() *EvalInfo {
	if x != nil {
		return x.EvalInfo
	}
	return nil
}

// Get the already computed evaluation metrics for this model
// version.
type GetModelVersionMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	VersionId string        `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Any of the fields you wish to return from multiclass_metrics
	Fields *FieldsValue `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetModelVersionMetricsRequest) Reset() {
	*x = GetModelVersionMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionMetricsRequest) ProtoMessage() {}

func (x *GetModelVersionMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{201}
}

func (x *GetModelVersionMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionMetricsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionMetricsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GetModelVersionMetricsRequest) GetFields() *FieldsValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

// GetModelTypeRequest
type GetModelTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use and app combo. Not really used for this endpoint at this time so may go away in future.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The specific ModelType.Id you want to retrieve.
	ModelTypeId string `protobuf:"bytes,2,opt,name=model_type_id,json=modelTypeId,proto3" json:"model_type_id,omitempty"`
}

func (x *GetModelTypeRequest) Reset() {
	*x = GetModelTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTypeRequest) ProtoMessage() {}

func (x *GetModelTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTypeRequest.ProtoReflect.Descriptor instead.
func (*GetModelTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{202}
}

func (x *GetModelTypeRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelTypeRequest) GetModelTypeId() string {
	if x != nil {
		return x.ModelTypeId
	}
	return ""
}

// ListModelTypesRequest
type ListModelTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use and app combo. Not really used for this endpoint at this time so may go away in future.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelTypesRequest) Reset() {
	*x = ListModelTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelTypesRequest) ProtoMessage() {}

func (x *ListModelTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelTypesRequest.ProtoReflect.Descriptor instead.
func (*ListModelTypesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{203}
}

func (x *ListModelTypesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelTypesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelTypesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// ListOpenSourceLicensesRequest
type ListOpenSourceLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListOpenSourceLicensesRequest) Reset() {
	*x = ListOpenSourceLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpenSourceLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenSourceLicensesRequest) ProtoMessage() {}

func (x *ListOpenSourceLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenSourceLicensesRequest.ProtoReflect.Descriptor instead.
func (*ListOpenSourceLicensesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{204}
}

// ListOpenSourceLicensesResponse
type ListOpenSourceLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Licenses []string       `protobuf:"bytes,2,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *ListOpenSourceLicensesResponse) Reset() {
	*x = ListOpenSourceLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpenSourceLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenSourceLicensesResponse) ProtoMessage() {}

func (x *ListOpenSourceLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenSourceLicensesResponse.ProtoReflect.Descriptor instead.
func (*ListOpenSourceLicensesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{205}
}

func (x *ListOpenSourceLicensesResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListOpenSourceLicensesResponse) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

// SingleModelTypeResponse
type SingleModelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the response.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The retrieved ModelType object. .
	ModelType *ModelType `protobuf:"bytes,2,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
}

func (x *SingleModelTypeResponse) Reset() {
	*x = SingleModelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelTypeResponse) ProtoMessage() {}

func (x *SingleModelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelTypeResponse.ProtoReflect.Descriptor instead.
func (*SingleModelTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{206}
}

func (x *SingleModelTypeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelTypeResponse) GetModelType() *ModelType {
	if x != nil {
		return x.ModelType
	}
	return nil
}

// MultiModelTypeResponse
type MultiModelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the response.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of ModelType objects.
	ModelTypes []*ModelType `protobuf:"bytes,2,rep,name=model_types,json=modelTypes,proto3" json:"model_types,omitempty"`
	// List of model importers
	ModelImporters *ModelTypeField `protobuf:"bytes,3,opt,name=model_importers,json=modelImporters,proto3" json:"model_importers,omitempty"`
}

func (x *MultiModelTypeResponse) Reset() {
	*x = MultiModelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelTypeResponse) ProtoMessage() {}

func (x *MultiModelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelTypeResponse.ProtoReflect.Descriptor instead.
func (*MultiModelTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{207}
}

func (x *MultiModelTypeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelTypeResponse) GetModelTypes() []*ModelType {
	if x != nil {
		return x.ModelTypes
	}
	return nil
}

func (x *MultiModelTypeResponse) GetModelImporters() *ModelTypeField {
	if x != nil {
		return x.ModelImporters
	}
	return nil
}

// GetModelVersionInputExampleRequest
type GetModelVersionInputExampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorization field  (contains app/user id info)
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of model the example belongs to
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// specific version the example belongs to
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// Id of example to fetch
	ExampleId string `protobuf:"bytes,4,opt,name=example_id,json=exampleId,proto3" json:"example_id,omitempty"`
}

func (x *GetModelVersionInputExampleRequest) Reset() {
	*x = GetModelVersionInputExampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionInputExampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionInputExampleRequest) ProtoMessage() {}

func (x *GetModelVersionInputExampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionInputExampleRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionInputExampleRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{208}
}

func (x *GetModelVersionInputExampleRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModelVersionInputExampleRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetModelVersionInputExampleRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *GetModelVersionInputExampleRequest) GetExampleId() string {
	if x != nil {
		return x.ExampleId
	}
	return ""
}

// ListModelVersionInputExamplesRequest
type ListModelVersionInputExamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorization field  (contains app/user id info)
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of model the example belongs to
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// specific version the example belongs to
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// Optional, defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Optional, defaults to 128 references per page.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelVersionInputExamplesRequest) Reset() {
	*x = ListModelVersionInputExamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelVersionInputExamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelVersionInputExamplesRequest) ProtoMessage() {}

func (x *ListModelVersionInputExamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelVersionInputExamplesRequest.ProtoReflect.Descriptor instead.
func (*ListModelVersionInputExamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{209}
}

func (x *ListModelVersionInputExamplesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelVersionInputExamplesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelVersionInputExamplesRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *ListModelVersionInputExamplesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelVersionInputExamplesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostModelVersionInputExamplesRequest
type PostModelVersionInputExamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorization field  (contains app/user id info)
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of model the example belongs to
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// specific version the example belongs to
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// examples to add
	ModelVersionInputExamples []*ModelVersionInputExample `protobuf:"bytes,4,rep,name=model_version_input_examples,json=modelVersionInputExamples,proto3" json:"model_version_input_examples,omitempty"`
}

func (x *PostModelVersionInputExamplesRequest) Reset() {
	*x = PostModelVersionInputExamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelVersionInputExamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelVersionInputExamplesRequest) ProtoMessage() {}

func (x *PostModelVersionInputExamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelVersionInputExamplesRequest.ProtoReflect.Descriptor instead.
func (*PostModelVersionInputExamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{210}
}

func (x *PostModelVersionInputExamplesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelVersionInputExamplesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelVersionInputExamplesRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *PostModelVersionInputExamplesRequest) GetModelVersionInputExamples() []*ModelVersionInputExample {
	if x != nil {
		return x.ModelVersionInputExamples
	}
	return nil
}

// DeleteModelVersionInputExamplesRequest
type DeleteModelVersionInputExamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorization field (contains app/user id info)
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of model the example belongs to
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// specific version the example belongs to
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// examples to delete
	ExampleIds []string `protobuf:"bytes,4,rep,name=example_ids,json=exampleIds,proto3" json:"example_ids,omitempty"`
}

func (x *DeleteModelVersionInputExamplesRequest) Reset() {
	*x = DeleteModelVersionInputExamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersionInputExamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersionInputExamplesRequest) ProtoMessage() {}

func (x *DeleteModelVersionInputExamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersionInputExamplesRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelVersionInputExamplesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{211}
}

func (x *DeleteModelVersionInputExamplesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelVersionInputExamplesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *DeleteModelVersionInputExamplesRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *DeleteModelVersionInputExamplesRequest) GetExampleIds() []string {
	if x != nil {
		return x.ExampleIds
	}
	return nil
}

// SingleModelVersionInputExampleResponse
type SingleModelVersionInputExampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status of response
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// model input example message
	ModelVersionInputExample *ModelVersionInputExample `protobuf:"bytes,2,opt,name=model_version_input_example,json=modelVersionInputExample,proto3" json:"model_version_input_example,omitempty"`
}

func (x *SingleModelVersionInputExampleResponse) Reset() {
	*x = SingleModelVersionInputExampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModelVersionInputExampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModelVersionInputExampleResponse) ProtoMessage() {}

func (x *SingleModelVersionInputExampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModelVersionInputExampleResponse.ProtoReflect.Descriptor instead.
func (*SingleModelVersionInputExampleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{212}
}

func (x *SingleModelVersionInputExampleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModelVersionInputExampleResponse) GetModelVersionInputExample() *ModelVersionInputExample {
	if x != nil {
		return x.ModelVersionInputExample
	}
	return nil
}

// MultiModelVersionInputExampleResponse
type MultiModelVersionInputExampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status of response
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// model input example messages
	ModelVersionInputExamples []*ModelVersionInputExample `protobuf:"bytes,2,rep,name=model_version_input_examples,json=modelVersionInputExamples,proto3" json:"model_version_input_examples,omitempty"`
}

func (x *MultiModelVersionInputExampleResponse) Reset() {
	*x = MultiModelVersionInputExampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelVersionInputExampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelVersionInputExampleResponse) ProtoMessage() {}

func (x *MultiModelVersionInputExampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelVersionInputExampleResponse.ProtoReflect.Descriptor instead.
func (*MultiModelVersionInputExampleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{213}
}

func (x *MultiModelVersionInputExampleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelVersionInputExampleResponse) GetModelVersionInputExamples() []*ModelVersionInputExample {
	if x != nil {
		return x.ModelVersionInputExamples
	}
	return nil
}

// ListModelReferencesRequest
type ListModelReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Optional, defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// Optional, defaults to 128 references per page.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModelReferencesRequest) Reset() {
	*x = ListModelReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelReferencesRequest) ProtoMessage() {}

func (x *ListModelReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelReferencesRequest.ProtoReflect.Descriptor instead.
func (*ListModelReferencesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{214}
}

func (x *ListModelReferencesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModelReferencesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListModelReferencesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModelReferencesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostModelReferencesRequest
type PostModelReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// examples to add
	ModelReferences []*ModelReference `protobuf:"bytes,3,rep,name=model_references,json=modelReferences,proto3" json:"model_references,omitempty"`
}

func (x *PostModelReferencesRequest) Reset() {
	*x = PostModelReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelReferencesRequest) ProtoMessage() {}

func (x *PostModelReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelReferencesRequest.ProtoReflect.Descriptor instead.
func (*PostModelReferencesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{215}
}

func (x *PostModelReferencesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelReferencesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PostModelReferencesRequest) GetModelReferences() []*ModelReference {
	if x != nil {
		return x.ModelReferences
	}
	return nil
}

// DeleteModelReferencesRequest
type DeleteModelReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModelId   string        `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// examples to delete
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteModelReferencesRequest) Reset() {
	*x = DeleteModelReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelReferencesRequest) ProtoMessage() {}

func (x *DeleteModelReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelReferencesRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelReferencesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{216}
}

func (x *DeleteModelReferencesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelReferencesRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *DeleteModelReferencesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// MultiModelReferenceResponse
type MultiModelReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModelReferences []*ModelReference `protobuf:"bytes,2,rep,name=model_references,json=modelReferences,proto3" json:"model_references,omitempty"`
}

func (x *MultiModelReferenceResponse) Reset() {
	*x = MultiModelReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelReferenceResponse) ProtoMessage() {}

func (x *MultiModelReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelReferenceResponse.ProtoReflect.Descriptor instead.
func (*MultiModelReferenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{217}
}

func (x *MultiModelReferenceResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelReferenceResponse) GetModelReferences() []*ModelReference {
	if x != nil {
		return x.ModelReferences
	}
	return nil
}

// MultiOutputResponse
type MultiOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Outputs []*Output      `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *MultiOutputResponse) Reset() {
	*x = MultiOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiOutputResponse) ProtoMessage() {}

func (x *MultiOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiOutputResponse.ProtoReflect.Descriptor instead.
func (*MultiOutputResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{218}
}

func (x *MultiOutputResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiOutputResponse) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// ListScopesRequest
type ListScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If "personal_access_token" include scopes and endpoints available to personal access tokens.
	// If "api_key" include scopes and endpoints available to app-specific keys. (default)
	KeyType string `protobuf:"bytes,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	// For all user specific information we include user_app_id to get the user_id in a consistent way
	UserAppId *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListScopesRequest) Reset() {
	*x = ListScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScopesRequest) ProtoMessage() {}

func (x *ListScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScopesRequest.ProtoReflect.Descriptor instead.
func (*ListScopesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{219}
}

func (x *ListScopesRequest) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *ListScopesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MyScopesRequest
type MyScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *MyScopesRequest) Reset() {
	*x = MyScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyScopesRequest) ProtoMessage() {}

func (x *MyScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyScopesRequest.ProtoReflect.Descriptor instead.
func (*MyScopesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{220}
}

func (x *MyScopesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MyScopesUserRequest
type MyScopesUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *MyScopesUserRequest) Reset() {
	*x = MyScopesUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyScopesUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyScopesUserRequest) ProtoMessage() {}

func (x *MyScopesUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyScopesUserRequest.ProtoReflect.Descriptor instead.
func (*MyScopesUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{221}
}

func (x *MyScopesUserRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MyScopesRootRequest
type MyScopesRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MyScopesRootRequest) Reset() {
	*x = MyScopesRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyScopesRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyScopesRootRequest) ProtoMessage() {}

func (x *MyScopesRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyScopesRootRequest.ProtoReflect.Descriptor instead.
func (*MyScopesRootRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{222}
}

// MultiScopeDepsResponse
type MultiScopeDepsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// scopes is a list of low-level scopes and their dependencies.
	ScopeDeps []*ScopeDeps `protobuf:"bytes,2,rep,name=scope_deps,json=scopeDeps,proto3" json:"scope_deps,omitempty"`
	// endpoint_scopes is a listof all the publicly available endponts which can be
	// used as scopes as well. A call to each of those endpoint depends on a subset
	// of the above "scopes"
	EndpointDeps []*EndpointDeps `protobuf:"bytes,3,rep,name=endpoint_deps,json=endpointDeps,proto3" json:"endpoint_deps,omitempty"`
}

func (x *MultiScopeDepsResponse) Reset() {
	*x = MultiScopeDepsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeDepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeDepsResponse) ProtoMessage() {}

func (x *MultiScopeDepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeDepsResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeDepsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{223}
}

func (x *MultiScopeDepsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeDepsResponse) GetScopeDeps() []*ScopeDeps {
	if x != nil {
		return x.ScopeDeps
	}
	return nil
}

func (x *MultiScopeDepsResponse) GetEndpointDeps() []*EndpointDeps {
	if x != nil {
		return x.EndpointDeps
	}
	return nil
}

// MultiScopeResponse
type MultiScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// This is a list of the scopes that your key has.
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// The app that the key has access to.
	App *App `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	// This is a list of endpoint permissions that your key has.
	Endpoints        []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	UserFeatureFlags string   `protobuf:"bytes,5,opt,name=user_feature_flags,json=userFeatureFlags,proto3" json:"user_feature_flags,omitempty"`
}

func (x *MultiScopeResponse) Reset() {
	*x = MultiScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeResponse) ProtoMessage() {}

func (x *MultiScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{224}
}

func (x *MultiScopeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *MultiScopeResponse) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *MultiScopeResponse) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MultiScopeResponse) GetUserFeatureFlags() string {
	if x != nil {
		return x.UserFeatureFlags
	}
	return ""
}

// MultiScopeUserResponse
type MultiScopeUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// This is a list of the scopes that your key has.
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// This is a list of endpoint permissions that your key has.
	Endpoints        []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	UserFeatureFlags string   `protobuf:"bytes,5,opt,name=user_feature_flags,json=userFeatureFlags,proto3" json:"user_feature_flags,omitempty"`
}

func (x *MultiScopeUserResponse) Reset() {
	*x = MultiScopeUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeUserResponse) ProtoMessage() {}

func (x *MultiScopeUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeUserResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{225}
}

func (x *MultiScopeUserResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeUserResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *MultiScopeUserResponse) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MultiScopeUserResponse) GetUserFeatureFlags() string {
	if x != nil {
		return x.UserFeatureFlags
	}
	return ""
}

// MultiScopeRootResponse
type MultiScopeRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// This is a list of the scopes that your key has.
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// This is a list of endpoint permissions that your key has.
	Endpoints        []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	UserFeatureFlags string   `protobuf:"bytes,5,opt,name=user_feature_flags,json=userFeatureFlags,proto3" json:"user_feature_flags,omitempty"`
}

func (x *MultiScopeRootResponse) Reset() {
	*x = MultiScopeRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiScopeRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiScopeRootResponse) ProtoMessage() {}

func (x *MultiScopeRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiScopeRootResponse.ProtoReflect.Descriptor instead.
func (*MultiScopeRootResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{226}
}

func (x *MultiScopeRootResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiScopeRootResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *MultiScopeRootResponse) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MultiScopeRootResponse) GetUserFeatureFlags() string {
	if x != nil {
		return x.UserFeatureFlags
	}
	return ""
}

// GetSearchRequest
type GetSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSearchRequest) Reset() {
	*x = GetSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchRequest) ProtoMessage() {}

func (x *GetSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchRequest.ProtoReflect.Descriptor instead.
func (*GetSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{227}
}

func (x *GetSearchRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetSearchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListSearchesRequest
type ListSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListSearchesRequest) Reset() {
	*x = ListSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSearchesRequest) ProtoMessage() {}

func (x *ListSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSearchesRequest.ProtoReflect.Descriptor instead.
func (*ListSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{228}
}

func (x *ListSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListSearchesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSearchesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostSearchesRequest
type PostSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The query; this specifies how the data to be searched
	// this will be replaced by "Searches"
	//
	// Deprecated: Do not use.
	Query *Query `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The searched to be executed or saved
	// Eventually the request level fields will be deprecated in favor of this object
	Searches []*Search `protobuf:"bytes,3,rep,name=searches,proto3" json:"searches,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostSearchesRequest) Reset() {
	*x = PostSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSearchesRequest) ProtoMessage() {}

func (x *PostSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{229}
}

func (x *PostSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// Deprecated: Do not use.
func (x *PostSearchesRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PostSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PostSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PatchInputsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searches to be patched
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// The action to perform on the patched Search objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchInputsSearchesRequest) Reset() {
	*x = PatchInputsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchInputsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchInputsSearchesRequest) ProtoMessage() {}

func (x *PatchInputsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchInputsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PatchInputsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{230}
}

func (x *PatchInputsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchInputsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PatchInputsSearchesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PatchAnnotationsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searches to be patched
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// The action to perform on the patched Search objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAnnotationsSearchesRequest) Reset() {
	*x = PatchAnnotationsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationsSearchesRequest) ProtoMessage() {}

func (x *PatchAnnotationsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{231}
}

func (x *PatchAnnotationsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PatchAnnotationsSearchesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchSearchesRequest
type PatchSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searches to be patched
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// The action to perform on the patched Search objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchSearchesRequest) Reset() {
	*x = PatchSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchSearchesRequest) ProtoMessage() {}

func (x *PatchSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchSearchesRequest.ProtoReflect.Descriptor instead.
func (*PatchSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{232}
}

func (x *PatchSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PatchSearchesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PostSearchesByIDRequest performs returns results of a saved search given its ID
type PostSearchesByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// ID for saves search to be executed
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostSearchesByIDRequest) Reset() {
	*x = PostSearchesByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSearchesByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSearchesByIDRequest) ProtoMessage() {}

func (x *PostSearchesByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSearchesByIDRequest.ProtoReflect.Descriptor instead.
func (*PostSearchesByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{233}
}

func (x *PostSearchesByIDRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostSearchesByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostSearchesByIDRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// DeleteSearchRequest
type DeleteSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSearchRequest) Reset() {
	*x = DeleteSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSearchRequest) ProtoMessage() {}

func (x *DeleteSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSearchRequest.ProtoReflect.Descriptor instead.
func (*DeleteSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{234}
}

func (x *DeleteSearchRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteSearchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PostAttributeSearchRequest
type PostAttributeSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Pagination *Pagination   `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Perform a brute force search visual search
	BruteForce     bool            `protobuf:"varint,4,opt,name=brute_force,json=bruteForce,proto3" json:"brute_force,omitempty"`
	AttributeQuery *AttributeQuery `protobuf:"bytes,5,opt,name=attribute_query,json=attributeQuery,proto3" json:"attribute_query,omitempty"`
	// Minimum value of confidence threshold score in result.
	// Defaults to 0.0 which means we won't do any thresholding as all probabilities will
	// likely be > 0.0.
	MinValue float32 `protobuf:"fixed32,6,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
}

func (x *PostAttributeSearchRequest) Reset() {
	*x = PostAttributeSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAttributeSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAttributeSearchRequest) ProtoMessage() {}

func (x *PostAttributeSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAttributeSearchRequest.ProtoReflect.Descriptor instead.
func (*PostAttributeSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{235}
}

func (x *PostAttributeSearchRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAttributeSearchRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *PostAttributeSearchRequest) GetBruteForce() bool {
	if x != nil {
		return x.BruteForce
	}
	return false
}

func (x *PostAttributeSearchRequest) GetAttributeQuery() *AttributeQuery {
	if x != nil {
		return x.AttributeQuery
	}
	return nil
}

func (x *PostAttributeSearchRequest) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

// Execute a new annotation search and optionally save it
// annotation search over annotations using rank and filter proto
type PostAnnotationsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searched to be executed or saved
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostAnnotationsSearchesRequest) Reset() {
	*x = PostAnnotationsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationsSearchesRequest) ProtoMessage() {}

func (x *PostAnnotationsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{236}
}

func (x *PostAnnotationsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PostAnnotationsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// DeleteAnnotationSearchMetricsRequest
type DeleteAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAnnotationSearchMetricsRequest) Reset() {
	*x = DeleteAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *DeleteAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{237}
}

func (x *DeleteAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationSearchMetricsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Execute a new input search and optionally save it
type PostInputsSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The searched to be executed or saved
	Searches []*Search `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostInputsSearchesRequest) Reset() {
	*x = PostInputsSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsSearchesRequest) ProtoMessage() {}

func (x *PostInputsSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostInputsSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{238}
}

func (x *PostInputsSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PostInputsSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// SingleSearchResponse returns saved search in response to GetSearchRequest
type SingleSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of whether the search was successful.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Search *Search        `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *SingleSearchResponse) Reset() {
	*x = SingleSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSearchResponse) ProtoMessage() {}

func (x *SingleSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSearchResponse.ProtoReflect.Descriptor instead.
func (*SingleSearchResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{239}
}

func (x *SingleSearchResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleSearchResponse) GetSearch() *Search {
	if x != nil {
		return x.Search
	}
	return nil
}

// MultiSearchResponse
type MultiSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of whether the search was successful.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// A unique id which uniquely identifies a search
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The list of search result Hits.
	Hits []*Hit `protobuf:"bytes,3,rep,name=hits,proto3" json:"hits,omitempty"`
	// The original query provided in the request.
	Query *Query `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	// The original Searches provided in the request.
	Searches []*Search `protobuf:"bytes,5,rep,name=searches,proto3" json:"searches,omitempty"`
}

func (x *MultiSearchResponse) Reset() {
	*x = MultiSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSearchResponse) ProtoMessage() {}

func (x *MultiSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSearchResponse.ProtoReflect.Descriptor instead.
func (*MultiSearchResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{240}
}

func (x *MultiSearchResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiSearchResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultiSearchResponse) GetHits() []*Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *MultiSearchResponse) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *MultiSearchResponse) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

// PostAnnotationSearchMetricsRequest
type PostAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// A unique customer facing id to identify this eval request
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The ground truth we are evaluating against
	GroundTruth *Search `protobuf:"bytes,3,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"`
	// The set we are evaluating
	SearchToEval *Search `protobuf:"bytes,4,opt,name=search_to_eval,json=searchToEval,proto3" json:"search_to_eval,omitempty"`
	// List of concepts to evaluate are expected to be in data.concepts
	// If nil, then all app concepts are used
	Data *Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// The type of evaluation to use
	EvaluationType EvaluationType `protobuf:"varint,6,opt,name=evaluation_type,json=evaluationType,proto3,enum=clarifai.api.EvaluationType" json:"evaluation_type,omitempty"`
}

func (x *PostAnnotationSearchMetricsRequest) Reset() {
	*x = PostAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *PostAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{241}
}

func (x *PostAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostAnnotationSearchMetricsRequest) GetGroundTruth() *Search {
	if x != nil {
		return x.GroundTruth
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetSearchToEval() *Search {
	if x != nil {
		return x.SearchToEval
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PostAnnotationSearchMetricsRequest) GetEvaluationType() EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return EvaluationType_Classification
}

// GetAnnotationSearchMetricsRequest
type GetAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Unique custom facing id that identifies the eval to get
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAnnotationSearchMetricsRequest) Reset() {
	*x = GetAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *GetAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{242}
}

func (x *GetAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAnnotationSearchMetricsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListAnnotationSearchMetricsRequest
type ListAnnotationSearchMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListAnnotationSearchMetricsRequest) Reset() {
	*x = ListAnnotationSearchMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationSearchMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationSearchMetricsRequest) ProtoMessage() {}

func (x *ListAnnotationSearchMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationSearchMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationSearchMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{243}
}

func (x *ListAnnotationSearchMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MultiAnnotationSearchMetricsResponse
type MultiAnnotationSearchMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the request
	Status                  *status.Status             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AnnotationSearchMetrics []*AnnotationSearchMetrics `protobuf:"bytes,2,rep,name=annotation_search_metrics,json=annotationSearchMetrics,proto3" json:"annotation_search_metrics,omitempty"`
}

func (x *MultiAnnotationSearchMetricsResponse) Reset() {
	*x = MultiAnnotationSearchMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnnotationSearchMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnnotationSearchMetricsResponse) ProtoMessage() {}

func (x *MultiAnnotationSearchMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnnotationSearchMetricsResponse.ProtoReflect.Descriptor instead.
func (*MultiAnnotationSearchMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{244}
}

func (x *MultiAnnotationSearchMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAnnotationSearchMetricsResponse) GetAnnotationSearchMetrics() []*AnnotationSearchMetrics {
	if x != nil {
		return x.AnnotationSearchMetrics
	}
	return nil
}

// ListAnnotationFiltersRequest
type ListAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListAnnotationFiltersRequest) Reset() {
	*x = ListAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationFiltersRequest) ProtoMessage() {}

func (x *ListAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{245}
}

func (x *ListAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAnnotationFiltersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnnotationFiltersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetAnnotationFilterRequest
type GetAnnotationFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify annotation filter by id.
	AnnotationFilterId string `protobuf:"bytes,2,opt,name=annotation_filter_id,json=annotationFilterId,proto3" json:"annotation_filter_id,omitempty"`
}

func (x *GetAnnotationFilterRequest) Reset() {
	*x = GetAnnotationFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnnotationFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnnotationFilterRequest) ProtoMessage() {}

func (x *GetAnnotationFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnnotationFilterRequest.ProtoReflect.Descriptor instead.
func (*GetAnnotationFilterRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{246}
}

func (x *GetAnnotationFilterRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAnnotationFilterRequest) GetAnnotationFilterId() string {
	if x != nil {
		return x.AnnotationFilterId
	}
	return ""
}

// Request to add one or more annotation filters.
type PostAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of annotation filters that are requested to be added.
	AnnotationFilters []*AnnotationFilter `protobuf:"bytes,2,rep,name=annotation_filters,json=annotationFilters,proto3" json:"annotation_filters,omitempty"`
}

func (x *PostAnnotationFiltersRequest) Reset() {
	*x = PostAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnnotationFiltersRequest) ProtoMessage() {}

func (x *PostAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*PostAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{247}
}

func (x *PostAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAnnotationFiltersRequest) GetAnnotationFilters() []*AnnotationFilter {
	if x != nil {
		return x.AnnotationFilters
	}
	return nil
}

// Request to patch several annotation filters.
type PatchAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of annotation filters that are requested to be updated.
	AnnotationFilters []*AnnotationFilter `protobuf:"bytes,2,rep,name=annotation_filters,json=annotationFilters,proto3" json:"annotation_filters,omitempty"`
	// The action to perform on the patched objects
	// For now, only 'overwrite' action is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchAnnotationFiltersRequest) Reset() {
	*x = PatchAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationFiltersRequest) ProtoMessage() {}

func (x *PatchAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{248}
}

func (x *PatchAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationFiltersRequest) GetAnnotationFilters() []*AnnotationFilter {
	if x != nil {
		return x.AnnotationFilters
	}
	return nil
}

func (x *PatchAnnotationFiltersRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several annotation filters by list of ids.
type DeleteAnnotationFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Specify which filters to delete.
	AnnotationFilterIds []string `protobuf:"bytes,2,rep,name=annotation_filter_ids,json=annotationFilterIds,proto3" json:"annotation_filter_ids,omitempty"`
}

func (x *DeleteAnnotationFiltersRequest) Reset() {
	*x = DeleteAnnotationFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationFiltersRequest) ProtoMessage() {}

func (x *DeleteAnnotationFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationFiltersRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationFiltersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{249}
}

func (x *DeleteAnnotationFiltersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAnnotationFiltersRequest) GetAnnotationFilterIds() []string {
	if x != nil {
		return x.AnnotationFilterIds
	}
	return nil
}

// MultiAnnotationFilterResponse
type MultiAnnotationFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AnnotationFilters []*AnnotationFilter `protobuf:"bytes,2,rep,name=annotation_filters,json=annotationFilters,proto3" json:"annotation_filters,omitempty"`
}

func (x *MultiAnnotationFilterResponse) Reset() {
	*x = MultiAnnotationFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnnotationFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnnotationFilterResponse) ProtoMessage() {}

func (x *MultiAnnotationFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnnotationFilterResponse.ProtoReflect.Descriptor instead.
func (*MultiAnnotationFilterResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{250}
}

func (x *MultiAnnotationFilterResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAnnotationFilterResponse) GetAnnotationFilters() []*AnnotationFilter {
	if x != nil {
		return x.AnnotationFilters
	}
	return nil
}

// SingleAnnotationFilterResponse
type SingleAnnotationFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AnnotationFilter *AnnotationFilter `protobuf:"bytes,2,opt,name=annotation_filter,json=annotationFilter,proto3" json:"annotation_filter,omitempty"`
}

func (x *SingleAnnotationFilterResponse) Reset() {
	*x = SingleAnnotationFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAnnotationFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAnnotationFilterResponse) ProtoMessage() {}

func (x *SingleAnnotationFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAnnotationFilterResponse.ProtoReflect.Descriptor instead.
func (*SingleAnnotationFilterResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{251}
}

func (x *SingleAnnotationFilterResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAnnotationFilterResponse) GetAnnotationFilter() *AnnotationFilter {
	if x != nil {
		return x.AnnotationFilter
	}
	return nil
}

// ListClustersRequest returns a page of clusters sorted but their count in the app along with some
// statistics on usage of each cluster.
// Note each annotation is assigned to a cluster by a cluster model.
// It also retruns the most recent annotation for each cluster a representative for that cluster.
type ListClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// restrict listing to these cluster ids
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// number of annotations per cluster returned
	AnnotationsPerCluster uint32 `protobuf:"varint,5,opt,name=annotations_per_cluster,json=annotationsPerCluster,proto3" json:"annotations_per_cluster,omitempty"`
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{252}
}

func (x *ListClustersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListClustersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListClustersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListClustersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListClustersRequest) GetAnnotationsPerCluster() uint32 {
	if x != nil {
		return x.AnnotationsPerCluster
	}
	return 0
}

// ListAnnotationsForClusterRequest returns a page of annotations sorted by created_at timestamp for a cluster
type ListAnnotationsForClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Cluster ID to get annotations for
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListAnnotationsForClusterRequest) Reset() {
	*x = ListAnnotationsForClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationsForClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationsForClusterRequest) ProtoMessage() {}

func (x *ListAnnotationsForClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationsForClusterRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationsForClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{253}
}

func (x *ListAnnotationsForClusterRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAnnotationsForClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListAnnotationsForClusterRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAnnotationsForClusterRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostClustersSearchesRequest
type PostClustersSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id to query from.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Searches  []*Search     `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	// Pagination information to paginate through search result Hits.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PostClustersSearchesRequest) Reset() {
	*x = PostClustersSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostClustersSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostClustersSearchesRequest) ProtoMessage() {}

func (x *PostClustersSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostClustersSearchesRequest.ProtoReflect.Descriptor instead.
func (*PostClustersSearchesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{254}
}

func (x *PostClustersSearchesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostClustersSearchesRequest) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *PostClustersSearchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// MultiClusterResponse
type MultiClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Cluster statistics and represetatives
	Clusters []*Cluster `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// The original Search provided in the request (if any).
	Searches []*Search `protobuf:"bytes,3,rep,name=searches,proto3" json:"searches,omitempty"`
}

func (x *MultiClusterResponse) Reset() {
	*x = MultiClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiClusterResponse) ProtoMessage() {}

func (x *MultiClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiClusterResponse.ProtoReflect.Descriptor instead.
func (*MultiClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{255}
}

func (x *MultiClusterResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiClusterResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *MultiClusterResponse) GetSearches() []*Search {
	if x != nil {
		return x.Searches
	}
	return nil
}

// Gets a the current subscription based on your session token.
type GetSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the user_id. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{256}
}

func (x *GetSubscriptionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostSubscriptionRequest
type PostSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignupCode string `protobuf:"bytes,1,opt,name=signup_code,json=signupCode,proto3" json:"signup_code,omitempty"`
	Plan       *Plan  `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	// Contains the user_id. Has to match the caller.
	UserAppId *UserAppIDSet `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostSubscriptionRequest) Reset() {
	*x = PostSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSubscriptionRequest) ProtoMessage() {}

func (x *PostSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*PostSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{257}
}

func (x *PostSubscriptionRequest) GetSignupCode() string {
	if x != nil {
		return x.SignupCode
	}
	return ""
}

func (x *PostSubscriptionRequest) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *PostSubscriptionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// SingleSubscriptionResponse
type SingleSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Plan       *Plan          `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	SignupCode string         `protobuf:"bytes,3,opt,name=signup_code,json=signupCode,proto3" json:"signup_code,omitempty"`
}

func (x *SingleSubscriptionResponse) Reset() {
	*x = SingleSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSubscriptionResponse) ProtoMessage() {}

func (x *SingleSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SingleSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{258}
}

func (x *SingleSubscriptionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleSubscriptionResponse) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *SingleSubscriptionResponse) GetSignupCode() string {
	if x != nil {
		return x.SignupCode
	}
	return ""
}

// ListCreditCardsRequest
type ListCreditCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListCreditCardsRequest) Reset() {
	*x = ListCreditCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCreditCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditCardsRequest) ProtoMessage() {}

func (x *ListCreditCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditCardsRequest.ProtoReflect.Descriptor instead.
func (*ListCreditCardsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{259}
}

func (x *ListCreditCardsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MultipleCreditCardResponse
type MultipleCreditCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cards  []*CreditCard  `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *MultipleCreditCardResponse) Reset() {
	*x = MultipleCreditCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleCreditCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleCreditCardResponse) ProtoMessage() {}

func (x *MultipleCreditCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleCreditCardResponse.ProtoReflect.Descriptor instead.
func (*MultipleCreditCardResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{260}
}

func (x *MultipleCreditCardResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultipleCreditCardResponse) GetCards() []*CreditCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

// PostCreditCardRequest
type PostCreditCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Source    string        `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Card      *CreditCard   `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *PostCreditCardRequest) Reset() {
	*x = PostCreditCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCreditCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCreditCardRequest) ProtoMessage() {}

func (x *PostCreditCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCreditCardRequest.ProtoReflect.Descriptor instead.
func (*PostCreditCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{261}
}

func (x *PostCreditCardRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostCreditCardRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PostCreditCardRequest) GetCard() *CreditCard {
	if x != nil {
		return x.Card
	}
	return nil
}

// SingleCreditCardResponse
type SingleCreditCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Card   *CreditCard    `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *SingleCreditCardResponse) Reset() {
	*x = SingleCreditCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleCreditCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleCreditCardResponse) ProtoMessage() {}

func (x *SingleCreditCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleCreditCardResponse.ProtoReflect.Descriptor instead.
func (*SingleCreditCardResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{262}
}

func (x *SingleCreditCardResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleCreditCardResponse) GetCard() *CreditCard {
	if x != nil {
		return x.Card
	}
	return nil
}

// DeleteCreditCardRequest
type DeleteCreditCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Card      *CreditCard   `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *DeleteCreditCardRequest) Reset() {
	*x = DeleteCreditCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCreditCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCreditCardRequest) ProtoMessage() {}

func (x *DeleteCreditCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCreditCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCreditCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{263}
}

func (x *DeleteCreditCardRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteCreditCardRequest) GetCard() *CreditCard {
	if x != nil {
		return x.Card
	}
	return nil
}

// PatchCreditCardsRequest
type PatchCreditCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Cards     []*CreditCard `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	Action    *PatchAction  `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchCreditCardsRequest) Reset() {
	*x = PatchCreditCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCreditCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCreditCardsRequest) ProtoMessage() {}

func (x *PatchCreditCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCreditCardsRequest.ProtoReflect.Descriptor instead.
func (*PatchCreditCardsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{264}
}

func (x *PatchCreditCardsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchCreditCardsRequest) GetCards() []*CreditCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PatchCreditCardsRequest) GetAction() *PatchAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// GetShippingAddressRequest
type GetShippingAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetShippingAddressRequest) Reset() {
	*x = GetShippingAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShippingAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingAddressRequest) ProtoMessage() {}

func (x *GetShippingAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingAddressRequest.ProtoReflect.Descriptor instead.
func (*GetShippingAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{265}
}

func (x *GetShippingAddressRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PutShippingAddressRequest
type PutShippingAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId       *UserAppIDSet    `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ShippingAddress *ShippingAddress `protobuf:"bytes,2,opt,name=shipping_address,json=shippingAddress,proto3" json:"shipping_address,omitempty"`
	Action          *PatchAction     `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PutShippingAddressRequest) Reset() {
	*x = PutShippingAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutShippingAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutShippingAddressRequest) ProtoMessage() {}

func (x *PutShippingAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutShippingAddressRequest.ProtoReflect.Descriptor instead.
func (*PutShippingAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{266}
}

func (x *PutShippingAddressRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutShippingAddressRequest) GetShippingAddress() *ShippingAddress {
	if x != nil {
		return x.ShippingAddress
	}
	return nil
}

func (x *PutShippingAddressRequest) GetAction() *PatchAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// SingleShippingAddressResponse
type SingleShippingAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ShippingAddress *ShippingAddress `protobuf:"bytes,2,opt,name=shipping_address,json=shippingAddress,proto3" json:"shipping_address,omitempty"`
}

func (x *SingleShippingAddressResponse) Reset() {
	*x = SingleShippingAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleShippingAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleShippingAddressResponse) ProtoMessage() {}

func (x *SingleShippingAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleShippingAddressResponse.ProtoReflect.Descriptor instead.
func (*SingleShippingAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{267}
}

func (x *SingleShippingAddressResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleShippingAddressResponse) GetShippingAddress() *ShippingAddress {
	if x != nil {
		return x.ShippingAddress
	}
	return nil
}

// ListPlansRequest
type ListPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListPlansRequest) Reset() {
	*x = ListPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlansRequest) ProtoMessage() {}

func (x *ListPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlansRequest.ProtoReflect.Descriptor instead.
func (*ListPlansRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{268}
}

func (x *ListPlansRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MultiPlanResponse
type MultiPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Plans  []*Plan        `protobuf:"bytes,2,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *MultiPlanResponse) Reset() {
	*x = MultiPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPlanResponse) ProtoMessage() {}

func (x *MultiPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPlanResponse.ProtoReflect.Descriptor instead.
func (*MultiPlanResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{269}
}

func (x *MultiPlanResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiPlanResponse) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

// GetHistoricalUsageRequest - billing 2
type GetHistoricalUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// start date of the historical usage
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// end date of the historical usage
	EndDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// If true, the usage is broken down per app
	// Default to false
	BrokenDownPerApp bool `protobuf:"varint,4,opt,name=broken_down_per_app,json=brokenDownPerApp,proto3" json:"broken_down_per_app,omitempty"`
}

func (x *GetHistoricalUsageRequest) Reset() {
	*x = GetHistoricalUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalUsageRequest) ProtoMessage() {}

func (x *GetHistoricalUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalUsageRequest.ProtoReflect.Descriptor instead.
func (*GetHistoricalUsageRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{270}
}

func (x *GetHistoricalUsageRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetHistoricalUsageRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetHistoricalUsageRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetHistoricalUsageRequest) GetBrokenDownPerApp() bool {
	if x != nil {
		return x.BrokenDownPerApp
	}
	return false
}

// GetHistoricalUsageResponse - billing 2
type GetHistoricalUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Usage  []*OpCountByDate `protobuf:"bytes,2,rep,name=usage,proto3" json:"usage,omitempty"`
}

func (x *GetHistoricalUsageResponse) Reset() {
	*x = GetHistoricalUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalUsageResponse) ProtoMessage() {}

func (x *GetHistoricalUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalUsageResponse.ProtoReflect.Descriptor instead.
func (*GetHistoricalUsageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{271}
}

func (x *GetHistoricalUsageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetHistoricalUsageResponse) GetUsage() []*OpCountByDate {
	if x != nil {
		return x.Usage
	}
	return nil
}

// PostHistoricalUsageRequest - billing 1
type PostHistoricalUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"` // NOTE: add plotting parameters here as we expand the usage-dashboard functionality
}

func (x *PostHistoricalUsageRequest) Reset() {
	*x = PostHistoricalUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostHistoricalUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostHistoricalUsageRequest) ProtoMessage() {}

func (x *PostHistoricalUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostHistoricalUsageRequest.ProtoReflect.Descriptor instead.
func (*PostHistoricalUsageRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{272}
}

func (x *PostHistoricalUsageRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostHistoricalUsageResponse - billing 1
type PostHistoricalUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// in the future, we will also have an optional field for billing cycle:
	Interval *durationpb.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Usage    []*DimensionList     `protobuf:"bytes,3,rep,name=usage,proto3" json:"usage,omitempty"`
}

func (x *PostHistoricalUsageResponse) Reset() {
	*x = PostHistoricalUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostHistoricalUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostHistoricalUsageResponse) ProtoMessage() {}

func (x *PostHistoricalUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostHistoricalUsageResponse.ProtoReflect.Descriptor instead.
func (*PostHistoricalUsageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{273}
}

func (x *PostHistoricalUsageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostHistoricalUsageResponse) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *PostHistoricalUsageResponse) GetUsage() []*DimensionList {
	if x != nil {
		return x.Usage
	}
	return nil
}

// GetRealtimeUsageRequest
type GetRealtimeUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetRealtimeUsageRequest) Reset() {
	*x = GetRealtimeUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRealtimeUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRealtimeUsageRequest) ProtoMessage() {}

func (x *GetRealtimeUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRealtimeUsageRequest.ProtoReflect.Descriptor instead.
func (*GetRealtimeUsageRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{274}
}

func (x *GetRealtimeUsageRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// GetRealtimeUsageResponse
type GetRealtimeUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RealtimeUsage []*RealtimeCount `protobuf:"bytes,4,rep,name=realtime_usage,json=realtimeUsage,proto3" json:"realtime_usage,omitempty"`
}

func (x *GetRealtimeUsageResponse) Reset() {
	*x = GetRealtimeUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRealtimeUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRealtimeUsageResponse) ProtoMessage() {}

func (x *GetRealtimeUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRealtimeUsageResponse.ProtoReflect.Descriptor instead.
func (*GetRealtimeUsageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{275}
}

func (x *GetRealtimeUsageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetRealtimeUsageResponse) GetRealtimeUsage() []*RealtimeCount {
	if x != nil {
		return x.RealtimeUsage
	}
	return nil
}

// ListUsageIntervalsRequest
type ListUsageIntervalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUsageIntervalsRequest) Reset() {
	*x = ListUsageIntervalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsageIntervalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsageIntervalsRequest) ProtoMessage() {}

func (x *ListUsageIntervalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsageIntervalsRequest.ProtoReflect.Descriptor instead.
func (*ListUsageIntervalsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{276}
}

// ListUsageIntervalsResponse
type ListUsageIntervalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UsageIntervals []*UsageInterval `protobuf:"bytes,2,rep,name=usage_intervals,json=usageIntervals,proto3" json:"usage_intervals,omitempty"`
}

func (x *ListUsageIntervalsResponse) Reset() {
	*x = ListUsageIntervalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsageIntervalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsageIntervalsResponse) ProtoMessage() {}

func (x *ListUsageIntervalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsageIntervalsResponse.ProtoReflect.Descriptor instead.
func (*ListUsageIntervalsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{277}
}

func (x *ListUsageIntervalsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListUsageIntervalsResponse) GetUsageIntervals() []*UsageInterval {
	if x != nil {
		return x.UsageIntervals
	}
	return nil
}

// ListUserBillingCyclesRequest - old billing
type ListUserBillingCyclesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListUserBillingCyclesRequest) Reset() {
	*x = ListUserBillingCyclesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserBillingCyclesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserBillingCyclesRequest) ProtoMessage() {}

func (x *ListUserBillingCyclesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserBillingCyclesRequest.ProtoReflect.Descriptor instead.
func (*ListUserBillingCyclesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{278}
}

func (x *ListUserBillingCyclesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListUserBillingCyclesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserBillingCyclesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// ListUserCyclesRequest
type ListUserCyclesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The number of cycles that will be contained in the response
	// Defaults to 12.
	CycleNumber uint32 `protobuf:"varint,2,opt,name=cycle_number,json=cycleNumber,proto3" json:"cycle_number,omitempty"`
	// (optional URL parameter) Get the cycles before and including this date
	// Defaults to now
	BeforeDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=before_date,json=beforeDate,proto3" json:"before_date,omitempty"`
}

func (x *ListUserCyclesRequest) Reset() {
	*x = ListUserCyclesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCyclesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCyclesRequest) ProtoMessage() {}

func (x *ListUserCyclesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCyclesRequest.ProtoReflect.Descriptor instead.
func (*ListUserCyclesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{279}
}

func (x *ListUserCyclesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListUserCyclesRequest) GetCycleNumber() uint32 {
	if x != nil {
		return x.CycleNumber
	}
	return 0
}

func (x *ListUserCyclesRequest) GetBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BeforeDate
	}
	return nil
}

// ListUserBillingCyclesResponse - old billing
type ListUserBillingCyclesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BillingCycles []*BillingCycle `protobuf:"bytes,2,rep,name=billing_cycles,json=billingCycles,proto3" json:"billing_cycles,omitempty"`
}

func (x *ListUserBillingCyclesResponse) Reset() {
	*x = ListUserBillingCyclesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserBillingCyclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserBillingCyclesResponse) ProtoMessage() {}

func (x *ListUserBillingCyclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserBillingCyclesResponse.ProtoReflect.Descriptor instead.
func (*ListUserBillingCyclesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{280}
}

func (x *ListUserBillingCyclesResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListUserBillingCyclesResponse) GetBillingCycles() []*BillingCycle {
	if x != nil {
		return x.BillingCycles
	}
	return nil
}

// ListUserCyclesResponse
type ListUserCyclesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UsageCycles []*UsageCycle  `protobuf:"bytes,2,rep,name=usage_cycles,json=usageCycles,proto3" json:"usage_cycles,omitempty"`
}

func (x *ListUserCyclesResponse) Reset() {
	*x = ListUserCyclesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCyclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCyclesResponse) ProtoMessage() {}

func (x *ListUserCyclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCyclesResponse.ProtoReflect.Descriptor instead.
func (*ListUserCyclesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{281}
}

func (x *ListUserCyclesResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListUserCyclesResponse) GetUsageCycles() []*UsageCycle {
	if x != nil {
		return x.UsageCycles
	}
	return nil
}

// PostUsageRequest
type PostUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId         *UserAppIDSet       `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	EventsCollections []*EventsCollection `protobuf:"bytes,2,rep,name=events_collections,json=eventsCollections,proto3" json:"events_collections,omitempty"`
	PublicKey         string              `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // public key generated in client side
	Signature         []byte              `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PostUsageRequest) Reset() {
	*x = PostUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUsageRequest) ProtoMessage() {}

func (x *PostUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUsageRequest.ProtoReflect.Descriptor instead.
func (*PostUsageRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{282}
}

func (x *PostUsageRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostUsageRequest) GetEventsCollections() []*EventsCollection {
	if x != nil {
		return x.EventsCollections
	}
	return nil
}

func (x *PostUsageRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *PostUsageRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// PostUsageResponse
type PostUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PostUsageResponse) Reset() {
	*x = PostUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUsageResponse) ProtoMessage() {}

func (x *PostUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUsageResponse.ProtoReflect.Descriptor instead.
func (*PostUsageResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{283}
}

func (x *PostUsageResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// GetUserRequest
type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// we used to have user_id but moved to the standard convention. Since this endpoint
	// hasn't been exposed and only used by portal as a url this won't effect anything external.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,2,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{284}
}

func (x *GetUserRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetUserRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// List all the publicly visible users in the platform.
// On the first page the caller user will always be returned in the first result for the page.
type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,4,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//	*ListUsersRequest_SortById
	//	*ListUsersRequest_SortByFirstName
	//	*ListUsersRequest_SortByLastName
	//	*ListUsersRequest_SortByCreatedAt
	SortBy isListUsersRequest_SortBy `protobuf_oneof:"sort_by"`
	// Filtering options:
	// Query various text fields that can contain the words in the query string.
	// These include id, first name and last name.
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// If true, we only return users that are starred by the requesting user
	StarredOnly bool `protobuf:"varint,10,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,9,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{285}
}

func (x *ListUsersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUsersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListUsersRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListUsersRequest) GetSortBy() isListUsersRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListUsersRequest) GetSortById() bool {
	if x, ok := x.GetSortBy().(*ListUsersRequest_SortById); ok {
		return x.SortById
	}
	return false
}

func (x *ListUsersRequest) GetSortByFirstName() bool {
	if x, ok := x.GetSortBy().(*ListUsersRequest_SortByFirstName); ok {
		return x.SortByFirstName
	}
	return false
}

func (x *ListUsersRequest) GetSortByLastName() bool {
	if x, ok := x.GetSortBy().(*ListUsersRequest_SortByLastName); ok {
		return x.SortByLastName
	}
	return false
}

func (x *ListUsersRequest) GetSortByCreatedAt() bool {
	if x, ok := x.GetSortBy().(*ListUsersRequest_SortByCreatedAt); ok {
		return x.SortByCreatedAt
	}
	return false
}

func (x *ListUsersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListUsersRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListUsersRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

type isListUsersRequest_SortBy interface {
	isListUsersRequest_SortBy()
}

type ListUsersRequest_SortById struct {
	// Whether to order by the user ids
	SortById bool `protobuf:"varint,5,opt,name=sort_by_id,json=sortById,proto3,oneof"`
}

type ListUsersRequest_SortByFirstName struct {
	// Whether to order by the user first names
	SortByFirstName bool `protobuf:"varint,6,opt,name=sort_by_first_name,json=sortByFirstName,proto3,oneof"`
}

type ListUsersRequest_SortByLastName struct {
	// Whether to order by the user last names
	SortByLastName bool `protobuf:"varint,7,opt,name=sort_by_last_name,json=sortByLastName,proto3,oneof"`
}

type ListUsersRequest_SortByCreatedAt struct {
	// Whether to order by when the user was created.
	// If neither sort option is set to true, we will sort by created_at.
	SortByCreatedAt bool `protobuf:"varint,8,opt,name=sort_by_created_at,json=sortByCreatedAt,proto3,oneof"`
}

func (*ListUsersRequest_SortById) isListUsersRequest_SortBy() {}

func (*ListUsersRequest_SortByFirstName) isListUsersRequest_SortBy() {}

func (*ListUsersRequest_SortByLastName) isListUsersRequest_SortBy() {}

func (*ListUsersRequest_SortByCreatedAt) isListUsersRequest_SortBy() {}

// PostUserConsentRequest
type PostUserConsentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This can be the special user_id "me" as well.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Consent   bool          `protobuf:"varint,2,opt,name=consent,proto3" json:"consent,omitempty"`
	Fields    []string      `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *PostUserConsentRequest) Reset() {
	*x = PostUserConsentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUserConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUserConsentRequest) ProtoMessage() {}

func (x *PostUserConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUserConsentRequest.ProtoReflect.Descriptor instead.
func (*PostUserConsentRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{286}
}

func (x *PostUserConsentRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostUserConsentRequest) GetConsent() bool {
	if x != nil {
		return x.Consent
	}
	return false
}

func (x *PostUserConsentRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// SingleUserResponse
type SingleUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	User   *User          `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SingleUserResponse) Reset() {
	*x = SingleUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUserResponse) ProtoMessage() {}

func (x *SingleUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUserResponse.ProtoReflect.Descriptor instead.
func (*SingleUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{287}
}

func (x *SingleUserResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// MultiUserResponse
type MultiUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Users  []*User        `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *MultiUserResponse) Reset() {
	*x = MultiUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUserResponse) ProtoMessage() {}

func (x *MultiUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUserResponse.ProtoReflect.Descriptor instead.
func (*MultiUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{288}
}

func (x *MultiUserResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiUserResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// This is how you to patch the user object.
// If info.user_id is set then no other field can be set because it's an expensive and dangerous operation.
// All other top level and nested fields can be set separately together.
type PatchUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provide user id to update.
	// An organization user can update only their own information.
	// An organization admin can update the information of any user in the organization.
	UserAppId *UserAppIDSet `protobuf:"bytes,7,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Request to update user information.
	Info *UserInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// Request to update password
	Pass *UserPassword `protobuf:"bytes,3,opt,name=pass,proto3" json:"pass,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Action   *PatchAction     `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchUserRequest) Reset() {
	*x = PatchUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchUserRequest) ProtoMessage() {}

func (x *PatchUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchUserRequest.ProtoReflect.Descriptor instead.
func (*PatchUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{289}
}

func (x *PatchUserRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchUserRequest) GetInfo() *UserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *PatchUserRequest) GetPass() *UserPassword {
	if x != nil {
		return x.Pass
	}
	return nil
}

func (x *PatchUserRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PatchUserRequest) GetAction() *PatchAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// PostUserAccessRequest
type PostUserAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// User access
	Access []*UserAccess `protobuf:"bytes,2,rep,name=access,proto3" json:"access,omitempty"`
}

func (x *PostUserAccessRequest) Reset() {
	*x = PostUserAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUserAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUserAccessRequest) ProtoMessage() {}

func (x *PostUserAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUserAccessRequest.ProtoReflect.Descriptor instead.
func (*PostUserAccessRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{290}
}

func (x *PostUserAccessRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostUserAccessRequest) GetAccess() []*UserAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

// GetUserAccessRequest
type GetUserAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetUserAccessRequest) Reset() {
	*x = GetUserAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAccessRequest) ProtoMessage() {}

func (x *GetUserAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAccessRequest.ProtoReflect.Descriptor instead.
func (*GetUserAccessRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{291}
}

func (x *GetUserAccessRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MultiUserAccessResponse
type MultiUserAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard clarifai status code
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// User access
	Access []*UserAccess `protobuf:"bytes,2,rep,name=access,proto3" json:"access,omitempty"`
}

func (x *MultiUserAccessResponse) Reset() {
	*x = MultiUserAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUserAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUserAccessResponse) ProtoMessage() {}

func (x *MultiUserAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUserAccessResponse.ProtoReflect.Descriptor instead.
func (*MultiUserAccessResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{292}
}

func (x *MultiUserAccessResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiUserAccessResponse) GetAccess() []*UserAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

// SingleUserAccessResponse
type SingleUserAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard clarifai status code
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// User access
	Access *UserAccess `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *SingleUserAccessResponse) Reset() {
	*x = SingleUserAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUserAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUserAccessResponse) ProtoMessage() {}

func (x *SingleUserAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUserAccessResponse.ProtoReflect.Descriptor instead.
func (*SingleUserAccessResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{293}
}

func (x *SingleUserAccessResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleUserAccessResponse) GetAccess() *UserAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

// PostEmailsRequest
type PostEmailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Emails to add
	Emails []string `protobuf:"bytes,2,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (x *PostEmailsRequest) Reset() {
	*x = PostEmailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostEmailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostEmailsRequest) ProtoMessage() {}

func (x *PostEmailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostEmailsRequest.ProtoReflect.Descriptor instead.
func (*PostEmailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{294}
}

func (x *PostEmailsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostEmailsRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

// SingleEmailResponse
type SingleEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard clarifai status code
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Returns the targeted email.
	Email *EmailAddress `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SingleEmailResponse) Reset() {
	*x = SingleEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEmailResponse) ProtoMessage() {}

func (x *SingleEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEmailResponse.ProtoReflect.Descriptor instead.
func (*SingleEmailResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{295}
}

func (x *SingleEmailResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleEmailResponse) GetEmail() *EmailAddress {
	if x != nil {
		return x.Email
	}
	return nil
}

// MultipleEmailResponse
type MultipleEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard clarifai status code
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Returns the targeted emails.
	Emails []*EmailAddress `protobuf:"bytes,2,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (x *MultipleEmailResponse) Reset() {
	*x = MultipleEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleEmailResponse) ProtoMessage() {}

func (x *MultipleEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleEmailResponse.ProtoReflect.Descriptor instead.
func (*MultipleEmailResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{296}
}

func (x *MultipleEmailResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultipleEmailResponse) GetEmails() []*EmailAddress {
	if x != nil {
		return x.Emails
	}
	return nil
}

// ListEmailsRequest
type ListEmailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListEmailsRequest) Reset() {
	*x = ListEmailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEmailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEmailsRequest) ProtoMessage() {}

func (x *ListEmailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEmailsRequest.ProtoReflect.Descriptor instead.
func (*ListEmailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{297}
}

func (x *ListEmailsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostResendVerifyRequest
type PostResendVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Email to verify
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *PostResendVerifyRequest) Reset() {
	*x = PostResendVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostResendVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostResendVerifyRequest) ProtoMessage() {}

func (x *PostResendVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostResendVerifyRequest.ProtoReflect.Descriptor instead.
func (*PostResendVerifyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{298}
}

func (x *PostResendVerifyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostResendVerifyRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// SingleResendVerifyResponse
type SingleResendVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard clarifai status code
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SingleResendVerifyResponse) Reset() {
	*x = SingleResendVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleResendVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleResendVerifyResponse) ProtoMessage() {}

func (x *SingleResendVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleResendVerifyResponse.ProtoReflect.Descriptor instead.
func (*SingleResendVerifyResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{299}
}

func (x *SingleResendVerifyResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// DeleteEmailRequest
type DeleteEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// email address to delete
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *DeleteEmailRequest) Reset() {
	*x = DeleteEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEmailRequest) ProtoMessage() {}

func (x *DeleteEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEmailRequest.ProtoReflect.Descriptor instead.
func (*DeleteEmailRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{300}
}

func (x *DeleteEmailRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// PostPrimaryEmailRequest
type PostPrimaryEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// email address to set as primary
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *PostPrimaryEmailRequest) Reset() {
	*x = PostPrimaryEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPrimaryEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPrimaryEmailRequest) ProtoMessage() {}

func (x *PostPrimaryEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPrimaryEmailRequest.ProtoReflect.Descriptor instead.
func (*PostPrimaryEmailRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{301}
}

func (x *PostPrimaryEmailRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostPrimaryEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// PostValidatePasswordRequest
type PostValidatePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// password to be validated
	Password *Password `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PostValidatePasswordRequest) Reset() {
	*x = PostValidatePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostValidatePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostValidatePasswordRequest) ProtoMessage() {}

func (x *PostValidatePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostValidatePasswordRequest.ProtoReflect.Descriptor instead.
func (*PostValidatePasswordRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{302}
}

func (x *PostValidatePasswordRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostValidatePasswordRequest) GetPassword() *Password {
	if x != nil {
		return x.Password
	}
	return nil
}

// SinglePasswordValidationResponse
type SinglePasswordValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard clarifai status code
	Status             *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PasswordViolations *PasswordViolations `protobuf:"bytes,2,opt,name=password_violations,json=passwordViolations,proto3" json:"password_violations,omitempty"`
}

func (x *SinglePasswordValidationResponse) Reset() {
	*x = SinglePasswordValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinglePasswordValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinglePasswordValidationResponse) ProtoMessage() {}

func (x *SinglePasswordValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinglePasswordValidationResponse.ProtoReflect.Descriptor instead.
func (*SinglePasswordValidationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{303}
}

func (x *SinglePasswordValidationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SinglePasswordValidationResponse) GetPasswordViolations() *PasswordViolations {
	if x != nil {
		return x.PasswordViolations
	}
	return nil
}

// ListGlobalPasswordPoliciesRequest
type ListGlobalPasswordPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListGlobalPasswordPoliciesRequest) Reset() {
	*x = ListGlobalPasswordPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGlobalPasswordPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGlobalPasswordPoliciesRequest) ProtoMessage() {}

func (x *ListGlobalPasswordPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGlobalPasswordPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListGlobalPasswordPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{304}
}

// ListPasswordPoliciesRequest
type ListPasswordPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The list of target user id.
	// Defaults to empty list
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// (optional URL parameter) The list of target organization id.
	// Defaults to empty list
	OrganizationIds []string `protobuf:"bytes,3,rep,name=organization_ids,json=organizationIds,proto3" json:"organization_ids,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,5,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListPasswordPoliciesRequest) Reset() {
	*x = ListPasswordPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPasswordPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPasswordPoliciesRequest) ProtoMessage() {}

func (x *ListPasswordPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPasswordPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPasswordPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{305}
}

func (x *ListPasswordPoliciesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListPasswordPoliciesRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListPasswordPoliciesRequest) GetOrganizationIds() []string {
	if x != nil {
		return x.OrganizationIds
	}
	return nil
}

func (x *ListPasswordPoliciesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPasswordPoliciesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostPasswordPoliciesRequest
type PostPasswordPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId        *UserAppIDSet     `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	PasswordPolicies []*PasswordPolicy `protobuf:"bytes,2,rep,name=password_policies,json=passwordPolicies,proto3" json:"password_policies,omitempty"`
}

func (x *PostPasswordPoliciesRequest) Reset() {
	*x = PostPasswordPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPasswordPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPasswordPoliciesRequest) ProtoMessage() {}

func (x *PostPasswordPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPasswordPoliciesRequest.ProtoReflect.Descriptor instead.
func (*PostPasswordPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{306}
}

func (x *PostPasswordPoliciesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostPasswordPoliciesRequest) GetPasswordPolicies() []*PasswordPolicy {
	if x != nil {
		return x.PasswordPolicies
	}
	return nil
}

// PatchPasswordPoliciesRequest
type PatchPasswordPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId        *UserAppIDSet     `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	PasswordPolicies []*PasswordPolicy `protobuf:"bytes,2,rep,name=password_policies,json=passwordPolicies,proto3" json:"password_policies,omitempty"`
	// The action to perform on the patched objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchPasswordPoliciesRequest) Reset() {
	*x = PatchPasswordPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchPasswordPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchPasswordPoliciesRequest) ProtoMessage() {}

func (x *PatchPasswordPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchPasswordPoliciesRequest.ProtoReflect.Descriptor instead.
func (*PatchPasswordPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{307}
}

func (x *PatchPasswordPoliciesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchPasswordPoliciesRequest) GetPasswordPolicies() []*PasswordPolicy {
	if x != nil {
		return x.PasswordPolicies
	}
	return nil
}

func (x *PatchPasswordPoliciesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeletePasswordPoliciesRequest
type DeletePasswordPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Request to delete several things by the list of ids.
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeletePasswordPoliciesRequest) Reset() {
	*x = DeletePasswordPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePasswordPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePasswordPoliciesRequest) ProtoMessage() {}

func (x *DeletePasswordPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePasswordPoliciesRequest.ProtoReflect.Descriptor instead.
func (*DeletePasswordPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{308}
}

func (x *DeletePasswordPoliciesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeletePasswordPoliciesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// MultiplePasswordPoliciesResponse
type MultiplePasswordPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PasswordPolicies []*PasswordPolicy `protobuf:"bytes,2,rep,name=password_policies,json=passwordPolicies,proto3" json:"password_policies,omitempty"`
}

func (x *MultiplePasswordPoliciesResponse) Reset() {
	*x = MultiplePasswordPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiplePasswordPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiplePasswordPoliciesResponse) ProtoMessage() {}

func (x *MultiplePasswordPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiplePasswordPoliciesResponse.ProtoReflect.Descriptor instead.
func (*MultiplePasswordPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{309}
}

func (x *MultiplePasswordPoliciesResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiplePasswordPoliciesResponse) GetPasswordPolicies() []*PasswordPolicy {
	if x != nil {
		return x.PasswordPolicies
	}
	return nil
}

// UserFeatureConfigRequest
type UserFeatureConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *UserFeatureConfigRequest) Reset() {
	*x = UserFeatureConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFeatureConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFeatureConfigRequest) ProtoMessage() {}

func (x *UserFeatureConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFeatureConfigRequest.ProtoReflect.Descriptor instead.
func (*UserFeatureConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{310}
}

func (x *UserFeatureConfigRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// SingleUserFeatureConfigResponse
type SingleUserFeatureConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Config string         `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SingleUserFeatureConfigResponse) Reset() {
	*x = SingleUserFeatureConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUserFeatureConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUserFeatureConfigResponse) ProtoMessage() {}

func (x *SingleUserFeatureConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUserFeatureConfigResponse.ProtoReflect.Descriptor instead.
func (*SingleUserFeatureConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{311}
}

func (x *SingleUserFeatureConfigResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleUserFeatureConfigResponse) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

// PostOrganizationsRequest
type PostOrganizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Organizations []*Organization `protobuf:"bytes,2,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *PostOrganizationsRequest) Reset() {
	*x = PostOrganizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrganizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrganizationsRequest) ProtoMessage() {}

func (x *PostOrganizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrganizationsRequest.ProtoReflect.Descriptor instead.
func (*PostOrganizationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{312}
}

func (x *PostOrganizationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostOrganizationsRequest) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// ListOrganizationsRequest
type ListOrganizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListOrganizationsRequest) Reset() {
	*x = ListOrganizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsRequest) ProtoMessage() {}

func (x *ListOrganizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{313}
}

func (x *ListOrganizationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListOrganizationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOrganizationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// ListUsersOrganizationsRequest
type ListUsersOrganizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListUsersOrganizationsRequest) Reset() {
	*x = ListUsersOrganizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersOrganizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersOrganizationsRequest) ProtoMessage() {}

func (x *ListUsersOrganizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersOrganizationsRequest.ProtoReflect.Descriptor instead.
func (*ListUsersOrganizationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{314}
}

func (x *ListUsersOrganizationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListUsersOrganizationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUsersOrganizationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// DeleteRequestingUserFromOrganizationRequest
type DeleteRequestingUserFromOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *DeleteRequestingUserFromOrganizationRequest) Reset() {
	*x = DeleteRequestingUserFromOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequestingUserFromOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequestingUserFromOrganizationRequest) ProtoMessage() {}

func (x *DeleteRequestingUserFromOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequestingUserFromOrganizationRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequestingUserFromOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{315}
}

func (x *DeleteRequestingUserFromOrganizationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostAcceptOrganizationInvitationRequest
type PostAcceptOrganizationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user_id you're calling with.
	UserAppId *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostAcceptOrganizationInvitationRequest) Reset() {
	*x = PostAcceptOrganizationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAcceptOrganizationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAcceptOrganizationInvitationRequest) ProtoMessage() {}

func (x *PostAcceptOrganizationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAcceptOrganizationInvitationRequest.ProtoReflect.Descriptor instead.
func (*PostAcceptOrganizationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{316}
}

func (x *PostAcceptOrganizationInvitationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostAcceptOrganizationInvitationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostDeclineOrganizationInvitationRequest
type PostDeclineOrganizationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user_id you're calling with.
	UserAppId *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostDeclineOrganizationInvitationRequest) Reset() {
	*x = PostDeclineOrganizationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostDeclineOrganizationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDeclineOrganizationInvitationRequest) ProtoMessage() {}

func (x *PostDeclineOrganizationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDeclineOrganizationInvitationRequest.ProtoReflect.Descriptor instead.
func (*PostDeclineOrganizationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{317}
}

func (x *PostDeclineOrganizationInvitationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostDeclineOrganizationInvitationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// GetOrganizationRequest
type GetOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetOrganizationRequest) Reset() {
	*x = GetOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationRequest) ProtoMessage() {}

func (x *GetOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{318}
}

func (x *GetOrganizationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PatchOrganizationRequest
type PatchOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array that has exactly one organization for patching
	Organizations []*Organization `protobuf:"bytes,2,rep,name=organizations,proto3" json:"organizations,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchOrganizationRequest) Reset() {
	*x = PatchOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationRequest) ProtoMessage() {}

func (x *PatchOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{319}
}

func (x *PatchOrganizationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchOrganizationRequest) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *PatchOrganizationRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteOrganizationRequest
type DeleteOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *DeleteOrganizationRequest) Reset() {
	*x = DeleteOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationRequest) ProtoMessage() {}

func (x *DeleteOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{320}
}

func (x *DeleteOrganizationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// SingleOrganizationResponse
type SingleOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Organization *Organization  `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *SingleOrganizationResponse) Reset() {
	*x = SingleOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleOrganizationResponse) ProtoMessage() {}

func (x *SingleOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleOrganizationResponse.ProtoReflect.Descriptor instead.
func (*SingleOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{321}
}

func (x *SingleOrganizationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleOrganizationResponse) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

// MultiOrganizationResponse
type MultiOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Organizations []*Organization `protobuf:"bytes,2,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *MultiOrganizationResponse) Reset() {
	*x = MultiOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiOrganizationResponse) ProtoMessage() {}

func (x *MultiOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiOrganizationResponse.ProtoReflect.Descriptor instead.
func (*MultiOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{322}
}

func (x *MultiOrganizationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiOrganizationResponse) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// MultiUsersOrganizationsResponse
type MultiUsersOrganizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status                                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Organizations []*MultiUsersOrganizationsResponse_UserOrganization `protobuf:"bytes,2,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *MultiUsersOrganizationsResponse) Reset() {
	*x = MultiUsersOrganizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUsersOrganizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUsersOrganizationsResponse) ProtoMessage() {}

func (x *MultiUsersOrganizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUsersOrganizationsResponse.ProtoReflect.Descriptor instead.
func (*MultiUsersOrganizationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{323}
}

func (x *MultiUsersOrganizationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiUsersOrganizationsResponse) GetOrganizations() []*MultiUsersOrganizationsResponse_UserOrganization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// ListOrganizationAppMembersRequest
type ListOrganizationAppMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId      *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	RequiredScopes []scope.S     `protobuf:"varint,2,rep,packed,name=required_scopes,json=requiredScopes,proto3,enum=clarifai.auth.scope.S" json:"required_scopes,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListOrganizationAppMembersRequest) Reset() {
	*x = ListOrganizationAppMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationAppMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationAppMembersRequest) ProtoMessage() {}

func (x *ListOrganizationAppMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationAppMembersRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationAppMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{324}
}

func (x *ListOrganizationAppMembersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListOrganizationAppMembersRequest) GetRequiredScopes() []scope.S {
	if x != nil {
		return x.RequiredScopes
	}
	return nil
}

func (x *ListOrganizationAppMembersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOrganizationAppMembersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// ListOrganizationMembersRequest
type ListOrganizationMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListOrganizationMembersRequest) Reset() {
	*x = ListOrganizationMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationMembersRequest) ProtoMessage() {}

func (x *ListOrganizationMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationMembersRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{325}
}

func (x *ListOrganizationMembersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListOrganizationMembersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOrganizationMembersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostOrganizationInvitationsRequest
type PostOrganizationInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet             `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Invitations []*OrganizationInvitation `protobuf:"bytes,2,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *PostOrganizationInvitationsRequest) Reset() {
	*x = PostOrganizationInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrganizationInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrganizationInvitationsRequest) ProtoMessage() {}

func (x *PostOrganizationInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrganizationInvitationsRequest.ProtoReflect.Descriptor instead.
func (*PostOrganizationInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{326}
}

func (x *PostOrganizationInvitationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostOrganizationInvitationsRequest) GetInvitations() []*OrganizationInvitation {
	if x != nil {
		return x.Invitations
	}
	return nil
}

// PatchOrganizationInvitationsRequest
type PatchOrganizationInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet             `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Action      string                    `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Invitations []*OrganizationInvitation `protobuf:"bytes,3,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *PatchOrganizationInvitationsRequest) Reset() {
	*x = PatchOrganizationInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationInvitationsRequest) ProtoMessage() {}

func (x *PatchOrganizationInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationInvitationsRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{327}
}

func (x *PatchOrganizationInvitationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchOrganizationInvitationsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchOrganizationInvitationsRequest) GetInvitations() []*OrganizationInvitation {
	if x != nil {
		return x.Invitations
	}
	return nil
}

// ListOrganizationInvitationsRequest
type ListOrganizationInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32                       `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Status  OrganizationInvitationStatus `protobuf:"varint,4,opt,name=status,proto3,enum=clarifai.api.OrganizationInvitationStatus" json:"status,omitempty"`
}

func (x *ListOrganizationInvitationsRequest) Reset() {
	*x = ListOrganizationInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationInvitationsRequest) ProtoMessage() {}

func (x *ListOrganizationInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationInvitationsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{328}
}

func (x *ListOrganizationInvitationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListOrganizationInvitationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOrganizationInvitationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListOrganizationInvitationsRequest) GetStatus() OrganizationInvitationStatus {
	if x != nil {
		return x.Status
	}
	return OrganizationInvitationStatus_NOT_SET
}

// GetOrganizationInvitationRequest
type GetOrganizationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrganizationInvitationRequest) Reset() {
	*x = GetOrganizationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInvitationRequest) ProtoMessage() {}

func (x *GetOrganizationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{329}
}

func (x *GetOrganizationInvitationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetOrganizationInvitationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetOrganizationInvitationPublicRequest
type GetOrganizationInvitationPublicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrganizationInvitationPublicRequest) Reset() {
	*x = GetOrganizationInvitationPublicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationInvitationPublicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationInvitationPublicRequest) ProtoMessage() {}

func (x *GetOrganizationInvitationPublicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationInvitationPublicRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationInvitationPublicRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{330}
}

func (x *GetOrganizationInvitationPublicRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// SingleOrganizationInvitationResponse
type SingleOrganizationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Invitation *OrganizationInvitation `protobuf:"bytes,2,opt,name=invitation,proto3" json:"invitation,omitempty"`
}

func (x *SingleOrganizationInvitationResponse) Reset() {
	*x = SingleOrganizationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleOrganizationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleOrganizationInvitationResponse) ProtoMessage() {}

func (x *SingleOrganizationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleOrganizationInvitationResponse.ProtoReflect.Descriptor instead.
func (*SingleOrganizationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{331}
}

func (x *SingleOrganizationInvitationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleOrganizationInvitationResponse) GetInvitation() *OrganizationInvitation {
	if x != nil {
		return x.Invitation
	}
	return nil
}

// MultiOrganizationInvitationResponse
type MultiOrganizationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Invitations []*OrganizationInvitation `protobuf:"bytes,2,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *MultiOrganizationInvitationResponse) Reset() {
	*x = MultiOrganizationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiOrganizationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiOrganizationInvitationResponse) ProtoMessage() {}

func (x *MultiOrganizationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiOrganizationInvitationResponse.ProtoReflect.Descriptor instead.
func (*MultiOrganizationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{332}
}

func (x *MultiOrganizationInvitationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiOrganizationInvitationResponse) GetInvitations() []*OrganizationInvitation {
	if x != nil {
		return x.Invitations
	}
	return nil
}

// PatchOrganizationMembersRequest
type PatchOrganizationMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The action to perform on the patched objects
	// For now, only action 'overwrite' is supported
	Action              string                                                     `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	OrganizationMembers []*PatchOrganizationMembersRequest_PatchOrganizationMember `protobuf:"bytes,3,rep,name=organization_members,json=organizationMembers,proto3" json:"organization_members,omitempty"`
}

func (x *PatchOrganizationMembersRequest) Reset() {
	*x = PatchOrganizationMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationMembersRequest) ProtoMessage() {}

func (x *PatchOrganizationMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationMembersRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{333}
}

func (x *PatchOrganizationMembersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchOrganizationMembersRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchOrganizationMembersRequest) GetOrganizationMembers() []*PatchOrganizationMembersRequest_PatchOrganizationMember {
	if x != nil {
		return x.OrganizationMembers
	}
	return nil
}

// PostOrganizationMemberRequest
type PostOrganizationMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	MemberId  string        `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	RoleId    string        `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *PostOrganizationMemberRequest) Reset() {
	*x = PostOrganizationMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrganizationMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrganizationMemberRequest) ProtoMessage() {}

func (x *PostOrganizationMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrganizationMemberRequest.ProtoReflect.Descriptor instead.
func (*PostOrganizationMemberRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{334}
}

func (x *PostOrganizationMemberRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostOrganizationMemberRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *PostOrganizationMemberRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

// DeleteOrganizationMemberRequest
type DeleteOrganizationMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	MemberId  string        `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *DeleteOrganizationMemberRequest) Reset() {
	*x = DeleteOrganizationMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationMemberRequest) ProtoMessage() {}

func (x *DeleteOrganizationMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationMemberRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationMemberRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{335}
}

func (x *DeleteOrganizationMemberRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteOrganizationMemberRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

// MultiOrganizationMemberResponse
type MultiOrganizationMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *status.Status        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OrganizationMembers []*OrganizationMember `protobuf:"bytes,2,rep,name=organization_members,json=organizationMembers,proto3" json:"organization_members,omitempty"`
}

func (x *MultiOrganizationMemberResponse) Reset() {
	*x = MultiOrganizationMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiOrganizationMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiOrganizationMemberResponse) ProtoMessage() {}

func (x *MultiOrganizationMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiOrganizationMemberResponse.ProtoReflect.Descriptor instead.
func (*MultiOrganizationMemberResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{336}
}

func (x *MultiOrganizationMemberResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiOrganizationMemberResponse) GetOrganizationMembers() []*OrganizationMember {
	if x != nil {
		return x.OrganizationMembers
	}
	return nil
}

// PostIdentityProvidersRequest
type PostIdentityProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityProviders []*IdentityProvider `protobuf:"bytes,1,rep,name=identity_providers,json=identityProviders,proto3" json:"identity_providers,omitempty"`
	UserAppId         *UserAppIDSet       `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostIdentityProvidersRequest) Reset() {
	*x = PostIdentityProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostIdentityProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostIdentityProvidersRequest) ProtoMessage() {}

func (x *PostIdentityProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostIdentityProvidersRequest.ProtoReflect.Descriptor instead.
func (*PostIdentityProvidersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{337}
}

func (x *PostIdentityProvidersRequest) GetIdentityProviders() []*IdentityProvider {
	if x != nil {
		return x.IdentityProviders
	}
	return nil
}

func (x *PostIdentityProvidersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// ListIdentityProvidersRequest
type ListIdentityProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage   uint32        `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListIdentityProvidersRequest) Reset() {
	*x = ListIdentityProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIdentityProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentityProvidersRequest) ProtoMessage() {}

func (x *ListIdentityProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentityProvidersRequest.ProtoReflect.Descriptor instead.
func (*ListIdentityProvidersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{338}
}

func (x *ListIdentityProvidersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListIdentityProvidersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListIdentityProvidersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// GetIdentityProviderRequest
type GetIdentityProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *GetIdentityProviderRequest) Reset() {
	*x = GetIdentityProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentityProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityProviderRequest) ProtoMessage() {}

func (x *GetIdentityProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityProviderRequest.ProtoReflect.Descriptor instead.
func (*GetIdentityProviderRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{339}
}

func (x *GetIdentityProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetIdentityProviderRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PatchIdentityProvidersRequest
type PatchIdentityProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityProviders []*IdentityProvider `protobuf:"bytes,1,rep,name=identity_providers,json=identityProviders,proto3" json:"identity_providers,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action    string        `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,4,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PatchIdentityProvidersRequest) Reset() {
	*x = PatchIdentityProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchIdentityProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchIdentityProvidersRequest) ProtoMessage() {}

func (x *PatchIdentityProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchIdentityProvidersRequest.ProtoReflect.Descriptor instead.
func (*PatchIdentityProvidersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{340}
}

func (x *PatchIdentityProvidersRequest) GetIdentityProviders() []*IdentityProvider {
	if x != nil {
		return x.IdentityProviders
	}
	return nil
}

func (x *PatchIdentityProvidersRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchIdentityProvidersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// DeleteIdentityProvidersRequest
type DeleteIdentityProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteIdentityProvidersRequest) Reset() {
	*x = DeleteIdentityProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdentityProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentityProvidersRequest) ProtoMessage() {}

func (x *DeleteIdentityProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentityProvidersRequest.ProtoReflect.Descriptor instead.
func (*DeleteIdentityProvidersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{341}
}

func (x *DeleteIdentityProvidersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteIdentityProvidersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleIdentityProviderResponse
type SingleIdentityProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IdentityProvider *IdentityProvider `protobuf:"bytes,2,opt,name=identity_provider,json=identityProvider,proto3" json:"identity_provider,omitempty"`
}

func (x *SingleIdentityProviderResponse) Reset() {
	*x = SingleIdentityProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleIdentityProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleIdentityProviderResponse) ProtoMessage() {}

func (x *SingleIdentityProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleIdentityProviderResponse.ProtoReflect.Descriptor instead.
func (*SingleIdentityProviderResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{342}
}

func (x *SingleIdentityProviderResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleIdentityProviderResponse) GetIdentityProvider() *IdentityProvider {
	if x != nil {
		return x.IdentityProvider
	}
	return nil
}

// MultiIdentityProviderResponse
type MultiIdentityProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IdentityProviders []*IdentityProvider `protobuf:"bytes,2,rep,name=identity_providers,json=identityProviders,proto3" json:"identity_providers,omitempty"`
}

func (x *MultiIdentityProviderResponse) Reset() {
	*x = MultiIdentityProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiIdentityProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiIdentityProviderResponse) ProtoMessage() {}

func (x *MultiIdentityProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiIdentityProviderResponse.ProtoReflect.Descriptor instead.
func (*MultiIdentityProviderResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{343}
}

func (x *MultiIdentityProviderResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiIdentityProviderResponse) GetIdentityProviders() []*IdentityProvider {
	if x != nil {
		return x.IdentityProviders
	}
	return nil
}

// PostTeamsRequest
type PostTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams     []*PostTeamsRequest_PostTeam `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	UserAppId *UserAppIDSet                `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostTeamsRequest) Reset() {
	*x = PostTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTeamsRequest) ProtoMessage() {}

func (x *PostTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTeamsRequest.ProtoReflect.Descriptor instead.
func (*PostTeamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{344}
}

func (x *PostTeamsRequest) GetTeams() []*PostTeamsRequest_PostTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *PostTeamsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// ListTeamsRequest
type ListTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Provide a search query to filter teams by name and id.
	// This supports wildcard queries.
	//   For example, the value "*foo*" will match any team whose name or id contains "foo".
	// The search is case-insensitive.
	Query     string        `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,4,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListTeamsRequest) Reset() {
	*x = ListTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsRequest) ProtoMessage() {}

func (x *ListTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamsRequest.ProtoReflect.Descriptor instead.
func (*ListTeamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{345}
}

func (x *ListTeamsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTeamsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListTeamsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListTeamsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// GetTeamRequest
type GetTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamRequest.ProtoReflect.Descriptor instead.
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{346}
}

func (x *GetTeamRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetTeamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PatchTeamsRequest
type PatchTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action    string        `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PatchTeamsRequest) Reset() {
	*x = PatchTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTeamsRequest) ProtoMessage() {}

func (x *PatchTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTeamsRequest.ProtoReflect.Descriptor instead.
func (*PatchTeamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{347}
}

func (x *PatchTeamsRequest) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *PatchTeamsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PatchTeamsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// DeleteTeamsRequest
type DeleteTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string      `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,2,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *DeleteTeamsRequest) Reset() {
	*x = DeleteTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamsRequest) ProtoMessage() {}

func (x *DeleteTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamsRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{348}
}

func (x *DeleteTeamsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteTeamsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// SingleTeamResponse
type SingleTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Team   *Team          `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *SingleTeamResponse) Reset() {
	*x = SingleTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTeamResponse) ProtoMessage() {}

func (x *SingleTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTeamResponse.ProtoReflect.Descriptor instead.
func (*SingleTeamResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{349}
}

func (x *SingleTeamResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleTeamResponse) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

// MultiTeamResponse
type MultiTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Teams  []*Team        `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *MultiTeamResponse) Reset() {
	*x = MultiTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTeamResponse) ProtoMessage() {}

func (x *MultiTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTeamResponse.ProtoReflect.Descriptor instead.
func (*MultiTeamResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{350}
}

func (x *MultiTeamResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTeamResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

// AppIdentity
type AppIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppId  string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppIdentity) Reset() {
	*x = AppIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIdentity) ProtoMessage() {}

func (x *AppIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIdentity.ProtoReflect.Descriptor instead.
func (*AppIdentity) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{351}
}

func (x *AppIdentity) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AppIdentity) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// ListTeamAppsRequest
type ListTeamAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Provide a search query to filter apps by id and name.
	// This supports wildcard queries.
	// For example, the value "*foo*" will match any app whose id or name contains "foo".
	// The search is case-insensitive.
	Query     string        `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,5,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListTeamAppsRequest) Reset() {
	*x = ListTeamAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamAppsRequest) ProtoMessage() {}

func (x *ListTeamAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamAppsRequest.ProtoReflect.Descriptor instead.
func (*ListTeamAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{352}
}

func (x *ListTeamAppsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *ListTeamAppsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTeamAppsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListTeamAppsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListTeamAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostTeamAppsRequest
type PostTeamAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    string                         `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Apps      []*PostTeamAppsRequest_TeamApp `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
	UserAppId *UserAppIDSet                  `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostTeamAppsRequest) Reset() {
	*x = PostTeamAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTeamAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTeamAppsRequest) ProtoMessage() {}

func (x *PostTeamAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTeamAppsRequest.ProtoReflect.Descriptor instead.
func (*PostTeamAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{353}
}

func (x *PostTeamAppsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *PostTeamAppsRequest) GetApps() []*PostTeamAppsRequest_TeamApp {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *PostTeamAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// DeleteTeamAppsRequest
type DeleteTeamAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    string        `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	AppIds    []string      `protobuf:"bytes,2,rep,name=app_ids,json=appIds,proto3" json:"app_ids,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *DeleteTeamAppsRequest) Reset() {
	*x = DeleteTeamAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamAppsRequest) ProtoMessage() {}

func (x *DeleteTeamAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamAppsRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamAppsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{354}
}

func (x *DeleteTeamAppsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *DeleteTeamAppsRequest) GetAppIds() []string {
	if x != nil {
		return x.AppIds
	}
	return nil
}

func (x *DeleteTeamAppsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MultiTeamAppsResponse
type MultiTeamAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Apps      []*MultiTeamAppsResponse_TeamApp `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
	UserAppId *UserAppIDSet                    `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *MultiTeamAppsResponse) Reset() {
	*x = MultiTeamAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTeamAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTeamAppsResponse) ProtoMessage() {}

func (x *MultiTeamAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTeamAppsResponse.ProtoReflect.Descriptor instead.
func (*MultiTeamAppsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{355}
}

func (x *MultiTeamAppsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTeamAppsResponse) GetApps() []*MultiTeamAppsResponse_TeamApp {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *MultiTeamAppsResponse) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostTeamUsersRequest
type PostTeamUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    string        `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	UserIds   []string      `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *PostTeamUsersRequest) Reset() {
	*x = PostTeamUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTeamUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTeamUsersRequest) ProtoMessage() {}

func (x *PostTeamUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTeamUsersRequest.ProtoReflect.Descriptor instead.
func (*PostTeamUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{356}
}

func (x *PostTeamUsersRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *PostTeamUsersRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *PostTeamUsersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// ListTeamUsersRequest
type ListTeamUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Provide a search query to filter team users by id, first name and last name.
	// This supports wildcard queries.
	//   For example, the value "*foo*" will match any team user whose id, first name or last name contains "foo".
	// The search is case-insensitive.
	Query     string        `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,5,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListTeamUsersRequest) Reset() {
	*x = ListTeamUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamUsersRequest) ProtoMessage() {}

func (x *ListTeamUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamUsersRequest.ProtoReflect.Descriptor instead.
func (*ListTeamUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{357}
}

func (x *ListTeamUsersRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *ListTeamUsersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTeamUsersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListTeamUsersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListTeamUsersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// DeleteTeamUsersRequest
type DeleteTeamUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    string        `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	UserIds   []string      `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	UserAppId *UserAppIDSet `protobuf:"bytes,3,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *DeleteTeamUsersRequest) Reset() {
	*x = DeleteTeamUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamUsersRequest) ProtoMessage() {}

func (x *DeleteTeamUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamUsersRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamUsersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{358}
}

func (x *DeleteTeamUsersRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *DeleteTeamUsersRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *DeleteTeamUsersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// MultiTeamUserResponse
type MultiTeamUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TeamUsers []*TeamUser    `protobuf:"bytes,2,rep,name=team_users,json=teamUsers,proto3" json:"team_users,omitempty"`
}

func (x *MultiTeamUserResponse) Reset() {
	*x = MultiTeamUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTeamUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTeamUserResponse) ProtoMessage() {}

func (x *MultiTeamUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTeamUserResponse.ProtoReflect.Descriptor instead.
func (*MultiTeamUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{359}
}

func (x *MultiTeamUserResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTeamUserResponse) GetTeamUsers() []*TeamUser {
	if x != nil {
		return x.TeamUsers
	}
	return nil
}

// ListRolesRequest
type ListRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 20.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Optional query parameter that will add filter by type. Possible values 'ORG' or 'TEAM'.
	Types []RoleType `protobuf:"varint,3,rep,packed,name=types,proto3,enum=clarifai.api.RoleType" json:"types,omitempty"`
}

func (x *ListRolesRequest) Reset() {
	*x = ListRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesRequest) ProtoMessage() {}

func (x *ListRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesRequest.ProtoReflect.Descriptor instead.
func (*ListRolesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{360}
}

func (x *ListRolesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRolesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListRolesRequest) GetTypes() []RoleType {
	if x != nil {
		return x.Types
	}
	return nil
}

// GetRoleRequest
type GetRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRoleRequest) Reset() {
	*x = GetRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleRequest) ProtoMessage() {}

func (x *GetRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleRequest.ProtoReflect.Descriptor instead.
func (*GetRoleRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{361}
}

func (x *GetRoleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// SingleRoleResponse
type SingleRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Role   *Role          `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SingleRoleResponse) Reset() {
	*x = SingleRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRoleResponse) ProtoMessage() {}

func (x *SingleRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRoleResponse.ProtoReflect.Descriptor instead.
func (*SingleRoleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{362}
}

func (x *SingleRoleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// MultiRoleResponse
type MultiRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Roles  []*Role        `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *MultiRoleResponse) Reset() {
	*x = MultiRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRoleResponse) ProtoMessage() {}

func (x *MultiRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRoleResponse.ProtoReflect.Descriptor instead.
func (*MultiRoleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{363}
}

func (x *MultiRoleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiRoleResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

// GET single vocab by id.
type GetVocabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	VocabId   string        `protobuf:"bytes,2,opt,name=vocab_id,json=vocabId,proto3" json:"vocab_id,omitempty"`
}

func (x *GetVocabRequest) Reset() {
	*x = GetVocabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVocabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabRequest) ProtoMessage() {}

func (x *GetVocabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabRequest.ProtoReflect.Descriptor instead.
func (*GetVocabRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{364}
}

func (x *GetVocabRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetVocabRequest) GetVocabId() string {
	if x != nil {
		return x.VocabId
	}
	return ""
}

// List multiple vocabs.
type ListVocabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListVocabsRequest) Reset() {
	*x = ListVocabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVocabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVocabsRequest) ProtoMessage() {}

func (x *ListVocabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVocabsRequest.ProtoReflect.Descriptor instead.
func (*ListVocabsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{365}
}

func (x *ListVocabsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListVocabsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListVocabsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// POST new vocabs with this.
type PostVocabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Vocabs    []*Vocab      `protobuf:"bytes,2,rep,name=vocabs,proto3" json:"vocabs,omitempty"`
}

func (x *PostVocabsRequest) Reset() {
	*x = PostVocabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVocabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVocabsRequest) ProtoMessage() {}

func (x *PostVocabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVocabsRequest.ProtoReflect.Descriptor instead.
func (*PostVocabsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{366}
}

func (x *PostVocabsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostVocabsRequest) GetVocabs() []*Vocab {
	if x != nil {
		return x.Vocabs
	}
	return nil
}

// PATCH one or more vocabs with this endpoint.
type PatchVocabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The list of updates fields for the vocabs. Must have the "id" field set so that it can match on
	// of the existing vocabs.
	Vocabs []*Vocab `protobuf:"bytes,2,rep,name=vocabs,proto3" json:"vocabs,omitempty"`
	// The action to perform on the patched objects
	// For now only action 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchVocabsRequest) Reset() {
	*x = PatchVocabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchVocabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchVocabsRequest) ProtoMessage() {}

func (x *PatchVocabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchVocabsRequest.ProtoReflect.Descriptor instead.
func (*PatchVocabsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{367}
}

func (x *PatchVocabsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchVocabsRequest) GetVocabs() []*Vocab {
	if x != nil {
		return x.Vocabs
	}
	return nil
}

func (x *PatchVocabsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteVocabRequest
type DeleteVocabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	VocabId   string        `protobuf:"bytes,2,opt,name=vocab_id,json=vocabId,proto3" json:"vocab_id,omitempty"`
}

func (x *DeleteVocabRequest) Reset() {
	*x = DeleteVocabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVocabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVocabRequest) ProtoMessage() {}

func (x *DeleteVocabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVocabRequest.ProtoReflect.Descriptor instead.
func (*DeleteVocabRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{368}
}

func (x *DeleteVocabRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteVocabRequest) GetVocabId() string {
	if x != nil {
		return x.VocabId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteVocabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteVocabsRequest) Reset() {
	*x = DeleteVocabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVocabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVocabsRequest) ProtoMessage() {}

func (x *DeleteVocabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVocabsRequest.ProtoReflect.Descriptor instead.
func (*DeleteVocabsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{369}
}

func (x *DeleteVocabsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteVocabsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteVocabsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// List concepts in a vocab. There is
type ListVocabConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	VocabId   string        `protobuf:"bytes,2,opt,name=vocab_id,json=vocabId,proto3" json:"vocab_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListVocabConceptsRequest) Reset() {
	*x = ListVocabConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVocabConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVocabConceptsRequest) ProtoMessage() {}

func (x *ListVocabConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVocabConceptsRequest.ProtoReflect.Descriptor instead.
func (*ListVocabConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{370}
}

func (x *ListVocabConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListVocabConceptsRequest) GetVocabId() string {
	if x != nil {
		return x.VocabId
	}
	return ""
}

func (x *ListVocabConceptsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListVocabConceptsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Add a concept(s) to the END of the vocab list.
type PostVocabConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	VocabId   string        `protobuf:"bytes,2,opt,name=vocab_id,json=vocabId,proto3" json:"vocab_id,omitempty"`
	Concepts  []*Concept    `protobuf:"bytes,3,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *PostVocabConceptsRequest) Reset() {
	*x = PostVocabConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVocabConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVocabConceptsRequest) ProtoMessage() {}

func (x *PostVocabConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVocabConceptsRequest.ProtoReflect.Descriptor instead.
func (*PostVocabConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{371}
}

func (x *PostVocabConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostVocabConceptsRequest) GetVocabId() string {
	if x != nil {
		return x.VocabId
	}
	return ""
}

func (x *PostVocabConceptsRequest) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

// This lets you delete a specific concept from the vocab (not from your app).
type DeleteVocabConceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	VocabId   string        `protobuf:"bytes,2,opt,name=vocab_id,json=vocabId,proto3" json:"vocab_id,omitempty"`
	ConceptId string        `protobuf:"bytes,3,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
}

func (x *DeleteVocabConceptRequest) Reset() {
	*x = DeleteVocabConceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVocabConceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVocabConceptRequest) ProtoMessage() {}

func (x *DeleteVocabConceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVocabConceptRequest.ProtoReflect.Descriptor instead.
func (*DeleteVocabConceptRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{372}
}

func (x *DeleteVocabConceptRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteVocabConceptRequest) GetVocabId() string {
	if x != nil {
		return x.VocabId
	}
	return ""
}

func (x *DeleteVocabConceptRequest) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

// Request to delete several concepts from vocab by the list of ids.
// The delete_all in this case will empty the vocab to start over.
// In either case the concepts will remain in your app.
type DeleteVocabConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	VocabId   string        `protobuf:"bytes,2,opt,name=vocab_id,json=vocabId,proto3" json:"vocab_id,omitempty"`
	Ids       []string      `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,4,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteVocabConceptsRequest) Reset() {
	*x = DeleteVocabConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVocabConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVocabConceptsRequest) ProtoMessage() {}

func (x *DeleteVocabConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVocabConceptsRequest.ProtoReflect.Descriptor instead.
func (*DeleteVocabConceptsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{373}
}

func (x *DeleteVocabConceptsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteVocabConceptsRequest) GetVocabId() string {
	if x != nil {
		return x.VocabId
	}
	return ""
}

func (x *DeleteVocabConceptsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteVocabConceptsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// A single vocab to return.
type SingleVocabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Vocab  *Vocab         `protobuf:"bytes,2,opt,name=vocab,proto3" json:"vocab,omitempty"`
}

func (x *SingleVocabResponse) Reset() {
	*x = SingleVocabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleVocabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleVocabResponse) ProtoMessage() {}

func (x *SingleVocabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleVocabResponse.ProtoReflect.Descriptor instead.
func (*SingleVocabResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{374}
}

func (x *SingleVocabResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleVocabResponse) GetVocab() *Vocab {
	if x != nil {
		return x.Vocab
	}
	return nil
}

// Multiple vocabs to return.
type MultiVocabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Vocabs []*Vocab       `protobuf:"bytes,2,rep,name=vocabs,proto3" json:"vocabs,omitempty"`
}

func (x *MultiVocabResponse) Reset() {
	*x = MultiVocabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiVocabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiVocabResponse) ProtoMessage() {}

func (x *MultiVocabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiVocabResponse.ProtoReflect.Descriptor instead.
func (*MultiVocabResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{375}
}

func (x *MultiVocabResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiVocabResponse) GetVocabs() []*Vocab {
	if x != nil {
		return x.Vocabs
	}
	return nil
}

// GetWorkflowRequest
type GetWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Workflow ID to retrieve
	// If no ID is specified we return default workflow of the application
	// If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Use this flag to look into clarifai published workflows first for a Workflow ID
	FavorClarifaiWorkflows bool `protobuf:"varint,3,opt,name=favor_clarifai_workflows,json=favorClarifaiWorkflows,proto3" json:"favor_clarifai_workflows,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,4,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// if true will not expand search to clarifai workflows
	ExcludeClarifaiWorkflows bool `protobuf:"varint,5,opt,name=exclude_clarifai_workflows,json=excludeClarifaiWorkflows,proto3" json:"exclude_clarifai_workflows,omitempty"`
}

func (x *GetWorkflowRequest) Reset() {
	*x = GetWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowRequest) ProtoMessage() {}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{376}
}

func (x *GetWorkflowRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowRequest) GetFavorClarifaiWorkflows() bool {
	if x != nil {
		return x.FavorClarifaiWorkflows
	}
	return false
}

func (x *GetWorkflowRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *GetWorkflowRequest) GetExcludeClarifaiWorkflows() bool {
	if x != nil {
		return x.ExcludeClarifaiWorkflows
	}
	return false
}

// ListWorkflowsRequest
type ListWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Sorting options:
	// Whether to sort in ascending order. If false, will order in descending order.
	SortAscending bool `protobuf:"varint,5,opt,name=sort_ascending,json=sortAscending,proto3" json:"sort_ascending,omitempty"`
	// Types that are assignable to SortBy:
	//	*ListWorkflowsRequest_SortById
	//	*ListWorkflowsRequest_SortByModifiedAt
	SortBy isListWorkflowsRequest_SortBy `protobuf_oneof:"sort_by"`
	// Query various text fields that can contain the words in the query string.
	Query string `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	// Filter by the id of the workflow. This supports wilcard queries like "gen*" to match "general" as an example.
	// Deprecated in favor of query
	//
	// Deprecated: Do not use.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// If true, we only return workflows that are handpicked by clarifai staff
	FeaturedOnly bool `protobuf:"varint,9,opt,name=featured_only,json=featuredOnly,proto3" json:"featured_only,omitempty"`
	// If true, we only return workflows that are starred by the requesting user
	StarredOnly bool `protobuf:"varint,11,opt,name=starred_only,json=starredOnly,proto3" json:"starred_only,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars
	AdditionalFields []string `protobuf:"bytes,10,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
	// (optional) search_term. Full text and prefix matching on description, id, owner id. Searchable fields may be added
	SearchTerm string `protobuf:"bytes,12,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
}

func (x *ListWorkflowsRequest) Reset() {
	*x = ListWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsRequest) ProtoMessage() {}

func (x *ListWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{377}
}

func (x *ListWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListWorkflowsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWorkflowsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListWorkflowsRequest) GetSortAscending() bool {
	if x != nil {
		return x.SortAscending
	}
	return false
}

func (m *ListWorkflowsRequest) GetSortBy() isListWorkflowsRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *ListWorkflowsRequest) GetSortById() bool {
	if x, ok := x.GetSortBy().(*ListWorkflowsRequest_SortById); ok {
		return x.SortById
	}
	return false
}

func (x *ListWorkflowsRequest) GetSortByModifiedAt() bool {
	if x, ok := x.GetSortBy().(*ListWorkflowsRequest_SortByModifiedAt); ok {
		return x.SortByModifiedAt
	}
	return false
}

func (x *ListWorkflowsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListWorkflowsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListWorkflowsRequest) GetFeaturedOnly() bool {
	if x != nil {
		return x.FeaturedOnly
	}
	return false
}

func (x *ListWorkflowsRequest) GetStarredOnly() bool {
	if x != nil {
		return x.StarredOnly
	}
	return false
}

func (x *ListWorkflowsRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

func (x *ListWorkflowsRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

type isListWorkflowsRequest_SortBy interface {
	isListWorkflowsRequest_SortBy()
}

type ListWorkflowsRequest_SortById struct {
	// Whether to order by the name
	SortById bool `protobuf:"varint,6,opt,name=sort_by_id,json=sortById,proto3,oneof"`
}

type ListWorkflowsRequest_SortByModifiedAt struct {
	// Whether to order by the modified_at time.
	// If neither sort option is set to true, will sort by modified_at.
	SortByModifiedAt bool `protobuf:"varint,7,opt,name=sort_by_modified_at,json=sortByModifiedAt,proto3,oneof"`
}

func (*ListWorkflowsRequest_SortById) isListWorkflowsRequest_SortBy() {}

func (*ListWorkflowsRequest_SortByModifiedAt) isListWorkflowsRequest_SortBy() {}

// ListPublicWorkflowsRequest
type ListPublicWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page.
	// Defaults to 128.
	PerPage uint32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Return only base workflows.
	OnlyBase bool `protobuf:"varint,3,opt,name=only_base,json=onlyBase,proto3" json:"only_base,omitempty"`
	// The caller user_id
	UserAppId *UserAppIDSet `protobuf:"bytes,4,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
}

func (x *ListPublicWorkflowsRequest) Reset() {
	*x = ListPublicWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicWorkflowsRequest) ProtoMessage() {}

func (x *ListPublicWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListPublicWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{378}
}

func (x *ListPublicWorkflowsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPublicWorkflowsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListPublicWorkflowsRequest) GetOnlyBase() bool {
	if x != nil {
		return x.OnlyBase
	}
	return false
}

func (x *ListPublicWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

// PostWorkflowsRequest
type PostWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Workflows []*Workflow   `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
}

func (x *PostWorkflowsRequest) Reset() {
	*x = PostWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowsRequest) ProtoMessage() {}

func (x *PostWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{379}
}

func (x *PostWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowsRequest) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

// PatchWorkflowsRequest
type PatchWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Workflows []*Workflow   `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchWorkflowsRequest) Reset() {
	*x = PatchWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchWorkflowsRequest) ProtoMessage() {}

func (x *PatchWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*PatchWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{380}
}

func (x *PatchWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchWorkflowsRequest) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *PatchWorkflowsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// PatchWorkflowIdsRequest
type PatchWorkflowIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Array containing 1 entry
	Ids []*IdUpdateSource `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchWorkflowIdsRequest) Reset() {
	*x = PatchWorkflowIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchWorkflowIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchWorkflowIdsRequest) ProtoMessage() {}

func (x *PatchWorkflowIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchWorkflowIdsRequest.ProtoReflect.Descriptor instead.
func (*PatchWorkflowIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{381}
}

func (x *PatchWorkflowIdsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchWorkflowIdsRequest) GetIds() []*IdUpdateSource {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PatchWorkflowIdsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// DeleteWorkflowRequest
type DeleteWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId string        `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *DeleteWorkflowRequest) Reset() {
	*x = DeleteWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowRequest) ProtoMessage() {}

func (x *DeleteWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{382}
}

func (x *DeleteWorkflowRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteWorkflowsRequest) Reset() {
	*x = DeleteWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowsRequest) ProtoMessage() {}

func (x *DeleteWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{383}
}

func (x *DeleteWorkflowsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteWorkflowsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// SingleWorkflowResponse
type SingleWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflow *Workflow      `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *SingleWorkflowResponse) Reset() {
	*x = SingleWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWorkflowResponse) ProtoMessage() {}

func (x *SingleWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWorkflowResponse.ProtoReflect.Descriptor instead.
func (*SingleWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{384}
}

func (x *SingleWorkflowResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleWorkflowResponse) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

// MultiWorkflowResponse
type MultiWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Workflows []*Workflow    `protobuf:"bytes,2,rep,name=workflows,proto3" json:"workflows,omitempty"`
}

func (x *MultiWorkflowResponse) Reset() {
	*x = MultiWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkflowResponse) ProtoMessage() {}

func (x *MultiWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkflowResponse.ProtoReflect.Descriptor instead.
func (*MultiWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{385}
}

func (x *MultiWorkflowResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWorkflowResponse) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

// PostWorkflowResultsRequest
type PostWorkflowResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Workflow ID to retrieve
	// If no ID is specified we return default workflow of the application
	// If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Workflow version ID to retrieve
	// If no ID is specified, latest workflow version is used
	VersionId string   `protobuf:"bytes,7,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Inputs    []*Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// FIXME(zeiler): the request for post workflows is using an outputconfig object that is supposed
	// to be within models. This is not consistent with setting this on the request for post model
	// outputs where it is inside a model object. To make this consistent we would send in the
	// workflow object so that each model can have it's own output config. If nobody is setting
	// this OutputConfig it would probably be easier to just remove it for now to keep things simpler
	// and then it's more consistent we just don't support the OutputConfig on workflows.
	OutputConfig *OutputConfig `protobuf:"bytes,4,opt,name=output_config,json=outputConfig,proto3" json:"output_config,omitempty"`
	// Use this flag to look into clarifai published workflows first for a Workflow ID
	FavorClarifaiWorkflows bool `protobuf:"varint,5,opt,name=favor_clarifai_workflows,json=favorClarifaiWorkflows,proto3" json:"favor_clarifai_workflows,omitempty"`
	// A workflow state to be maintained across PostWorkflowResults requests/responses.
	// If it is not sent in the initial request with workflow_state.id = "init" then no
	// state will be saved or returned in PostWorkflowResultsResponse.
	WorkflowState *WorkflowState `protobuf:"bytes,6,opt,name=workflow_state,json=workflowState,proto3" json:"workflow_state,omitempty"`
}

func (x *PostWorkflowResultsRequest) Reset() {
	*x = PostWorkflowResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsRequest) ProtoMessage() {}

func (x *PostWorkflowResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{386}
}

func (x *PostWorkflowResultsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowResultsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowResultsRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostWorkflowResultsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PostWorkflowResultsRequest) GetOutputConfig() *OutputConfig {
	if x != nil {
		return x.OutputConfig
	}
	return nil
}

func (x *PostWorkflowResultsRequest) GetFavorClarifaiWorkflows() bool {
	if x != nil {
		return x.FavorClarifaiWorkflows
	}
	return false
}

func (x *PostWorkflowResultsRequest) GetWorkflowState() *WorkflowState {
	if x != nil {
		return x.WorkflowState
	}
	return nil
}

// PostWorkflowResultsResponse
type PostWorkflowResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The workflow that was used in predictions with PostWorkflowResults
	Workflow *Workflow `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	// The resulting predictions of all models in the workflow.
	Results []*WorkflowResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// A workflow state to be maintained across PostWorkflowResults requests/responses.
	// This WorkflowState should be passed in to subsequent PostWorkflowResults calls
	// if you want to keep track of state across requests.
	// If no WorkflowState was initialized in a request then no WorkflowState will be returned in this
	// response.
	WorkflowState *WorkflowState `protobuf:"bytes,4,opt,name=workflow_state,json=workflowState,proto3" json:"workflow_state,omitempty"`
}

func (x *PostWorkflowResultsResponse) Reset() {
	*x = PostWorkflowResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsResponse) ProtoMessage() {}

func (x *PostWorkflowResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsResponse.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{387}
}

func (x *PostWorkflowResultsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostWorkflowResultsResponse) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *PostWorkflowResultsResponse) GetResults() []*WorkflowResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PostWorkflowResultsResponse) GetWorkflowState() *WorkflowState {
	if x != nil {
		return x.WorkflowState
	}
	return nil
}

// PostWorkflowResultsSimilarityRequest
type PostWorkflowResultsSimilarityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	WorkflowId string        `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Workflow version ID to retrieve
	// If no ID is specified, latest workflow version is used
	VersionId string `protobuf:"bytes,7,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The specific model version whose outputs we are comparing
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// Each probe is compared against every pool input
	ProbeInputs []*Input `protobuf:"bytes,4,rep,name=probe_inputs,json=probeInputs,proto3" json:"probe_inputs,omitempty"`
	// Each pool input is compared against ever probe input
	PoolInputs []*Input `protobuf:"bytes,5,rep,name=pool_inputs,json=poolInputs,proto3" json:"pool_inputs,omitempty"`
	// Use this flag to look into clarifai published workflows first for a Workflow ID
	FavorClarifaiWorkflows bool `protobuf:"varint,6,opt,name=favor_clarifai_workflows,json=favorClarifaiWorkflows,proto3" json:"favor_clarifai_workflows,omitempty"`
}

func (x *PostWorkflowResultsSimilarityRequest) Reset() {
	*x = PostWorkflowResultsSimilarityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsSimilarityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsSimilarityRequest) ProtoMessage() {}

func (x *PostWorkflowResultsSimilarityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsSimilarityRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsSimilarityRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{388}
}

func (x *PostWorkflowResultsSimilarityRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowResultsSimilarityRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PostWorkflowResultsSimilarityRequest) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *PostWorkflowResultsSimilarityRequest) GetProbeInputs() []*Input {
	if x != nil {
		return x.ProbeInputs
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityRequest) GetPoolInputs() []*Input {
	if x != nil {
		return x.PoolInputs
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityRequest) GetFavorClarifaiWorkflows() bool {
	if x != nil {
		return x.FavorClarifaiWorkflows
	}
	return false
}

// PostWorkflowResultsSimilarityResponse
type PostWorkflowResultsSimilarityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status               `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Results []*WorkflowResultsSimilarity `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *PostWorkflowResultsSimilarityResponse) Reset() {
	*x = PostWorkflowResultsSimilarityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowResultsSimilarityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowResultsSimilarityResponse) ProtoMessage() {}

func (x *PostWorkflowResultsSimilarityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowResultsSimilarityResponse.ProtoReflect.Descriptor instead.
func (*PostWorkflowResultsSimilarityResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{389}
}

func (x *PostWorkflowResultsSimilarityResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostWorkflowResultsSimilarityResponse) GetResults() []*WorkflowResultsSimilarity {
	if x != nil {
		return x.Results
	}
	return nil
}

// ListWorkflowVersionsRequest
type ListWorkflowVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List versions for the workflow identified by this id
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListWorkflowVersionsRequest) Reset() {
	*x = ListWorkflowVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowVersionsRequest) ProtoMessage() {}

func (x *ListWorkflowVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{390}
}

func (x *ListWorkflowVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListWorkflowVersionsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListWorkflowVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWorkflowVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetWorkflowVersionRequest
type GetWorkflowVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The id of the workflow that has the requested version.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Get the identified by this id
	WorkflowVersionId string `protobuf:"bytes,3,opt,name=workflow_version_id,json=workflowVersionId,proto3" json:"workflow_version_id,omitempty"`
}

func (x *GetWorkflowVersionRequest) Reset() {
	*x = GetWorkflowVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowVersionRequest) ProtoMessage() {}

func (x *GetWorkflowVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowVersionRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{391}
}

func (x *GetWorkflowVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetWorkflowVersionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowVersionRequest) GetWorkflowVersionId() string {
	if x != nil {
		return x.WorkflowVersionId
	}
	return ""
}

// DeleteWorkflowVersionsRequest
type DeleteWorkflowVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The id of the workflow that has the requested versions to delete.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Delete the versions identified by these ids
	WorkflowVersionIds []string `protobuf:"bytes,3,rep,name=workflow_version_ids,json=workflowVersionIds,proto3" json:"workflow_version_ids,omitempty"`
}

func (x *DeleteWorkflowVersionsRequest) Reset() {
	*x = DeleteWorkflowVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowVersionsRequest) ProtoMessage() {}

func (x *DeleteWorkflowVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{392}
}

func (x *DeleteWorkflowVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowVersionsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *DeleteWorkflowVersionsRequest) GetWorkflowVersionIds() []string {
	if x != nil {
		return x.WorkflowVersionIds
	}
	return nil
}

// PatchWorkflowVersionsRequest
type PatchWorkflowVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The id of the workflow that has the requested versions to patch.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Patch these versions.
	WorkflowVersions []*WorkflowVersion `protobuf:"bytes,3,rep,name=workflow_versions,json=workflowVersions,proto3" json:"workflow_versions,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchWorkflowVersionsRequest) Reset() {
	*x = PatchWorkflowVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchWorkflowVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchWorkflowVersionsRequest) ProtoMessage() {}

func (x *PatchWorkflowVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchWorkflowVersionsRequest.ProtoReflect.Descriptor instead.
func (*PatchWorkflowVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{393}
}

func (x *PatchWorkflowVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchWorkflowVersionsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PatchWorkflowVersionsRequest) GetWorkflowVersions() []*WorkflowVersion {
	if x != nil {
		return x.WorkflowVersions
	}
	return nil
}

func (x *PatchWorkflowVersionsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// MultiWorkflowVersionResponse
type MultiWorkflowVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WorkflowVersions []*WorkflowVersion `protobuf:"bytes,2,rep,name=workflow_versions,json=workflowVersions,proto3" json:"workflow_versions,omitempty"`
}

func (x *MultiWorkflowVersionResponse) Reset() {
	*x = MultiWorkflowVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkflowVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkflowVersionResponse) ProtoMessage() {}

func (x *MultiWorkflowVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkflowVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiWorkflowVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{394}
}

func (x *MultiWorkflowVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWorkflowVersionResponse) GetWorkflowVersions() []*WorkflowVersion {
	if x != nil {
		return x.WorkflowVersions
	}
	return nil
}

// SingleWorkflowVersionResponse
type SingleWorkflowVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WorkflowVersion *WorkflowVersion `protobuf:"bytes,2,opt,name=workflow_version,json=workflowVersion,proto3" json:"workflow_version,omitempty"`
}

func (x *SingleWorkflowVersionResponse) Reset() {
	*x = SingleWorkflowVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWorkflowVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWorkflowVersionResponse) ProtoMessage() {}

func (x *SingleWorkflowVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWorkflowVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleWorkflowVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{395}
}

func (x *SingleWorkflowVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleWorkflowVersionResponse) GetWorkflowVersion() *WorkflowVersion {
	if x != nil {
		return x.WorkflowVersion
	}
	return nil
}

// PostWorkflowMetricsRequest
type PostWorkflowMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify the workflow.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Specify list of workflow metrics data to add.
	// All fields are optional.
	// Allowed fields to set:
	// * id
	// - provide custom id for the evaluation
	// - if empty, then an id is automatically generated
	// * data
	// - provide concepts to be used for this evaluation
	// - if empty, then all app concepts are used
	// - Example: "data": {
	//                "concepts": [{"id": "{{concept_id}}"}]
	//            }
	// * node_metrics
	// - provide the workflow nodes to be evaluated
	// - if empty, then all evaluable workflow nodes will be evaluated
	// - Example: "node_metrics": {
	//               "node_1": {},
	//               "node_2": {},
	//            }
	// * ground_truth
	// - provide the ground truth data set to search for
	// - if not set, then ground truth is retrieved from current app's inputs and annotations
	// - Example: "ground_truth": {
	//                "query": {
	//                    "ands": {
	//                        "annotation": {
	//                            "data": {
	//                                "concepts": [{"id": "concept"}]
	//                            }
	//                        }
	//                     }
	//                },
	//            }
	WorkflowMetrics []*WorkflowMetrics `protobuf:"bytes,3,rep,name=workflow_metrics,json=workflowMetrics,proto3" json:"workflow_metrics,omitempty"`
}

func (x *PostWorkflowMetricsRequest) Reset() {
	*x = PostWorkflowMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowMetricsRequest) ProtoMessage() {}

func (x *PostWorkflowMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowMetricsRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{396}
}

func (x *PostWorkflowMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowMetricsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *PostWorkflowMetricsRequest) GetWorkflowMetrics() []*WorkflowMetrics {
	if x != nil {
		return x.WorkflowMetrics
	}
	return nil
}

// GetWorkflowMetricsRequest
type GetWorkflowMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify the workflow.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Identify the workflow metrics.
	MetricsId string `protobuf:"bytes,3,opt,name=metrics_id,json=metricsId,proto3" json:"metrics_id,omitempty"`
}

func (x *GetWorkflowMetricsRequest) Reset() {
	*x = GetWorkflowMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowMetricsRequest) ProtoMessage() {}

func (x *GetWorkflowMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{397}
}

func (x *GetWorkflowMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetWorkflowMetricsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowMetricsRequest) GetMetricsId() string {
	if x != nil {
		return x.MetricsId
	}
	return ""
}

// GetWorkflowNodeMetricsRequest
type GetWorkflowNodeMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify the workflow.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Identify the workflow metrics.
	MetricsId string `protobuf:"bytes,3,opt,name=metrics_id,json=metricsId,proto3" json:"metrics_id,omitempty"`
	// Identify the workflow node.
	NodeId string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GetWorkflowNodeMetricsRequest) Reset() {
	*x = GetWorkflowNodeMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowNodeMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowNodeMetricsRequest) ProtoMessage() {}

func (x *GetWorkflowNodeMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowNodeMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowNodeMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{398}
}

func (x *GetWorkflowNodeMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetWorkflowNodeMetricsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowNodeMetricsRequest) GetMetricsId() string {
	if x != nil {
		return x.MetricsId
	}
	return ""
}

func (x *GetWorkflowNodeMetricsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// ListWorkflowMetricsRequest
type ListWorkflowMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify the workflow.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListWorkflowMetricsRequest) Reset() {
	*x = ListWorkflowMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowMetricsRequest) ProtoMessage() {}

func (x *ListWorkflowMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{399}
}

func (x *ListWorkflowMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListWorkflowMetricsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListWorkflowMetricsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWorkflowMetricsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// DeleteWorkflowMetricsRequest
type DeleteWorkflowMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Identify the workflow.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Identify the list workflow metrics to delete.
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteWorkflowMetricsRequest) Reset() {
	*x = DeleteWorkflowMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowMetricsRequest) ProtoMessage() {}

func (x *DeleteWorkflowMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowMetricsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{400}
}

func (x *DeleteWorkflowMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowMetricsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *DeleteWorkflowMetricsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleWorkflowMetricsResponse
type SingleWorkflowMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Workflow metrics data.
	WorkflowMetrics *WorkflowMetrics `protobuf:"bytes,2,opt,name=workflow_metrics,json=workflowMetrics,proto3" json:"workflow_metrics,omitempty"`
}

func (x *SingleWorkflowMetricsResponse) Reset() {
	*x = SingleWorkflowMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWorkflowMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWorkflowMetricsResponse) ProtoMessage() {}

func (x *SingleWorkflowMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWorkflowMetricsResponse.ProtoReflect.Descriptor instead.
func (*SingleWorkflowMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{401}
}

func (x *SingleWorkflowMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleWorkflowMetricsResponse) GetWorkflowMetrics() *WorkflowMetrics {
	if x != nil {
		return x.WorkflowMetrics
	}
	return nil
}

// SingleWorkflowNodeMetricsResponse
type SingleWorkflowNodeMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Workflow node metrics data.
	NodeMetrics *EvalMetrics `protobuf:"bytes,2,opt,name=node_metrics,json=nodeMetrics,proto3" json:"node_metrics,omitempty"`
}

func (x *SingleWorkflowNodeMetricsResponse) Reset() {
	*x = SingleWorkflowNodeMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWorkflowNodeMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWorkflowNodeMetricsResponse) ProtoMessage() {}

func (x *SingleWorkflowNodeMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWorkflowNodeMetricsResponse.ProtoReflect.Descriptor instead.
func (*SingleWorkflowNodeMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{402}
}

func (x *SingleWorkflowNodeMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleWorkflowNodeMetricsResponse) GetNodeMetrics() *EvalMetrics {
	if x != nil {
		return x.NodeMetrics
	}
	return nil
}

// MultiWorkflowMetricsResponse
type MultiWorkflowMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of workflow metrics.
	WorkflowMetrics []*WorkflowMetrics `protobuf:"bytes,2,rep,name=workflow_metrics,json=workflowMetrics,proto3" json:"workflow_metrics,omitempty"`
}

func (x *MultiWorkflowMetricsResponse) Reset() {
	*x = MultiWorkflowMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkflowMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkflowMetricsResponse) ProtoMessage() {}

func (x *MultiWorkflowMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkflowMetricsResponse.ProtoReflect.Descriptor instead.
func (*MultiWorkflowMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{403}
}

func (x *MultiWorkflowMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWorkflowMetricsResponse) GetWorkflowMetrics() []*WorkflowMetrics {
	if x != nil {
		return x.WorkflowMetrics
	}
	return nil
}

//Request to start a app duplication process
type PostAppDuplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId       *UserAppIDSet     `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	AppDuplications []*AppDuplication `protobuf:"bytes,2,rep,name=app_duplications,json=appDuplications,proto3" json:"app_duplications,omitempty"`
}

func (x *PostAppDuplicationsRequest) Reset() {
	*x = PostAppDuplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppDuplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppDuplicationsRequest) ProtoMessage() {}

func (x *PostAppDuplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppDuplicationsRequest.ProtoReflect.Descriptor instead.
func (*PostAppDuplicationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{404}
}

func (x *PostAppDuplicationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAppDuplicationsRequest) GetAppDuplications() []*AppDuplication {
	if x != nil {
		return x.AppDuplications
	}
	return nil
}

//Request to check app duplication status
type GetAppDuplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	//The app duplication id
	AppDuplicationId string `protobuf:"bytes,2,opt,name=app_duplication_id,json=appDuplicationId,proto3" json:"app_duplication_id,omitempty"`
}

func (x *GetAppDuplicationRequest) Reset() {
	*x = GetAppDuplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppDuplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppDuplicationRequest) ProtoMessage() {}

func (x *GetAppDuplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppDuplicationRequest.ProtoReflect.Descriptor instead.
func (*GetAppDuplicationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{405}
}

func (x *GetAppDuplicationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetAppDuplicationRequest) GetAppDuplicationId() string {
	if x != nil {
		return x.AppDuplicationId
	}
	return ""
}

//Request to list all the app duplication that user triggered.
type ListAppDuplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListAppDuplicationsRequest) Reset() {
	*x = ListAppDuplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppDuplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppDuplicationsRequest) ProtoMessage() {}

func (x *ListAppDuplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppDuplicationsRequest.ProtoReflect.Descriptor instead.
func (*ListAppDuplicationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{406}
}

func (x *ListAppDuplicationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListAppDuplicationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAppDuplicationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// MultiAppDuplicationsResponse
type MultiAppDuplicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AppDuplications []*AppDuplication `protobuf:"bytes,2,rep,name=app_duplications,json=appDuplications,proto3" json:"app_duplications,omitempty"`
}

func (x *MultiAppDuplicationsResponse) Reset() {
	*x = MultiAppDuplicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAppDuplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAppDuplicationsResponse) ProtoMessage() {}

func (x *MultiAppDuplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAppDuplicationsResponse.ProtoReflect.Descriptor instead.
func (*MultiAppDuplicationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{407}
}

func (x *MultiAppDuplicationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAppDuplicationsResponse) GetAppDuplications() []*AppDuplication {
	if x != nil {
		return x.AppDuplications
	}
	return nil
}

// SingleAppDuplicationResponse
type SingleAppDuplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AppDuplication *AppDuplication `protobuf:"bytes,2,opt,name=app_duplication,json=appDuplication,proto3" json:"app_duplication,omitempty"`
}

func (x *SingleAppDuplicationResponse) Reset() {
	*x = SingleAppDuplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAppDuplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAppDuplicationResponse) ProtoMessage() {}

func (x *SingleAppDuplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAppDuplicationResponse.ProtoReflect.Descriptor instead.
func (*SingleAppDuplicationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{408}
}

func (x *SingleAppDuplicationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleAppDuplicationResponse) GetAppDuplication() *AppDuplication {
	if x != nil {
		return x.AppDuplication
	}
	return nil
}

// Request to create Tasks.
type PostTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Tasks     []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *PostTasksRequest) Reset() {
	*x = PostTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTasksRequest) ProtoMessage() {}

func (x *PostTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTasksRequest.ProtoReflect.Descriptor instead.
func (*PostTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{409}
}

func (x *PostTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostTasksRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Request to get one task.
type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response.
	// Currently supported: all, worker.users, review.users.
	AdditionalFields []string `protobuf:"bytes,3,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{410}
}

func (x *GetTaskRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// Request to list multiple tasks.
type ListTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	// Get tasks that have ANY user from this list assigned as worker.
	WorkerUserIds []string `protobuf:"bytes,4,rep,name=worker_user_ids,json=workerUserIds,proto3" json:"worker_user_ids,omitempty"`
	// Get tasks that have ANY user from this list assigned as reviewer.
	ReviewUserIds []string `protobuf:"bytes,5,rep,name=review_user_ids,json=reviewUserIds,proto3" json:"review_user_ids,omitempty"`
	// Get tasks that are associated to ANY label order from this list.
	LabelOrderIds []string `protobuf:"bytes,8,rep,name=label_order_ids,json=labelOrderIds,proto3" json:"label_order_ids,omitempty"`
	// Get label order tasks as well
	// It is automatically set to true if label_order_ids is set.
	IncludingLabelOrderTasks bool `protobuf:"varint,6,opt,name=including_label_order_tasks,json=includingLabelOrderTasks,proto3" json:"including_label_order_tasks,omitempty"`
	// (optional URL parameter) List of additional fields to be included in the response.
	// Currently supported: all, worker.users, review.users.
	AdditionalFields []string `protobuf:"bytes,7,rep,name=additional_fields,json=additionalFields,proto3" json:"additional_fields,omitempty"`
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{411}
}

func (x *ListTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListTasksRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTasksRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ListTasksRequest) GetWorkerUserIds() []string {
	if x != nil {
		return x.WorkerUserIds
	}
	return nil
}

func (x *ListTasksRequest) GetReviewUserIds() []string {
	if x != nil {
		return x.ReviewUserIds
	}
	return nil
}

func (x *ListTasksRequest) GetLabelOrderIds() []string {
	if x != nil {
		return x.LabelOrderIds
	}
	return nil
}

func (x *ListTasksRequest) GetIncludingLabelOrderTasks() bool {
	if x != nil {
		return x.IncludingLabelOrderTasks
	}
	return false
}

func (x *ListTasksRequest) GetAdditionalFields() []string {
	if x != nil {
		return x.AdditionalFields
	}
	return nil
}

// Request to patch a list of tasks.
type PatchTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Tasks     []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchTasksRequest) Reset() {
	*x = PatchTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTasksRequest) ProtoMessage() {}

func (x *PatchTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTasksRequest.ProtoReflect.Descriptor instead.
func (*PatchTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{412}
}

func (x *PatchTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchTasksRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *PatchTasksRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete a list of tasks.
type DeleteTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteTasksRequest) Reset() {
	*x = DeleteTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTasksRequest) ProtoMessage() {}

func (x *DeleteTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTasksRequest.ProtoReflect.Descriptor instead.
func (*DeleteTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{413}
}

func (x *DeleteTasksRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteTasksRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Response with multiple Tasks.
type MultiTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Tasks  []*Task        `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *MultiTaskResponse) Reset() {
	*x = MultiTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTaskResponse) ProtoMessage() {}

func (x *MultiTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTaskResponse.ProtoReflect.Descriptor instead.
func (*MultiTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{414}
}

func (x *MultiTaskResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTaskResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// Response with a single Task.
type SingleTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Task   *Task          `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *SingleTaskResponse) Reset() {
	*x = SingleTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTaskResponse) ProtoMessage() {}

func (x *SingleTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTaskResponse.ProtoReflect.Descriptor instead.
func (*SingleTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{415}
}

func (x *SingleTaskResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// GetTaskCountRequest can be used for fetching -
// 1. Task annotation count per user, per status
// 1. Task input (anchor annotations) count per user, per status
type GetTaskCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// task_id for which count per user per status is needed
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// for given task_id, user_ids to filter on (optional)
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GetTaskCountRequest) Reset() {
	*x = GetTaskCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountRequest) ProtoMessage() {}

func (x *GetTaskCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountRequest.ProtoReflect.Descriptor instead.
func (*GetTaskCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{416}
}

func (x *GetTaskCountRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetTaskCountRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskCountRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// SingleTaskCountResponse represent counts of annotations or inputs(anchor annotations) for labelers in given task
type SingleTaskCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AppId  string                    `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TaskId string                    `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Counts []*TaskStatusCountPerUser `protobuf:"bytes,4,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *SingleTaskCountResponse) Reset() {
	*x = SingleTaskCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTaskCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTaskCountResponse) ProtoMessage() {}

func (x *SingleTaskCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTaskCountResponse.ProtoReflect.Descriptor instead.
func (*SingleTaskCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{417}
}

func (x *SingleTaskCountResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleTaskCountResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SingleTaskCountResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SingleTaskCountResponse) GetCounts() []*TaskStatusCountPerUser {
	if x != nil {
		return x.Counts
	}
	return nil
}

// Request to force annotation count rollup
type PatchAnnotationCountsRollupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *PatchAnnotationCountsRollupRequest) Reset() {
	*x = PatchAnnotationCountsRollupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAnnotationCountsRollupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAnnotationCountsRollupRequest) ProtoMessage() {}

func (x *PatchAnnotationCountsRollupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAnnotationCountsRollupRequest.ProtoReflect.Descriptor instead.
func (*PatchAnnotationCountsRollupRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{418}
}

func (x *PatchAnnotationCountsRollupRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchAnnotationCountsRollupRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Request to create label orders.
type PostLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LabelOrders []*LabelOrder `protobuf:"bytes,2,rep,name=label_orders,json=labelOrders,proto3" json:"label_orders,omitempty"`
}

func (x *PostLabelOrdersRequest) Reset() {
	*x = PostLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLabelOrdersRequest) ProtoMessage() {}

func (x *PostLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*PostLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{419}
}

func (x *PostLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostLabelOrdersRequest) GetLabelOrders() []*LabelOrder {
	if x != nil {
		return x.LabelOrders
	}
	return nil
}

// Request to get one label order.
type GetLabelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LabelOrderId string        `protobuf:"bytes,2,opt,name=label_order_id,json=labelOrderId,proto3" json:"label_order_id,omitempty"`
}

func (x *GetLabelOrderRequest) Reset() {
	*x = GetLabelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelOrderRequest) ProtoMessage() {}

func (x *GetLabelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelOrderRequest.ProtoReflect.Descriptor instead.
func (*GetLabelOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{420}
}

func (x *GetLabelOrderRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetLabelOrderRequest) GetLabelOrderId() string {
	if x != nil {
		return x.LabelOrderId
	}
	return ""
}

// Request to list multiple label orders.
type ListLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListLabelOrdersRequest) Reset() {
	*x = ListLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelOrdersRequest) ProtoMessage() {}

func (x *ListLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{421}
}

func (x *ListLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListLabelOrdersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLabelOrdersRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Request to patch a list of label orders.
type PatchLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId   *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	LabelOrders []*LabelOrder `protobuf:"bytes,2,rep,name=label_orders,json=labelOrders,proto3" json:"label_orders,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchLabelOrdersRequest) Reset() {
	*x = PatchLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchLabelOrdersRequest) ProtoMessage() {}

func (x *PatchLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*PatchLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{422}
}

func (x *PatchLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchLabelOrdersRequest) GetLabelOrders() []*LabelOrder {
	if x != nil {
		return x.LabelOrders
	}
	return nil
}

func (x *PatchLabelOrdersRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete a list of label orders.
type DeleteLabelOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteLabelOrdersRequest) Reset() {
	*x = DeleteLabelOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelOrdersRequest) ProtoMessage() {}

func (x *DeleteLabelOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelOrdersRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabelOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{423}
}

func (x *DeleteLabelOrdersRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteLabelOrdersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Response with multiple label order.
type MultiLabelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LabelOrders []*LabelOrder  `protobuf:"bytes,2,rep,name=label_orders,json=labelOrders,proto3" json:"label_orders,omitempty"`
}

func (x *MultiLabelOrderResponse) Reset() {
	*x = MultiLabelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLabelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLabelOrderResponse) ProtoMessage() {}

func (x *MultiLabelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLabelOrderResponse.ProtoReflect.Descriptor instead.
func (*MultiLabelOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{424}
}

func (x *MultiLabelOrderResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiLabelOrderResponse) GetLabelOrders() []*LabelOrder {
	if x != nil {
		return x.LabelOrders
	}
	return nil
}

// Response with a label order.
type SingleLabelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LabelOrder *LabelOrder    `protobuf:"bytes,2,opt,name=label_order,json=labelOrder,proto3" json:"label_order,omitempty"`
}

func (x *SingleLabelOrderResponse) Reset() {
	*x = SingleLabelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleLabelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleLabelOrderResponse) ProtoMessage() {}

func (x *SingleLabelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleLabelOrderResponse.ProtoReflect.Descriptor instead.
func (*SingleLabelOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{425}
}

func (x *SingleLabelOrderResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleLabelOrderResponse) GetLabelOrder() *LabelOrder {
	if x != nil {
		return x.LabelOrder
	}
	return nil
}

// Request to create Collectors.
type PostCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collectors []*Collector  `protobuf:"bytes,2,rep,name=collectors,proto3" json:"collectors,omitempty"`
}

func (x *PostCollectorsRequest) Reset() {
	*x = PostCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCollectorsRequest) ProtoMessage() {}

func (x *PostCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCollectorsRequest.ProtoReflect.Descriptor instead.
func (*PostCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{426}
}

func (x *PostCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostCollectorsRequest) GetCollectors() []*Collector {
	if x != nil {
		return x.Collectors
	}
	return nil
}

// PatchCollectorsRequest
type PatchCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId  *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Collectors []*Collector  `protobuf:"bytes,2,rep,name=collectors,proto3" json:"collectors,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchCollectorsRequest) Reset() {
	*x = PatchCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCollectorsRequest) ProtoMessage() {}

func (x *PatchCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCollectorsRequest.ProtoReflect.Descriptor instead.
func (*PatchCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{427}
}

func (x *PatchCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchCollectorsRequest) GetCollectors() []*Collector {
	if x != nil {
		return x.Collectors
	}
	return nil
}

func (x *PatchCollectorsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	DeleteAll bool          `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteCollectorsRequest) Reset() {
	*x = DeleteCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectorsRequest) ProtoMessage() {}

func (x *DeleteCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectorsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{428}
}

func (x *DeleteCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteCollectorsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteCollectorsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// Request to GET a single Collector.
type GetCollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	//The collecgtor id
	CollectorId string `protobuf:"bytes,2,opt,name=collector_id,json=collectorId,proto3" json:"collector_id,omitempty"`
}

func (x *GetCollectorRequest) Reset() {
	*x = GetCollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectorRequest) ProtoMessage() {}

func (x *GetCollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectorRequest.ProtoReflect.Descriptor instead.
func (*GetCollectorRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{429}
}

func (x *GetCollectorRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetCollectorRequest) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

// Request to GET all the Collectors.
type ListCollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListCollectorsRequest) Reset() {
	*x = ListCollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectorsRequest) ProtoMessage() {}

func (x *ListCollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectorsRequest.ProtoReflect.Descriptor instead.
func (*ListCollectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{430}
}

func (x *ListCollectorsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListCollectorsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCollectorsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Response with multiple Collectors.
type MultiCollectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collectors []*Collector   `protobuf:"bytes,2,rep,name=collectors,proto3" json:"collectors,omitempty"`
}

func (x *MultiCollectorResponse) Reset() {
	*x = MultiCollectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCollectorResponse) ProtoMessage() {}

func (x *MultiCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCollectorResponse.ProtoReflect.Descriptor instead.
func (*MultiCollectorResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{431}
}

func (x *MultiCollectorResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiCollectorResponse) GetCollectors() []*Collector {
	if x != nil {
		return x.Collectors
	}
	return nil
}

// Response with a single Collector.
type SingleCollectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Collector *Collector     `protobuf:"bytes,2,opt,name=collector,proto3" json:"collector,omitempty"`
}

func (x *SingleCollectorResponse) Reset() {
	*x = SingleCollectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleCollectorResponse) ProtoMessage() {}

func (x *SingleCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleCollectorResponse.ProtoReflect.Descriptor instead.
func (*SingleCollectorResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{432}
}

func (x *SingleCollectorResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleCollectorResponse) GetCollector() *Collector {
	if x != nil {
		return x.Collector
	}
	return nil
}

// PostStatValuesRequest
type PostStatValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user and app information for the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The stats to post, can post more than one at a time.
	StatValues []*StatValue `protobuf:"bytes,2,rep,name=stat_values,json=statValues,proto3" json:"stat_values,omitempty"`
}

func (x *PostStatValuesRequest) Reset() {
	*x = PostStatValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStatValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStatValuesRequest) ProtoMessage() {}

func (x *PostStatValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStatValuesRequest.ProtoReflect.Descriptor instead.
func (*PostStatValuesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{433}
}

func (x *PostStatValuesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostStatValuesRequest) GetStatValues() []*StatValue {
	if x != nil {
		return x.StatValues
	}
	return nil
}

// MultiStatValueResponse
type MultiStatValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The returned stats values.
	StatValues []*StatValue `protobuf:"bytes,2,rep,name=stat_values,json=statValues,proto3" json:"stat_values,omitempty"`
}

func (x *MultiStatValueResponse) Reset() {
	*x = MultiStatValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiStatValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStatValueResponse) ProtoMessage() {}

func (x *MultiStatValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStatValueResponse.ProtoReflect.Descriptor instead.
func (*MultiStatValueResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{434}
}

func (x *MultiStatValueResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiStatValueResponse) GetStatValues() []*StatValue {
	if x != nil {
		return x.StatValues
	}
	return nil
}

// PostStatValuesAggregateRequest
type PostStatValuesAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ids present in the url of the request.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Query to retrieve aggregate values.
	StatValueAggregateQueries []*StatValueAggregateQuery `protobuf:"bytes,2,rep,name=stat_value_aggregate_queries,json=statValueAggregateQueries,proto3" json:"stat_value_aggregate_queries,omitempty"`
}

func (x *PostStatValuesAggregateRequest) Reset() {
	*x = PostStatValuesAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStatValuesAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStatValuesAggregateRequest) ProtoMessage() {}

func (x *PostStatValuesAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStatValuesAggregateRequest.ProtoReflect.Descriptor instead.
func (*PostStatValuesAggregateRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{435}
}

func (x *PostStatValuesAggregateRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostStatValuesAggregateRequest) GetStatValueAggregateQueries() []*StatValueAggregateQuery {
	if x != nil {
		return x.StatValueAggregateQueries
	}
	return nil
}

// MultiStatValueAggregateResponse
type MultiStatValueAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The aggregate results for each query passedin.
	StatValueAggregateResults []*StatValueAggregateResult `protobuf:"bytes,2,rep,name=stat_value_aggregate_results,json=statValueAggregateResults,proto3" json:"stat_value_aggregate_results,omitempty"`
}

func (x *MultiStatValueAggregateResponse) Reset() {
	*x = MultiStatValueAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiStatValueAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStatValueAggregateResponse) ProtoMessage() {}

func (x *MultiStatValueAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStatValueAggregateResponse.ProtoReflect.Descriptor instead.
func (*MultiStatValueAggregateResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{436}
}

func (x *MultiStatValueAggregateResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiStatValueAggregateResponse) GetStatValueAggregateResults() []*StatValueAggregateResult {
	if x != nil {
		return x.StatValueAggregateResults
	}
	return nil
}

// PostAnalyticsRequest
type PostAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this data packet, in order to avoid duplicates on the server side
	BatchUniqueIdentifier string                 `protobuf:"bytes,1,opt,name=batch_unique_identifier,json=batchUniqueIdentifier,proto3" json:"batch_unique_identifier,omitempty"`
	DeviceInfo            *DeviceInfo            `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	EventsCollection      []*SDKEventsCollection `protobuf:"bytes,3,rep,name=events_collection,json=eventsCollection,proto3" json:"events_collection,omitempty"`
	HostAppInfo           *HostAppInfo           `protobuf:"bytes,4,opt,name=host_app_info,json=hostAppInfo,proto3" json:"host_app_info,omitempty"`
	OperatingSystem       *OperatingSystem       `protobuf:"bytes,5,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	State                 *State                 `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	SystemUuid            string                 `protobuf:"bytes,7,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"` // System unique identifier for the combination user + device
	Timestamp             *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                     // Timestamp the data was persisted on the device
	Sdk                   *SDK                   `protobuf:"bytes,9,opt,name=sdk,proto3" json:"sdk,omitempty"`
}

func (x *PostAnalyticsRequest) Reset() {
	*x = PostAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnalyticsRequest) ProtoMessage() {}

func (x *PostAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*PostAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{437}
}

func (x *PostAnalyticsRequest) GetBatchUniqueIdentifier() string {
	if x != nil {
		return x.BatchUniqueIdentifier
	}
	return ""
}

func (x *PostAnalyticsRequest) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *PostAnalyticsRequest) GetEventsCollection() []*SDKEventsCollection {
	if x != nil {
		return x.EventsCollection
	}
	return nil
}

func (x *PostAnalyticsRequest) GetHostAppInfo() *HostAppInfo {
	if x != nil {
		return x.HostAppInfo
	}
	return nil
}

func (x *PostAnalyticsRequest) GetOperatingSystem() *OperatingSystem {
	if x != nil {
		return x.OperatingSystem
	}
	return nil
}

func (x *PostAnalyticsRequest) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PostAnalyticsRequest) GetSystemUuid() string {
	if x != nil {
		return x.SystemUuid
	}
	return ""
}

func (x *PostAnalyticsRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PostAnalyticsRequest) GetSdk() *SDK {
	if x != nil {
		return x.Sdk
	}
	return nil
}

// PostAnalyticsResponse
type PostAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PostAnalyticsResponse) Reset() {
	*x = PostAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnalyticsResponse) ProtoMessage() {}

func (x *PostAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*PostAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{438}
}

func (x *PostAnalyticsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// PostSDKBillingRequest
type PostSDKBillingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchUniqueIdentifier string           `protobuf:"bytes,1,opt,name=batch_unique_identifier,json=batchUniqueIdentifier,proto3" json:"batch_unique_identifier,omitempty"` // Unique identifier for this data packet, in order to avoid duplicates on the server side
	DeviceInfo            *DeviceInfo      `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	Cycle                 *SDKBillingCycle `protobuf:"bytes,3,opt,name=cycle,proto3" json:"cycle,omitempty"`
	HostAppInfo           *HostAppInfo     `protobuf:"bytes,4,opt,name=host_app_info,json=hostAppInfo,proto3" json:"host_app_info,omitempty"`
	OperatingSystem       *OperatingSystem `protobuf:"bytes,5,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	State                 *State           `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	SystemUuid            string           `protobuf:"bytes,7,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"` // System unique identifier for the combination user + device
	Sdk                   *SDK             `protobuf:"bytes,8,opt,name=sdk,proto3" json:"sdk,omitempty"`
}

func (x *PostSDKBillingRequest) Reset() {
	*x = PostSDKBillingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSDKBillingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSDKBillingRequest) ProtoMessage() {}

func (x *PostSDKBillingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSDKBillingRequest.ProtoReflect.Descriptor instead.
func (*PostSDKBillingRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{439}
}

func (x *PostSDKBillingRequest) GetBatchUniqueIdentifier() string {
	if x != nil {
		return x.BatchUniqueIdentifier
	}
	return ""
}

func (x *PostSDKBillingRequest) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *PostSDKBillingRequest) GetCycle() *SDKBillingCycle {
	if x != nil {
		return x.Cycle
	}
	return nil
}

func (x *PostSDKBillingRequest) GetHostAppInfo() *HostAppInfo {
	if x != nil {
		return x.HostAppInfo
	}
	return nil
}

func (x *PostSDKBillingRequest) GetOperatingSystem() *OperatingSystem {
	if x != nil {
		return x.OperatingSystem
	}
	return nil
}

func (x *PostSDKBillingRequest) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PostSDKBillingRequest) GetSystemUuid() string {
	if x != nil {
		return x.SystemUuid
	}
	return ""
}

func (x *PostSDKBillingRequest) GetSdk() *SDK {
	if x != nil {
		return x.Sdk
	}
	return nil
}

// PostSDKBillingResponse
type PostSDKBillingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *status.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Commands *commands.Commands `protobuf:"bytes,2,opt,name=commands,proto3" json:"commands,omitempty"`
}

func (x *PostSDKBillingResponse) Reset() {
	*x = PostSDKBillingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSDKBillingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSDKBillingResponse) ProtoMessage() {}

func (x *PostSDKBillingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSDKBillingResponse.ProtoReflect.Descriptor instead.
func (*PostSDKBillingResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{440}
}

func (x *PostSDKBillingResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PostSDKBillingResponse) GetCommands() *commands.Commands {
	if x != nil {
		return x.Commands
	}
	return nil
}

// MultiFindDuplicateAnnotationsJobResponse
type MultiFindDuplicateAnnotationsJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The find duplicate annotation jobs that were started
	FindDuplicateAnnotationsJobs []*FindDuplicateAnnotationsJob `protobuf:"bytes,2,rep,name=find_duplicate_annotations_jobs,json=findDuplicateAnnotationsJobs,proto3" json:"find_duplicate_annotations_jobs,omitempty"`
}

func (x *MultiFindDuplicateAnnotationsJobResponse) Reset() {
	*x = MultiFindDuplicateAnnotationsJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiFindDuplicateAnnotationsJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiFindDuplicateAnnotationsJobResponse) ProtoMessage() {}

func (x *MultiFindDuplicateAnnotationsJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiFindDuplicateAnnotationsJobResponse.ProtoReflect.Descriptor instead.
func (*MultiFindDuplicateAnnotationsJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{441}
}

func (x *MultiFindDuplicateAnnotationsJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiFindDuplicateAnnotationsJobResponse) GetFindDuplicateAnnotationsJobs() []*FindDuplicateAnnotationsJob {
	if x != nil {
		return x.FindDuplicateAnnotationsJobs
	}
	return nil
}

// SingleFindDuplicateAnnotationsJobResponse
type SingleFindDuplicateAnnotationsJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                      *status.Status               `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	FindDuplicateAnnotationsJob *FindDuplicateAnnotationsJob `protobuf:"bytes,2,opt,name=find_duplicate_annotations_job,json=findDuplicateAnnotationsJob,proto3" json:"find_duplicate_annotations_job,omitempty"`
}

func (x *SingleFindDuplicateAnnotationsJobResponse) Reset() {
	*x = SingleFindDuplicateAnnotationsJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleFindDuplicateAnnotationsJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleFindDuplicateAnnotationsJobResponse) ProtoMessage() {}

func (x *SingleFindDuplicateAnnotationsJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleFindDuplicateAnnotationsJobResponse.ProtoReflect.Descriptor instead.
func (*SingleFindDuplicateAnnotationsJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{442}
}

func (x *SingleFindDuplicateAnnotationsJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleFindDuplicateAnnotationsJobResponse) GetFindDuplicateAnnotationsJob() *FindDuplicateAnnotationsJob {
	if x != nil {
		return x.FindDuplicateAnnotationsJob
	}
	return nil
}

// PostFindDuplicateAnnotationsJobsRequest
type PostFindDuplicateAnnotationsJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The find duplicate annotation jobs that are being started
	FindDuplicateAnnotationsJobs []*FindDuplicateAnnotationsJob `protobuf:"bytes,2,rep,name=find_duplicate_annotations_jobs,json=findDuplicateAnnotationsJobs,proto3" json:"find_duplicate_annotations_jobs,omitempty"`
}

func (x *PostFindDuplicateAnnotationsJobsRequest) Reset() {
	*x = PostFindDuplicateAnnotationsJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostFindDuplicateAnnotationsJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostFindDuplicateAnnotationsJobsRequest) ProtoMessage() {}

func (x *PostFindDuplicateAnnotationsJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostFindDuplicateAnnotationsJobsRequest.ProtoReflect.Descriptor instead.
func (*PostFindDuplicateAnnotationsJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{443}
}

func (x *PostFindDuplicateAnnotationsJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostFindDuplicateAnnotationsJobsRequest) GetFindDuplicateAnnotationsJobs() []*FindDuplicateAnnotationsJob {
	if x != nil {
		return x.FindDuplicateAnnotationsJobs
	}
	return nil
}

// GetFindDuplicateAnnotationsJobRequest
type GetFindDuplicateAnnotationsJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFindDuplicateAnnotationsJobRequest) Reset() {
	*x = GetFindDuplicateAnnotationsJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFindDuplicateAnnotationsJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFindDuplicateAnnotationsJobRequest) ProtoMessage() {}

func (x *GetFindDuplicateAnnotationsJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFindDuplicateAnnotationsJobRequest.ProtoReflect.Descriptor instead.
func (*GetFindDuplicateAnnotationsJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{444}
}

func (x *GetFindDuplicateAnnotationsJobRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetFindDuplicateAnnotationsJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListFindDuplicateAnnotationsJobsRequest
type ListFindDuplicateAnnotationsJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListFindDuplicateAnnotationsJobsRequest) Reset() {
	*x = ListFindDuplicateAnnotationsJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFindDuplicateAnnotationsJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFindDuplicateAnnotationsJobsRequest) ProtoMessage() {}

func (x *ListFindDuplicateAnnotationsJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFindDuplicateAnnotationsJobsRequest.ProtoReflect.Descriptor instead.
func (*ListFindDuplicateAnnotationsJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{445}
}

func (x *ListFindDuplicateAnnotationsJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListFindDuplicateAnnotationsJobsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListFindDuplicateAnnotationsJobsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// DeleteFindDuplicateAnnotationsJobsRequest
type DeleteFindDuplicateAnnotationsJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteFindDuplicateAnnotationsJobsRequest) Reset() {
	*x = DeleteFindDuplicateAnnotationsJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFindDuplicateAnnotationsJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFindDuplicateAnnotationsJobsRequest) ProtoMessage() {}

func (x *DeleteFindDuplicateAnnotationsJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFindDuplicateAnnotationsJobsRequest.ProtoReflect.Descriptor instead.
func (*DeleteFindDuplicateAnnotationsJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{446}
}

func (x *DeleteFindDuplicateAnnotationsJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteFindDuplicateAnnotationsJobsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// PostTrendingMetricsViewRequest
type PostTrendingMetricsViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// For now view types 'apps', 'workflows', and 'models' are supported.
	ViewType string `protobuf:"bytes,2,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	// ID of the views object.
	ObjectId string `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *PostTrendingMetricsViewRequest) Reset() {
	*x = PostTrendingMetricsViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTrendingMetricsViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTrendingMetricsViewRequest) ProtoMessage() {}

func (x *PostTrendingMetricsViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTrendingMetricsViewRequest.ProtoReflect.Descriptor instead.
func (*PostTrendingMetricsViewRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{447}
}

func (x *PostTrendingMetricsViewRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostTrendingMetricsViewRequest) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *PostTrendingMetricsViewRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

// ListTrendingMetricsViewsRequest
type ListTrendingMetricsViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// For now view types 'apps', 'workflows', and 'models' are supported.
	ViewType string `protobuf:"bytes,2,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListTrendingMetricsViewsRequest) Reset() {
	*x = ListTrendingMetricsViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrendingMetricsViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrendingMetricsViewsRequest) ProtoMessage() {}

func (x *ListTrendingMetricsViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrendingMetricsViewsRequest.ProtoReflect.Descriptor instead.
func (*ListTrendingMetricsViewsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{448}
}

func (x *ListTrendingMetricsViewsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListTrendingMetricsViewsRequest) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *ListTrendingMetricsViewsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTrendingMetricsViewsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// MultiTrendingMetricsViewResponse
type MultiTrendingMetricsViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metrics []*TrendingMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MultiTrendingMetricsViewResponse) Reset() {
	*x = MultiTrendingMetricsViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTrendingMetricsViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTrendingMetricsViewResponse) ProtoMessage() {}

func (x *MultiTrendingMetricsViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTrendingMetricsViewResponse.ProtoReflect.Descriptor instead.
func (*MultiTrendingMetricsViewResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{449}
}

func (x *MultiTrendingMetricsViewResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTrendingMetricsViewResponse) GetMetrics() []*TrendingMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// PostIdValidationRequest
type PostIdValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of validations to parse
	Validations []*Validation `protobuf:"bytes,1,rep,name=validations,proto3" json:"validations,omitempty"`
}

func (x *PostIdValidationRequest) Reset() {
	*x = PostIdValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostIdValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostIdValidationRequest) ProtoMessage() {}

func (x *PostIdValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostIdValidationRequest.ProtoReflect.Descriptor instead.
func (*PostIdValidationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{450}
}

func (x *PostIdValidationRequest) GetValidations() []*Validation {
	if x != nil {
		return x.Validations
	}
	return nil
}

// MultiIdValidationResponse
type MultiIdValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Results of validation
	ValidationResults []*ValidationResult `protobuf:"bytes,2,rep,name=validation_results,json=validationResults,proto3" json:"validation_results,omitempty"`
}

func (x *MultiIdValidationResponse) Reset() {
	*x = MultiIdValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiIdValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiIdValidationResponse) ProtoMessage() {}

func (x *MultiIdValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiIdValidationResponse.ProtoReflect.Descriptor instead.
func (*MultiIdValidationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{451}
}

func (x *MultiIdValidationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiIdValidationResponse) GetValidationResults() []*ValidationResult {
	if x != nil {
		return x.ValidationResults
	}
	return nil
}

// ListTagCategoriesRequest
type ListTagCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of object. 'model' is supported
	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
}

func (x *ListTagCategoriesRequest) Reset() {
	*x = ListTagCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTagCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagCategoriesRequest) ProtoMessage() {}

func (x *ListTagCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagCategoriesRequest.ProtoReflect.Descriptor instead.
func (*ListTagCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{452}
}

func (x *ListTagCategoriesRequest) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

// MultiTagCategoryResponse
type MultiTagCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Categories of tags with all valid tags
	Categories []*TagCategory `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *MultiTagCategoryResponse) Reset() {
	*x = MultiTagCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTagCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTagCategoryResponse) ProtoMessage() {}

func (x *MultiTagCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTagCategoryResponse.ProtoReflect.Descriptor instead.
func (*MultiTagCategoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{453}
}

func (x *MultiTagCategoryResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiTagCategoryResponse) GetCategories() []*TagCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// PostModelStarsRequest
type PostModelStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Model stars to create (supports 1)
	ModelStars []*ModelStar `protobuf:"bytes,2,rep,name=model_stars,json=modelStars,proto3" json:"model_stars,omitempty"`
}

func (x *PostModelStarsRequest) Reset() {
	*x = PostModelStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModelStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModelStarsRequest) ProtoMessage() {}

func (x *PostModelStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModelStarsRequest.ProtoReflect.Descriptor instead.
func (*PostModelStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{454}
}

func (x *PostModelStarsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModelStarsRequest) GetModelStars() []*ModelStar {
	if x != nil {
		return x.ModelStars
	}
	return nil
}

// MultiModelStarResponse
type MultiModelStarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Model stars
	ModelStars []*ModelStar `protobuf:"bytes,2,rep,name=model_stars,json=modelStars,proto3" json:"model_stars,omitempty"`
}

func (x *MultiModelStarResponse) Reset() {
	*x = MultiModelStarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModelStarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModelStarResponse) ProtoMessage() {}

func (x *MultiModelStarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModelStarResponse.ProtoReflect.Descriptor instead.
func (*MultiModelStarResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{455}
}

func (x *MultiModelStarResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModelStarResponse) GetModelStars() []*ModelStar {
	if x != nil {
		return x.ModelStars
	}
	return nil
}

// DeleteModelStarsRequest
type DeleteModelStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// ModelIds of model stars to delete (supports 1)
	ModelIds []string `protobuf:"bytes,2,rep,name=model_ids,json=modelIds,proto3" json:"model_ids,omitempty"`
}

func (x *DeleteModelStarsRequest) Reset() {
	*x = DeleteModelStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelStarsRequest) ProtoMessage() {}

func (x *DeleteModelStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelStarsRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{456}
}

func (x *DeleteModelStarsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModelStarsRequest) GetModelIds() []string {
	if x != nil {
		return x.ModelIds
	}
	return nil
}

// DeleteModelStarsResponse
type DeleteModelStarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of deleted model stars model_ids
	ModelIds []string `protobuf:"bytes,2,rep,name=model_ids,json=modelIds,proto3" json:"model_ids,omitempty"`
}

func (x *DeleteModelStarsResponse) Reset() {
	*x = DeleteModelStarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelStarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelStarsResponse) ProtoMessage() {}

func (x *DeleteModelStarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelStarsResponse.ProtoReflect.Descriptor instead.
func (*DeleteModelStarsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{457}
}

func (x *DeleteModelStarsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteModelStarsResponse) GetModelIds() []string {
	if x != nil {
		return x.ModelIds
	}
	return nil
}

// PostUserStarsRequest
type PostUserStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User stars to create (supports 1)
	UserStars []*UserStar `protobuf:"bytes,1,rep,name=user_stars,json=userStars,proto3" json:"user_stars,omitempty"`
}

func (x *PostUserStarsRequest) Reset() {
	*x = PostUserStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUserStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUserStarsRequest) ProtoMessage() {}

func (x *PostUserStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUserStarsRequest.ProtoReflect.Descriptor instead.
func (*PostUserStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{458}
}

func (x *PostUserStarsRequest) GetUserStars() []*UserStar {
	if x != nil {
		return x.UserStars
	}
	return nil
}

// MultiUserStarResponse
type MultiUserStarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// User stars
	UserStars []*UserStar `protobuf:"bytes,2,rep,name=user_stars,json=userStars,proto3" json:"user_stars,omitempty"`
}

func (x *MultiUserStarResponse) Reset() {
	*x = MultiUserStarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUserStarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUserStarResponse) ProtoMessage() {}

func (x *MultiUserStarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUserStarResponse.ProtoReflect.Descriptor instead.
func (*MultiUserStarResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{459}
}

func (x *MultiUserStarResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiUserStarResponse) GetUserStars() []*UserStar {
	if x != nil {
		return x.UserStars
	}
	return nil
}

// DeleteUserStarsRequest
type DeleteUserStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserIds of user stars to delete (supports 1)
	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *DeleteUserStarsRequest) Reset() {
	*x = DeleteUserStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserStarsRequest) ProtoMessage() {}

func (x *DeleteUserStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserStarsRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{460}
}

func (x *DeleteUserStarsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// DeleteUserStarsResponse
type DeleteUserStarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of deleted user stars user_ids
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *DeleteUserStarsResponse) Reset() {
	*x = DeleteUserStarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserStarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserStarsResponse) ProtoMessage() {}

func (x *DeleteUserStarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserStarsResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserStarsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{461}
}

func (x *DeleteUserStarsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteUserStarsResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// PostAppStarsRequest
type PostAppStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// App stars to create (supports 1)
	AppStars []*AppStar `protobuf:"bytes,2,rep,name=app_stars,json=appStars,proto3" json:"app_stars,omitempty"`
}

func (x *PostAppStarsRequest) Reset() {
	*x = PostAppStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppStarsRequest) ProtoMessage() {}

func (x *PostAppStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppStarsRequest.ProtoReflect.Descriptor instead.
func (*PostAppStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{462}
}

func (x *PostAppStarsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostAppStarsRequest) GetAppStars() []*AppStar {
	if x != nil {
		return x.AppStars
	}
	return nil
}

// MultiAppStarResponse
type MultiAppStarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// App stars
	AppStars []*AppStar `protobuf:"bytes,2,rep,name=app_stars,json=appStars,proto3" json:"app_stars,omitempty"`
}

func (x *MultiAppStarResponse) Reset() {
	*x = MultiAppStarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAppStarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAppStarResponse) ProtoMessage() {}

func (x *MultiAppStarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAppStarResponse.ProtoReflect.Descriptor instead.
func (*MultiAppStarResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{463}
}

func (x *MultiAppStarResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiAppStarResponse) GetAppStars() []*AppStar {
	if x != nil {
		return x.AppStars
	}
	return nil
}

// DeleteAppStarsRequest
type DeleteAppStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// AppIds of app stars to delete (supports 1)
	AppIds []string `protobuf:"bytes,2,rep,name=app_ids,json=appIds,proto3" json:"app_ids,omitempty"`
}

func (x *DeleteAppStarsRequest) Reset() {
	*x = DeleteAppStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppStarsRequest) ProtoMessage() {}

func (x *DeleteAppStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppStarsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{464}
}

func (x *DeleteAppStarsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteAppStarsRequest) GetAppIds() []string {
	if x != nil {
		return x.AppIds
	}
	return nil
}

// DeleteAppStarsResponse
type DeleteAppStarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of deleted app stars app_ids
	AppIds []string `protobuf:"bytes,2,rep,name=app_ids,json=appIds,proto3" json:"app_ids,omitempty"`
}

func (x *DeleteAppStarsResponse) Reset() {
	*x = DeleteAppStarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppStarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppStarsResponse) ProtoMessage() {}

func (x *DeleteAppStarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppStarsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAppStarsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{465}
}

func (x *DeleteAppStarsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteAppStarsResponse) GetAppIds() []string {
	if x != nil {
		return x.AppIds
	}
	return nil
}

// PostWorkflowStarsRequest
type PostWorkflowStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Workflow stars to create (supports 1)
	WorkflowStars []*WorkflowStar `protobuf:"bytes,2,rep,name=workflow_stars,json=workflowStars,proto3" json:"workflow_stars,omitempty"`
}

func (x *PostWorkflowStarsRequest) Reset() {
	*x = PostWorkflowStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkflowStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkflowStarsRequest) ProtoMessage() {}

func (x *PostWorkflowStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkflowStarsRequest.ProtoReflect.Descriptor instead.
func (*PostWorkflowStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{466}
}

func (x *PostWorkflowStarsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostWorkflowStarsRequest) GetWorkflowStars() []*WorkflowStar {
	if x != nil {
		return x.WorkflowStars
	}
	return nil
}

// MultiWorkflowStarResponse
type MultiWorkflowStarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Workflow stars
	WorkflowStars []*WorkflowStar `protobuf:"bytes,2,rep,name=workflow_stars,json=workflowStars,proto3" json:"workflow_stars,omitempty"`
}

func (x *MultiWorkflowStarResponse) Reset() {
	*x = MultiWorkflowStarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkflowStarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkflowStarResponse) ProtoMessage() {}

func (x *MultiWorkflowStarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkflowStarResponse.ProtoReflect.Descriptor instead.
func (*MultiWorkflowStarResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{467}
}

func (x *MultiWorkflowStarResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWorkflowStarResponse) GetWorkflowStars() []*WorkflowStar {
	if x != nil {
		return x.WorkflowStars
	}
	return nil
}

// DeleteWorkflowStarsRequest
type DeleteWorkflowStarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id and app_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// WorkflowIds of workflow stars to delete (supports 1)
	WorkflowIds []string `protobuf:"bytes,2,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"`
}

func (x *DeleteWorkflowStarsRequest) Reset() {
	*x = DeleteWorkflowStarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowStarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowStarsRequest) ProtoMessage() {}

func (x *DeleteWorkflowStarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowStarsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowStarsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{468}
}

func (x *DeleteWorkflowStarsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWorkflowStarsRequest) GetWorkflowIds() []string {
	if x != nil {
		return x.WorkflowIds
	}
	return nil
}

// DeleteWorkflowStarsResponse
type DeleteWorkflowStarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of deleted workflow stars workflow_ids
	WorkflowIds []string `protobuf:"bytes,2,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"`
}

func (x *DeleteWorkflowStarsResponse) Reset() {
	*x = DeleteWorkflowStarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowStarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowStarsResponse) ProtoMessage() {}

func (x *DeleteWorkflowStarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowStarsResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowStarsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{469}
}

func (x *DeleteWorkflowStarsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteWorkflowStarsResponse) GetWorkflowIds() []string {
	if x != nil {
		return x.WorkflowIds
	}
	return nil
}

// ListWebNotificationsRequest
type ListWebNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) Return only unread notifications
	UnreadOnly bool `protobuf:"varint,2,opt,name=unread_only,json=unreadOnly,proto3" json:"unread_only,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListWebNotificationsRequest) Reset() {
	*x = ListWebNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebNotificationsRequest) ProtoMessage() {}

func (x *ListWebNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebNotificationsRequest.ProtoReflect.Descriptor instead.
func (*ListWebNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{470}
}

func (x *ListWebNotificationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListWebNotificationsRequest) GetUnreadOnly() bool {
	if x != nil {
		return x.UnreadOnly
	}
	return false
}

func (x *ListWebNotificationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWebNotificationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// GetWebNotificationRequest
type GetWebNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Id of the notification to fetch
	NotificationId string `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
}

func (x *GetWebNotificationRequest) Reset() {
	*x = GetWebNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebNotificationRequest) ProtoMessage() {}

func (x *GetWebNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebNotificationRequest.ProtoReflect.Descriptor instead.
func (*GetWebNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{471}
}

func (x *GetWebNotificationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetWebNotificationRequest) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

// DeleteNotificationsRequest
type DeleteWebNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Ids of notifications to delete
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteWebNotificationsRequest) Reset() {
	*x = DeleteWebNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebNotificationsRequest) ProtoMessage() {}

func (x *DeleteWebNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebNotificationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{472}
}

func (x *DeleteWebNotificationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteWebNotificationsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// PatchWebNotificationsRequest
type PatchWebNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user_id information.
	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Notifications to patch
	Notifications []*PatchWebNotification `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// The action to perform on the patched objects
	// Only 'overwrite' is supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchWebNotificationsRequest) Reset() {
	*x = PatchWebNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchWebNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchWebNotificationsRequest) ProtoMessage() {}

func (x *PatchWebNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchWebNotificationsRequest.ProtoReflect.Descriptor instead.
func (*PatchWebNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{473}
}

func (x *PatchWebNotificationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchWebNotificationsRequest) GetNotifications() []*PatchWebNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *PatchWebNotificationsRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// MultiNotificationResponse
type MultiWebNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// List of notifications
	Notifications []*WebNotification `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *MultiWebNotificationResponse) Reset() {
	*x = MultiWebNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWebNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWebNotificationResponse) ProtoMessage() {}

func (x *MultiWebNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWebNotificationResponse.ProtoReflect.Descriptor instead.
func (*MultiWebNotificationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{474}
}

func (x *MultiWebNotificationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWebNotificationResponse) GetNotifications() []*WebNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

// SingleNotificationResponse
type SingleWebNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Notification
	Notification *WebNotification `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (x *SingleWebNotificationResponse) Reset() {
	*x = SingleWebNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWebNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWebNotificationResponse) ProtoMessage() {}

func (x *SingleWebNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWebNotificationResponse.ProtoReflect.Descriptor instead.
func (*SingleWebNotificationResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{475}
}

func (x *SingleWebNotificationResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleWebNotificationResponse) GetNotification() *WebNotification {
	if x != nil {
		return x.Notification
	}
	return nil
}

// GetModuleRequest
type GetModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *GetModuleRequest) Reset() {
	*x = GetModuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleRequest) ProtoMessage() {}

func (x *GetModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleRequest.ProtoReflect.Descriptor instead.
func (*GetModuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{476}
}

func (x *GetModuleRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModuleRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

// ListModulesRequest
type ListModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModulesRequest) Reset() {
	*x = ListModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModulesRequest) ProtoMessage() {}

func (x *ListModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModulesRequest.ProtoReflect.Descriptor instead.
func (*ListModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{477}
}

func (x *ListModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModulesRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModulesRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostModulesRequest
type PostModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// This allows you to create one or more module by posting it to the API.
	Modules []*Module `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *PostModulesRequest) Reset() {
	*x = PostModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModulesRequest) ProtoMessage() {}

func (x *PostModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModulesRequest.ProtoReflect.Descriptor instead.
func (*PostModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{478}
}

func (x *PostModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModulesRequest) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

// PatchModulesRequest
type PatchModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Modules   []*Module     `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	// The action to perform on the patched objects
	// For now actions 'merge', 'overwrite', and 'remove' are supported
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PatchModulesRequest) Reset() {
	*x = PatchModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModulesRequest) ProtoMessage() {}

func (x *PatchModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModulesRequest.ProtoReflect.Descriptor instead.
func (*PatchModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{479}
}

func (x *PatchModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PatchModulesRequest) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *PatchModulesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Request to delete several things by the list of ids.
type DeleteModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteModulesRequest) Reset() {
	*x = DeleteModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModulesRequest) ProtoMessage() {}

func (x *DeleteModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModulesRequest.ProtoReflect.Descriptor instead.
func (*DeleteModulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{480}
}

func (x *DeleteModulesRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModulesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleModuleResponse
type SingleModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Module *Module        `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *SingleModuleResponse) Reset() {
	*x = SingleModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModuleResponse) ProtoMessage() {}

func (x *SingleModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModuleResponse.ProtoReflect.Descriptor instead.
func (*SingleModuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{481}
}

func (x *SingleModuleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModuleResponse) GetModule() *Module {
	if x != nil {
		return x.Module
	}
	return nil
}

// MultiModuleResponse
type MultiModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Modules []*Module      `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *MultiModuleResponse) Reset() {
	*x = MultiModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModuleResponse) ProtoMessage() {}

func (x *MultiModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModuleResponse.ProtoReflect.Descriptor instead.
func (*MultiModuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{482}
}

func (x *MultiModuleResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModuleResponse) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

// request for different endpoints currently.
type GetModuleVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId       *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId        string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ModuleVersionId string        `protobuf:"bytes,3,opt,name=module_version_id,json=moduleVersionId,proto3" json:"module_version_id,omitempty"`
}

func (x *GetModuleVersionRequest) Reset() {
	*x = GetModuleVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleVersionRequest) ProtoMessage() {}

func (x *GetModuleVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleVersionRequest.ProtoReflect.Descriptor instead.
func (*GetModuleVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{483}
}

func (x *GetModuleVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetModuleVersionRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *GetModuleVersionRequest) GetModuleVersionId() string {
	if x != nil {
		return x.ModuleVersionId
	}
	return ""
}

// ListModuleVersionsRequest
type ListModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListModuleVersionsRequest) Reset() {
	*x = ListModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModuleVersionsRequest) ProtoMessage() {}

func (x *ListModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{484}
}

func (x *ListModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListModuleVersionsRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *ListModuleVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListModuleVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostModuleVersionsRequest
type PostModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// This allows you to create one or more module by posting it to the API.
	ModuleVersions []*ModuleVersion `protobuf:"bytes,3,rep,name=module_versions,json=moduleVersions,proto3" json:"module_versions,omitempty"`
}

func (x *PostModuleVersionsRequest) Reset() {
	*x = PostModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostModuleVersionsRequest) ProtoMessage() {}

func (x *PostModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{485}
}

func (x *PostModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostModuleVersionsRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *PostModuleVersionsRequest) GetModuleVersions() []*ModuleVersion {
	if x != nil {
		return x.ModuleVersions
	}
	return nil
}

// Request to delete several module versions by the list of ids.
type DeleteModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	ModuleId  string        `protobuf:"bytes,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	Ids       []string      `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteModuleVersionsRequest) Reset() {
	*x = DeleteModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModuleVersionsRequest) ProtoMessage() {}

func (x *DeleteModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{486}
}

func (x *DeleteModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteModuleVersionsRequest) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *DeleteModuleVersionsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleModuleVersionResponse
type SingleModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModuleVersion *ModuleVersion `protobuf:"bytes,2,opt,name=module_version,json=moduleVersion,proto3" json:"module_version,omitempty"`
}

func (x *SingleModuleVersionResponse) Reset() {
	*x = SingleModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleModuleVersionResponse) ProtoMessage() {}

func (x *SingleModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{487}
}

func (x *SingleModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleModuleVersionResponse) GetModuleVersion() *ModuleVersion {
	if x != nil {
		return x.ModuleVersion
	}
	return nil
}

// MultiModuleVersionResponse
type MultiModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ModuleVersions []*ModuleVersion `protobuf:"bytes,2,rep,name=module_versions,json=moduleVersions,proto3" json:"module_versions,omitempty"`
}

func (x *MultiModuleVersionResponse) Reset() {
	*x = MultiModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModuleVersionResponse) ProtoMessage() {}

func (x *MultiModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{488}
}

func (x *MultiModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiModuleVersionResponse) GetModuleVersions() []*ModuleVersion {
	if x != nil {
		return x.ModuleVersions
	}
	return nil
}

// GetInstalledModuleVersionRequest
type GetInstalledModuleVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// the ID to get of the install module version.
	InstalledModuleVersionId string `protobuf:"bytes,2,opt,name=installed_module_version_id,json=installedModuleVersionId,proto3" json:"installed_module_version_id,omitempty"`
}

func (x *GetInstalledModuleVersionRequest) Reset() {
	*x = GetInstalledModuleVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstalledModuleVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstalledModuleVersionRequest) ProtoMessage() {}

func (x *GetInstalledModuleVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstalledModuleVersionRequest.ProtoReflect.Descriptor instead.
func (*GetInstalledModuleVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{489}
}

func (x *GetInstalledModuleVersionRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInstalledModuleVersionRequest) GetInstalledModuleVersionId() string {
	if x != nil {
		return x.InstalledModuleVersionId
	}
	return ""
}

// ListInstalledModuleVersionsRequest
type ListInstalledModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListInstalledModuleVersionsRequest) Reset() {
	*x = ListInstalledModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstalledModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstalledModuleVersionsRequest) ProtoMessage() {}

func (x *ListInstalledModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstalledModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListInstalledModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{490}
}

func (x *ListInstalledModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListInstalledModuleVersionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListInstalledModuleVersionsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// PostInstalledModuleVersionsRequest to install a module version into the app in the URL
type PostInstalledModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// This allows you to create one or more module by posting it to the API.
	InstalledModuleVersions []*InstalledModuleVersion `protobuf:"bytes,2,rep,name=installed_module_versions,json=installedModuleVersions,proto3" json:"installed_module_versions,omitempty"`
}

func (x *PostInstalledModuleVersionsRequest) Reset() {
	*x = PostInstalledModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInstalledModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInstalledModuleVersionsRequest) ProtoMessage() {}

func (x *PostInstalledModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInstalledModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*PostInstalledModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{491}
}

func (x *PostInstalledModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInstalledModuleVersionsRequest) GetInstalledModuleVersions() []*InstalledModuleVersion {
	if x != nil {
		return x.InstalledModuleVersions
	}
	return nil
}

// PostInstalledModuleVersionsKeyRequest to associate a key of the caller's to the installed module
// version.
type PostInstalledModuleVersionsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// the ID to get of the install module version.
	InstalledModuleVersionId string `protobuf:"bytes,2,opt,name=installed_module_version_id,json=installedModuleVersionId,proto3" json:"installed_module_version_id,omitempty"`
}

func (x *PostInstalledModuleVersionsKeyRequest) Reset() {
	*x = PostInstalledModuleVersionsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInstalledModuleVersionsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInstalledModuleVersionsKeyRequest) ProtoMessage() {}

func (x *PostInstalledModuleVersionsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInstalledModuleVersionsKeyRequest.ProtoReflect.Descriptor instead.
func (*PostInstalledModuleVersionsKeyRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{492}
}

func (x *PostInstalledModuleVersionsKeyRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInstalledModuleVersionsKeyRequest) GetInstalledModuleVersionId() string {
	if x != nil {
		return x.InstalledModuleVersionId
	}
	return ""
}

// Request to delete several installed module versions by the list of ids.
type DeleteInstalledModuleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteInstalledModuleVersionsRequest) Reset() {
	*x = DeleteInstalledModuleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstalledModuleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstalledModuleVersionsRequest) ProtoMessage() {}

func (x *DeleteInstalledModuleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstalledModuleVersionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstalledModuleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{493}
}

func (x *DeleteInstalledModuleVersionsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteInstalledModuleVersionsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleInstalledModuleVersionResponse
type SingleInstalledModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 *status.Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InstalledModuleVersion *InstalledModuleVersion `protobuf:"bytes,2,opt,name=installed_module_version,json=installedModuleVersion,proto3" json:"installed_module_version,omitempty"`
}

func (x *SingleInstalledModuleVersionResponse) Reset() {
	*x = SingleInstalledModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInstalledModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInstalledModuleVersionResponse) ProtoMessage() {}

func (x *SingleInstalledModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInstalledModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*SingleInstalledModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{494}
}

func (x *SingleInstalledModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInstalledModuleVersionResponse) GetInstalledModuleVersion() *InstalledModuleVersion {
	if x != nil {
		return x.InstalledModuleVersion
	}
	return nil
}

// MultiInstalledModuleVersionResponse
type MultiInstalledModuleVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                  *status.Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InstalledModuleVersions []*InstalledModuleVersion `protobuf:"bytes,2,rep,name=installed_module_versions,json=installedModuleVersions,proto3" json:"installed_module_versions,omitempty"`
}

func (x *MultiInstalledModuleVersionResponse) Reset() {
	*x = MultiInstalledModuleVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInstalledModuleVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInstalledModuleVersionResponse) ProtoMessage() {}

func (x *MultiInstalledModuleVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInstalledModuleVersionResponse.ProtoReflect.Descriptor instead.
func (*MultiInstalledModuleVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{495}
}

func (x *MultiInstalledModuleVersionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInstalledModuleVersionResponse) GetInstalledModuleVersions() []*InstalledModuleVersion {
	if x != nil {
		return x.InstalledModuleVersions
	}
	return nil
}

// ListNextTaskAssignmentsRequest
type ListNextTaskAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *ListNextTaskAssignmentsRequest) Reset() {
	*x = ListNextTaskAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNextTaskAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextTaskAssignmentsRequest) ProtoMessage() {}

func (x *ListNextTaskAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextTaskAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ListNextTaskAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{496}
}

func (x *ListNextTaskAssignmentsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListNextTaskAssignmentsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Request to perform bulk operations on a list of inputs based on input source.
type PostBulkOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of bulk operation(s) to be performed e.g bulk update metadata or tags or labels etc.
	BulkOperations []*BulkOperation `protobuf:"bytes,2,rep,name=bulk_operations,json=bulkOperations,proto3" json:"bulk_operations,omitempty"`
}

func (x *PostBulkOperationsRequest) Reset() {
	*x = PostBulkOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostBulkOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostBulkOperationsRequest) ProtoMessage() {}

func (x *PostBulkOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostBulkOperationsRequest.ProtoReflect.Descriptor instead.
func (*PostBulkOperationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{497}
}

func (x *PostBulkOperationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostBulkOperationsRequest) GetBulkOperations() []*BulkOperation {
	if x != nil {
		return x.BulkOperations
	}
	return nil
}

// Request to list all the bulk operations.
type ListBulkOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListBulkOperationsRequest) Reset() {
	*x = ListBulkOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBulkOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBulkOperationsRequest) ProtoMessage() {}

func (x *ListBulkOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBulkOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListBulkOperationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{498}
}

func (x *ListBulkOperationsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListBulkOperationsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListBulkOperationsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Request to get the details of a bulk operation by ID.
type GetBulkOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// The bulk operation id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBulkOperationRequest) Reset() {
	*x = GetBulkOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkOperationRequest) ProtoMessage() {}

func (x *GetBulkOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkOperationRequest.ProtoReflect.Descriptor instead.
func (*GetBulkOperationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{499}
}

func (x *GetBulkOperationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetBulkOperationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Cancel a list of bulk operation ids
type CancelBulkOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of bulk operation ids to be cancelled
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CancelBulkOperationRequest) Reset() {
	*x = CancelBulkOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBulkOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBulkOperationRequest) ProtoMessage() {}

func (x *CancelBulkOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBulkOperationRequest.ProtoReflect.Descriptor instead.
func (*CancelBulkOperationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{500}
}

func (x *CancelBulkOperationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *CancelBulkOperationRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request to delete the terminated bulk operations by ID
// Only operations in terminated state can be deleted.
type DeleteBulkOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// List of bulk operation ids to be deleted
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteBulkOperationRequest) Reset() {
	*x = DeleteBulkOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBulkOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBulkOperationRequest) ProtoMessage() {}

func (x *DeleteBulkOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBulkOperationRequest.ProtoReflect.Descriptor instead.
func (*DeleteBulkOperationRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{501}
}

func (x *DeleteBulkOperationRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteBulkOperationRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// SingleBulkOperationsResponse
type SingleBulkOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BulkOperation *BulkOperation `protobuf:"bytes,2,opt,name=bulk_operation,json=bulkOperation,proto3" json:"bulk_operation,omitempty"`
}

func (x *SingleBulkOperationsResponse) Reset() {
	*x = SingleBulkOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleBulkOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBulkOperationsResponse) ProtoMessage() {}

func (x *SingleBulkOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBulkOperationsResponse.ProtoReflect.Descriptor instead.
func (*SingleBulkOperationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{502}
}

func (x *SingleBulkOperationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleBulkOperationsResponse) GetBulkOperation() *BulkOperation {
	if x != nil {
		return x.BulkOperation
	}
	return nil
}

// MultiBulkOperationsResponse
type MultiBulkOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BulkOperation []*BulkOperation `protobuf:"bytes,2,rep,name=bulk_operation,json=bulkOperation,proto3" json:"bulk_operation,omitempty"`
}

func (x *MultiBulkOperationsResponse) Reset() {
	*x = MultiBulkOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiBulkOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiBulkOperationsResponse) ProtoMessage() {}

func (x *MultiBulkOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiBulkOperationsResponse.ProtoReflect.Descriptor instead.
func (*MultiBulkOperationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{503}
}

func (x *MultiBulkOperationsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiBulkOperationsResponse) GetBulkOperation() []*BulkOperation {
	if x != nil {
		return x.BulkOperation
	}
	return nil
}

// PutTaskAssignmentsRequest
type PutTaskAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	TaskId    string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	InputId   string        `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *PutTaskAssignmentsRequest) Reset() {
	*x = PutTaskAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskAssignmentsRequest) ProtoMessage() {}

func (x *PutTaskAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*PutTaskAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{504}
}

func (x *PutTaskAssignmentsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutTaskAssignmentsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PutTaskAssignmentsRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

// PostWaitlistEmailsRequest is the request for adding new e-mail addresses to
// a feature waiting list.
type PostWaitlistEmailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the feature waiting list where to add the emails.
	Feature string `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	// E-mail addresses to add to the feature waiting list.
	WaitlistEmails []*WaitlistEmail `protobuf:"bytes,2,rep,name=waitlist_emails,json=waitlistEmails,proto3" json:"waitlist_emails,omitempty"`
	// CAPTCHA user response token to verify that the request was made by a human.
	CaptchaResponseToken string `protobuf:"bytes,3,opt,name=captcha_response_token,json=captchaResponseToken,proto3" json:"captcha_response_token,omitempty"`
	// same as captcha_response_token but for callers that are opted-in to v3 captcha
	CaptchaResponseTokenV3 string `protobuf:"bytes,4,opt,name=captcha_response_token_v3,json=captchaResponseTokenV3,proto3" json:"captcha_response_token_v3,omitempty"`
}

func (x *PostWaitlistEmailsRequest) Reset() {
	*x = PostWaitlistEmailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWaitlistEmailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWaitlistEmailsRequest) ProtoMessage() {}

func (x *PostWaitlistEmailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWaitlistEmailsRequest.ProtoReflect.Descriptor instead.
func (*PostWaitlistEmailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{505}
}

func (x *PostWaitlistEmailsRequest) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *PostWaitlistEmailsRequest) GetWaitlistEmails() []*WaitlistEmail {
	if x != nil {
		return x.WaitlistEmails
	}
	return nil
}

func (x *PostWaitlistEmailsRequest) GetCaptchaResponseToken() string {
	if x != nil {
		return x.CaptchaResponseToken
	}
	return ""
}

func (x *PostWaitlistEmailsRequest) GetCaptchaResponseTokenV3() string {
	if x != nil {
		return x.CaptchaResponseTokenV3
	}
	return ""
}

// MultiWaitlistEmailResponse returns multiple e-mail addresses on a feature waiting list.
type MultiWaitlistEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *status.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	WaitlistEmails []*WaitlistEmail `protobuf:"bytes,2,rep,name=waitlist_emails,json=waitlistEmails,proto3" json:"waitlist_emails,omitempty"`
}

func (x *MultiWaitlistEmailResponse) Reset() {
	*x = MultiWaitlistEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWaitlistEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWaitlistEmailResponse) ProtoMessage() {}

func (x *MultiWaitlistEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWaitlistEmailResponse.ProtoReflect.Descriptor instead.
func (*MultiWaitlistEmailResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{506}
}

func (x *MultiWaitlistEmailResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiWaitlistEmailResponse) GetWaitlistEmails() []*WaitlistEmail {
	if x != nil {
		return x.WaitlistEmails
	}
	return nil
}

type GetSampledPredictMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of the model. Required field.
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// requests sent after this timestamp. Optional field.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// requests sent before this timestamp. Optional field.
	EndDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// min predicted score of the concept
	MinScore float32 `protobuf:"fixed32,5,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
	// max predicted score of the concept
	MaxScore   float32     `protobuf:"fixed32,6,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Pagination *Pagination `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetSampledPredictMetricsRequest) Reset() {
	*x = GetSampledPredictMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampledPredictMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampledPredictMetricsRequest) ProtoMessage() {}

func (x *GetSampledPredictMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampledPredictMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetSampledPredictMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{507}
}

func (x *GetSampledPredictMetricsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetSampledPredictMetricsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *GetSampledPredictMetricsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetSampledPredictMetricsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetSampledPredictMetricsRequest) GetMinScore() float32 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *GetSampledPredictMetricsRequest) GetMaxScore() float32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *GetSampledPredictMetricsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type MultiSampledPredictMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metrics []*SamplePredictMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MultiSampledPredictMetricsResponse) Reset() {
	*x = MultiSampledPredictMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSampledPredictMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSampledPredictMetricsResponse) ProtoMessage() {}

func (x *MultiSampledPredictMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSampledPredictMetricsResponse.ProtoReflect.Descriptor instead.
func (*MultiSampledPredictMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{508}
}

func (x *MultiSampledPredictMetricsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiSampledPredictMetricsResponse) GetMetrics() []*SamplePredictMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type SamplePredictMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptId   string `protobuf:"bytes,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	ConceptName string `protobuf:"bytes,2,opt,name=concept_name,json=conceptName,proto3" json:"concept_name,omitempty"`
	Count       uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SamplePredictMetric) Reset() {
	*x = SamplePredictMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplePredictMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplePredictMetric) ProtoMessage() {}

func (x *SamplePredictMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplePredictMetric.ProtoReflect.Descriptor instead.
func (*SamplePredictMetric) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{509}
}

func (x *SamplePredictMetric) GetConceptId() string {
	if x != nil {
		return x.ConceptId
	}
	return ""
}

func (x *SamplePredictMetric) GetConceptName() string {
	if x != nil {
		return x.ConceptName
	}
	return ""
}

func (x *SamplePredictMetric) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Request to initiate ingestion of inputs from Cloud storage
type PostInputsAddJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId     *UserAppIDSet   `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	InputsAddJobs []*InputsAddJob `protobuf:"bytes,2,rep,name=inputs_add_jobs,json=inputsAddJobs,proto3" json:"inputs_add_jobs,omitempty"`
}

func (x *PostInputsAddJobsRequest) Reset() {
	*x = PostInputsAddJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostInputsAddJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostInputsAddJobsRequest) ProtoMessage() {}

func (x *PostInputsAddJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostInputsAddJobsRequest.ProtoReflect.Descriptor instead.
func (*PostInputsAddJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{510}
}

func (x *PostInputsAddJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostInputsAddJobsRequest) GetInputsAddJobs() []*InputsAddJob {
	if x != nil {
		return x.InputsAddJobs
	}
	return nil
}

// List all the input ingestion jobs
type ListInputsAddJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListInputsAddJobsRequest) Reset() {
	*x = ListInputsAddJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInputsAddJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInputsAddJobsRequest) ProtoMessage() {}

func (x *ListInputsAddJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInputsAddJobsRequest.ProtoReflect.Descriptor instead.
func (*ListInputsAddJobsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{511}
}

func (x *ListInputsAddJobsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListInputsAddJobsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListInputsAddJobsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GetInputsAddJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of add inputs job
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInputsAddJobRequest) Reset() {
	*x = GetInputsAddJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputsAddJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputsAddJobRequest) ProtoMessage() {}

func (x *GetInputsAddJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputsAddJobRequest.ProtoReflect.Descriptor instead.
func (*GetInputsAddJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{512}
}

func (x *GetInputsAddJobRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetInputsAddJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelInputsAddJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// id of add inputs job to be cancelled
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelInputsAddJobRequest) Reset() {
	*x = CancelInputsAddJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInputsAddJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInputsAddJobRequest) ProtoMessage() {}

func (x *CancelInputsAddJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInputsAddJobRequest.ProtoReflect.Descriptor instead.
func (*CancelInputsAddJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{513}
}

func (x *CancelInputsAddJobRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *CancelInputsAddJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// MultiInputsAddJobResponse
type MultiInputsAddJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InputsAddJobs []*InputsAddJob `protobuf:"bytes,2,rep,name=inputs_add_jobs,json=inputsAddJobs,proto3" json:"inputs_add_jobs,omitempty"`
}

func (x *MultiInputsAddJobResponse) Reset() {
	*x = MultiInputsAddJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiInputsAddJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiInputsAddJobResponse) ProtoMessage() {}

func (x *MultiInputsAddJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiInputsAddJobResponse.ProtoReflect.Descriptor instead.
func (*MultiInputsAddJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{514}
}

func (x *MultiInputsAddJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiInputsAddJobResponse) GetInputsAddJobs() []*InputsAddJob {
	if x != nil {
		return x.InputsAddJobs
	}
	return nil
}

// SingleInputsAddJobResponse
type SingleInputsAddJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InputsAddJob *InputsAddJob  `protobuf:"bytes,2,opt,name=inputs_add_job,json=inputsAddJob,proto3" json:"inputs_add_job,omitempty"`
}

func (x *SingleInputsAddJobResponse) Reset() {
	*x = SingleInputsAddJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleInputsAddJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInputsAddJobResponse) ProtoMessage() {}

func (x *SingleInputsAddJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInputsAddJobResponse.ProtoReflect.Descriptor instead.
func (*SingleInputsAddJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{515}
}

func (x *SingleInputsAddJobResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleInputsAddJobResponse) GetInputsAddJob() *InputsAddJob {
	if x != nil {
		return x.InputsAddJob
	}
	return nil
}

// Start a multipart upload
type PostUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Uploads   []*Upload     `protobuf:"bytes,2,rep,name=uploads,proto3" json:"uploads,omitempty"`
}

func (x *PostUploadsRequest) Reset() {
	*x = PostUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUploadsRequest) ProtoMessage() {}

func (x *PostUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUploadsRequest.ProtoReflect.Descriptor instead.
func (*PostUploadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{516}
}

func (x *PostUploadsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PostUploadsRequest) GetUploads() []*Upload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

// Stops or deletes multipart upload
type DeleteUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	Ids       []string      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteUploadsRequest) Reset() {
	*x = DeleteUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUploadsRequest) ProtoMessage() {}

func (x *DeleteUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUploadsRequest.ProtoReflect.Descriptor instead.
func (*DeleteUploadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{517}
}

func (x *DeleteUploadsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *DeleteUploadsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
	// Defaults to 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// (optional URL parameter) The number of results that will be contained in each page. Defaults
	// to 128.
	PerPage uint32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *ListUploadsRequest) Reset() {
	*x = ListUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUploadsRequest) ProtoMessage() {}

func (x *ListUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUploadsRequest.ProtoReflect.Descriptor instead.
func (*ListUploadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{518}
}

func (x *ListUploadsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *ListUploadsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUploadsRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GetUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId *UserAppIDSet `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	// Upload ID
	UploadId string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
}

func (x *GetUploadRequest) Reset() {
	*x = GetUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadRequest) ProtoMessage() {}

func (x *GetUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadRequest.ProtoReflect.Descriptor instead.
func (*GetUploadRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{519}
}

func (x *GetUploadRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *GetUploadRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

type SingleUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Upload *Upload        `protobuf:"bytes,2,opt,name=upload,proto3" json:"upload,omitempty"`
}

func (x *SingleUploadResponse) Reset() {
	*x = SingleUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUploadResponse) ProtoMessage() {}

func (x *SingleUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUploadResponse.ProtoReflect.Descriptor instead.
func (*SingleUploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{520}
}

func (x *SingleUploadResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SingleUploadResponse) GetUpload() *Upload {
	if x != nil {
		return x.Upload
	}
	return nil
}

type MultiUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Uploads []*Upload      `protobuf:"bytes,2,rep,name=uploads,proto3" json:"uploads,omitempty"`
}

func (x *MultiUploadResponse) Reset() {
	*x = MultiUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUploadResponse) ProtoMessage() {}

func (x *MultiUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUploadResponse.ProtoReflect.Descriptor instead.
func (*MultiUploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{521}
}

func (x *MultiUploadResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiUploadResponse) GetUploads() []*Upload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

// Upload part of multipart upload
type PutUploadContentPartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAppId    *UserAppIDSet        `protobuf:"bytes,1,opt,name=user_app_id,json=userAppId,proto3" json:"user_app_id,omitempty"`
	UploadId     string               `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	ContentParts []*UploadContentPart `protobuf:"bytes,3,rep,name=content_parts,json=contentParts,proto3" json:"content_parts,omitempty"`
}

func (x *PutUploadContentPartsRequest) Reset() {
	*x = PutUploadContentPartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUploadContentPartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUploadContentPartsRequest) ProtoMessage() {}

func (x *PutUploadContentPartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUploadContentPartsRequest.ProtoReflect.Descriptor instead.
func (*PutUploadContentPartsRequest) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{522}
}

func (x *PutUploadContentPartsRequest) GetUserAppId() *UserAppIDSet {
	if x != nil {
		return x.UserAppId
	}
	return nil
}

func (x *PutUploadContentPartsRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *PutUploadContentPartsRequest) GetContentParts() []*UploadContentPart {
	if x != nil {
		return x.ContentParts
	}
	return nil
}

type MultiUsersOrganizationsResponse_UserOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//wrapper because might need to add role id etc in here in the future
	Organization       *Organization `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Role               *Role         `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	FeatureFlagConfigs string        `protobuf:"bytes,3,opt,name=feature_flag_configs,json=featureFlagConfigs,proto3" json:"feature_flag_configs,omitempty"`
}

func (x *MultiUsersOrganizationsResponse_UserOrganization) Reset() {
	*x = MultiUsersOrganizationsResponse_UserOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUsersOrganizationsResponse_UserOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUsersOrganizationsResponse_UserOrganization) ProtoMessage() {}

func (x *MultiUsersOrganizationsResponse_UserOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUsersOrganizationsResponse_UserOrganization.ProtoReflect.Descriptor instead.
func (*MultiUsersOrganizationsResponse_UserOrganization) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{323, 0}
}

func (x *MultiUsersOrganizationsResponse_UserOrganization) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *MultiUsersOrganizationsResponse_UserOrganization) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *MultiUsersOrganizationsResponse_UserOrganization) GetFeatureFlagConfigs() string {
	if x != nil {
		return x.FeatureFlagConfigs
	}
	return ""
}

type PatchOrganizationMembersRequest_PatchOrganizationMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RoleId string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *PatchOrganizationMembersRequest_PatchOrganizationMember) Reset() {
	*x = PatchOrganizationMembersRequest_PatchOrganizationMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationMembersRequest_PatchOrganizationMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationMembersRequest_PatchOrganizationMember) ProtoMessage() {}

func (x *PatchOrganizationMembersRequest_PatchOrganizationMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationMembersRequest_PatchOrganizationMember.ProtoReflect.Descriptor instead.
func (*PatchOrganizationMembersRequest_PatchOrganizationMember) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{333, 0}
}

func (x *PatchOrganizationMembersRequest_PatchOrganizationMember) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PatchOrganizationMembersRequest_PatchOrganizationMember) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type PostTeamsRequest_PostTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identify the team (unique).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// When the team was created.
	// The format is https://www.ietf.org/rfc/rfc3339.txt.
	// Example: "2006-01-02T15:04:05.999999Z".
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Most recent time when the team was updated.
	// The format is https://www.ietf.org/rfc/rfc3339.txt.
	// Example: "2006-01-02T15:04:05.999999Z".
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Name the team.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PostTeamsRequest_PostTeam) Reset() {
	*x = PostTeamsRequest_PostTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTeamsRequest_PostTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTeamsRequest_PostTeam) ProtoMessage() {}

func (x *PostTeamsRequest_PostTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTeamsRequest_PostTeam.ProtoReflect.Descriptor instead.
func (*PostTeamsRequest_PostTeam) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{344, 0}
}

func (x *PostTeamsRequest_PostTeam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostTeamsRequest_PostTeam) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PostTeamsRequest_PostTeam) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *PostTeamsRequest_PostTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PostTeamAppsRequest_TeamApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//removing the AppIdentity, this was only needed when you could add any app to a team, rn only apps from the same org can be added so we implicitly already
	//know which user the app belongs that is added. It's a breaking change but it's OK since this was never public.
	//AppIdentity app = 1;
	AppId  string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	RoleId string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *PostTeamAppsRequest_TeamApp) Reset() {
	*x = PostTeamAppsRequest_TeamApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTeamAppsRequest_TeamApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTeamAppsRequest_TeamApp) ProtoMessage() {}

func (x *PostTeamAppsRequest_TeamApp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTeamAppsRequest_TeamApp.ProtoReflect.Descriptor instead.
func (*PostTeamAppsRequest_TeamApp) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{353, 0}
}

func (x *PostTeamAppsRequest_TeamApp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PostTeamAppsRequest_TeamApp) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type MultiTeamAppsResponse_TeamApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	RoleId string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	//todo(margus) should we get rid of this AppIdentity message? it made sense when teams was global but now that is is org scoped it kind of could be removed
	App      *AppIdentity `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	AppName  string       `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	RoleName string       `protobuf:"bytes,5,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
}

func (x *MultiTeamAppsResponse_TeamApp) Reset() {
	*x = MultiTeamAppsResponse_TeamApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_service_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTeamAppsResponse_TeamApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTeamAppsResponse_TeamApp) ProtoMessage() {}

func (x *MultiTeamAppsResponse_TeamApp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_service_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTeamAppsResponse_TeamApp.ProtoReflect.Descriptor instead.
func (*MultiTeamAppsResponse_TeamApp) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_service_proto_rawDescGZIP(), []int{355, 0}
}

func (x *MultiTeamAppsResponse_TeamApp) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *MultiTeamAppsResponse_TeamApp) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *MultiTeamAppsResponse_TeamApp) GetApp() *AppIdentity {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *MultiTeamAppsResponse_TeamApp) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *MultiTeamAppsResponse_TeamApp) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

var File_proto_clarifai_api_service_proto protoreflect.FileDescriptor

var file_proto_clarifai_api_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x0b, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x79, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x74,
	0x5f, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x5f, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x66, 0x5f, 0x33, 0x32, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x11, 0x0a, 0x04, 0x66, 0x5f,
	0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x25, 0x0a,
	0x01, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x01, 0x73, 0x22, 0x3b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22, 0xb3, 0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x90, 0x01, 0x0a,
	0x16, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x1d,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x89, 0x01, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x17,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x78,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa6, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x22, 0x74, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x74, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x61, 0x70, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x11, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x74, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x70, 0x70, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0xbb,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x18, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2a, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x19, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x74, 0x4a,
	0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x6f, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x74, 0x49, 0x64, 0x70, 0x22, 0x4e, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1c, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x46, 0x41, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x32, 0x46, 0x41, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x74, 0x77, 0x6f, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x14, 0x74, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x22, 0x62, 0x0a, 0x24, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46,
	0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x25, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x1d,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a,
	0x24, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x25, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x22, 0x73,
	0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3b, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x53, 0x0a, 0x1c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x63,
	0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x4c, 0x69,
	0x76, 0x65, 0x64, 0x22, 0x99, 0x04, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x39, 0x0a, 0x19, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x33, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x33, 0x12, 0x34, 0x0a, 0x16, 0x61,
	0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x77, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6f, 0x73, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x75, 0x74,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x74, 0x6d, 0x52, 0x03, 0x75, 0x74, 0x6d, 0x22,
	0x7f, 0x0a, 0x03, 0x55, 0x74, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xd3, 0x05, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x76, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x76, 0x32, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x64, 0x70,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x47, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x17, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x0c,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22,
	0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x13,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0xe8, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1d,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a,
	0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x66, 0x0a, 0x1f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67,
	0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xa5,
	0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64,
	0x22, 0x88, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xa7, 0x01, 0x0a, 0x11,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64,
	0x4a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4e, 0x69, 0x46, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x04, 0xa0, 0x9c, 0x27, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x19,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55,
	0x72, 0x6c, 0x3a, 0x04, 0xa0, 0x9c, 0x27, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x1d, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x5f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x54, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x04, 0xa0, 0x9c, 0x27, 0x01, 0x22,
	0x95, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0x75, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x74, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x52,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x37, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22,
	0xe6, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x84, 0x02, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x1d, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x19, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x42, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22,
	0xe8, 0x01, 0x0a, 0x1f, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4d, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9c,
	0x01, 0x0a, 0x21, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xd3, 0x01,
	0x0a, 0x27, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x73,
	0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x78, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x27, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x64, 0x4a, 0x6f,
	0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xe7, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x22, 0xbd, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x65, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6d, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x74, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x71, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x16,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xbf, 0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0xf7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x84, 0x06, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x22, 0xa6, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x1a,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6f,
	0x6c, 0x6b, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f,
	0x6c, 0x6b, 0x69, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x22, 0x6f, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x22, 0x95, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0e, 0x49, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x49,
	0x64, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x22, 0xcc, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x75, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x7c, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x92, 0x01,
	0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xac,
	0x04, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x35, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd6, 0x01,
	0x0a, 0x24, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x1d, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1f, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a,
	0x1a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x1f, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x3d, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x21, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x4e, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xa5, 0x02, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65,
	0x76, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc8, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x22, 0x75, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x1f,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x71, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xd6, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x24, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x26,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x26, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x1b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x18, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x25, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67,
	0x0a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x19, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x1a, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x13, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x16,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x70, 0x73, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44,
	0x65, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x65, 0x70, 0x73, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x65, 0x70, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb1, 0x01,
	0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x72, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x62, 0x72, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc8, 0x01, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x24, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xc3, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x22, 0xe4, 0x01, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x74, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x75, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x6f,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x60, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x22, 0xbe, 0x01, 0x0a, 0x24, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x61, 0x0a, 0x19, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8a,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x1c,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x1d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xca, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xac, 0x01,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xc5, 0x01, 0x0a,
	0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x22, 0x54, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x54, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x15,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x7d, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0xb8, 0x01, 0x0a,
	0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x22, 0xd4, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48,
	0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0xf8, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x6f, 0x77,
	0x6e, 0x50, 0x65, 0x72, 0x41, 0x70, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xc2,
	0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x47, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a,
	0x10, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x50, 0x6f, 0x73,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x79, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x84,
	0x03, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x71,
	0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x78, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x10,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x85, 0x01, 0x0a,
	0x15, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x18,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x67, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7c, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x17, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x51, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x6b, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x8d, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xaa, 0x01, 0x0a, 0x20, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x23, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xce, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x49,
	0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x20, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x56, 0x0a,
	0x18, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x1f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x2b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x22, 0x75, 0x0a, 0x27, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x28, 0x50, 0x6f, 0x73, 0x74, 0x44,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22,
	0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xf1, 0x02, 0x0a, 0x1f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x0d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xc1, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x24, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x23, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x14, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x1a, 0x42, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x50, 0x6f, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x1f, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x59, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xa9, 0x01, 0x0a,
	0x1c, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xc2,
	0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x11, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x53, 0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x1a, 0xa6, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x12, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x78, 0x0a, 0x11,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x3d, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70,
	0x70, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x07, 0x54, 0x65, 0x61,
	0x6d, 0x41, 0x70, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d,
	0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x1a, 0xa0, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x71, 0x0a,
	0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0x78, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x06, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x06, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0xa0, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x22, 0x75, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x52, 0x05, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x22, 0x7c, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22,
	0xc4, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6f, 0x72,
	0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a,
	0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x88,
	0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x1a, 0x50, 0x6f,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x82, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x24, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0b,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x25, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa9,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50,
	0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49,
	0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x21, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xa3, 0x01,
	0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70,
	0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x78, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x71, 0x0a, 0x12, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x85, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x22, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x91,
	0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x78, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x68, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x8a, 0x01,
	0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x74, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x82, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xbf, 0x01,
	0x0a, 0x1f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x8d, 0x04, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x44, 0x4b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x64,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x44, 0x4b, 0x52, 0x03, 0x73, 0x64, 0x6b, 0x22,
	0x4c, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb9, 0x03,
	0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x44, 0x4b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x44, 0x4b, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x3d, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x64, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x44, 0x4b, 0x52, 0x03, 0x73, 0x64, 0x6b, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x44, 0x4b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x28, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x76, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c,
	0x66, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0xd0, 0x01, 0x0a,
	0x29, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x6e, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6a, 0x6f,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a,
	0x6f, 0x62, 0x52, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x22,
	0xd7, 0x01, 0x0a, 0x27, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x64, 0x5f,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x1c, 0x66, 0x69, 0x6e,
	0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x73, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x94,
	0x01, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x96, 0x01, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x55, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x3b, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01,
	0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x69, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x13,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x22, 0x6c, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x73, 0x22, 0x66, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x49, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x50,
	0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73,
	0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x6d, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xbc,
	0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01,
	0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x79, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x1a,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4a, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x60, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x25, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x24, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x18, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x23,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x75, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x65, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x97, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x75, 0x6c, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64,
	0x22, 0xec, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x0e,
	0x77, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76,
	0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x33, 0x22,
	0x9d, 0x01, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x69, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0e, 0x77, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xde, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x96, 0x01, 0x0a, 0x22, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x6d, 0x0a, 0x13, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64,
	0x64, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a,
	0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x48, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f,
	0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64,
	0x64, 0x4a, 0x6f, 0x62, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x1a, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f,
	0x62, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x22,
	0x80, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x7a, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xbd, 0x01,
	0x0a, 0x1c, 0x50, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x2a, 0x70, 0x0a,
	0x1c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x32,
	0x82, 0xc1, 0x04, 0x0a, 0x02, 0x56, 0x32, 0x12, 0x61, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12,
	0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f,
	0x76, 0x32, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x3a,
	0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x12, 0xaa, 0x02, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xab, 0x01, 0x12, 0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a,
	0x4e, 0x12, 0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xdf, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x22,
	0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xde, 0x01, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x2a, 0x59, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x0d, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xdc, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x12, 0x4f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xb9, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x42, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xb9, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xc4, 0x01, 0x12, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5a, 0x6c, 0x12, 0x6a, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b,
	0x90, 0x9c, 0x27, 0x0f, 0x12, 0xea, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x29, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x22, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x13, 0x12, 0xc3, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5a, 0x22, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xc5, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x32, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x11, 0x32, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12,
	0xc6, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x12, 0x1d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x12, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f,
	0x69, 0x64, 0x7d, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xb3, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x6f, 0x63,
	0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x50, 0x12, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x73, 0x5a, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xbd,
	0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x22,
	0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xbf,
	0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x12, 0x20,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x32, 0x40, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x0f, 0x32, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x3a, 0x01, 0x2a,
	0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b,
	0x12, 0xd5, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x2a, 0x4b,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73,
	0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x17, 0x2a, 0x15, 0x2f,
	0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0a,
	0x90, 0x9c, 0x27, 0x0d, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xc6, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x6f, 0x63, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x2a, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x2a, 0x0a,
	0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0d, 0x90, 0x9c, 0x27,
	0x0b, 0x12, 0xec, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x78, 0x12, 0x54, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x2f, 0x7b,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x5a, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73,
	0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b,
	0x12, 0xf6, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x22, 0x54, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x2f, 0x7b, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x90, 0x02, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x92, 0x01, 0x2a, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x32,
	0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0d, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xfd, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x2a, 0x54, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x2f, 0x7b, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x2a, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0d, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x94, 0x02, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x98, 0x01, 0x12, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x5a, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x0b, 0x12, 0x81, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x12, 0x59, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x5a, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x8b, 0x02, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88,
	0x01, 0x22, 0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x28, 0x22, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x8d, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88,
	0x01, 0x32, 0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x28, 0x32, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x8a, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x84, 0x01, 0x12, 0x5a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5a, 0x26,
	0x12, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x0b, 0x12, 0xf1, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x76, 0x12, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x5a, 0x1f, 0x12,
	0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xfb, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x28,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x22, 0x53, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0a,
	0x90, 0x9c, 0x27, 0x0b, 0x12, 0xfe, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x76, 0x22, 0x50, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xe4, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x12, 0x4b, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0xef, 0x01, 0x0a,
	0x13, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x6c, 0x22, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0a, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x93,
	0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x9e, 0x01, 0x12, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a,
	0x33, 0x12, 0x31, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b,
	0x90, 0x9c, 0x27, 0x0f, 0x12, 0xd0, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x12, 0x45, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xe3, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x60, 0x22, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x22, 0x0f, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01,
	0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xe5, 0x01,
	0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x32, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x32, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27,
	0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf3, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x60, 0x32, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x9c, 0x02, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x9e, 0x01, 0x2a, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x33, 0x2a,
	0x31, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x28, 0x90, 0x9c,
	0x27, 0x26, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xd0, 0x02, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xd0, 0x01, 0x2a, 0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x2a, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x4a, 0x2a, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x14, 0x2a, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27,
	0x28, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf3, 0x01,
	0x0a, 0x18, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x72, 0x32, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x32, 0x18, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x73, 0x90,
	0x9c, 0x27, 0x72, 0x12, 0x81, 0x02, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x22, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x22, 0x18,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x03, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xd1, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x12, 0x47, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xc9, 0x01, 0x0a, 0x0c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x12, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5a, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xfd, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x12, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5a, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xca, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x12, 0x4b,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x17, 0x12, 0x15, 0x2f,
	0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b,
	0x90, 0x9c, 0x27, 0x05, 0x12, 0xb7, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x40,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x5a, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0xd2,
	0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f,
	0x22, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x13, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x60, 0x22, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x5a,
	0x14, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x04, 0x12, 0xdc, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x4e, 0x69, 0x46, 0x69, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4e, 0x69,
	0x46, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x70, 0x22, 0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x69, 0x66, 0x69, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x69, 0x66, 0x69, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x04,
	0x12, 0xf2, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x22, 0x51, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x2f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x5a, 0x23, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x04, 0x12, 0xcb, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x56, 0x32, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x32, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90,
	0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x0f, 0x12, 0xe5, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x66, 0x2a, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x17,
	0x2a, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90,
	0x9c, 0x27, 0x28, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x08, 0x90,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xd7, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x2a, 0x40, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x0f, 0x2a, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x28, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x08, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xde, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x28, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x68, 0x32, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x18, 0x32, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x73, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xed, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x27, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x68, 0x22, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c,
	0x27, 0x03, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x9c, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa6, 0x02, 0x22,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x38, 0x22,
	0x33, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x58, 0x22, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x02, 0x12, 0xbd, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x32,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x69, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xd5, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x6e, 0x12, 0x4f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xc7, 0x01,
	0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x42, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90,
	0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xc9, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x32, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x11, 0x32, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x90,
	0x9c, 0x27, 0x72, 0x12, 0xba, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x32, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x64,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a,
	0x12, 0xca, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x5a, 0x2a, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x11, 0x2a, 0x0c, 0x2f, 0x76,
	0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x6b, 0x12, 0xfd, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x69, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x91, 0x02,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x92, 0x01, 0x12, 0x61, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2d,
	0x12, 0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x0b, 0x12, 0x88, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x82, 0x01, 0x22, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22,
	0x20, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a,
	0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x12, 0x82, 0x02, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x2a, 0x56, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x2a, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x6b, 0x90, 0x9c, 0x27,
	0x05, 0x12, 0x80, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x12, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5a, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69,
	0x90, 0x9c, 0x27, 0x72, 0x12, 0xa7, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xaa, 0x01, 0x12, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x32, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xe6,
	0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xba, 0x01, 0x12, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5a, 0x41, 0x12, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x12, 0x8e, 0x02, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x22, 0x58,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x27, 0x22, 0x22, 0x2f,
	0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a,
	0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x88, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86,
	0x01, 0x32, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x27,
	0x32, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90,
	0x9c, 0x27, 0x6a, 0x12, 0x86, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x2a, 0x58, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x27, 0x2a, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x90, 0x9c, 0x27, 0x6b, 0x12, 0xd0, 0x02, 0x0a,
	0x18, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xc0, 0x01, 0x1a, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x44, 0x1a,
	0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x69, 0x90, 0x9c, 0x27, 0x6a, 0x12,
	0xe5, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x22, 0x12, 0x20, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x98,
	0x9c, 0x27, 0x01, 0x12, 0xc7, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x12, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x5a, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xc6, 0x01,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x66, 0x12, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x96, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbd, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xaa, 0x02, 0x12, 0x57, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5a, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5a, 0x6f, 0x12, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5a, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x32, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12,
	0xde, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1f,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x12, 0x40, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5a, 0x28, 0x12, 0x26,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5a, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f,
	0x12, 0xdb, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x22, 0x49, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xc6,
	0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f,
	0x22, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xc3, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x56, 0x32, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x32, 0x0a, 0x2f, 0x76, 0x32, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x12, 0xb2, 0x01,
	0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x32, 0x44, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c,
	0x27, 0x0f, 0x12, 0xd9, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66,
	0x2a, 0x4b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x17, 0x2a,
	0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c,
	0x27, 0x0e, 0x90, 0x9c, 0x27, 0x11, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xca,
	0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x2a, 0x40, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x0f, 0x2a, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90,
	0x9c, 0x27, 0x11, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x91, 0x02, 0x0a, 0x17,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8a, 0x01, 0x32, 0x5a, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x32, 0x24,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12,
	0xf5, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f,
	0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x7e, 0x32, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x32, 0x1e, 0x2f, 0x76,
	0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf5, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x32, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x23, 0x32, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12,
	0xfb, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x80, 0x01, 0x32, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x24, 0x32, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x8d, 0x03,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x96, 0x02, 0x12, 0x52, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5a, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5a, 0x6a, 0x12, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x5a, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x89, 0x02,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x92, 0x01, 0x12, 0x61, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2d,
	0x12, 0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xf1, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x78, 0x12, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5a,
	0x20, 0x12, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xb8, 0x02,
	0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8c, 0x01,
	0x22, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a,
	0x5a, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x78, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13,
	0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x12, 0xb0, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x22, 0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x77, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90,
	0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x12, 0x9d, 0x02, 0x0a, 0x18,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x7c, 0x22, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x22, 0x1d, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x75, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90,
	0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x12, 0xa6, 0x02, 0x0a, 0x1a,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x22, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a,
	0x01, 0x2a, 0x5a, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x76,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e,
	0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35,
	0x90, 0x9c, 0x27, 0x36, 0x12, 0x8d, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x22, 0x54,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e,
	0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35,
	0x90, 0x9c, 0x27, 0x36, 0x12, 0xdb, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x59, 0x32, 0x54, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c,
	0x27, 0x1a, 0x12, 0x94, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x92, 0x01, 0x2a,
	0x61, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x5a, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27,
	0x11, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xb3, 0x02, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xa2, 0x01, 0x12, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5a, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12,
	0xcf, 0x02, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa8, 0x01, 0x22, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x38, 0x22, 0x33, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x1a, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27,
	0x36, 0x12, 0xf7, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5a,
	0x22, 0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x86, 0x02, 0x0a, 0x13,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x82, 0x01, 0x22, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22,
	0x20, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f,
	0x90, 0x9c, 0x27, 0x0e, 0x12, 0x86, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x2a, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x25, 0x2a, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x11, 0x12, 0xee, 0x02,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x30, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd7, 0x01, 0x12,
	0x83, 0x01, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x4f, 0x12, 0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xd6,
	0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xbc, 0x01, 0x12, 0x76, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5a, 0x42, 0x12, 0x40, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xe8, 0x02, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xdd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc2, 0x01, 0x22, 0x76, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x45, 0x22, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c,
	0x27, 0x13, 0x12, 0xda, 0x02, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xdd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc2, 0x01, 0x2a, 0x76, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x45, 0x2a, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x11, 0x12,
	0xb9, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xbf, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x2a, 0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x3a, 0x01,
	0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0x7b, 0x0a,
	0x0d, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x22,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22,
	0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x3a,
	0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x24,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x2a, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x12, 0xc5,
	0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x48, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xcb, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x28,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x2a, 0x48, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x13, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x3a,
	0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0x9d,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x2a, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x3a,
	0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0xdc,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x20,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x12,
	0x51, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x7d, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xf1, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x83, 0x01, 0x12, 0x43, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5a, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x5a, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x13, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x12, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xcc, 0x01, 0x0a, 0x0d, 0x50,
	0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x22, 0x43, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x0f, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x32, 0x43,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x12, 0x32, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x0f, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x32, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xe3, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x23,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x2a,
	0x51, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x7d, 0x5a, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x15, 0x90, 0x9c, 0x27,
	0x13, 0x12, 0xce, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x2a, 0x43, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x12,
	0x2a, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x15, 0x90, 0x9c,
	0x27, 0x13, 0x12, 0x86, 0x03, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x99, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xfe, 0x01, 0x22, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x5e, 0x22,
	0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22,
	0x23, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xc5, 0x03, 0x0a, 0x1d,
	0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9f, 0x02,
	0x22, 0x7a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x5a,
	0x69, 0x22, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x5a, 0x33, 0x22, 0x2e, 0x2f, 0x76,
	0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x13, 0x12, 0x87, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x84, 0x01, 0x12, 0x5a, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x32,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xb0, 0x02,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xb0, 0x01, 0x12, 0x70, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13,
	0x12, 0x8c, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x8a, 0x01, 0x2a, 0x5a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x2a, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x15, 0x12,
	0x93, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8a, 0x01, 0x32, 0x5a, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x32, 0x24, 0x2f, 0x76,
	0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x13, 0x90, 0x9c, 0x27, 0x12, 0x12, 0xad, 0x02, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x22, 0x59, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f,
	0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x35, 0x90, 0x9c, 0x27, 0x36, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27,
	0x60, 0x90, 0x9c, 0x27, 0x61, 0x12, 0xa0, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9c, 0x01, 0x12, 0x66, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x60, 0x12, 0xcc, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbc, 0x01, 0x12, 0x76, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x5a, 0x42, 0x12, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x60, 0x12, 0x87, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x12,
	0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5a, 0x25, 0x12, 0x23, 0x2f, 0x76,
	0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27,
	0x60, 0x12, 0x90, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x88, 0x01, 0x2a, 0x59, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x28, 0x2a, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x62, 0x90, 0x9c, 0x27, 0x61,
	0x90, 0x9c, 0x27, 0x60, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x30, 0x12, 0x7f, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12,
	0x24, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6b, 0x65, 0x79, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x30, 0x12, 0x9f, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x30, 0x12,
	0x95, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2f, 0x90,
	0x9c, 0x27, 0x31, 0x90, 0x9c, 0x27, 0x30, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x2f,
	0x90, 0x9c, 0x27, 0x30, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x32, 0x24, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x30, 0x12,
	0xbc, 0x01, 0x0a, 0x08, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x79, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x65, 0x12, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x79, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x32,
	0x2f, 0x6d, 0x79, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x5a, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x32,
	0x2f, 0x6d, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x12, 0x8d,
	0x01, 0x0a, 0x0c, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x12, 0x28, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x79, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x12, 0x75,
	0x0a, 0x0c, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x79,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x79, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x72, 0x6f, 0x6f,
	0x74, 0x98, 0x9c, 0x27, 0x05, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44,
	0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x98, 0x9c, 0x27, 0x03, 0x12,
	0x95, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b,
	0x12, 0x39, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x13, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x24, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x5a, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x98, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xa5, 0x01, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x2a, 0x39, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90, 0x9c, 0x27, 0x2e, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27,
	0x13, 0x12, 0x92, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1d,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c,
	0x27, 0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c,
	0x27, 0x13, 0x90, 0x9c, 0x27, 0x12, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x32, 0x24, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2c, 0x90, 0x9c, 0x27,
	0x2d, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x49,
	0x64, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x32, 0x28, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x2c, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0x9c, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x32, 0x39, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27,
	0x2c, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0xb6, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x70, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x32, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x2c, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x2e, 0x90, 0x9c, 0x27, 0x56, 0x12, 0x9f,
	0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x13,
	0x12, 0x7a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x12, 0x67, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x05, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x81, 0x01,
	0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x03, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x93, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x03, 0x12, 0x9e, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x26,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x32,
	0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x03, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12,
	0x26, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5a, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xce, 0x01,
	0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56,
	0x22, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x92,
	0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x03, 0x12, 0xb8, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x22, 0x2e, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x22,
	0x12, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xcf,
	0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x22, 0x31, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a,
	0x5a, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x03,
	0x12, 0xab, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xcd,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x12, 0x31, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5a, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xd3,
	0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x22, 0x31, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x03, 0x12, 0xd5, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x52, 0x32, 0x31, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x32, 0x15, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xd0, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a,
	0x31, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x5a, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x03, 0x90, 0x9c, 0x27, 0x39, 0x90, 0x9c, 0x27, 0x3b, 0x90, 0x9c, 0x27, 0x3a, 0x12,
	0xb0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x47, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x57, 0x90, 0x9c, 0x27, 0x56, 0x12, 0xb7, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27,
	0x5f, 0x12, 0x8b, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x56, 0x12,
	0x9e, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x32,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x56,
	0x12, 0xa9, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x32, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x57, 0x90, 0x9c, 0x27, 0x56, 0x12, 0xa5, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x58, 0x90, 0x9c, 0x27, 0x57,
	0x90, 0x9c, 0x27, 0x56, 0x12, 0xbb, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x63, 0x12, 0xdb, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x63,
	0x12, 0xb0, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x5e, 0x12, 0xb3, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x32, 0x2f, 0x2f, 0x76, 0x32, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x5e, 0x12, 0xbd, 0x01, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d,
	0x2a, 0x3b, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x5d, 0x12, 0xce, 0x01, 0x0a, 0x1b, 0x50, 0x6f,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x64, 0x12, 0xd0, 0x01, 0x0a, 0x1c, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x32, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01,
	0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x64, 0x12, 0xcb, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x32, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x65, 0x12, 0xd4, 0x01, 0x0a, 0x21,
	0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x46, 0x22, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x03, 0x12, 0xd1, 0x01, 0x0a, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x43, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xbd, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x34, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76,
	0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xc3, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x12, 0xc7, 0x01, 0x0a,
	0x15, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3a, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x5a, 0x90, 0x9c, 0x27, 0x59, 0x12, 0xc0, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x59, 0x12, 0xc2, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x41, 0x12, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x59, 0x12, 0xc9,
	0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x32, 0x3a, 0x2f, 0x76, 0x32,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x05, 0x90, 0x9c, 0x27, 0x5a, 0x90, 0x9c, 0x27, 0x59, 0x12, 0xc5, 0x01, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x2a,
	0x3a, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x5b, 0x90, 0x9c, 0x27, 0x5a, 0x90, 0x9c,
	0x27, 0x59, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x4b, 0x90, 0x9c, 0x27, 0x4a, 0x12, 0x8f, 0x01, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x4a, 0x12, 0x91, 0x01,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x12, 0x32, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27,
	0x4a, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x32, 0x2d, 0x2f, 0x76, 0x32, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x4b, 0x90, 0x9c, 0x27, 0x4a, 0x12, 0xa0, 0x01, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x4c, 0x90, 0x9c, 0x27, 0x4b, 0x90, 0x9c, 0x27, 0x4a, 0x12,
	0xb6, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x42, 0x22, 0x3d, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x4e,
	0x90, 0x9c, 0x27, 0x4d, 0x90, 0x9c, 0x27, 0x4a, 0x12, 0xaf, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x32,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x05, 0x90, 0x9c, 0x27, 0x4d, 0x90, 0x9c, 0x27, 0x4a, 0x12, 0xbc, 0x01, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a,
	0x3d, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01,
	0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x4f, 0x90, 0x9c, 0x27,
	0x4e, 0x90, 0x9c, 0x27, 0x4d, 0x90, 0x9c, 0x27, 0x4a, 0x12, 0xb9, 0x01, 0x0a, 0x0c, 0x50, 0x6f,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3c, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x05, 0x90, 0x9c, 0x27, 0x53, 0x90, 0x9c, 0x27, 0x54, 0x90, 0x9c, 0x27, 0x4a, 0x90, 0x9c, 0x27,
	0x50, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x53,
	0x90, 0x9c, 0x27, 0x4a, 0x90, 0x9c, 0x27, 0x50, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0xc1, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x12,
	0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x2a,
	0x3c, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x3a, 0x01, 0x2a,
	0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x55, 0x90, 0x9c, 0x27, 0x53,
	0x90, 0x9c, 0x27, 0x54, 0x90, 0x9c, 0x27, 0x4a, 0x90, 0x9c, 0x27, 0x50, 0x90, 0x9c, 0x27, 0x2d,
	0x12, 0x6b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x50, 0x12, 0x6d, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x50, 0x12, 0xbd, 0x01, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x12, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xb8, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x42, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x5a,
	0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xc4, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x32, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a,
	0x11, 0x32, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x73, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xd5,
	0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a,
	0x22, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c,
	0x27, 0x03, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xd4, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x25, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x22, 0x47, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x03, 0x12, 0xaf, 0x02,
	0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x30, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x22, 0x56, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90,
	0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x13, 0x12,
	0xa5, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x12, 0x5b, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x27, 0x12, 0x25, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0x9c, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5a, 0x22,
	0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c,
	0x27, 0x05, 0x90, 0x9c, 0x27, 0x35, 0x12, 0x96, 0x02, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x2a, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x27, 0x2a, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x35, 0x90, 0x9c, 0x27, 0x36, 0x90, 0x9c, 0x27, 0x3f, 0x12,
	0xca, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x2a, 0x47,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x73, 0x90, 0x9c, 0x27, 0x74, 0x12, 0xf9, 0x01, 0x0a,
	0x13, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x22, 0x4c, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x22, 0x16, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x0f,
	0x90, 0x9c, 0x27, 0x03, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xe8, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x68, 0x12, 0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x5a, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x72, 0x12, 0x95, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96, 0x01, 0x12, 0x63, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x5a, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x72, 0x12, 0xf3, 0x01, 0x0a, 0x15,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x22, 0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27,
	0x73, 0x12, 0xf5, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x32,
	0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x1b, 0x32, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x2a,
	0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x1b, 0x2a, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5a, 0x0e, 0x12,
	0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x03, 0x12, 0x8e, 0x02, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x12, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x03, 0x12, 0xe5, 0x01, 0x0a, 0x14, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x22, 0x4b, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x22, 0x15, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x03, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f,
	0x76, 0x32, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a,
	0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0x97, 0x01, 0x0a, 0x18, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f,
	0x76, 0x32, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x01, 0x12, 0x6c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12,
	0x6f, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01,
	0x12, 0x8c, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12,
	0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12,
	0x80, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x01, 0x12, 0xa7, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34,
	0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xb2, 0x01, 0x0a,
	0x14, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x35, 0x22, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x64, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x03, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x49, 0x64, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x64, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12,
	0x97, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12,
	0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x32, 0x46, 0x41, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x46, 0x41, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x32, 0x66, 0x61, 0x2f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xda, 0x01,
	0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74,
	0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f,
	0x74, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x22, 0x3d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x32, 0x66, 0x61, 0x2f, 0x74, 0x6f, 0x74, 0x70, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xda, 0x01, 0x0a, 0x1d, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x32, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x22, 0x3d, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x32, 0x66, 0x61, 0x2f, 0x74, 0x6f, 0x74, 0x70, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x3a, 0x01, 0x2a, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xbd, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74,
	0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x35, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x32, 0x66, 0x61, 0x2f,
	0x74, 0x6f, 0x74, 0x70, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x32, 0x66, 0x61, 0x2f, 0x74, 0x6f, 0x74, 0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a,
	0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x16, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41,
	0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x32, 0x66, 0x61, 0x2f, 0x74, 0x6f, 0x74, 0x70, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xb8,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12,
	0x31, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x54, 0x6f, 0x74, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x32, 0x66, 0x61, 0x2f, 0x74, 0x6f, 0x74,
	0x70, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xa5, 0x01, 0x0a,
	0x10, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x03, 0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x12, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x9e, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2c,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x32, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xac,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xaf, 0x01,
	0x0a, 0x12, 0x50, 0x75, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x1a, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12,
	0x83, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x7c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x98,
	0x9c, 0x27, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x01,
	0x12, 0x6c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x12, 0x1f,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x32, 0x2f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xb0,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x03, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x9d, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xaf, 0x01,
	0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x22, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12,
	0xad, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x7c, 0x12,
	0x8c, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xa1,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x03, 0x12, 0xb4, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x22, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x0e, 0x22,
	0x09, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x01, 0x12, 0xbe, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x32, 0x12, 0xc5, 0x01, 0x0a, 0x11, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x22, 0x47, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x33, 0x90, 0x9c,
	0x27, 0x32, 0x12, 0xcb, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4c, 0x32, 0x47, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x33, 0x90, 0x9c, 0x27, 0x32, 0x90, 0x9c, 0x27, 0x34,
	0x12, 0xce, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a, 0x47, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x33, 0x90, 0x9c, 0x27, 0x32, 0x90, 0x9c, 0x27, 0x34, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27,
	0x38, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x03, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x01, 0x12, 0xc1, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x42, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x76,
	0x32, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x01, 0x12, 0xd5, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6e, 0x12, 0x4f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x01, 0x12, 0x99,
	0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x01, 0x12, 0xef, 0x01, 0x0a, 0x13, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4b, 0x22, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x0e, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x1a, 0x90, 0x9c, 0x27, 0x0a,
	0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x25,
	0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x12, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xa5, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x98, 0x9c, 0x27, 0x05, 0x12, 0xb6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x12, 0xd5, 0x01,
	0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x54, 0x22, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x32,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x37, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x03, 0x90, 0x9c, 0x27,
	0x72, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27,
	0x25, 0x90, 0x9c, 0x27, 0x26, 0x12, 0xfa, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x86, 0x01, 0x12, 0x5b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5a, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x38, 0x12, 0xea, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12, 0x56, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x38, 0x12,
	0xcc, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x5a,
	0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c,
	0x27, 0x72, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xba,
	0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5a, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x72, 0x90,
	0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x12, 0xd3, 0x01, 0x0a, 0x0a,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x54, 0x32, 0x3f, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x0e, 0x32, 0x09, 0x2f, 0x76, 0x32,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x37, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27,
	0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27,
	0x26, 0x12, 0xbe, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x2a, 0x3f,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x0e, 0x2a, 0x09, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c,
	0x27, 0x46, 0x12, 0xaa, 0x02, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9a,
	0x01, 0x32, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x72,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x5a, 0x31, 0x32, 0x2c, 0x2f, 0x76, 0x32, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x12,
	0xf1, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x22, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x44, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27, 0x38, 0x90,
	0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x72, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x13, 0x90,
	0x9c, 0x27, 0x0f, 0x12, 0xf2, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x12, 0x57, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x5a, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x43,
	0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x38, 0x12, 0xd2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5c, 0x12, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5a, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x38, 0x12, 0xe7, 0x01,
	0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x32, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x32, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x43, 0x90, 0x9c, 0x27, 0x44, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x37, 0x90,
	0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x46, 0x12, 0xe1, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x62, 0x2a, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x2a, 0x10,
	0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x45, 0x90, 0x9c, 0x27, 0x43, 0x90,
	0x9c, 0x27, 0x44, 0x90, 0x9c, 0x27, 0x37, 0x90, 0x9c, 0x27, 0x38, 0x12, 0xee, 0x01, 0x0a, 0x0e,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x5e, 0x22, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x13, 0x22, 0x0e, 0x2f,
	0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26,
	0x90, 0x9c, 0x27, 0x29, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x0f, 0x90, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x13, 0x12, 0xdf, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x76,
	0x12, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x2a, 0x12, 0xc3,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x58, 0x12, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5a, 0x10, 0x12, 0x0e, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x2a, 0x12, 0xcf, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x32, 0x44, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x13, 0x32, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x29, 0x90, 0x9c, 0x27, 0x2a, 0x12, 0xd2, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x2a, 0x44, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x13, 0x2a, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x29, 0x90, 0x9c, 0x27, 0x2b, 0x90, 0x9c, 0x27, 0x2a, 0x12, 0xc9, 0x01, 0x0a, 0x0e,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x62, 0x22, 0x46, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x22, 0x10,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x12, 0xf9, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x76, 0x22, 0x50, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1f,
	0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x12, 0x7e, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x01, 0x12, 0x7e, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x44, 0x4b, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x44, 0x4b, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x44,
	0x4b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x64,
	0x6b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x01, 0x12, 0xb9, 0x02, 0x0a, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8a,
	0x01, 0x22, 0x5a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98,
	0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x66, 0x90, 0x9c, 0x27, 0x67, 0x12,
	0xb2, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a,
	0x6f, 0x62, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8e, 0x01, 0x12, 0x5f, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x2b, 0x12, 0x29, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66,
	0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6a,
	0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x67, 0x12, 0xab, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x84, 0x01, 0x12, 0x5a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x5a, 0x26,
	0x12, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x67, 0x12, 0xa8, 0x02, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8a, 0x01, 0x2a,
	0x5a, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x29,
	0x2a, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x66, 0x90, 0x9c, 0x27, 0x67, 0x90, 0x9c, 0x27, 0x68, 0x12, 0xe3, 0x01,
	0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x6d, 0x22, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d,
	0x2f, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x98,
	0x9c, 0x27, 0x02, 0x12, 0x8f, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x88, 0x01, 0x12, 0x5c, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x5a, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x7d, 0x98, 0x9c, 0x27, 0x02, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0x96,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x7d, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88,
	0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12,
	0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x9c,
	0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xbb, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x88, 0x9c, 0x27, 0x01,
	0x98, 0x9c, 0x27, 0x03, 0x12, 0xb1, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x65,
	0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57,
	0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x32, 0x2d,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a,
	0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xaa, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x2d, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27,
	0x01, 0x98, 0x9c, 0x27, 0x03, 0x12, 0xae, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12,
	0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c,
	0x27, 0x02, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xe0, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x7d, 0x12, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x5a, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x5a, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xae, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x32, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27,
	0x02, 0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x2a, 0x41, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27, 0x6e, 0x90, 0x9c, 0x27, 0x6d,
	0x12, 0xe8, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x73,
	0x12, 0x71, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0xd6, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5f, 0x12, 0x5d, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x6d, 0x12, 0xdd, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x22, 0x5d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x6c,
	0x90, 0x9c, 0x27, 0x6d, 0x12, 0xde, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x62, 0x2a, 0x5d, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x6c, 0x90, 0x9c, 0x27,
	0x6e, 0x90, 0x9c, 0x27, 0x6d, 0x12, 0x8b, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x73,
	0x12, 0x71, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x70, 0x90, 0x9c, 0x27, 0x6d, 0x90,
	0x9c, 0x27, 0x30, 0x12, 0xef, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55,
	0x12, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x70, 0x90, 0x9c, 0x27,
	0x6d, 0x90, 0x9c, 0x27, 0x30, 0x12, 0xf6, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x58, 0x22, 0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c,
	0x27, 0x6f, 0x90, 0x9c, 0x27, 0x70, 0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x2d, 0x12, 0xf6,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x2a,
	0x53, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x6f, 0x90,
	0x9c, 0x27, 0x70, 0x90, 0x9c, 0x27, 0x71, 0x90, 0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x31, 0x90,
	0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x30, 0x12, 0x95, 0x02, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x22, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79,
	0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x6f, 0x90, 0x9c, 0x27, 0x70, 0x90,
	0x9c, 0x27, 0x6d, 0x90, 0x9c, 0x27, 0x2d, 0x90, 0x9c, 0x27, 0x2f, 0x90, 0x9c, 0x27, 0x30, 0x12,
	0xf1, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x68, 0x22, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x7a, 0x90, 0x9c, 0x27, 0x79, 0x90, 0x9c, 0x27, 0x25, 0x90, 0x9c, 0x27, 0x26, 0x90,
	0x9c, 0x27, 0x28, 0x12, 0xda, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x7a,
	0x12, 0xe1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c,
	0x12, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02,
	0x90, 0x9c, 0x27, 0x7a, 0x12, 0xe7, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x6c, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x32, 0x49, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x32, 0x13, 0x2f, 0x76, 0x32, 0x2f,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x79, 0x90, 0x9c, 0x27, 0x7a, 0x12, 0xf0,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x2a, 0x49, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x2a, 0x13, 0x2f,
	0x76, 0x32, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x25, 0x90, 0x9c, 0x27, 0x28, 0x90, 0x9c, 0x27, 0x79, 0x90, 0x9c, 0x27, 0x7a, 0x90, 0x9c, 0x27,
	0x7b, 0x12, 0xae, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x64, 0x4a,
	0x6f, 0x62, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64,
	0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x94, 0x01, 0x12, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x2f, 0x6a, 0x6f, 0x62,
	0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x2e, 0x12, 0x2c, 0x2f, 0x76,
	0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x2f, 0x6a, 0x6f, 0x62,
	0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c,
	0x27, 0x69, 0x12, 0x88, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x12, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5a, 0x21,
	0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27,
	0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x38, 0x90, 0x9c, 0x27, 0x69, 0x12, 0xe3, 0x01,
	0x0a, 0x12, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x1a, 0x55, 0x2f, 0x76, 0x32, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x25, 0x90,
	0x9c, 0x27, 0x26, 0x90, 0x9c, 0x27, 0x0b, 0x90, 0x9c, 0x27, 0x05, 0x90, 0x9c, 0x27, 0x38, 0x90,
	0x9c, 0x27, 0x69, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x61, 0x69, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x61,
	0x69, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x61, 0x69, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x61, 0x69, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x7d, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27, 0x01,
	0x12, 0xfe, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x12, 0x51, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x88, 0x9c, 0x27, 0x01, 0x98, 0x9c, 0x27,
	0x02, 0x12, 0xe4, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68,
	0x22, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x18,
	0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x05,
	0x90, 0x9c, 0x27, 0x04, 0x88, 0x9c, 0x27, 0x01, 0x12, 0xd6, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x49, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61,
	0x64, 0x64, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x05, 0x12, 0xdd, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41,
	0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64,
	0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x12, 0x4e, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f,
	0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x5a, 0x1a, 0x12,
	0x18, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27,
	0x05, 0x12, 0xf2, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x64, 0x64,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x72, 0x32, 0x4e, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x32, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x04, 0x90, 0x9c,
	0x27, 0x05, 0x88, 0x9c, 0x27, 0x01, 0x12, 0xc0, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x58, 0x22, 0x41, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90,
	0x9c, 0x27, 0x81, 0x01, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x12, 0x88, 0x02, 0x0a, 0x15, 0x50, 0x75,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x89, 0x01, 0x1a, 0x5b, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2f, 0x7b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x27, 0x1a,
	0x25, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x7b, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x81, 0x01, 0x90,
	0x9c, 0x27, 0x80, 0x01, 0x12, 0xca, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6a, 0x12, 0x4d,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2f, 0x7b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x7b, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x80,
	0x01, 0x12, 0xb5, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x41,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x5a, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x12, 0xc9, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x2a, 0x41, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x10, 0x2a, 0x0b, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a,
	0x01, 0x2a, 0x98, 0x9c, 0x27, 0x02, 0x90, 0x9c, 0x27, 0x80, 0x01, 0x90, 0x9c, 0x27, 0x81, 0x01,
	0x90, 0x9c, 0x27, 0x82, 0x01, 0x42, 0x2e, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x50, 0x01,
	0x5a, 0x0c, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02,
	0x04, 0x43, 0x41, 0x49, 0x50, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_clarifai_api_service_proto_rawDescOnce sync.Once
	file_proto_clarifai_api_service_proto_rawDescData = file_proto_clarifai_api_service_proto_rawDesc
)

func file_proto_clarifai_api_service_proto_rawDescGZIP() []byte {
	file_proto_clarifai_api_service_proto_rawDescOnce.Do(func() {
		file_proto_clarifai_api_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_clarifai_api_service_proto_rawDescData)
	})
	return file_proto_clarifai_api_service_proto_rawDescData
}

var file_proto_clarifai_api_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_clarifai_api_service_proto_msgTypes = make([]protoimpl.MessageInfo, 528)
var file_proto_clarifai_api_service_proto_goTypes = []interface{}{
	(OrganizationInvitationStatus)(0),                               // 0: clarifai.api.OrganizationInvitationStatus
	(*TestMessage)(nil),                                             // 1: clarifai.api.TestMessage
	(*Pagination)(nil),                                              // 2: clarifai.api.Pagination
	(*GetAnnotationRequest)(nil),                                    // 3: clarifai.api.GetAnnotationRequest
	(*ListAnnotationsRequest)(nil),                                  // 4: clarifai.api.ListAnnotationsRequest
	(*PostAnnotationsRequest)(nil),                                  // 5: clarifai.api.PostAnnotationsRequest
	(*PatchAnnotationsRequest)(nil),                                 // 6: clarifai.api.PatchAnnotationsRequest
	(*PatchAnnotationsStatusRequest)(nil),                           // 7: clarifai.api.PatchAnnotationsStatusRequest
	(*PatchAnnotationsStatusResponse)(nil),                          // 8: clarifai.api.PatchAnnotationsStatusResponse
	(*DeleteAnnotationRequest)(nil),                                 // 9: clarifai.api.DeleteAnnotationRequest
	(*DeleteAnnotationsRequest)(nil),                                // 10: clarifai.api.DeleteAnnotationsRequest
	(*SingleAnnotationResponse)(nil),                                // 11: clarifai.api.SingleAnnotationResponse
	(*MultiAnnotationResponse)(nil),                                 // 12: clarifai.api.MultiAnnotationResponse
	(*GetAppRequest)(nil),                                           // 13: clarifai.api.GetAppRequest
	(*ListAppsRequest)(nil),                                         // 14: clarifai.api.ListAppsRequest
	(*PostAppsRequest)(nil),                                         // 15: clarifai.api.PostAppsRequest
	(*DeleteAppRequest)(nil),                                        // 16: clarifai.api.DeleteAppRequest
	(*PatchAppsRequest)(nil),                                        // 17: clarifai.api.PatchAppsRequest
	(*PatchAppRequest)(nil),                                         // 18: clarifai.api.PatchAppRequest
	(*PatchAppOwnerRequest)(nil),                                    // 19: clarifai.api.PatchAppOwnerRequest
	(*PatchAppsIdsRequest)(nil),                                     // 20: clarifai.api.PatchAppsIdsRequest
	(*PostAppsSearchesRequest)(nil),                                 // 21: clarifai.api.PostAppsSearchesRequest
	(*SingleAppResponse)(nil),                                       // 22: clarifai.api.SingleAppResponse
	(*MultiAppResponse)(nil),                                        // 23: clarifai.api.MultiAppResponse
	(*ListCollaboratorsRequest)(nil),                                // 24: clarifai.api.ListCollaboratorsRequest
	(*PostCollaboratorsRequest)(nil),                                // 25: clarifai.api.PostCollaboratorsRequest
	(*PatchCollaboratorsRequest)(nil),                               // 26: clarifai.api.PatchCollaboratorsRequest
	(*DeleteCollaboratorsRequest)(nil),                              // 27: clarifai.api.DeleteCollaboratorsRequest
	(*MultiCollaboratorsResponse)(nil),                              // 28: clarifai.api.MultiCollaboratorsResponse
	(*ListCollaborationsRequest)(nil),                               // 29: clarifai.api.ListCollaborationsRequest
	(*MultiCollaborationsResponse)(nil),                             // 30: clarifai.api.MultiCollaborationsResponse
	(*PostVerifyEmailRequest)(nil),                                  // 31: clarifai.api.PostVerifyEmailRequest
	(*SingleVerifyEmailResponse)(nil),                               // 32: clarifai.api.SingleVerifyEmailResponse
	(*ListAuthMethodsRequest)(nil),                                  // 33: clarifai.api.ListAuthMethodsRequest
	(*PostLinkIdpUserRequest)(nil),                                  // 34: clarifai.api.PostLinkIdpUserRequest
	(*GetLoginInfoRequest)(nil),                                     // 35: clarifai.api.GetLoginInfoRequest
	(*GetLoginInfoResponse)(nil),                                    // 36: clarifai.api.GetLoginInfoResponse
	(*PostLinkIdpUserResponse)(nil),                                 // 37: clarifai.api.PostLinkIdpUserResponse
	(*PostIdLoginFinalizerRequest)(nil),                             // 38: clarifai.api.PostIdLoginFinalizerRequest
	(*PostIdLoginFinalizerResponse)(nil),                            // 39: clarifai.api.PostIdLoginFinalizerResponse
	(*ListAuthMethodsResponse)(nil),                                 // 40: clarifai.api.ListAuthMethodsResponse
	(*List2FAMethodsRequest)(nil),                                   // 41: clarifai.api.List2FAMethodsRequest
	(*List2FAMethodsResponse)(nil),                                  // 42: clarifai.api.List2FAMethodsResponse
	(*PostAuth2FATotpRegisterEnableRequest)(nil),                    // 43: clarifai.api.PostAuth2FATotpRegisterEnableRequest
	(*PostAuth2FATotpRegisterEnableResponse)(nil),                   // 44: clarifai.api.PostAuth2FATotpRegisterEnableResponse
	(*PostAuth2FATotpDisableRequest)(nil),                           // 45: clarifai.api.PostAuth2FATotpDisableRequest
	(*PostAuth2FATotpDisableResponse)(nil),                          // 46: clarifai.api.PostAuth2FATotpDisableResponse
	(*PostAuth2FATotpRegisterVerifyRequest)(nil),                    // 47: clarifai.api.PostAuth2FATotpRegisterVerifyRequest
	(*PostAuth2FATotpRegisterVerifyResponse)(nil),                   // 48: clarifai.api.PostAuth2FATotpRegisterVerifyResponse
	(*PostAuth2FATotpLoginRequest)(nil),                             // 49: clarifai.api.PostAuth2FATotpLoginRequest
	(*PostAuth2FATotpRecoverRequest)(nil),                           // 50: clarifai.api.PostAuth2FATotpRecoverRequest
	(*PostAuth2FATotpRecoverResponse)(nil),                          // 51: clarifai.api.PostAuth2FATotpRecoverResponse
	(*GetAuth2FATotpRecoverConfirmRequest)(nil),                     // 52: clarifai.api.GetAuth2FATotpRecoverConfirmRequest
	(*GetAuth2FATotpRecoverConfirmResponse)(nil),                    // 53: clarifai.api.GetAuth2FATotpRecoverConfirmResponse
	(*RequestResetPasswordRequest)(nil),                             // 54: clarifai.api.RequestResetPasswordRequest
	(*CompleteResetPasswordRequest)(nil),                            // 55: clarifai.api.CompleteResetPasswordRequest
	(*PostLoginRequest)(nil),                                        // 56: clarifai.api.PostLoginRequest
	(*PostSignupRequest)(nil),                                       // 57: clarifai.api.PostSignupRequest
	(*Utm)(nil),                                                     // 58: clarifai.api.Utm
	(*SingleLoginResponse)(nil),                                     // 59: clarifai.api.SingleLoginResponse
	(*PostLogoutRequest)(nil),                                       // 60: clarifai.api.PostLogoutRequest
	(*SingleLogoutResponse)(nil),                                    // 61: clarifai.api.SingleLogoutResponse
	(*GetBillingUsageRequest)(nil),                                  // 62: clarifai.api.GetBillingUsageRequest
	(*GetBillingUsageResponse)(nil),                                 // 63: clarifai.api.GetBillingUsageResponse
	(*GetStatusCodeRequest)(nil),                                    // 64: clarifai.api.GetStatusCodeRequest
	(*ListStatusCodesRequest)(nil),                                  // 65: clarifai.api.ListStatusCodesRequest
	(*SingleStatusCodeResponse)(nil),                                // 66: clarifai.api.SingleStatusCodeResponse
	(*MultiStatusCodeResponse)(nil),                                 // 67: clarifai.api.MultiStatusCodeResponse
	(*GetConceptRequest)(nil),                                       // 68: clarifai.api.GetConceptRequest
	(*ListConceptsRequest)(nil),                                     // 69: clarifai.api.ListConceptsRequest
	(*ListModelConceptsRequest)(nil),                                // 70: clarifai.api.ListModelConceptsRequest
	(*PostConceptsSearchesRequest)(nil),                             // 71: clarifai.api.PostConceptsSearchesRequest
	(*PostConceptsRequest)(nil),                                     // 72: clarifai.api.PostConceptsRequest
	(*PatchConceptsRequest)(nil),                                    // 73: clarifai.api.PatchConceptsRequest
	(*GetConceptCountsRequest)(nil),                                 // 74: clarifai.api.GetConceptCountsRequest
	(*SingleConceptResponse)(nil),                                   // 75: clarifai.api.SingleConceptResponse
	(*MultiConceptResponse)(nil),                                    // 76: clarifai.api.MultiConceptResponse
	(*MultiConceptCountResponse)(nil),                               // 77: clarifai.api.MultiConceptCountResponse
	(*ListConceptRelationsRequest)(nil),                             // 78: clarifai.api.ListConceptRelationsRequest
	(*PostConceptRelationsRequest)(nil),                             // 79: clarifai.api.PostConceptRelationsRequest
	(*DeleteConceptRelationsRequest)(nil),                           // 80: clarifai.api.DeleteConceptRelationsRequest
	(*ListKnowledgeGraphsRequest)(nil),                              // 81: clarifai.api.ListKnowledgeGraphsRequest
	(*PostKnowledgeGraphsRequest)(nil),                              // 82: clarifai.api.PostKnowledgeGraphsRequest
	(*ListConceptMappingsRequest)(nil),                              // 83: clarifai.api.ListConceptMappingsRequest
	(*PostConceptMappingsRequest)(nil),                              // 84: clarifai.api.PostConceptMappingsRequest
	(*PostConceptMappingJobsRequest)(nil),                           // 85: clarifai.api.PostConceptMappingJobsRequest
	(*SingleConceptRelationResponse)(nil),                           // 86: clarifai.api.SingleConceptRelationResponse
	(*MultiConceptRelationResponse)(nil),                            // 87: clarifai.api.MultiConceptRelationResponse
	(*SingleKnowledgeGraphResponse)(nil),                            // 88: clarifai.api.SingleKnowledgeGraphResponse
	(*MultiKnowledgeGraphResponse)(nil),                             // 89: clarifai.api.MultiKnowledgeGraphResponse
	(*SingleConceptMappingResponse)(nil),                            // 90: clarifai.api.SingleConceptMappingResponse
	(*MultiConceptMappingResponse)(nil),                             // 91: clarifai.api.MultiConceptMappingResponse
	(*SingleConceptMappingJobResponse)(nil),                         // 92: clarifai.api.SingleConceptMappingJobResponse
	(*MultiConceptMappingJobResponse)(nil),                          // 93: clarifai.api.MultiConceptMappingJobResponse
	(*GetConceptLanguageRequest)(nil),                               // 94: clarifai.api.GetConceptLanguageRequest
	(*ListConceptLanguagesRequest)(nil),                             // 95: clarifai.api.ListConceptLanguagesRequest
	(*PatchConceptLanguagesRequest)(nil),                            // 96: clarifai.api.PatchConceptLanguagesRequest
	(*PostConceptLanguagesRequest)(nil),                             // 97: clarifai.api.PostConceptLanguagesRequest
	(*SingleConceptLanguageResponse)(nil),                           // 98: clarifai.api.SingleConceptLanguageResponse
	(*MultiConceptLanguageResponse)(nil),                            // 99: clarifai.api.MultiConceptLanguageResponse
	(*ListConceptReferencesRequest)(nil),                            // 100: clarifai.api.ListConceptReferencesRequest
	(*SingleConceptReferenceResponse)(nil),                          // 101: clarifai.api.SingleConceptReferenceResponse
	(*MultiConceptReferenceResponse)(nil),                           // 102: clarifai.api.MultiConceptReferenceResponse
	(*GetHealthzRequest)(nil),                                       // 103: clarifai.api.GetHealthzRequest
	(*GetHealthzResponse)(nil),                                      // 104: clarifai.api.GetHealthzResponse
	(*GetInputRequest)(nil),                                         // 105: clarifai.api.GetInputRequest
	(*GetInputSamplesRequest)(nil),                                  // 106: clarifai.api.GetInputSamplesRequest
	(*ListInputsRequest)(nil),                                       // 107: clarifai.api.ListInputsRequest
	(*StreamInputsRequest)(nil),                                     // 108: clarifai.api.StreamInputsRequest
	(*PostInputsRequest)(nil),                                       // 109: clarifai.api.PostInputsRequest
	(*PostInputsFileRequest)(nil),                                   // 110: clarifai.api.PostInputsFileRequest
	(*PostInputsNiFiRequest)(nil),                                   // 111: clarifai.api.PostInputsNiFiRequest
	(*PostInputsDocumentRequest)(nil),                               // 112: clarifai.api.PostInputsDocumentRequest
	(*PostInputsDocumentRequestBody)(nil),                           // 113: clarifai.api.PostInputsDocumentRequestBody
	(*PatchInputsRequest)(nil),                                      // 114: clarifai.api.PatchInputsRequest
	(*DeleteInputRequest)(nil),                                      // 115: clarifai.api.DeleteInputRequest
	(*DeleteInputsRequest)(nil),                                     // 116: clarifai.api.DeleteInputsRequest
	(*SingleInputResponse)(nil),                                     // 117: clarifai.api.SingleInputResponse
	(*MultiInputResponse)(nil),                                      // 118: clarifai.api.MultiInputResponse
	(*MultiInputAnnotationResponse)(nil),                            // 119: clarifai.api.MultiInputAnnotationResponse
	(*SingleInputCountResponse)(nil),                                // 120: clarifai.api.SingleInputCountResponse
	(*GetInputCountRequest)(nil),                                    // 121: clarifai.api.GetInputCountRequest
	(*ListDatasetsRequest)(nil),                                     // 122: clarifai.api.ListDatasetsRequest
	(*GetDatasetRequest)(nil),                                       // 123: clarifai.api.GetDatasetRequest
	(*PostDatasetsRequest)(nil),                                     // 124: clarifai.api.PostDatasetsRequest
	(*PatchDatasetsRequest)(nil),                                    // 125: clarifai.api.PatchDatasetsRequest
	(*PatchDatasetIdsRequest)(nil),                                  // 126: clarifai.api.PatchDatasetIdsRequest
	(*DeleteDatasetsRequest)(nil),                                   // 127: clarifai.api.DeleteDatasetsRequest
	(*MultiDatasetResponse)(nil),                                    // 128: clarifai.api.MultiDatasetResponse
	(*SingleDatasetResponse)(nil),                                   // 129: clarifai.api.SingleDatasetResponse
	(*ListDatasetInputsRequest)(nil),                                // 130: clarifai.api.ListDatasetInputsRequest
	(*GetDatasetInputRequest)(nil),                                  // 131: clarifai.api.GetDatasetInputRequest
	(*PostDatasetInputsRequest)(nil),                                // 132: clarifai.api.PostDatasetInputsRequest
	(*DeleteDatasetInputsRequest)(nil),                              // 133: clarifai.api.DeleteDatasetInputsRequest
	(*MultiDatasetInputResponse)(nil),                               // 134: clarifai.api.MultiDatasetInputResponse
	(*SingleDatasetInputResponse)(nil),                              // 135: clarifai.api.SingleDatasetInputResponse
	(*ListDatasetVersionsRequest)(nil),                              // 136: clarifai.api.ListDatasetVersionsRequest
	(*GetDatasetVersionRequest)(nil),                                // 137: clarifai.api.GetDatasetVersionRequest
	(*ListDatasetVersionMetricsGroupsRequest)(nil),                  // 138: clarifai.api.ListDatasetVersionMetricsGroupsRequest
	(*PostDatasetVersionsRequest)(nil),                              // 139: clarifai.api.PostDatasetVersionsRequest
	(*PatchDatasetVersionsRequest)(nil),                             // 140: clarifai.api.PatchDatasetVersionsRequest
	(*DeleteDatasetVersionsRequest)(nil),                            // 141: clarifai.api.DeleteDatasetVersionsRequest
	(*PutDatasetVersionExportsRequest)(nil),                         // 142: clarifai.api.PutDatasetVersionExportsRequest
	(*MultiDatasetVersionResponse)(nil),                             // 143: clarifai.api.MultiDatasetVersionResponse
	(*MultiDatasetVersionExportResponse)(nil),                       // 144: clarifai.api.MultiDatasetVersionExportResponse
	(*MultiDatasetVersionMetricsGroupResponse)(nil),                 // 145: clarifai.api.MultiDatasetVersionMetricsGroupResponse
	(*SingleDatasetVersionResponse)(nil),                            // 146: clarifai.api.SingleDatasetVersionResponse
	(*GetDatasetInputsSearchAddJobRequest)(nil),                     // 147: clarifai.api.GetDatasetInputsSearchAddJobRequest
	(*SingleDatasetInputsSearchAddJobResponse)(nil),                 // 148: clarifai.api.SingleDatasetInputsSearchAddJobResponse
	(*PostModelOutputsRequest)(nil),                                 // 149: clarifai.api.PostModelOutputsRequest
	(*ListModelInputsRequest)(nil),                                  // 150: clarifai.api.ListModelInputsRequest
	(*GetKeyRequest)(nil),                                           // 151: clarifai.api.GetKeyRequest
	(*ListKeysRequest)(nil),                                         // 152: clarifai.api.ListKeysRequest
	(*ListAppKeysRequest)(nil),                                      // 153: clarifai.api.ListAppKeysRequest
	(*PostKeysRequest)(nil),                                         // 154: clarifai.api.PostKeysRequest
	(*DeleteKeyRequest)(nil),                                        // 155: clarifai.api.DeleteKeyRequest
	(*PatchKeysRequest)(nil),                                        // 156: clarifai.api.PatchKeysRequest
	(*SingleKeyResponse)(nil),                                       // 157: clarifai.api.SingleKeyResponse
	(*MultiKeyResponse)(nil),                                        // 158: clarifai.api.MultiKeyResponse
	(*FetchLicenseRequest)(nil),                                     // 159: clarifai.api.FetchLicenseRequest
	(*FetchLicenseResponse)(nil),                                    // 160: clarifai.api.FetchLicenseResponse
	(*ValidateLicenseRequest)(nil),                                  // 161: clarifai.api.ValidateLicenseRequest
	(*ValidateLicenseResponse)(nil),                                 // 162: clarifai.api.ValidateLicenseResponse
	(*ListLicensesRequest)(nil),                                     // 163: clarifai.api.ListLicensesRequest
	(*GetLicenseRequest)(nil),                                       // 164: clarifai.api.GetLicenseRequest
	(*SingleLicenseResponse)(nil),                                   // 165: clarifai.api.SingleLicenseResponse
	(*MultipleLicensesResponse)(nil),                                // 166: clarifai.api.MultipleLicensesResponse
	(*GetModelRequest)(nil),                                         // 167: clarifai.api.GetModelRequest
	(*ListModelsRequest)(nil),                                       // 168: clarifai.api.ListModelsRequest
	(*PatchModelToolkitsRequest)(nil),                               // 169: clarifai.api.PatchModelToolkitsRequest
	(*PatchModelCheckConsentsRequest)(nil),                          // 170: clarifai.api.PatchModelCheckConsentsRequest
	(*PatchModelUseCasesRequest)(nil),                               // 171: clarifai.api.PatchModelUseCasesRequest
	(*PatchModelLanguagesRequest)(nil),                              // 172: clarifai.api.PatchModelLanguagesRequest
	(*MultiModelToolkitResponse)(nil),                               // 173: clarifai.api.MultiModelToolkitResponse
	(*MultiModelCheckConsentResponse)(nil),                          // 174: clarifai.api.MultiModelCheckConsentResponse
	(*MultiModelUseCaseResponse)(nil),                               // 175: clarifai.api.MultiModelUseCaseResponse
	(*MultiModelLanguageResponse)(nil),                              // 176: clarifai.api.MultiModelLanguageResponse
	(*PostModelsRequest)(nil),                                       // 177: clarifai.api.PostModelsRequest
	(*PatchModelsRequest)(nil),                                      // 178: clarifai.api.PatchModelsRequest
	(*IdUpdateSource)(nil),                                          // 179: clarifai.api.IdUpdateSource
	(*PatchModelIdsRequest)(nil),                                    // 180: clarifai.api.PatchModelIdsRequest
	(*DeleteModelRequest)(nil),                                      // 181: clarifai.api.DeleteModelRequest
	(*DeleteModelsRequest)(nil),                                     // 182: clarifai.api.DeleteModelsRequest
	(*PostModelsSearchesRequest)(nil),                               // 183: clarifai.api.PostModelsSearchesRequest
	(*SingleModelResponse)(nil),                                     // 184: clarifai.api.SingleModelResponse
	(*MultiModelResponse)(nil),                                      // 185: clarifai.api.MultiModelResponse
	(*PatchModelVersionsRequest)(nil),                               // 186: clarifai.api.PatchModelVersionsRequest
	(*GetModelVersionRequest)(nil),                                  // 187: clarifai.api.GetModelVersionRequest
	(*ListModelVersionsRequest)(nil),                                // 188: clarifai.api.ListModelVersionsRequest
	(*DeleteModelVersionRequest)(nil),                               // 189: clarifai.api.DeleteModelVersionRequest
	(*SingleModelVersionResponse)(nil),                              // 190: clarifai.api.SingleModelVersionResponse
	(*MultiModelVersionResponse)(nil),                               // 191: clarifai.api.MultiModelVersionResponse
	(*PostModelVersionsRequest)(nil),                                // 192: clarifai.api.PostModelVersionsRequest
	(*PostWorkflowVersionsUnPublishRequest)(nil),                    // 193: clarifai.api.PostWorkflowVersionsUnPublishRequest
	(*PostWorkflowVersionsPublishRequest)(nil),                      // 194: clarifai.api.PostWorkflowVersionsPublishRequest
	(*WorkflowVersionPublishRequest)(nil),                           // 195: clarifai.api.WorkflowVersionPublishRequest
	(*WorkflowVersionUnPublishRequest)(nil),                         // 196: clarifai.api.WorkflowVersionUnPublishRequest
	(*ModelVersionPublishRequest)(nil),                              // 197: clarifai.api.ModelVersionPublishRequest
	(*PostModelVersionsPublishRequest)(nil),                         // 198: clarifai.api.PostModelVersionsPublishRequest
	(*ModelVersionUnpublishRequest)(nil),                            // 199: clarifai.api.ModelVersionUnpublishRequest
	(*PostModelVersionsUnPublishRequest)(nil),                       // 200: clarifai.api.PostModelVersionsUnPublishRequest
	(*PostModelVersionMetricsRequest)(nil),                          // 201: clarifai.api.PostModelVersionMetricsRequest
	(*GetModelVersionMetricsRequest)(nil),                           // 202: clarifai.api.GetModelVersionMetricsRequest
	(*GetModelTypeRequest)(nil),                                     // 203: clarifai.api.GetModelTypeRequest
	(*ListModelTypesRequest)(nil),                                   // 204: clarifai.api.ListModelTypesRequest
	(*ListOpenSourceLicensesRequest)(nil),                           // 205: clarifai.api.ListOpenSourceLicensesRequest
	(*ListOpenSourceLicensesResponse)(nil),                          // 206: clarifai.api.ListOpenSourceLicensesResponse
	(*SingleModelTypeResponse)(nil),                                 // 207: clarifai.api.SingleModelTypeResponse
	(*MultiModelTypeResponse)(nil),                                  // 208: clarifai.api.MultiModelTypeResponse
	(*GetModelVersionInputExampleRequest)(nil),                      // 209: clarifai.api.GetModelVersionInputExampleRequest
	(*ListModelVersionInputExamplesRequest)(nil),                    // 210: clarifai.api.ListModelVersionInputExamplesRequest
	(*PostModelVersionInputExamplesRequest)(nil),                    // 211: clarifai.api.PostModelVersionInputExamplesRequest
	(*DeleteModelVersionInputExamplesRequest)(nil),                  // 212: clarifai.api.DeleteModelVersionInputExamplesRequest
	(*SingleModelVersionInputExampleResponse)(nil),                  // 213: clarifai.api.SingleModelVersionInputExampleResponse
	(*MultiModelVersionInputExampleResponse)(nil),                   // 214: clarifai.api.MultiModelVersionInputExampleResponse
	(*ListModelReferencesRequest)(nil),                              // 215: clarifai.api.ListModelReferencesRequest
	(*PostModelReferencesRequest)(nil),                              // 216: clarifai.api.PostModelReferencesRequest
	(*DeleteModelReferencesRequest)(nil),                            // 217: clarifai.api.DeleteModelReferencesRequest
	(*MultiModelReferenceResponse)(nil),                             // 218: clarifai.api.MultiModelReferenceResponse
	(*MultiOutputResponse)(nil),                                     // 219: clarifai.api.MultiOutputResponse
	(*ListScopesRequest)(nil),                                       // 220: clarifai.api.ListScopesRequest
	(*MyScopesRequest)(nil),                                         // 221: clarifai.api.MyScopesRequest
	(*MyScopesUserRequest)(nil),                                     // 222: clarifai.api.MyScopesUserRequest
	(*MyScopesRootRequest)(nil),                                     // 223: clarifai.api.MyScopesRootRequest
	(*MultiScopeDepsResponse)(nil),                                  // 224: clarifai.api.MultiScopeDepsResponse
	(*MultiScopeResponse)(nil),                                      // 225: clarifai.api.MultiScopeResponse
	(*MultiScopeUserResponse)(nil),                                  // 226: clarifai.api.MultiScopeUserResponse
	(*MultiScopeRootResponse)(nil),                                  // 227: clarifai.api.MultiScopeRootResponse
	(*GetSearchRequest)(nil),                                        // 228: clarifai.api.GetSearchRequest
	(*ListSearchesRequest)(nil),                                     // 229: clarifai.api.ListSearchesRequest
	(*PostSearchesRequest)(nil),                                     // 230: clarifai.api.PostSearchesRequest
	(*PatchInputsSearchesRequest)(nil),                              // 231: clarifai.api.PatchInputsSearchesRequest
	(*PatchAnnotationsSearchesRequest)(nil),                         // 232: clarifai.api.PatchAnnotationsSearchesRequest
	(*PatchSearchesRequest)(nil),                                    // 233: clarifai.api.PatchSearchesRequest
	(*PostSearchesByIDRequest)(nil),                                 // 234: clarifai.api.PostSearchesByIDRequest
	(*DeleteSearchRequest)(nil),                                     // 235: clarifai.api.DeleteSearchRequest
	(*PostAttributeSearchRequest)(nil),                              // 236: clarifai.api.PostAttributeSearchRequest
	(*PostAnnotationsSearchesRequest)(nil),                          // 237: clarifai.api.PostAnnotationsSearchesRequest
	(*DeleteAnnotationSearchMetricsRequest)(nil),                    // 238: clarifai.api.DeleteAnnotationSearchMetricsRequest
	(*PostInputsSearchesRequest)(nil),                               // 239: clarifai.api.PostInputsSearchesRequest
	(*SingleSearchResponse)(nil),                                    // 240: clarifai.api.SingleSearchResponse
	(*MultiSearchResponse)(nil),                                     // 241: clarifai.api.MultiSearchResponse
	(*PostAnnotationSearchMetricsRequest)(nil),                      // 242: clarifai.api.PostAnnotationSearchMetricsRequest
	(*GetAnnotationSearchMetricsRequest)(nil),                       // 243: clarifai.api.GetAnnotationSearchMetricsRequest
	(*ListAnnotationSearchMetricsRequest)(nil),                      // 244: clarifai.api.ListAnnotationSearchMetricsRequest
	(*MultiAnnotationSearchMetricsResponse)(nil),                    // 245: clarifai.api.MultiAnnotationSearchMetricsResponse
	(*ListAnnotationFiltersRequest)(nil),                            // 246: clarifai.api.ListAnnotationFiltersRequest
	(*GetAnnotationFilterRequest)(nil),                              // 247: clarifai.api.GetAnnotationFilterRequest
	(*PostAnnotationFiltersRequest)(nil),                            // 248: clarifai.api.PostAnnotationFiltersRequest
	(*PatchAnnotationFiltersRequest)(nil),                           // 249: clarifai.api.PatchAnnotationFiltersRequest
	(*DeleteAnnotationFiltersRequest)(nil),                          // 250: clarifai.api.DeleteAnnotationFiltersRequest
	(*MultiAnnotationFilterResponse)(nil),                           // 251: clarifai.api.MultiAnnotationFilterResponse
	(*SingleAnnotationFilterResponse)(nil),                          // 252: clarifai.api.SingleAnnotationFilterResponse
	(*ListClustersRequest)(nil),                                     // 253: clarifai.api.ListClustersRequest
	(*ListAnnotationsForClusterRequest)(nil),                        // 254: clarifai.api.ListAnnotationsForClusterRequest
	(*PostClustersSearchesRequest)(nil),                             // 255: clarifai.api.PostClustersSearchesRequest
	(*MultiClusterResponse)(nil),                                    // 256: clarifai.api.MultiClusterResponse
	(*GetSubscriptionRequest)(nil),                                  // 257: clarifai.api.GetSubscriptionRequest
	(*PostSubscriptionRequest)(nil),                                 // 258: clarifai.api.PostSubscriptionRequest
	(*SingleSubscriptionResponse)(nil),                              // 259: clarifai.api.SingleSubscriptionResponse
	(*ListCreditCardsRequest)(nil),                                  // 260: clarifai.api.ListCreditCardsRequest
	(*MultipleCreditCardResponse)(nil),                              // 261: clarifai.api.MultipleCreditCardResponse
	(*PostCreditCardRequest)(nil),                                   // 262: clarifai.api.PostCreditCardRequest
	(*SingleCreditCardResponse)(nil),                                // 263: clarifai.api.SingleCreditCardResponse
	(*DeleteCreditCardRequest)(nil),                                 // 264: clarifai.api.DeleteCreditCardRequest
	(*PatchCreditCardsRequest)(nil),                                 // 265: clarifai.api.PatchCreditCardsRequest
	(*GetShippingAddressRequest)(nil),                               // 266: clarifai.api.GetShippingAddressRequest
	(*PutShippingAddressRequest)(nil),                               // 267: clarifai.api.PutShippingAddressRequest
	(*SingleShippingAddressResponse)(nil),                           // 268: clarifai.api.SingleShippingAddressResponse
	(*ListPlansRequest)(nil),                                        // 269: clarifai.api.ListPlansRequest
	(*MultiPlanResponse)(nil),                                       // 270: clarifai.api.MultiPlanResponse
	(*GetHistoricalUsageRequest)(nil),                               // 271: clarifai.api.GetHistoricalUsageRequest
	(*GetHistoricalUsageResponse)(nil),                              // 272: clarifai.api.GetHistoricalUsageResponse
	(*PostHistoricalUsageRequest)(nil),                              // 273: clarifai.api.PostHistoricalUsageRequest
	(*PostHistoricalUsageResponse)(nil),                             // 274: clarifai.api.PostHistoricalUsageResponse
	(*GetRealtimeUsageRequest)(nil),                                 // 275: clarifai.api.GetRealtimeUsageRequest
	(*GetRealtimeUsageResponse)(nil),                                // 276: clarifai.api.GetRealtimeUsageResponse
	(*ListUsageIntervalsRequest)(nil),                               // 277: clarifai.api.ListUsageIntervalsRequest
	(*ListUsageIntervalsResponse)(nil),                              // 278: clarifai.api.ListUsageIntervalsResponse
	(*ListUserBillingCyclesRequest)(nil),                            // 279: clarifai.api.ListUserBillingCyclesRequest
	(*ListUserCyclesRequest)(nil),                                   // 280: clarifai.api.ListUserCyclesRequest
	(*ListUserBillingCyclesResponse)(nil),                           // 281: clarifai.api.ListUserBillingCyclesResponse
	(*ListUserCyclesResponse)(nil),                                  // 282: clarifai.api.ListUserCyclesResponse
	(*PostUsageRequest)(nil),                                        // 283: clarifai.api.PostUsageRequest
	(*PostUsageResponse)(nil),                                       // 284: clarifai.api.PostUsageResponse
	(*GetUserRequest)(nil),                                          // 285: clarifai.api.GetUserRequest
	(*ListUsersRequest)(nil),                                        // 286: clarifai.api.ListUsersRequest
	(*PostUserConsentRequest)(nil),                                  // 287: clarifai.api.PostUserConsentRequest
	(*SingleUserResponse)(nil),                                      // 288: clarifai.api.SingleUserResponse
	(*MultiUserResponse)(nil),                                       // 289: clarifai.api.MultiUserResponse
	(*PatchUserRequest)(nil),                                        // 290: clarifai.api.PatchUserRequest
	(*PostUserAccessRequest)(nil),                                   // 291: clarifai.api.PostUserAccessRequest
	(*GetUserAccessRequest)(nil),                                    // 292: clarifai.api.GetUserAccessRequest
	(*MultiUserAccessResponse)(nil),                                 // 293: clarifai.api.MultiUserAccessResponse
	(*SingleUserAccessResponse)(nil),                                // 294: clarifai.api.SingleUserAccessResponse
	(*PostEmailsRequest)(nil),                                       // 295: clarifai.api.PostEmailsRequest
	(*SingleEmailResponse)(nil),                                     // 296: clarifai.api.SingleEmailResponse
	(*MultipleEmailResponse)(nil),                                   // 297: clarifai.api.MultipleEmailResponse
	(*ListEmailsRequest)(nil),                                       // 298: clarifai.api.ListEmailsRequest
	(*PostResendVerifyRequest)(nil),                                 // 299: clarifai.api.PostResendVerifyRequest
	(*SingleResendVerifyResponse)(nil),                              // 300: clarifai.api.SingleResendVerifyResponse
	(*DeleteEmailRequest)(nil),                                      // 301: clarifai.api.DeleteEmailRequest
	(*PostPrimaryEmailRequest)(nil),                                 // 302: clarifai.api.PostPrimaryEmailRequest
	(*PostValidatePasswordRequest)(nil),                             // 303: clarifai.api.PostValidatePasswordRequest
	(*SinglePasswordValidationResponse)(nil),                        // 304: clarifai.api.SinglePasswordValidationResponse
	(*ListGlobalPasswordPoliciesRequest)(nil),                       // 305: clarifai.api.ListGlobalPasswordPoliciesRequest
	(*ListPasswordPoliciesRequest)(nil),                             // 306: clarifai.api.ListPasswordPoliciesRequest
	(*PostPasswordPoliciesRequest)(nil),                             // 307: clarifai.api.PostPasswordPoliciesRequest
	(*PatchPasswordPoliciesRequest)(nil),                            // 308: clarifai.api.PatchPasswordPoliciesRequest
	(*DeletePasswordPoliciesRequest)(nil),                           // 309: clarifai.api.DeletePasswordPoliciesRequest
	(*MultiplePasswordPoliciesResponse)(nil),                        // 310: clarifai.api.MultiplePasswordPoliciesResponse
	(*UserFeatureConfigRequest)(nil),                                // 311: clarifai.api.UserFeatureConfigRequest
	(*SingleUserFeatureConfigResponse)(nil),                         // 312: clarifai.api.SingleUserFeatureConfigResponse
	(*PostOrganizationsRequest)(nil),                                // 313: clarifai.api.PostOrganizationsRequest
	(*ListOrganizationsRequest)(nil),                                // 314: clarifai.api.ListOrganizationsRequest
	(*ListUsersOrganizationsRequest)(nil),                           // 315: clarifai.api.ListUsersOrganizationsRequest
	(*DeleteRequestingUserFromOrganizationRequest)(nil),             // 316: clarifai.api.DeleteRequestingUserFromOrganizationRequest
	(*PostAcceptOrganizationInvitationRequest)(nil),                 // 317: clarifai.api.PostAcceptOrganizationInvitationRequest
	(*PostDeclineOrganizationInvitationRequest)(nil),                // 318: clarifai.api.PostDeclineOrganizationInvitationRequest
	(*GetOrganizationRequest)(nil),                                  // 319: clarifai.api.GetOrganizationRequest
	(*PatchOrganizationRequest)(nil),                                // 320: clarifai.api.PatchOrganizationRequest
	(*DeleteOrganizationRequest)(nil),                               // 321: clarifai.api.DeleteOrganizationRequest
	(*SingleOrganizationResponse)(nil),                              // 322: clarifai.api.SingleOrganizationResponse
	(*MultiOrganizationResponse)(nil),                               // 323: clarifai.api.MultiOrganizationResponse
	(*MultiUsersOrganizationsResponse)(nil),                         // 324: clarifai.api.MultiUsersOrganizationsResponse
	(*ListOrganizationAppMembersRequest)(nil),                       // 325: clarifai.api.ListOrganizationAppMembersRequest
	(*ListOrganizationMembersRequest)(nil),                          // 326: clarifai.api.ListOrganizationMembersRequest
	(*PostOrganizationInvitationsRequest)(nil),                      // 327: clarifai.api.PostOrganizationInvitationsRequest
	(*PatchOrganizationInvitationsRequest)(nil),                     // 328: clarifai.api.PatchOrganizationInvitationsRequest
	(*ListOrganizationInvitationsRequest)(nil),                      // 329: clarifai.api.ListOrganizationInvitationsRequest
	(*GetOrganizationInvitationRequest)(nil),                        // 330: clarifai.api.GetOrganizationInvitationRequest
	(*GetOrganizationInvitationPublicRequest)(nil),                  // 331: clarifai.api.GetOrganizationInvitationPublicRequest
	(*SingleOrganizationInvitationResponse)(nil),                    // 332: clarifai.api.SingleOrganizationInvitationResponse
	(*MultiOrganizationInvitationResponse)(nil),                     // 333: clarifai.api.MultiOrganizationInvitationResponse
	(*PatchOrganizationMembersRequest)(nil),                         // 334: clarifai.api.PatchOrganizationMembersRequest
	(*PostOrganizationMemberRequest)(nil),                           // 335: clarifai.api.PostOrganizationMemberRequest
	(*DeleteOrganizationMemberRequest)(nil),                         // 336: clarifai.api.DeleteOrganizationMemberRequest
	(*MultiOrganizationMemberResponse)(nil),                         // 337: clarifai.api.MultiOrganizationMemberResponse
	(*PostIdentityProvidersRequest)(nil),                            // 338: clarifai.api.PostIdentityProvidersRequest
	(*ListIdentityProvidersRequest)(nil),                            // 339: clarifai.api.ListIdentityProvidersRequest
	(*GetIdentityProviderRequest)(nil),                              // 340: clarifai.api.GetIdentityProviderRequest
	(*PatchIdentityProvidersRequest)(nil),                           // 341: clarifai.api.PatchIdentityProvidersRequest
	(*DeleteIdentityProvidersRequest)(nil),                          // 342: clarifai.api.DeleteIdentityProvidersRequest
	(*SingleIdentityProviderResponse)(nil),                          // 343: clarifai.api.SingleIdentityProviderResponse
	(*MultiIdentityProviderResponse)(nil),                           // 344: clarifai.api.MultiIdentityProviderResponse
	(*PostTeamsRequest)(nil),                                        // 345: clarifai.api.PostTeamsRequest
	(*ListTeamsRequest)(nil),                                        // 346: clarifai.api.ListTeamsRequest
	(*GetTeamRequest)(nil),                                          // 347: clarifai.api.GetTeamRequest
	(*PatchTeamsRequest)(nil),                                       // 348: clarifai.api.PatchTeamsRequest
	(*DeleteTeamsRequest)(nil),                                      // 349: clarifai.api.DeleteTeamsRequest
	(*SingleTeamResponse)(nil),                                      // 350: clarifai.api.SingleTeamResponse
	(*MultiTeamResponse)(nil),                                       // 351: clarifai.api.MultiTeamResponse
	(*AppIdentity)(nil),                                             // 352: clarifai.api.AppIdentity
	(*ListTeamAppsRequest)(nil),                                     // 353: clarifai.api.ListTeamAppsRequest
	(*PostTeamAppsRequest)(nil),                                     // 354: clarifai.api.PostTeamAppsRequest
	(*DeleteTeamAppsRequest)(nil),                                   // 355: clarifai.api.DeleteTeamAppsRequest
	(*MultiTeamAppsResponse)(nil),                                   // 356: clarifai.api.MultiTeamAppsResponse
	(*PostTeamUsersRequest)(nil),                                    // 357: clarifai.api.PostTeamUsersRequest
	(*ListTeamUsersRequest)(nil),                                    // 358: clarifai.api.ListTeamUsersRequest
	(*DeleteTeamUsersRequest)(nil),                                  // 359: clarifai.api.DeleteTeamUsersRequest
	(*MultiTeamUserResponse)(nil),                                   // 360: clarifai.api.MultiTeamUserResponse
	(*ListRolesRequest)(nil),                                        // 361: clarifai.api.ListRolesRequest
	(*GetRoleRequest)(nil),                                          // 362: clarifai.api.GetRoleRequest
	(*SingleRoleResponse)(nil),                                      // 363: clarifai.api.SingleRoleResponse
	(*MultiRoleResponse)(nil),                                       // 364: clarifai.api.MultiRoleResponse
	(*GetVocabRequest)(nil),                                         // 365: clarifai.api.GetVocabRequest
	(*ListVocabsRequest)(nil),                                       // 366: clarifai.api.ListVocabsRequest
	(*PostVocabsRequest)(nil),                                       // 367: clarifai.api.PostVocabsRequest
	(*PatchVocabsRequest)(nil),                                      // 368: clarifai.api.PatchVocabsRequest
	(*DeleteVocabRequest)(nil),                                      // 369: clarifai.api.DeleteVocabRequest
	(*DeleteVocabsRequest)(nil),                                     // 370: clarifai.api.DeleteVocabsRequest
	(*ListVocabConceptsRequest)(nil),                                // 371: clarifai.api.ListVocabConceptsRequest
	(*PostVocabConceptsRequest)(nil),                                // 372: clarifai.api.PostVocabConceptsRequest
	(*DeleteVocabConceptRequest)(nil),                               // 373: clarifai.api.DeleteVocabConceptRequest
	(*DeleteVocabConceptsRequest)(nil),                              // 374: clarifai.api.DeleteVocabConceptsRequest
	(*SingleVocabResponse)(nil),                                     // 375: clarifai.api.SingleVocabResponse
	(*MultiVocabResponse)(nil),                                      // 376: clarifai.api.MultiVocabResponse
	(*GetWorkflowRequest)(nil),                                      // 377: clarifai.api.GetWorkflowRequest
	(*ListWorkflowsRequest)(nil),                                    // 378: clarifai.api.ListWorkflowsRequest
	(*ListPublicWorkflowsRequest)(nil),                              // 379: clarifai.api.ListPublicWorkflowsRequest
	(*PostWorkflowsRequest)(nil),                                    // 380: clarifai.api.PostWorkflowsRequest
	(*PatchWorkflowsRequest)(nil),                                   // 381: clarifai.api.PatchWorkflowsRequest
	(*PatchWorkflowIdsRequest)(nil),                                 // 382: clarifai.api.PatchWorkflowIdsRequest
	(*DeleteWorkflowRequest)(nil),                                   // 383: clarifai.api.DeleteWorkflowRequest
	(*DeleteWorkflowsRequest)(nil),                                  // 384: clarifai.api.DeleteWorkflowsRequest
	(*SingleWorkflowResponse)(nil),                                  // 385: clarifai.api.SingleWorkflowResponse
	(*MultiWorkflowResponse)(nil),                                   // 386: clarifai.api.MultiWorkflowResponse
	(*PostWorkflowResultsRequest)(nil),                              // 387: clarifai.api.PostWorkflowResultsRequest
	(*PostWorkflowResultsResponse)(nil),                             // 388: clarifai.api.PostWorkflowResultsResponse
	(*PostWorkflowResultsSimilarityRequest)(nil),                    // 389: clarifai.api.PostWorkflowResultsSimilarityRequest
	(*PostWorkflowResultsSimilarityResponse)(nil),                   // 390: clarifai.api.PostWorkflowResultsSimilarityResponse
	(*ListWorkflowVersionsRequest)(nil),                             // 391: clarifai.api.ListWorkflowVersionsRequest
	(*GetWorkflowVersionRequest)(nil),                               // 392: clarifai.api.GetWorkflowVersionRequest
	(*DeleteWorkflowVersionsRequest)(nil),                           // 393: clarifai.api.DeleteWorkflowVersionsRequest
	(*PatchWorkflowVersionsRequest)(nil),                            // 394: clarifai.api.PatchWorkflowVersionsRequest
	(*MultiWorkflowVersionResponse)(nil),                            // 395: clarifai.api.MultiWorkflowVersionResponse
	(*SingleWorkflowVersionResponse)(nil),                           // 396: clarifai.api.SingleWorkflowVersionResponse
	(*PostWorkflowMetricsRequest)(nil),                              // 397: clarifai.api.PostWorkflowMetricsRequest
	(*GetWorkflowMetricsRequest)(nil),                               // 398: clarifai.api.GetWorkflowMetricsRequest
	(*GetWorkflowNodeMetricsRequest)(nil),                           // 399: clarifai.api.GetWorkflowNodeMetricsRequest
	(*ListWorkflowMetricsRequest)(nil),                              // 400: clarifai.api.ListWorkflowMetricsRequest
	(*DeleteWorkflowMetricsRequest)(nil),                            // 401: clarifai.api.DeleteWorkflowMetricsRequest
	(*SingleWorkflowMetricsResponse)(nil),                           // 402: clarifai.api.SingleWorkflowMetricsResponse
	(*SingleWorkflowNodeMetricsResponse)(nil),                       // 403: clarifai.api.SingleWorkflowNodeMetricsResponse
	(*MultiWorkflowMetricsResponse)(nil),                            // 404: clarifai.api.MultiWorkflowMetricsResponse
	(*PostAppDuplicationsRequest)(nil),                              // 405: clarifai.api.PostAppDuplicationsRequest
	(*GetAppDuplicationRequest)(nil),                                // 406: clarifai.api.GetAppDuplicationRequest
	(*ListAppDuplicationsRequest)(nil),                              // 407: clarifai.api.ListAppDuplicationsRequest
	(*MultiAppDuplicationsResponse)(nil),                            // 408: clarifai.api.MultiAppDuplicationsResponse
	(*SingleAppDuplicationResponse)(nil),                            // 409: clarifai.api.SingleAppDuplicationResponse
	(*PostTasksRequest)(nil),                                        // 410: clarifai.api.PostTasksRequest
	(*GetTaskRequest)(nil),                                          // 411: clarifai.api.GetTaskRequest
	(*ListTasksRequest)(nil),                                        // 412: clarifai.api.ListTasksRequest
	(*PatchTasksRequest)(nil),                                       // 413: clarifai.api.PatchTasksRequest
	(*DeleteTasksRequest)(nil),                                      // 414: clarifai.api.DeleteTasksRequest
	(*MultiTaskResponse)(nil),                                       // 415: clarifai.api.MultiTaskResponse
	(*SingleTaskResponse)(nil),                                      // 416: clarifai.api.SingleTaskResponse
	(*GetTaskCountRequest)(nil),                                     // 417: clarifai.api.GetTaskCountRequest
	(*SingleTaskCountResponse)(nil),                                 // 418: clarifai.api.SingleTaskCountResponse
	(*PatchAnnotationCountsRollupRequest)(nil),                      // 419: clarifai.api.PatchAnnotationCountsRollupRequest
	(*PostLabelOrdersRequest)(nil),                                  // 420: clarifai.api.PostLabelOrdersRequest
	(*GetLabelOrderRequest)(nil),                                    // 421: clarifai.api.GetLabelOrderRequest
	(*ListLabelOrdersRequest)(nil),                                  // 422: clarifai.api.ListLabelOrdersRequest
	(*PatchLabelOrdersRequest)(nil),                                 // 423: clarifai.api.PatchLabelOrdersRequest
	(*DeleteLabelOrdersRequest)(nil),                                // 424: clarifai.api.DeleteLabelOrdersRequest
	(*MultiLabelOrderResponse)(nil),                                 // 425: clarifai.api.MultiLabelOrderResponse
	(*SingleLabelOrderResponse)(nil),                                // 426: clarifai.api.SingleLabelOrderResponse
	(*PostCollectorsRequest)(nil),                                   // 427: clarifai.api.PostCollectorsRequest
	(*PatchCollectorsRequest)(nil),                                  // 428: clarifai.api.PatchCollectorsRequest
	(*DeleteCollectorsRequest)(nil),                                 // 429: clarifai.api.DeleteCollectorsRequest
	(*GetCollectorRequest)(nil),                                     // 430: clarifai.api.GetCollectorRequest
	(*ListCollectorsRequest)(nil),                                   // 431: clarifai.api.ListCollectorsRequest
	(*MultiCollectorResponse)(nil),                                  // 432: clarifai.api.MultiCollectorResponse
	(*SingleCollectorResponse)(nil),                                 // 433: clarifai.api.SingleCollectorResponse
	(*PostStatValuesRequest)(nil),                                   // 434: clarifai.api.PostStatValuesRequest
	(*MultiStatValueResponse)(nil),                                  // 435: clarifai.api.MultiStatValueResponse
	(*PostStatValuesAggregateRequest)(nil),                          // 436: clarifai.api.PostStatValuesAggregateRequest
	(*MultiStatValueAggregateResponse)(nil),                         // 437: clarifai.api.MultiStatValueAggregateResponse
	(*PostAnalyticsRequest)(nil),                                    // 438: clarifai.api.PostAnalyticsRequest
	(*PostAnalyticsResponse)(nil),                                   // 439: clarifai.api.PostAnalyticsResponse
	(*PostSDKBillingRequest)(nil),                                   // 440: clarifai.api.PostSDKBillingRequest
	(*PostSDKBillingResponse)(nil),                                  // 441: clarifai.api.PostSDKBillingResponse
	(*MultiFindDuplicateAnnotationsJobResponse)(nil),                // 442: clarifai.api.MultiFindDuplicateAnnotationsJobResponse
	(*SingleFindDuplicateAnnotationsJobResponse)(nil),               // 443: clarifai.api.SingleFindDuplicateAnnotationsJobResponse
	(*PostFindDuplicateAnnotationsJobsRequest)(nil),                 // 444: clarifai.api.PostFindDuplicateAnnotationsJobsRequest
	(*GetFindDuplicateAnnotationsJobRequest)(nil),                   // 445: clarifai.api.GetFindDuplicateAnnotationsJobRequest
	(*ListFindDuplicateAnnotationsJobsRequest)(nil),                 // 446: clarifai.api.ListFindDuplicateAnnotationsJobsRequest
	(*DeleteFindDuplicateAnnotationsJobsRequest)(nil),               // 447: clarifai.api.DeleteFindDuplicateAnnotationsJobsRequest
	(*PostTrendingMetricsViewRequest)(nil),                          // 448: clarifai.api.PostTrendingMetricsViewRequest
	(*ListTrendingMetricsViewsRequest)(nil),                         // 449: clarifai.api.ListTrendingMetricsViewsRequest
	(*MultiTrendingMetricsViewResponse)(nil),                        // 450: clarifai.api.MultiTrendingMetricsViewResponse
	(*PostIdValidationRequest)(nil),                                 // 451: clarifai.api.PostIdValidationRequest
	(*MultiIdValidationResponse)(nil),                               // 452: clarifai.api.MultiIdValidationResponse
	(*ListTagCategoriesRequest)(nil),                                // 453: clarifai.api.ListTagCategoriesRequest
	(*MultiTagCategoryResponse)(nil),                                // 454: clarifai.api.MultiTagCategoryResponse
	(*PostModelStarsRequest)(nil),                                   // 455: clarifai.api.PostModelStarsRequest
	(*MultiModelStarResponse)(nil),                                  // 456: clarifai.api.MultiModelStarResponse
	(*DeleteModelStarsRequest)(nil),                                 // 457: clarifai.api.DeleteModelStarsRequest
	(*DeleteModelStarsResponse)(nil),                                // 458: clarifai.api.DeleteModelStarsResponse
	(*PostUserStarsRequest)(nil),                                    // 459: clarifai.api.PostUserStarsRequest
	(*MultiUserStarResponse)(nil),                                   // 460: clarifai.api.MultiUserStarResponse
	(*DeleteUserStarsRequest)(nil),                                  // 461: clarifai.api.DeleteUserStarsRequest
	(*DeleteUserStarsResponse)(nil),                                 // 462: clarifai.api.DeleteUserStarsResponse
	(*PostAppStarsRequest)(nil),                                     // 463: clarifai.api.PostAppStarsRequest
	(*MultiAppStarResponse)(nil),                                    // 464: clarifai.api.MultiAppStarResponse
	(*DeleteAppStarsRequest)(nil),                                   // 465: clarifai.api.DeleteAppStarsRequest
	(*DeleteAppStarsResponse)(nil),                                  // 466: clarifai.api.DeleteAppStarsResponse
	(*PostWorkflowStarsRequest)(nil),                                // 467: clarifai.api.PostWorkflowStarsRequest
	(*MultiWorkflowStarResponse)(nil),                               // 468: clarifai.api.MultiWorkflowStarResponse
	(*DeleteWorkflowStarsRequest)(nil),                              // 469: clarifai.api.DeleteWorkflowStarsRequest
	(*DeleteWorkflowStarsResponse)(nil),                             // 470: clarifai.api.DeleteWorkflowStarsResponse
	(*ListWebNotificationsRequest)(nil),                             // 471: clarifai.api.ListWebNotificationsRequest
	(*GetWebNotificationRequest)(nil),                               // 472: clarifai.api.GetWebNotificationRequest
	(*DeleteWebNotificationsRequest)(nil),                           // 473: clarifai.api.DeleteWebNotificationsRequest
	(*PatchWebNotificationsRequest)(nil),                            // 474: clarifai.api.PatchWebNotificationsRequest
	(*MultiWebNotificationResponse)(nil),                            // 475: clarifai.api.MultiWebNotificationResponse
	(*SingleWebNotificationResponse)(nil),                           // 476: clarifai.api.SingleWebNotificationResponse
	(*GetModuleRequest)(nil),                                        // 477: clarifai.api.GetModuleRequest
	(*ListModulesRequest)(nil),                                      // 478: clarifai.api.ListModulesRequest
	(*PostModulesRequest)(nil),                                      // 479: clarifai.api.PostModulesRequest
	(*PatchModulesRequest)(nil),                                     // 480: clarifai.api.PatchModulesRequest
	(*DeleteModulesRequest)(nil),                                    // 481: clarifai.api.DeleteModulesRequest
	(*SingleModuleResponse)(nil),                                    // 482: clarifai.api.SingleModuleResponse
	(*MultiModuleResponse)(nil),                                     // 483: clarifai.api.MultiModuleResponse
	(*GetModuleVersionRequest)(nil),                                 // 484: clarifai.api.GetModuleVersionRequest
	(*ListModuleVersionsRequest)(nil),                               // 485: clarifai.api.ListModuleVersionsRequest
	(*PostModuleVersionsRequest)(nil),                               // 486: clarifai.api.PostModuleVersionsRequest
	(*DeleteModuleVersionsRequest)(nil),                             // 487: clarifai.api.DeleteModuleVersionsRequest
	(*SingleModuleVersionResponse)(nil),                             // 488: clarifai.api.SingleModuleVersionResponse
	(*MultiModuleVersionResponse)(nil),                              // 489: clarifai.api.MultiModuleVersionResponse
	(*GetInstalledModuleVersionRequest)(nil),                        // 490: clarifai.api.GetInstalledModuleVersionRequest
	(*ListInstalledModuleVersionsRequest)(nil),                      // 491: clarifai.api.ListInstalledModuleVersionsRequest
	(*PostInstalledModuleVersionsRequest)(nil),                      // 492: clarifai.api.PostInstalledModuleVersionsRequest
	(*PostInstalledModuleVersionsKeyRequest)(nil),                   // 493: clarifai.api.PostInstalledModuleVersionsKeyRequest
	(*DeleteInstalledModuleVersionsRequest)(nil),                    // 494: clarifai.api.DeleteInstalledModuleVersionsRequest
	(*SingleInstalledModuleVersionResponse)(nil),                    // 495: clarifai.api.SingleInstalledModuleVersionResponse
	(*MultiInstalledModuleVersionResponse)(nil),                     // 496: clarifai.api.MultiInstalledModuleVersionResponse
	(*ListNextTaskAssignmentsRequest)(nil),                          // 497: clarifai.api.ListNextTaskAssignmentsRequest
	(*PostBulkOperationsRequest)(nil),                               // 498: clarifai.api.PostBulkOperationsRequest
	(*ListBulkOperationsRequest)(nil),                               // 499: clarifai.api.ListBulkOperationsRequest
	(*GetBulkOperationRequest)(nil),                                 // 500: clarifai.api.GetBulkOperationRequest
	(*CancelBulkOperationRequest)(nil),                              // 501: clarifai.api.CancelBulkOperationRequest
	(*DeleteBulkOperationRequest)(nil),                              // 502: clarifai.api.DeleteBulkOperationRequest
	(*SingleBulkOperationsResponse)(nil),                            // 503: clarifai.api.SingleBulkOperationsResponse
	(*MultiBulkOperationsResponse)(nil),                             // 504: clarifai.api.MultiBulkOperationsResponse
	(*PutTaskAssignmentsRequest)(nil),                               // 505: clarifai.api.PutTaskAssignmentsRequest
	(*PostWaitlistEmailsRequest)(nil),                               // 506: clarifai.api.PostWaitlistEmailsRequest
	(*MultiWaitlistEmailResponse)(nil),                              // 507: clarifai.api.MultiWaitlistEmailResponse
	(*GetSampledPredictMetricsRequest)(nil),                         // 508: clarifai.api.GetSampledPredictMetricsRequest
	(*MultiSampledPredictMetricsResponse)(nil),                      // 509: clarifai.api.MultiSampledPredictMetricsResponse
	(*SamplePredictMetric)(nil),                                     // 510: clarifai.api.SamplePredictMetric
	(*PostInputsAddJobsRequest)(nil),                                // 511: clarifai.api.PostInputsAddJobsRequest
	(*ListInputsAddJobsRequest)(nil),                                // 512: clarifai.api.ListInputsAddJobsRequest
	(*GetInputsAddJobRequest)(nil),                                  // 513: clarifai.api.GetInputsAddJobRequest
	(*CancelInputsAddJobRequest)(nil),                               // 514: clarifai.api.CancelInputsAddJobRequest
	(*MultiInputsAddJobResponse)(nil),                               // 515: clarifai.api.MultiInputsAddJobResponse
	(*SingleInputsAddJobResponse)(nil),                              // 516: clarifai.api.SingleInputsAddJobResponse
	(*PostUploadsRequest)(nil),                                      // 517: clarifai.api.PostUploadsRequest
	(*DeleteUploadsRequest)(nil),                                    // 518: clarifai.api.DeleteUploadsRequest
	(*ListUploadsRequest)(nil),                                      // 519: clarifai.api.ListUploadsRequest
	(*GetUploadRequest)(nil),                                        // 520: clarifai.api.GetUploadRequest
	(*SingleUploadResponse)(nil),                                    // 521: clarifai.api.SingleUploadResponse
	(*MultiUploadResponse)(nil),                                     // 522: clarifai.api.MultiUploadResponse
	(*PutUploadContentPartsRequest)(nil),                            // 523: clarifai.api.PutUploadContentPartsRequest
	(*MultiUsersOrganizationsResponse_UserOrganization)(nil),        // 524: clarifai.api.MultiUsersOrganizationsResponse.UserOrganization
	(*PatchOrganizationMembersRequest_PatchOrganizationMember)(nil), // 525: clarifai.api.PatchOrganizationMembersRequest.PatchOrganizationMember
	(*PostTeamsRequest_PostTeam)(nil),                               // 526: clarifai.api.PostTeamsRequest.PostTeam
	(*PostTeamAppsRequest_TeamApp)(nil),                             // 527: clarifai.api.PostTeamAppsRequest.TeamApp
	(*MultiTeamAppsResponse_TeamApp)(nil),                           // 528: clarifai.api.MultiTeamAppsResponse.TeamApp
	(*status.Status)(nil),                                           // 529: clarifai.api.status.Status
	(*structpb.Struct)(nil),                                         // 530: google.protobuf.Struct
	(*UserAppIDSet)(nil),                                            // 531: clarifai.api.UserAppIDSet
	(*Annotation)(nil),                                              // 532: clarifai.api.Annotation
	(status.StatusCode)(0),                                          // 533: clarifai.api.status.StatusCode
	(*App)(nil),                                                     // 534: clarifai.api.App
	(*PatchAction)(nil),                                             // 535: clarifai.api.PatchAction
	(*AppQuery)(nil),                                                // 536: clarifai.api.AppQuery
	(*Collaborator)(nil),                                            // 537: clarifai.api.Collaborator
	(*Collaboration)(nil),                                           // 538: clarifai.api.Collaboration
	(*AuthMethod)(nil),                                              // 539: clarifai.api.AuthMethod
	(*TwoFactorAuthMethod)(nil),                                     // 540: clarifai.api.TwoFactorAuthMethod
	(*EmailAddress)(nil),                                            // 541: clarifai.api.EmailAddress
	(*InvoiceItem)(nil),                                             // 542: clarifai.api.InvoiceItem
	(*BillingCycle)(nil),                                            // 543: clarifai.api.BillingCycle
	(*ConceptQuery)(nil),                                            // 544: clarifai.api.ConceptQuery
	(*Concept)(nil),                                                 // 545: clarifai.api.Concept
	(*ConceptCount)(nil),                                            // 546: clarifai.api.ConceptCount
	(*ConceptRelation)(nil),                                         // 547: clarifai.api.ConceptRelation
	(*KnowledgeGraph)(nil),                                          // 548: clarifai.api.KnowledgeGraph
	(*ConceptMapping)(nil),                                          // 549: clarifai.api.ConceptMapping
	(*ConceptMappingJob)(nil),                                       // 550: clarifai.api.ConceptMappingJob
	(*ConceptLanguage)(nil),                                         // 551: clarifai.api.ConceptLanguage
	(*ConceptReference)(nil),                                        // 552: clarifai.api.ConceptReference
	(*Input)(nil),                                                   // 553: clarifai.api.Input
	(*structpb.ListValue)(nil),                                      // 554: google.protobuf.ListValue
	(*InputsAddJob)(nil),                                            // 555: clarifai.api.InputsAddJob
	(*Hit)(nil),                                                     // 556: clarifai.api.Hit
	(*InputCount)(nil),                                              // 557: clarifai.api.InputCount
	(*Dataset)(nil),                                                 // 558: clarifai.api.Dataset
	(*DatasetInput)(nil),                                            // 559: clarifai.api.DatasetInput
	(*Search)(nil),                                                  // 560: clarifai.api.Search
	(*DatasetInputsSearchAddJob)(nil),                               // 561: clarifai.api.DatasetInputsSearchAddJob
	(DatasetVersionMetricsGroupType)(0),                             // 562: clarifai.api.DatasetVersionMetricsGroupType
	(*structpb.Value)(nil),                                          // 563: google.protobuf.Value
	(*DatasetVersion)(nil),                                          // 564: clarifai.api.DatasetVersion
	(*DatasetVersionExport)(nil),                                    // 565: clarifai.api.DatasetVersionExport
	(*DatasetVersionMetricsGroup)(nil),                              // 566: clarifai.api.DatasetVersionMetricsGroup
	(*Model)(nil),                                                   // 567: clarifai.api.Model
	(*Key)(nil),                                                     // 568: clarifai.api.Key
	(*timestamppb.Timestamp)(nil),                                   // 569: google.protobuf.Timestamp
	(*LicenseLimit)(nil),                                            // 570: clarifai.api.LicenseLimit
	(*License)(nil),                                                 // 571: clarifai.api.License
	(*ModelQuery)(nil),                                              // 572: clarifai.api.ModelQuery
	(*ModelVersion)(nil),                                            // 573: clarifai.api.ModelVersion
	(*EvalInfo)(nil),                                                // 574: clarifai.api.EvalInfo
	(*FieldsValue)(nil),                                             // 575: clarifai.api.FieldsValue
	(*ModelType)(nil),                                               // 576: clarifai.api.ModelType
	(*ModelTypeField)(nil),                                          // 577: clarifai.api.ModelTypeField
	(*ModelVersionInputExample)(nil),                                // 578: clarifai.api.ModelVersionInputExample
	(*ModelReference)(nil),                                          // 579: clarifai.api.ModelReference
	(*Output)(nil),                                                  // 580: clarifai.api.Output
	(*ScopeDeps)(nil),                                               // 581: clarifai.api.ScopeDeps
	(*EndpointDeps)(nil),                                            // 582: clarifai.api.EndpointDeps
	(*Query)(nil),                                                   // 583: clarifai.api.Query
	(*AttributeQuery)(nil),                                          // 584: clarifai.api.AttributeQuery
	(*Data)(nil),                                                    // 585: clarifai.api.Data
	(EvaluationType)(0),                                             // 586: clarifai.api.EvaluationType
	(*AnnotationSearchMetrics)(nil),                                 // 587: clarifai.api.AnnotationSearchMetrics
	(*AnnotationFilter)(nil),                                        // 588: clarifai.api.AnnotationFilter
	(*Cluster)(nil),                                                 // 589: clarifai.api.Cluster
	(*Plan)(nil),                                                    // 590: clarifai.api.Plan
	(*CreditCard)(nil),                                              // 591: clarifai.api.CreditCard
	(*ShippingAddress)(nil),                                         // 592: clarifai.api.ShippingAddress
	(*OpCountByDate)(nil),                                           // 593: clarifai.api.OpCountByDate
	(*durationpb.Duration)(nil),                                     // 594: google.protobuf.Duration
	(*DimensionList)(nil),                                           // 595: clarifai.api.DimensionList
	(*RealtimeCount)(nil),                                           // 596: clarifai.api.RealtimeCount
	(*UsageInterval)(nil),                                           // 597: clarifai.api.UsageInterval
	(*UsageCycle)(nil),                                              // 598: clarifai.api.UsageCycle
	(*EventsCollection)(nil),                                        // 599: clarifai.api.EventsCollection
	(*User)(nil),                                                    // 600: clarifai.api.User
	(*UserInfo)(nil),                                                // 601: clarifai.api.UserInfo
	(*UserPassword)(nil),                                            // 602: clarifai.api.UserPassword
	(*UserAccess)(nil),                                              // 603: clarifai.api.UserAccess
	(*Password)(nil),                                                // 604: clarifai.api.Password
	(*PasswordViolations)(nil),                                      // 605: clarifai.api.PasswordViolations
	(*PasswordPolicy)(nil),                                          // 606: clarifai.api.PasswordPolicy
	(*Organization)(nil),                                            // 607: clarifai.api.Organization
	(scope.S)(0),                                                    // 608: clarifai.auth.scope.S
	(*OrganizationInvitation)(nil),                                  // 609: clarifai.api.OrganizationInvitation
	(*OrganizationMember)(nil),                                      // 610: clarifai.api.OrganizationMember
	(*IdentityProvider)(nil),                                        // 611: clarifai.api.IdentityProvider
	(*Team)(nil),                                                    // 612: clarifai.api.Team
	(*TeamUser)(nil),                                                // 613: clarifai.api.TeamUser
	(RoleType)(0),                                                   // 614: clarifai.api.RoleType
	(*Role)(nil),                                                    // 615: clarifai.api.Role
	(*Vocab)(nil),                                                   // 616: clarifai.api.Vocab
	(*Workflow)(nil),                                                // 617: clarifai.api.Workflow
	(*OutputConfig)(nil),                                            // 618: clarifai.api.OutputConfig
	(*WorkflowState)(nil),                                           // 619: clarifai.api.WorkflowState
	(*WorkflowResult)(nil),                                          // 620: clarifai.api.WorkflowResult
	(*WorkflowResultsSimilarity)(nil),                               // 621: clarifai.api.WorkflowResultsSimilarity
	(*WorkflowVersion)(nil),                                         // 622: clarifai.api.WorkflowVersion
	(*WorkflowMetrics)(nil),                                         // 623: clarifai.api.WorkflowMetrics
	(*EvalMetrics)(nil),                                             // 624: clarifai.api.EvalMetrics
	(*AppDuplication)(nil),                                          // 625: clarifai.api.AppDuplication
	(*Task)(nil),                                                    // 626: clarifai.api.Task
	(*TaskStatusCountPerUser)(nil),                                  // 627: clarifai.api.TaskStatusCountPerUser
	(*LabelOrder)(nil),                                              // 628: clarifai.api.LabelOrder
	(*Collector)(nil),                                               // 629: clarifai.api.Collector
	(*StatValue)(nil),                                               // 630: clarifai.api.StatValue
	(*StatValueAggregateQuery)(nil),                                 // 631: clarifai.api.StatValueAggregateQuery
	(*StatValueAggregateResult)(nil),                                // 632: clarifai.api.StatValueAggregateResult
	(*DeviceInfo)(nil),                                              // 633: clarifai.api.DeviceInfo
	(*SDKEventsCollection)(nil),                                     // 634: clarifai.api.SDKEventsCollection
	(*HostAppInfo)(nil),                                             // 635: clarifai.api.HostAppInfo
	(*OperatingSystem)(nil),                                         // 636: clarifai.api.OperatingSystem
	(*State)(nil),                                                   // 637: clarifai.api.State
	(*SDK)(nil),                                                     // 638: clarifai.api.SDK
	(*SDKBillingCycle)(nil),                                         // 639: clarifai.api.SDKBillingCycle
	(*commands.Commands)(nil),                                       // 640: clarifai.commands.Commands
	(*FindDuplicateAnnotationsJob)(nil),                             // 641: clarifai.api.FindDuplicateAnnotationsJob
	(*TrendingMetric)(nil),                                          // 642: clarifai.api.TrendingMetric
	(*Validation)(nil),                                              // 643: clarifai.api.Validation
	(*ValidationResult)(nil),                                        // 644: clarifai.api.ValidationResult
	(*TagCategory)(nil),                                             // 645: clarifai.api.TagCategory
	(*ModelStar)(nil),                                               // 646: clarifai.api.ModelStar
	(*UserStar)(nil),                                                // 647: clarifai.api.UserStar
	(*AppStar)(nil),                                                 // 648: clarifai.api.AppStar
	(*WorkflowStar)(nil),                                            // 649: clarifai.api.WorkflowStar
	(*PatchWebNotification)(nil),                                    // 650: clarifai.api.PatchWebNotification
	(*WebNotification)(nil),                                         // 651: clarifai.api.WebNotification
	(*Module)(nil),                                                  // 652: clarifai.api.Module
	(*ModuleVersion)(nil),                                           // 653: clarifai.api.ModuleVersion
	(*InstalledModuleVersion)(nil),                                  // 654: clarifai.api.InstalledModuleVersion
	(*BulkOperation)(nil),                                           // 655: clarifai.api.BulkOperation
	(*WaitlistEmail)(nil),                                           // 656: clarifai.api.WaitlistEmail
	(*Upload)(nil),                                                  // 657: clarifai.api.Upload
	(*UploadContentPart)(nil),                                       // 658: clarifai.api.UploadContentPart
	(*status.BaseResponse)(nil),                                     // 659: clarifai.api.status.BaseResponse
}
var file_proto_clarifai_api_service_proto_depIdxs = []int32{
	529,  // 0: clarifai.api.TestMessage.status:type_name -> clarifai.api.status.Status
	530,  // 1: clarifai.api.TestMessage.s:type_name -> google.protobuf.Struct
	531,  // 2: clarifai.api.GetAnnotationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 3: clarifai.api.ListAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 4: clarifai.api.ListAnnotationsRequest.statuses:type_name -> clarifai.api.status.Status
	531,  // 5: clarifai.api.PostAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	532,  // 6: clarifai.api.PostAnnotationsRequest.annotations:type_name -> clarifai.api.Annotation
	531,  // 7: clarifai.api.PatchAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	532,  // 8: clarifai.api.PatchAnnotationsRequest.annotations:type_name -> clarifai.api.Annotation
	531,  // 9: clarifai.api.PatchAnnotationsStatusRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	533,  // 10: clarifai.api.PatchAnnotationsStatusRequest.status_code:type_name -> clarifai.api.status.StatusCode
	529,  // 11: clarifai.api.PatchAnnotationsStatusResponse.status:type_name -> clarifai.api.status.Status
	531,  // 12: clarifai.api.DeleteAnnotationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 13: clarifai.api.DeleteAnnotationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 14: clarifai.api.SingleAnnotationResponse.status:type_name -> clarifai.api.status.Status
	532,  // 15: clarifai.api.SingleAnnotationResponse.annotation:type_name -> clarifai.api.Annotation
	529,  // 16: clarifai.api.MultiAnnotationResponse.status:type_name -> clarifai.api.status.Status
	532,  // 17: clarifai.api.MultiAnnotationResponse.annotations:type_name -> clarifai.api.Annotation
	531,  // 18: clarifai.api.GetAppRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 19: clarifai.api.ListAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 20: clarifai.api.PostAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	534,  // 21: clarifai.api.PostAppsRequest.apps:type_name -> clarifai.api.App
	531,  // 22: clarifai.api.DeleteAppRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 23: clarifai.api.PatchAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	534,  // 24: clarifai.api.PatchAppsRequest.apps:type_name -> clarifai.api.App
	535,  // 25: clarifai.api.PatchAppsRequest.metadata_action:type_name -> clarifai.api.PatchAction
	531,  // 26: clarifai.api.PatchAppRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	534,  // 27: clarifai.api.PatchAppRequest.app:type_name -> clarifai.api.App
	535,  // 28: clarifai.api.PatchAppRequest.metadata_action:type_name -> clarifai.api.PatchAction
	531,  // 29: clarifai.api.PatchAppOwnerRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 30: clarifai.api.PatchAppsIdsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	179,  // 31: clarifai.api.PatchAppsIdsRequest.ids:type_name -> clarifai.api.IdUpdateSource
	531,  // 32: clarifai.api.PostAppsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	536,  // 33: clarifai.api.PostAppsSearchesRequest.app_query:type_name -> clarifai.api.AppQuery
	2,    // 34: clarifai.api.PostAppsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	529,  // 35: clarifai.api.SingleAppResponse.status:type_name -> clarifai.api.status.Status
	534,  // 36: clarifai.api.SingleAppResponse.app:type_name -> clarifai.api.App
	529,  // 37: clarifai.api.MultiAppResponse.status:type_name -> clarifai.api.status.Status
	534,  // 38: clarifai.api.MultiAppResponse.apps:type_name -> clarifai.api.App
	531,  // 39: clarifai.api.ListCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 40: clarifai.api.PostCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	537,  // 41: clarifai.api.PostCollaboratorsRequest.collaborators:type_name -> clarifai.api.Collaborator
	531,  // 42: clarifai.api.PatchCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	537,  // 43: clarifai.api.PatchCollaboratorsRequest.collaborators:type_name -> clarifai.api.Collaborator
	531,  // 44: clarifai.api.DeleteCollaboratorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 45: clarifai.api.MultiCollaboratorsResponse.status:type_name -> clarifai.api.status.Status
	537,  // 46: clarifai.api.MultiCollaboratorsResponse.collaborators:type_name -> clarifai.api.Collaborator
	531,  // 47: clarifai.api.ListCollaborationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 48: clarifai.api.MultiCollaborationsResponse.status:type_name -> clarifai.api.status.Status
	538,  // 49: clarifai.api.MultiCollaborationsResponse.collaborations:type_name -> clarifai.api.Collaboration
	529,  // 50: clarifai.api.SingleVerifyEmailResponse.status:type_name -> clarifai.api.status.Status
	531,  // 51: clarifai.api.ListAuthMethodsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 52: clarifai.api.PostLinkIdpUserRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 53: clarifai.api.GetLoginInfoRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 54: clarifai.api.GetLoginInfoResponse.status:type_name -> clarifai.api.status.Status
	529,  // 55: clarifai.api.PostLinkIdpUserResponse.status:type_name -> clarifai.api.status.Status
	531,  // 56: clarifai.api.PostIdLoginFinalizerRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 57: clarifai.api.PostIdLoginFinalizerResponse.status:type_name -> clarifai.api.status.Status
	529,  // 58: clarifai.api.ListAuthMethodsResponse.status:type_name -> clarifai.api.status.Status
	539,  // 59: clarifai.api.ListAuthMethodsResponse.auth_methods:type_name -> clarifai.api.AuthMethod
	531,  // 60: clarifai.api.List2FAMethodsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 61: clarifai.api.List2FAMethodsResponse.status:type_name -> clarifai.api.status.Status
	540,  // 62: clarifai.api.List2FAMethodsResponse.two_factor_auth_methods:type_name -> clarifai.api.TwoFactorAuthMethod
	531,  // 63: clarifai.api.PostAuth2FATotpRegisterEnableRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 64: clarifai.api.PostAuth2FATotpRegisterEnableResponse.status:type_name -> clarifai.api.status.Status
	531,  // 65: clarifai.api.PostAuth2FATotpDisableRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 66: clarifai.api.PostAuth2FATotpDisableResponse.status:type_name -> clarifai.api.status.Status
	531,  // 67: clarifai.api.PostAuth2FATotpRegisterVerifyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 68: clarifai.api.PostAuth2FATotpRegisterVerifyResponse.status:type_name -> clarifai.api.status.Status
	529,  // 69: clarifai.api.PostAuth2FATotpRecoverResponse.status:type_name -> clarifai.api.status.Status
	529,  // 70: clarifai.api.GetAuth2FATotpRecoverConfirmResponse.status:type_name -> clarifai.api.status.Status
	58,   // 71: clarifai.api.PostSignupRequest.utm:type_name -> clarifai.api.Utm
	529,  // 72: clarifai.api.SingleLoginResponse.status:type_name -> clarifai.api.status.Status
	541,  // 73: clarifai.api.SingleLoginResponse.email_addresses:type_name -> clarifai.api.EmailAddress
	531,  // 74: clarifai.api.PostLogoutRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 75: clarifai.api.SingleLogoutResponse.status:type_name -> clarifai.api.status.Status
	531,  // 76: clarifai.api.GetBillingUsageRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 77: clarifai.api.GetBillingUsageResponse.status:type_name -> clarifai.api.status.Status
	542,  // 78: clarifai.api.GetBillingUsageResponse.invoice_items:type_name -> clarifai.api.InvoiceItem
	543,  // 79: clarifai.api.GetBillingUsageResponse.billing_cycle:type_name -> clarifai.api.BillingCycle
	529,  // 80: clarifai.api.SingleStatusCodeResponse.status:type_name -> clarifai.api.status.Status
	529,  // 81: clarifai.api.MultiStatusCodeResponse.status:type_name -> clarifai.api.status.Status
	529,  // 82: clarifai.api.MultiStatusCodeResponse.statuses:type_name -> clarifai.api.status.Status
	531,  // 83: clarifai.api.GetConceptRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 84: clarifai.api.ListConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 85: clarifai.api.ListModelConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 86: clarifai.api.PostConceptsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	544,  // 87: clarifai.api.PostConceptsSearchesRequest.concept_query:type_name -> clarifai.api.ConceptQuery
	2,    // 88: clarifai.api.PostConceptsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	531,  // 89: clarifai.api.PostConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	545,  // 90: clarifai.api.PostConceptsRequest.concepts:type_name -> clarifai.api.Concept
	531,  // 91: clarifai.api.PatchConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	545,  // 92: clarifai.api.PatchConceptsRequest.concepts:type_name -> clarifai.api.Concept
	531,  // 93: clarifai.api.GetConceptCountsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 94: clarifai.api.SingleConceptResponse.status:type_name -> clarifai.api.status.Status
	545,  // 95: clarifai.api.SingleConceptResponse.concept:type_name -> clarifai.api.Concept
	529,  // 96: clarifai.api.MultiConceptResponse.status:type_name -> clarifai.api.status.Status
	545,  // 97: clarifai.api.MultiConceptResponse.concepts:type_name -> clarifai.api.Concept
	529,  // 98: clarifai.api.MultiConceptCountResponse.status:type_name -> clarifai.api.status.Status
	546,  // 99: clarifai.api.MultiConceptCountResponse.concept_counts:type_name -> clarifai.api.ConceptCount
	531,  // 100: clarifai.api.ListConceptRelationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 101: clarifai.api.PostConceptRelationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	547,  // 102: clarifai.api.PostConceptRelationsRequest.concept_relations:type_name -> clarifai.api.ConceptRelation
	531,  // 103: clarifai.api.DeleteConceptRelationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 104: clarifai.api.ListKnowledgeGraphsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 105: clarifai.api.PostKnowledgeGraphsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	548,  // 106: clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs:type_name -> clarifai.api.KnowledgeGraph
	531,  // 107: clarifai.api.ListConceptMappingsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 108: clarifai.api.PostConceptMappingsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	549,  // 109: clarifai.api.PostConceptMappingsRequest.concept_mappings:type_name -> clarifai.api.ConceptMapping
	548,  // 110: clarifai.api.PostConceptMappingsRequest.knowledge_graph:type_name -> clarifai.api.KnowledgeGraph
	531,  // 111: clarifai.api.PostConceptMappingJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	550,  // 112: clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs:type_name -> clarifai.api.ConceptMappingJob
	529,  // 113: clarifai.api.SingleConceptRelationResponse.status:type_name -> clarifai.api.status.Status
	547,  // 114: clarifai.api.SingleConceptRelationResponse.concept_relation:type_name -> clarifai.api.ConceptRelation
	529,  // 115: clarifai.api.MultiConceptRelationResponse.status:type_name -> clarifai.api.status.Status
	547,  // 116: clarifai.api.MultiConceptRelationResponse.concept_relations:type_name -> clarifai.api.ConceptRelation
	529,  // 117: clarifai.api.SingleKnowledgeGraphResponse.status:type_name -> clarifai.api.status.Status
	548,  // 118: clarifai.api.SingleKnowledgeGraphResponse.knowledge_graph:type_name -> clarifai.api.KnowledgeGraph
	529,  // 119: clarifai.api.MultiKnowledgeGraphResponse.status:type_name -> clarifai.api.status.Status
	548,  // 120: clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs:type_name -> clarifai.api.KnowledgeGraph
	529,  // 121: clarifai.api.SingleConceptMappingResponse.status:type_name -> clarifai.api.status.Status
	549,  // 122: clarifai.api.SingleConceptMappingResponse.concept_mapping:type_name -> clarifai.api.ConceptMapping
	529,  // 123: clarifai.api.MultiConceptMappingResponse.status:type_name -> clarifai.api.status.Status
	549,  // 124: clarifai.api.MultiConceptMappingResponse.concept_mappings:type_name -> clarifai.api.ConceptMapping
	529,  // 125: clarifai.api.SingleConceptMappingJobResponse.status:type_name -> clarifai.api.status.Status
	529,  // 126: clarifai.api.MultiConceptMappingJobResponse.status:type_name -> clarifai.api.status.Status
	531,  // 127: clarifai.api.GetConceptLanguageRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 128: clarifai.api.ListConceptLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 129: clarifai.api.PatchConceptLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	551,  // 130: clarifai.api.PatchConceptLanguagesRequest.concept_languages:type_name -> clarifai.api.ConceptLanguage
	531,  // 131: clarifai.api.PostConceptLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	551,  // 132: clarifai.api.PostConceptLanguagesRequest.concept_languages:type_name -> clarifai.api.ConceptLanguage
	529,  // 133: clarifai.api.SingleConceptLanguageResponse.status:type_name -> clarifai.api.status.Status
	551,  // 134: clarifai.api.SingleConceptLanguageResponse.concept_language:type_name -> clarifai.api.ConceptLanguage
	529,  // 135: clarifai.api.MultiConceptLanguageResponse.status:type_name -> clarifai.api.status.Status
	551,  // 136: clarifai.api.MultiConceptLanguageResponse.concept_languages:type_name -> clarifai.api.ConceptLanguage
	531,  // 137: clarifai.api.ListConceptReferencesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 138: clarifai.api.SingleConceptReferenceResponse.status:type_name -> clarifai.api.status.Status
	552,  // 139: clarifai.api.SingleConceptReferenceResponse.concept_reference:type_name -> clarifai.api.ConceptReference
	529,  // 140: clarifai.api.MultiConceptReferenceResponse.status:type_name -> clarifai.api.status.Status
	552,  // 141: clarifai.api.MultiConceptReferenceResponse.concept_references:type_name -> clarifai.api.ConceptReference
	529,  // 142: clarifai.api.GetHealthzResponse.status:type_name -> clarifai.api.status.Status
	531,  // 143: clarifai.api.GetInputRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 144: clarifai.api.GetInputSamplesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 145: clarifai.api.ListInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 146: clarifai.api.ListInputsRequest.status:type_name -> clarifai.api.status.Status
	531,  // 147: clarifai.api.StreamInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 148: clarifai.api.PostInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	553,  // 149: clarifai.api.PostInputsRequest.inputs:type_name -> clarifai.api.Input
	531,  // 150: clarifai.api.PostInputsFileRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 151: clarifai.api.PostInputsNiFiRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	554,  // 152: clarifai.api.PostInputsNiFiRequest.urls:type_name -> google.protobuf.ListValue
	530,  // 153: clarifai.api.PostInputsNiFiRequest.metadata:type_name -> google.protobuf.Struct
	530,  // 154: clarifai.api.PostInputsNiFiRequest.params:type_name -> google.protobuf.Struct
	531,  // 155: clarifai.api.PostInputsDocumentRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	113,  // 156: clarifai.api.PostInputsDocumentRequest.body:type_name -> clarifai.api.PostInputsDocumentRequestBody
	554,  // 157: clarifai.api.PostInputsDocumentRequestBody.document:type_name -> google.protobuf.ListValue
	530,  // 158: clarifai.api.PostInputsDocumentRequestBody.complete:type_name -> google.protobuf.Struct
	530,  // 159: clarifai.api.PostInputsDocumentRequestBody.metadata:type_name -> google.protobuf.Struct
	531,  // 160: clarifai.api.PatchInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	553,  // 161: clarifai.api.PatchInputsRequest.inputs:type_name -> clarifai.api.Input
	531,  // 162: clarifai.api.DeleteInputRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 163: clarifai.api.DeleteInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 164: clarifai.api.SingleInputResponse.status:type_name -> clarifai.api.status.Status
	553,  // 165: clarifai.api.SingleInputResponse.input:type_name -> clarifai.api.Input
	529,  // 166: clarifai.api.MultiInputResponse.status:type_name -> clarifai.api.status.Status
	553,  // 167: clarifai.api.MultiInputResponse.inputs:type_name -> clarifai.api.Input
	555,  // 168: clarifai.api.MultiInputResponse.inputs_add_job:type_name -> clarifai.api.InputsAddJob
	529,  // 169: clarifai.api.MultiInputAnnotationResponse.status:type_name -> clarifai.api.status.Status
	556,  // 170: clarifai.api.MultiInputAnnotationResponse.hits:type_name -> clarifai.api.Hit
	529,  // 171: clarifai.api.SingleInputCountResponse.status:type_name -> clarifai.api.status.Status
	557,  // 172: clarifai.api.SingleInputCountResponse.counts:type_name -> clarifai.api.InputCount
	531,  // 173: clarifai.api.GetInputCountRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 174: clarifai.api.ListDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 175: clarifai.api.GetDatasetRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 176: clarifai.api.PostDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	558,  // 177: clarifai.api.PostDatasetsRequest.datasets:type_name -> clarifai.api.Dataset
	531,  // 178: clarifai.api.PatchDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	558,  // 179: clarifai.api.PatchDatasetsRequest.datasets:type_name -> clarifai.api.Dataset
	531,  // 180: clarifai.api.PatchDatasetIdsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	179,  // 181: clarifai.api.PatchDatasetIdsRequest.ids:type_name -> clarifai.api.IdUpdateSource
	531,  // 182: clarifai.api.DeleteDatasetsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 183: clarifai.api.MultiDatasetResponse.status:type_name -> clarifai.api.status.Status
	558,  // 184: clarifai.api.MultiDatasetResponse.datasets:type_name -> clarifai.api.Dataset
	529,  // 185: clarifai.api.SingleDatasetResponse.status:type_name -> clarifai.api.status.Status
	558,  // 186: clarifai.api.SingleDatasetResponse.dataset:type_name -> clarifai.api.Dataset
	531,  // 187: clarifai.api.ListDatasetInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 188: clarifai.api.GetDatasetInputRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 189: clarifai.api.PostDatasetInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	559,  // 190: clarifai.api.PostDatasetInputsRequest.dataset_inputs:type_name -> clarifai.api.DatasetInput
	560,  // 191: clarifai.api.PostDatasetInputsRequest.search:type_name -> clarifai.api.Search
	531,  // 192: clarifai.api.DeleteDatasetInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 193: clarifai.api.MultiDatasetInputResponse.status:type_name -> clarifai.api.status.Status
	559,  // 194: clarifai.api.MultiDatasetInputResponse.dataset_inputs:type_name -> clarifai.api.DatasetInput
	561,  // 195: clarifai.api.MultiDatasetInputResponse.dataset_inputs_search_add_job:type_name -> clarifai.api.DatasetInputsSearchAddJob
	529,  // 196: clarifai.api.SingleDatasetInputResponse.status:type_name -> clarifai.api.status.Status
	559,  // 197: clarifai.api.SingleDatasetInputResponse.dataset_input:type_name -> clarifai.api.DatasetInput
	531,  // 198: clarifai.api.ListDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 199: clarifai.api.GetDatasetVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 200: clarifai.api.ListDatasetVersionMetricsGroupsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	562,  // 201: clarifai.api.ListDatasetVersionMetricsGroupsRequest.types:type_name -> clarifai.api.DatasetVersionMetricsGroupType
	563,  // 202: clarifai.api.ListDatasetVersionMetricsGroupsRequest.values:type_name -> google.protobuf.Value
	531,  // 203: clarifai.api.PostDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	564,  // 204: clarifai.api.PostDatasetVersionsRequest.dataset_versions:type_name -> clarifai.api.DatasetVersion
	531,  // 205: clarifai.api.PatchDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	564,  // 206: clarifai.api.PatchDatasetVersionsRequest.dataset_versions:type_name -> clarifai.api.DatasetVersion
	531,  // 207: clarifai.api.DeleteDatasetVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 208: clarifai.api.PutDatasetVersionExportsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	565,  // 209: clarifai.api.PutDatasetVersionExportsRequest.exports:type_name -> clarifai.api.DatasetVersionExport
	529,  // 210: clarifai.api.MultiDatasetVersionResponse.status:type_name -> clarifai.api.status.Status
	564,  // 211: clarifai.api.MultiDatasetVersionResponse.dataset_versions:type_name -> clarifai.api.DatasetVersion
	529,  // 212: clarifai.api.MultiDatasetVersionExportResponse.status:type_name -> clarifai.api.status.Status
	565,  // 213: clarifai.api.MultiDatasetVersionExportResponse.exports:type_name -> clarifai.api.DatasetVersionExport
	529,  // 214: clarifai.api.MultiDatasetVersionMetricsGroupResponse.status:type_name -> clarifai.api.status.Status
	566,  // 215: clarifai.api.MultiDatasetVersionMetricsGroupResponse.dataset_version_metrics_groups:type_name -> clarifai.api.DatasetVersionMetricsGroup
	529,  // 216: clarifai.api.SingleDatasetVersionResponse.status:type_name -> clarifai.api.status.Status
	564,  // 217: clarifai.api.SingleDatasetVersionResponse.dataset_version:type_name -> clarifai.api.DatasetVersion
	531,  // 218: clarifai.api.GetDatasetInputsSearchAddJobRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 219: clarifai.api.SingleDatasetInputsSearchAddJobResponse.status:type_name -> clarifai.api.status.Status
	561,  // 220: clarifai.api.SingleDatasetInputsSearchAddJobResponse.job:type_name -> clarifai.api.DatasetInputsSearchAddJob
	531,  // 221: clarifai.api.PostModelOutputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	553,  // 222: clarifai.api.PostModelOutputsRequest.inputs:type_name -> clarifai.api.Input
	567,  // 223: clarifai.api.PostModelOutputsRequest.model:type_name -> clarifai.api.Model
	531,  // 224: clarifai.api.ListModelInputsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 225: clarifai.api.GetKeyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 226: clarifai.api.ListKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 227: clarifai.api.ListAppKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 228: clarifai.api.PostKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	568,  // 229: clarifai.api.PostKeysRequest.keys:type_name -> clarifai.api.Key
	531,  // 230: clarifai.api.DeleteKeyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 231: clarifai.api.PatchKeysRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	568,  // 232: clarifai.api.PatchKeysRequest.keys:type_name -> clarifai.api.Key
	529,  // 233: clarifai.api.SingleKeyResponse.status:type_name -> clarifai.api.status.Status
	568,  // 234: clarifai.api.SingleKeyResponse.key:type_name -> clarifai.api.Key
	529,  // 235: clarifai.api.MultiKeyResponse.status:type_name -> clarifai.api.status.Status
	568,  // 236: clarifai.api.MultiKeyResponse.keys:type_name -> clarifai.api.Key
	529,  // 237: clarifai.api.FetchLicenseResponse.status:type_name -> clarifai.api.status.Status
	569,  // 238: clarifai.api.FetchLicenseResponse.activated_at:type_name -> google.protobuf.Timestamp
	569,  // 239: clarifai.api.ValidateLicenseRequest.activated_at:type_name -> google.protobuf.Timestamp
	529,  // 240: clarifai.api.ValidateLicenseResponse.status:type_name -> clarifai.api.status.Status
	570,  // 241: clarifai.api.ValidateLicenseResponse.limits:type_name -> clarifai.api.LicenseLimit
	531,  // 242: clarifai.api.ListLicensesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 243: clarifai.api.GetLicenseRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 244: clarifai.api.SingleLicenseResponse.status:type_name -> clarifai.api.status.Status
	571,  // 245: clarifai.api.SingleLicenseResponse.license:type_name -> clarifai.api.License
	529,  // 246: clarifai.api.MultipleLicensesResponse.status:type_name -> clarifai.api.status.Status
	571,  // 247: clarifai.api.MultipleLicensesResponse.licenses:type_name -> clarifai.api.License
	531,  // 248: clarifai.api.GetModelRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 249: clarifai.api.ListModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 250: clarifai.api.PatchModelToolkitsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 251: clarifai.api.PatchModelCheckConsentsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 252: clarifai.api.PatchModelUseCasesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 253: clarifai.api.PatchModelLanguagesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 254: clarifai.api.MultiModelToolkitResponse.status:type_name -> clarifai.api.status.Status
	529,  // 255: clarifai.api.MultiModelCheckConsentResponse.status:type_name -> clarifai.api.status.Status
	529,  // 256: clarifai.api.MultiModelUseCaseResponse.status:type_name -> clarifai.api.status.Status
	529,  // 257: clarifai.api.MultiModelLanguageResponse.status:type_name -> clarifai.api.status.Status
	531,  // 258: clarifai.api.PostModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	567,  // 259: clarifai.api.PostModelsRequest.model:type_name -> clarifai.api.Model
	567,  // 260: clarifai.api.PostModelsRequest.models:type_name -> clarifai.api.Model
	531,  // 261: clarifai.api.PatchModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	567,  // 262: clarifai.api.PatchModelsRequest.models:type_name -> clarifai.api.Model
	531,  // 263: clarifai.api.PatchModelIdsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	179,  // 264: clarifai.api.PatchModelIdsRequest.ids:type_name -> clarifai.api.IdUpdateSource
	531,  // 265: clarifai.api.DeleteModelRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 266: clarifai.api.DeleteModelsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 267: clarifai.api.PostModelsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	572,  // 268: clarifai.api.PostModelsSearchesRequest.model_query:type_name -> clarifai.api.ModelQuery
	2,    // 269: clarifai.api.PostModelsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	529,  // 270: clarifai.api.SingleModelResponse.status:type_name -> clarifai.api.status.Status
	567,  // 271: clarifai.api.SingleModelResponse.model:type_name -> clarifai.api.Model
	529,  // 272: clarifai.api.MultiModelResponse.status:type_name -> clarifai.api.status.Status
	567,  // 273: clarifai.api.MultiModelResponse.models:type_name -> clarifai.api.Model
	531,  // 274: clarifai.api.PatchModelVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	573,  // 275: clarifai.api.PatchModelVersionsRequest.model_versions:type_name -> clarifai.api.ModelVersion
	531,  // 276: clarifai.api.GetModelVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 277: clarifai.api.ListModelVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 278: clarifai.api.DeleteModelVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 279: clarifai.api.SingleModelVersionResponse.status:type_name -> clarifai.api.status.Status
	573,  // 280: clarifai.api.SingleModelVersionResponse.model_version:type_name -> clarifai.api.ModelVersion
	529,  // 281: clarifai.api.MultiModelVersionResponse.status:type_name -> clarifai.api.status.Status
	573,  // 282: clarifai.api.MultiModelVersionResponse.model_versions:type_name -> clarifai.api.ModelVersion
	531,  // 283: clarifai.api.PostModelVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	573,  // 284: clarifai.api.PostModelVersionsRequest.model_versions:type_name -> clarifai.api.ModelVersion
	560,  // 285: clarifai.api.PostModelVersionsRequest.search:type_name -> clarifai.api.Search
	560,  // 286: clarifai.api.PostModelVersionsRequest.train_search:type_name -> clarifai.api.Search
	560,  // 287: clarifai.api.PostModelVersionsRequest.test_search:type_name -> clarifai.api.Search
	564,  // 288: clarifai.api.PostModelVersionsRequest.dataset_version:type_name -> clarifai.api.DatasetVersion
	574,  // 289: clarifai.api.PostModelVersionsRequest.eval_info:type_name -> clarifai.api.EvalInfo
	531,  // 290: clarifai.api.PostWorkflowVersionsUnPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	196,  // 291: clarifai.api.PostWorkflowVersionsUnPublishRequest.publications:type_name -> clarifai.api.WorkflowVersionUnPublishRequest
	531,  // 292: clarifai.api.PostWorkflowVersionsPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	195,  // 293: clarifai.api.PostWorkflowVersionsPublishRequest.publications:type_name -> clarifai.api.WorkflowVersionPublishRequest
	531,  // 294: clarifai.api.PostModelVersionsPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	197,  // 295: clarifai.api.PostModelVersionsPublishRequest.publications:type_name -> clarifai.api.ModelVersionPublishRequest
	531,  // 296: clarifai.api.PostModelVersionsUnPublishRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	199,  // 297: clarifai.api.PostModelVersionsUnPublishRequest.publications:type_name -> clarifai.api.ModelVersionUnpublishRequest
	531,  // 298: clarifai.api.PostModelVersionMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 299: clarifai.api.PostModelVersionMetricsRequest.test_search:type_name -> clarifai.api.Search
	574,  // 300: clarifai.api.PostModelVersionMetricsRequest.eval_info:type_name -> clarifai.api.EvalInfo
	531,  // 301: clarifai.api.GetModelVersionMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	575,  // 302: clarifai.api.GetModelVersionMetricsRequest.fields:type_name -> clarifai.api.FieldsValue
	531,  // 303: clarifai.api.GetModelTypeRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 304: clarifai.api.ListModelTypesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 305: clarifai.api.ListOpenSourceLicensesResponse.status:type_name -> clarifai.api.status.Status
	529,  // 306: clarifai.api.SingleModelTypeResponse.status:type_name -> clarifai.api.status.Status
	576,  // 307: clarifai.api.SingleModelTypeResponse.model_type:type_name -> clarifai.api.ModelType
	529,  // 308: clarifai.api.MultiModelTypeResponse.status:type_name -> clarifai.api.status.Status
	576,  // 309: clarifai.api.MultiModelTypeResponse.model_types:type_name -> clarifai.api.ModelType
	577,  // 310: clarifai.api.MultiModelTypeResponse.model_importers:type_name -> clarifai.api.ModelTypeField
	531,  // 311: clarifai.api.GetModelVersionInputExampleRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 312: clarifai.api.ListModelVersionInputExamplesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 313: clarifai.api.PostModelVersionInputExamplesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	578,  // 314: clarifai.api.PostModelVersionInputExamplesRequest.model_version_input_examples:type_name -> clarifai.api.ModelVersionInputExample
	531,  // 315: clarifai.api.DeleteModelVersionInputExamplesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 316: clarifai.api.SingleModelVersionInputExampleResponse.status:type_name -> clarifai.api.status.Status
	578,  // 317: clarifai.api.SingleModelVersionInputExampleResponse.model_version_input_example:type_name -> clarifai.api.ModelVersionInputExample
	529,  // 318: clarifai.api.MultiModelVersionInputExampleResponse.status:type_name -> clarifai.api.status.Status
	578,  // 319: clarifai.api.MultiModelVersionInputExampleResponse.model_version_input_examples:type_name -> clarifai.api.ModelVersionInputExample
	531,  // 320: clarifai.api.ListModelReferencesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 321: clarifai.api.PostModelReferencesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	579,  // 322: clarifai.api.PostModelReferencesRequest.model_references:type_name -> clarifai.api.ModelReference
	531,  // 323: clarifai.api.DeleteModelReferencesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 324: clarifai.api.MultiModelReferenceResponse.status:type_name -> clarifai.api.status.Status
	579,  // 325: clarifai.api.MultiModelReferenceResponse.model_references:type_name -> clarifai.api.ModelReference
	529,  // 326: clarifai.api.MultiOutputResponse.status:type_name -> clarifai.api.status.Status
	580,  // 327: clarifai.api.MultiOutputResponse.outputs:type_name -> clarifai.api.Output
	531,  // 328: clarifai.api.ListScopesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 329: clarifai.api.MyScopesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 330: clarifai.api.MyScopesUserRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 331: clarifai.api.MultiScopeDepsResponse.status:type_name -> clarifai.api.status.Status
	581,  // 332: clarifai.api.MultiScopeDepsResponse.scope_deps:type_name -> clarifai.api.ScopeDeps
	582,  // 333: clarifai.api.MultiScopeDepsResponse.endpoint_deps:type_name -> clarifai.api.EndpointDeps
	529,  // 334: clarifai.api.MultiScopeResponse.status:type_name -> clarifai.api.status.Status
	534,  // 335: clarifai.api.MultiScopeResponse.app:type_name -> clarifai.api.App
	529,  // 336: clarifai.api.MultiScopeUserResponse.status:type_name -> clarifai.api.status.Status
	529,  // 337: clarifai.api.MultiScopeRootResponse.status:type_name -> clarifai.api.status.Status
	531,  // 338: clarifai.api.GetSearchRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 339: clarifai.api.ListSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 340: clarifai.api.PostSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	583,  // 341: clarifai.api.PostSearchesRequest.query:type_name -> clarifai.api.Query
	560,  // 342: clarifai.api.PostSearchesRequest.searches:type_name -> clarifai.api.Search
	2,    // 343: clarifai.api.PostSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	531,  // 344: clarifai.api.PatchInputsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 345: clarifai.api.PatchInputsSearchesRequest.searches:type_name -> clarifai.api.Search
	531,  // 346: clarifai.api.PatchAnnotationsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 347: clarifai.api.PatchAnnotationsSearchesRequest.searches:type_name -> clarifai.api.Search
	531,  // 348: clarifai.api.PatchSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 349: clarifai.api.PatchSearchesRequest.searches:type_name -> clarifai.api.Search
	531,  // 350: clarifai.api.PostSearchesByIDRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	2,    // 351: clarifai.api.PostSearchesByIDRequest.pagination:type_name -> clarifai.api.Pagination
	531,  // 352: clarifai.api.DeleteSearchRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 353: clarifai.api.PostAttributeSearchRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	2,    // 354: clarifai.api.PostAttributeSearchRequest.pagination:type_name -> clarifai.api.Pagination
	584,  // 355: clarifai.api.PostAttributeSearchRequest.attribute_query:type_name -> clarifai.api.AttributeQuery
	531,  // 356: clarifai.api.PostAnnotationsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 357: clarifai.api.PostAnnotationsSearchesRequest.searches:type_name -> clarifai.api.Search
	2,    // 358: clarifai.api.PostAnnotationsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	531,  // 359: clarifai.api.DeleteAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 360: clarifai.api.PostInputsSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 361: clarifai.api.PostInputsSearchesRequest.searches:type_name -> clarifai.api.Search
	2,    // 362: clarifai.api.PostInputsSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	529,  // 363: clarifai.api.SingleSearchResponse.status:type_name -> clarifai.api.status.Status
	560,  // 364: clarifai.api.SingleSearchResponse.search:type_name -> clarifai.api.Search
	529,  // 365: clarifai.api.MultiSearchResponse.status:type_name -> clarifai.api.status.Status
	556,  // 366: clarifai.api.MultiSearchResponse.hits:type_name -> clarifai.api.Hit
	583,  // 367: clarifai.api.MultiSearchResponse.query:type_name -> clarifai.api.Query
	560,  // 368: clarifai.api.MultiSearchResponse.searches:type_name -> clarifai.api.Search
	531,  // 369: clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 370: clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth:type_name -> clarifai.api.Search
	560,  // 371: clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval:type_name -> clarifai.api.Search
	585,  // 372: clarifai.api.PostAnnotationSearchMetricsRequest.data:type_name -> clarifai.api.Data
	586,  // 373: clarifai.api.PostAnnotationSearchMetricsRequest.evaluation_type:type_name -> clarifai.api.EvaluationType
	531,  // 374: clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 375: clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 376: clarifai.api.MultiAnnotationSearchMetricsResponse.status:type_name -> clarifai.api.status.Status
	587,  // 377: clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics:type_name -> clarifai.api.AnnotationSearchMetrics
	531,  // 378: clarifai.api.ListAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 379: clarifai.api.GetAnnotationFilterRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 380: clarifai.api.PostAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	588,  // 381: clarifai.api.PostAnnotationFiltersRequest.annotation_filters:type_name -> clarifai.api.AnnotationFilter
	531,  // 382: clarifai.api.PatchAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	588,  // 383: clarifai.api.PatchAnnotationFiltersRequest.annotation_filters:type_name -> clarifai.api.AnnotationFilter
	531,  // 384: clarifai.api.DeleteAnnotationFiltersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 385: clarifai.api.MultiAnnotationFilterResponse.status:type_name -> clarifai.api.status.Status
	588,  // 386: clarifai.api.MultiAnnotationFilterResponse.annotation_filters:type_name -> clarifai.api.AnnotationFilter
	529,  // 387: clarifai.api.SingleAnnotationFilterResponse.status:type_name -> clarifai.api.status.Status
	588,  // 388: clarifai.api.SingleAnnotationFilterResponse.annotation_filter:type_name -> clarifai.api.AnnotationFilter
	531,  // 389: clarifai.api.ListClustersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 390: clarifai.api.ListAnnotationsForClusterRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 391: clarifai.api.PostClustersSearchesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	560,  // 392: clarifai.api.PostClustersSearchesRequest.searches:type_name -> clarifai.api.Search
	2,    // 393: clarifai.api.PostClustersSearchesRequest.pagination:type_name -> clarifai.api.Pagination
	529,  // 394: clarifai.api.MultiClusterResponse.status:type_name -> clarifai.api.status.Status
	589,  // 395: clarifai.api.MultiClusterResponse.clusters:type_name -> clarifai.api.Cluster
	560,  // 396: clarifai.api.MultiClusterResponse.searches:type_name -> clarifai.api.Search
	531,  // 397: clarifai.api.GetSubscriptionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	590,  // 398: clarifai.api.PostSubscriptionRequest.plan:type_name -> clarifai.api.Plan
	531,  // 399: clarifai.api.PostSubscriptionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 400: clarifai.api.SingleSubscriptionResponse.status:type_name -> clarifai.api.status.Status
	590,  // 401: clarifai.api.SingleSubscriptionResponse.plan:type_name -> clarifai.api.Plan
	531,  // 402: clarifai.api.ListCreditCardsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 403: clarifai.api.MultipleCreditCardResponse.status:type_name -> clarifai.api.status.Status
	591,  // 404: clarifai.api.MultipleCreditCardResponse.cards:type_name -> clarifai.api.CreditCard
	531,  // 405: clarifai.api.PostCreditCardRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	591,  // 406: clarifai.api.PostCreditCardRequest.card:type_name -> clarifai.api.CreditCard
	529,  // 407: clarifai.api.SingleCreditCardResponse.status:type_name -> clarifai.api.status.Status
	591,  // 408: clarifai.api.SingleCreditCardResponse.card:type_name -> clarifai.api.CreditCard
	531,  // 409: clarifai.api.DeleteCreditCardRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	591,  // 410: clarifai.api.DeleteCreditCardRequest.card:type_name -> clarifai.api.CreditCard
	531,  // 411: clarifai.api.PatchCreditCardsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	591,  // 412: clarifai.api.PatchCreditCardsRequest.cards:type_name -> clarifai.api.CreditCard
	535,  // 413: clarifai.api.PatchCreditCardsRequest.action:type_name -> clarifai.api.PatchAction
	531,  // 414: clarifai.api.GetShippingAddressRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 415: clarifai.api.PutShippingAddressRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	592,  // 416: clarifai.api.PutShippingAddressRequest.shipping_address:type_name -> clarifai.api.ShippingAddress
	535,  // 417: clarifai.api.PutShippingAddressRequest.action:type_name -> clarifai.api.PatchAction
	529,  // 418: clarifai.api.SingleShippingAddressResponse.status:type_name -> clarifai.api.status.Status
	592,  // 419: clarifai.api.SingleShippingAddressResponse.shipping_address:type_name -> clarifai.api.ShippingAddress
	531,  // 420: clarifai.api.ListPlansRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 421: clarifai.api.MultiPlanResponse.status:type_name -> clarifai.api.status.Status
	590,  // 422: clarifai.api.MultiPlanResponse.plans:type_name -> clarifai.api.Plan
	531,  // 423: clarifai.api.GetHistoricalUsageRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	569,  // 424: clarifai.api.GetHistoricalUsageRequest.start_date:type_name -> google.protobuf.Timestamp
	569,  // 425: clarifai.api.GetHistoricalUsageRequest.end_date:type_name -> google.protobuf.Timestamp
	529,  // 426: clarifai.api.GetHistoricalUsageResponse.status:type_name -> clarifai.api.status.Status
	593,  // 427: clarifai.api.GetHistoricalUsageResponse.usage:type_name -> clarifai.api.OpCountByDate
	531,  // 428: clarifai.api.PostHistoricalUsageRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 429: clarifai.api.PostHistoricalUsageResponse.status:type_name -> clarifai.api.status.Status
	594,  // 430: clarifai.api.PostHistoricalUsageResponse.interval:type_name -> google.protobuf.Duration
	595,  // 431: clarifai.api.PostHistoricalUsageResponse.usage:type_name -> clarifai.api.DimensionList
	531,  // 432: clarifai.api.GetRealtimeUsageRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 433: clarifai.api.GetRealtimeUsageResponse.status:type_name -> clarifai.api.status.Status
	596,  // 434: clarifai.api.GetRealtimeUsageResponse.realtime_usage:type_name -> clarifai.api.RealtimeCount
	529,  // 435: clarifai.api.ListUsageIntervalsResponse.status:type_name -> clarifai.api.status.Status
	597,  // 436: clarifai.api.ListUsageIntervalsResponse.usage_intervals:type_name -> clarifai.api.UsageInterval
	531,  // 437: clarifai.api.ListUserBillingCyclesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 438: clarifai.api.ListUserCyclesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	569,  // 439: clarifai.api.ListUserCyclesRequest.before_date:type_name -> google.protobuf.Timestamp
	529,  // 440: clarifai.api.ListUserBillingCyclesResponse.status:type_name -> clarifai.api.status.Status
	543,  // 441: clarifai.api.ListUserBillingCyclesResponse.billing_cycles:type_name -> clarifai.api.BillingCycle
	529,  // 442: clarifai.api.ListUserCyclesResponse.status:type_name -> clarifai.api.status.Status
	598,  // 443: clarifai.api.ListUserCyclesResponse.usage_cycles:type_name -> clarifai.api.UsageCycle
	531,  // 444: clarifai.api.PostUsageRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	599,  // 445: clarifai.api.PostUsageRequest.events_collections:type_name -> clarifai.api.EventsCollection
	529,  // 446: clarifai.api.PostUsageResponse.status:type_name -> clarifai.api.status.Status
	531,  // 447: clarifai.api.GetUserRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 448: clarifai.api.PostUserConsentRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 449: clarifai.api.SingleUserResponse.status:type_name -> clarifai.api.status.Status
	600,  // 450: clarifai.api.SingleUserResponse.user:type_name -> clarifai.api.User
	529,  // 451: clarifai.api.MultiUserResponse.status:type_name -> clarifai.api.status.Status
	600,  // 452: clarifai.api.MultiUserResponse.users:type_name -> clarifai.api.User
	531,  // 453: clarifai.api.PatchUserRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	601,  // 454: clarifai.api.PatchUserRequest.info:type_name -> clarifai.api.UserInfo
	602,  // 455: clarifai.api.PatchUserRequest.pass:type_name -> clarifai.api.UserPassword
	530,  // 456: clarifai.api.PatchUserRequest.metadata:type_name -> google.protobuf.Struct
	535,  // 457: clarifai.api.PatchUserRequest.action:type_name -> clarifai.api.PatchAction
	531,  // 458: clarifai.api.PostUserAccessRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	603,  // 459: clarifai.api.PostUserAccessRequest.access:type_name -> clarifai.api.UserAccess
	531,  // 460: clarifai.api.GetUserAccessRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 461: clarifai.api.MultiUserAccessResponse.status:type_name -> clarifai.api.status.Status
	603,  // 462: clarifai.api.MultiUserAccessResponse.access:type_name -> clarifai.api.UserAccess
	529,  // 463: clarifai.api.SingleUserAccessResponse.status:type_name -> clarifai.api.status.Status
	603,  // 464: clarifai.api.SingleUserAccessResponse.access:type_name -> clarifai.api.UserAccess
	531,  // 465: clarifai.api.PostEmailsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 466: clarifai.api.SingleEmailResponse.status:type_name -> clarifai.api.status.Status
	541,  // 467: clarifai.api.SingleEmailResponse.email:type_name -> clarifai.api.EmailAddress
	529,  // 468: clarifai.api.MultipleEmailResponse.status:type_name -> clarifai.api.status.Status
	541,  // 469: clarifai.api.MultipleEmailResponse.emails:type_name -> clarifai.api.EmailAddress
	531,  // 470: clarifai.api.ListEmailsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 471: clarifai.api.PostResendVerifyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 472: clarifai.api.SingleResendVerifyResponse.status:type_name -> clarifai.api.status.Status
	531,  // 473: clarifai.api.DeleteEmailRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 474: clarifai.api.PostPrimaryEmailRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 475: clarifai.api.PostValidatePasswordRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	604,  // 476: clarifai.api.PostValidatePasswordRequest.password:type_name -> clarifai.api.Password
	529,  // 477: clarifai.api.SinglePasswordValidationResponse.status:type_name -> clarifai.api.status.Status
	605,  // 478: clarifai.api.SinglePasswordValidationResponse.password_violations:type_name -> clarifai.api.PasswordViolations
	531,  // 479: clarifai.api.ListPasswordPoliciesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 480: clarifai.api.PostPasswordPoliciesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	606,  // 481: clarifai.api.PostPasswordPoliciesRequest.password_policies:type_name -> clarifai.api.PasswordPolicy
	531,  // 482: clarifai.api.PatchPasswordPoliciesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	606,  // 483: clarifai.api.PatchPasswordPoliciesRequest.password_policies:type_name -> clarifai.api.PasswordPolicy
	531,  // 484: clarifai.api.DeletePasswordPoliciesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 485: clarifai.api.MultiplePasswordPoliciesResponse.status:type_name -> clarifai.api.status.Status
	606,  // 486: clarifai.api.MultiplePasswordPoliciesResponse.password_policies:type_name -> clarifai.api.PasswordPolicy
	531,  // 487: clarifai.api.UserFeatureConfigRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 488: clarifai.api.SingleUserFeatureConfigResponse.status:type_name -> clarifai.api.status.Status
	531,  // 489: clarifai.api.PostOrganizationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	607,  // 490: clarifai.api.PostOrganizationsRequest.organizations:type_name -> clarifai.api.Organization
	531,  // 491: clarifai.api.ListOrganizationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 492: clarifai.api.ListUsersOrganizationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 493: clarifai.api.DeleteRequestingUserFromOrganizationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 494: clarifai.api.PostAcceptOrganizationInvitationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 495: clarifai.api.PostDeclineOrganizationInvitationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 496: clarifai.api.GetOrganizationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 497: clarifai.api.PatchOrganizationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	607,  // 498: clarifai.api.PatchOrganizationRequest.organizations:type_name -> clarifai.api.Organization
	531,  // 499: clarifai.api.DeleteOrganizationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 500: clarifai.api.SingleOrganizationResponse.status:type_name -> clarifai.api.status.Status
	607,  // 501: clarifai.api.SingleOrganizationResponse.organization:type_name -> clarifai.api.Organization
	529,  // 502: clarifai.api.MultiOrganizationResponse.status:type_name -> clarifai.api.status.Status
	607,  // 503: clarifai.api.MultiOrganizationResponse.organizations:type_name -> clarifai.api.Organization
	529,  // 504: clarifai.api.MultiUsersOrganizationsResponse.status:type_name -> clarifai.api.status.Status
	524,  // 505: clarifai.api.MultiUsersOrganizationsResponse.organizations:type_name -> clarifai.api.MultiUsersOrganizationsResponse.UserOrganization
	531,  // 506: clarifai.api.ListOrganizationAppMembersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	608,  // 507: clarifai.api.ListOrganizationAppMembersRequest.required_scopes:type_name -> clarifai.auth.scope.S
	531,  // 508: clarifai.api.ListOrganizationMembersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 509: clarifai.api.PostOrganizationInvitationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	609,  // 510: clarifai.api.PostOrganizationInvitationsRequest.invitations:type_name -> clarifai.api.OrganizationInvitation
	531,  // 511: clarifai.api.PatchOrganizationInvitationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	609,  // 512: clarifai.api.PatchOrganizationInvitationsRequest.invitations:type_name -> clarifai.api.OrganizationInvitation
	531,  // 513: clarifai.api.ListOrganizationInvitationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	0,    // 514: clarifai.api.ListOrganizationInvitationsRequest.status:type_name -> clarifai.api.OrganizationInvitationStatus
	531,  // 515: clarifai.api.GetOrganizationInvitationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 516: clarifai.api.SingleOrganizationInvitationResponse.status:type_name -> clarifai.api.status.Status
	609,  // 517: clarifai.api.SingleOrganizationInvitationResponse.invitation:type_name -> clarifai.api.OrganizationInvitation
	529,  // 518: clarifai.api.MultiOrganizationInvitationResponse.status:type_name -> clarifai.api.status.Status
	609,  // 519: clarifai.api.MultiOrganizationInvitationResponse.invitations:type_name -> clarifai.api.OrganizationInvitation
	531,  // 520: clarifai.api.PatchOrganizationMembersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	525,  // 521: clarifai.api.PatchOrganizationMembersRequest.organization_members:type_name -> clarifai.api.PatchOrganizationMembersRequest.PatchOrganizationMember
	531,  // 522: clarifai.api.PostOrganizationMemberRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 523: clarifai.api.DeleteOrganizationMemberRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 524: clarifai.api.MultiOrganizationMemberResponse.status:type_name -> clarifai.api.status.Status
	610,  // 525: clarifai.api.MultiOrganizationMemberResponse.organization_members:type_name -> clarifai.api.OrganizationMember
	611,  // 526: clarifai.api.PostIdentityProvidersRequest.identity_providers:type_name -> clarifai.api.IdentityProvider
	531,  // 527: clarifai.api.PostIdentityProvidersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 528: clarifai.api.ListIdentityProvidersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 529: clarifai.api.GetIdentityProviderRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	611,  // 530: clarifai.api.PatchIdentityProvidersRequest.identity_providers:type_name -> clarifai.api.IdentityProvider
	531,  // 531: clarifai.api.PatchIdentityProvidersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 532: clarifai.api.DeleteIdentityProvidersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 533: clarifai.api.SingleIdentityProviderResponse.status:type_name -> clarifai.api.status.Status
	611,  // 534: clarifai.api.SingleIdentityProviderResponse.identity_provider:type_name -> clarifai.api.IdentityProvider
	529,  // 535: clarifai.api.MultiIdentityProviderResponse.status:type_name -> clarifai.api.status.Status
	611,  // 536: clarifai.api.MultiIdentityProviderResponse.identity_providers:type_name -> clarifai.api.IdentityProvider
	526,  // 537: clarifai.api.PostTeamsRequest.teams:type_name -> clarifai.api.PostTeamsRequest.PostTeam
	531,  // 538: clarifai.api.PostTeamsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 539: clarifai.api.ListTeamsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 540: clarifai.api.GetTeamRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	612,  // 541: clarifai.api.PatchTeamsRequest.teams:type_name -> clarifai.api.Team
	531,  // 542: clarifai.api.PatchTeamsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 543: clarifai.api.DeleteTeamsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 544: clarifai.api.SingleTeamResponse.status:type_name -> clarifai.api.status.Status
	612,  // 545: clarifai.api.SingleTeamResponse.team:type_name -> clarifai.api.Team
	529,  // 546: clarifai.api.MultiTeamResponse.status:type_name -> clarifai.api.status.Status
	612,  // 547: clarifai.api.MultiTeamResponse.teams:type_name -> clarifai.api.Team
	531,  // 548: clarifai.api.ListTeamAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	527,  // 549: clarifai.api.PostTeamAppsRequest.apps:type_name -> clarifai.api.PostTeamAppsRequest.TeamApp
	531,  // 550: clarifai.api.PostTeamAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 551: clarifai.api.DeleteTeamAppsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 552: clarifai.api.MultiTeamAppsResponse.status:type_name -> clarifai.api.status.Status
	528,  // 553: clarifai.api.MultiTeamAppsResponse.apps:type_name -> clarifai.api.MultiTeamAppsResponse.TeamApp
	531,  // 554: clarifai.api.MultiTeamAppsResponse.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 555: clarifai.api.PostTeamUsersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 556: clarifai.api.ListTeamUsersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 557: clarifai.api.DeleteTeamUsersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 558: clarifai.api.MultiTeamUserResponse.status:type_name -> clarifai.api.status.Status
	613,  // 559: clarifai.api.MultiTeamUserResponse.team_users:type_name -> clarifai.api.TeamUser
	614,  // 560: clarifai.api.ListRolesRequest.types:type_name -> clarifai.api.RoleType
	529,  // 561: clarifai.api.SingleRoleResponse.status:type_name -> clarifai.api.status.Status
	615,  // 562: clarifai.api.SingleRoleResponse.role:type_name -> clarifai.api.Role
	529,  // 563: clarifai.api.MultiRoleResponse.status:type_name -> clarifai.api.status.Status
	615,  // 564: clarifai.api.MultiRoleResponse.roles:type_name -> clarifai.api.Role
	531,  // 565: clarifai.api.GetVocabRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 566: clarifai.api.ListVocabsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 567: clarifai.api.PostVocabsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	616,  // 568: clarifai.api.PostVocabsRequest.vocabs:type_name -> clarifai.api.Vocab
	531,  // 569: clarifai.api.PatchVocabsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	616,  // 570: clarifai.api.PatchVocabsRequest.vocabs:type_name -> clarifai.api.Vocab
	531,  // 571: clarifai.api.DeleteVocabRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 572: clarifai.api.DeleteVocabsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 573: clarifai.api.ListVocabConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 574: clarifai.api.PostVocabConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	545,  // 575: clarifai.api.PostVocabConceptsRequest.concepts:type_name -> clarifai.api.Concept
	531,  // 576: clarifai.api.DeleteVocabConceptRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 577: clarifai.api.DeleteVocabConceptsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 578: clarifai.api.SingleVocabResponse.status:type_name -> clarifai.api.status.Status
	616,  // 579: clarifai.api.SingleVocabResponse.vocab:type_name -> clarifai.api.Vocab
	529,  // 580: clarifai.api.MultiVocabResponse.status:type_name -> clarifai.api.status.Status
	616,  // 581: clarifai.api.MultiVocabResponse.vocabs:type_name -> clarifai.api.Vocab
	531,  // 582: clarifai.api.GetWorkflowRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 583: clarifai.api.ListWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 584: clarifai.api.ListPublicWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 585: clarifai.api.PostWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	617,  // 586: clarifai.api.PostWorkflowsRequest.workflows:type_name -> clarifai.api.Workflow
	531,  // 587: clarifai.api.PatchWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	617,  // 588: clarifai.api.PatchWorkflowsRequest.workflows:type_name -> clarifai.api.Workflow
	531,  // 589: clarifai.api.PatchWorkflowIdsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	179,  // 590: clarifai.api.PatchWorkflowIdsRequest.ids:type_name -> clarifai.api.IdUpdateSource
	531,  // 591: clarifai.api.DeleteWorkflowRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 592: clarifai.api.DeleteWorkflowsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 593: clarifai.api.SingleWorkflowResponse.status:type_name -> clarifai.api.status.Status
	617,  // 594: clarifai.api.SingleWorkflowResponse.workflow:type_name -> clarifai.api.Workflow
	529,  // 595: clarifai.api.MultiWorkflowResponse.status:type_name -> clarifai.api.status.Status
	617,  // 596: clarifai.api.MultiWorkflowResponse.workflows:type_name -> clarifai.api.Workflow
	531,  // 597: clarifai.api.PostWorkflowResultsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	553,  // 598: clarifai.api.PostWorkflowResultsRequest.inputs:type_name -> clarifai.api.Input
	618,  // 599: clarifai.api.PostWorkflowResultsRequest.output_config:type_name -> clarifai.api.OutputConfig
	619,  // 600: clarifai.api.PostWorkflowResultsRequest.workflow_state:type_name -> clarifai.api.WorkflowState
	529,  // 601: clarifai.api.PostWorkflowResultsResponse.status:type_name -> clarifai.api.status.Status
	617,  // 602: clarifai.api.PostWorkflowResultsResponse.workflow:type_name -> clarifai.api.Workflow
	620,  // 603: clarifai.api.PostWorkflowResultsResponse.results:type_name -> clarifai.api.WorkflowResult
	619,  // 604: clarifai.api.PostWorkflowResultsResponse.workflow_state:type_name -> clarifai.api.WorkflowState
	531,  // 605: clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	553,  // 606: clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs:type_name -> clarifai.api.Input
	553,  // 607: clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs:type_name -> clarifai.api.Input
	529,  // 608: clarifai.api.PostWorkflowResultsSimilarityResponse.status:type_name -> clarifai.api.status.Status
	621,  // 609: clarifai.api.PostWorkflowResultsSimilarityResponse.results:type_name -> clarifai.api.WorkflowResultsSimilarity
	531,  // 610: clarifai.api.ListWorkflowVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 611: clarifai.api.GetWorkflowVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 612: clarifai.api.DeleteWorkflowVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 613: clarifai.api.PatchWorkflowVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	622,  // 614: clarifai.api.PatchWorkflowVersionsRequest.workflow_versions:type_name -> clarifai.api.WorkflowVersion
	529,  // 615: clarifai.api.MultiWorkflowVersionResponse.status:type_name -> clarifai.api.status.Status
	622,  // 616: clarifai.api.MultiWorkflowVersionResponse.workflow_versions:type_name -> clarifai.api.WorkflowVersion
	529,  // 617: clarifai.api.SingleWorkflowVersionResponse.status:type_name -> clarifai.api.status.Status
	622,  // 618: clarifai.api.SingleWorkflowVersionResponse.workflow_version:type_name -> clarifai.api.WorkflowVersion
	531,  // 619: clarifai.api.PostWorkflowMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	623,  // 620: clarifai.api.PostWorkflowMetricsRequest.workflow_metrics:type_name -> clarifai.api.WorkflowMetrics
	531,  // 621: clarifai.api.GetWorkflowMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 622: clarifai.api.GetWorkflowNodeMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 623: clarifai.api.ListWorkflowMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 624: clarifai.api.DeleteWorkflowMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 625: clarifai.api.SingleWorkflowMetricsResponse.status:type_name -> clarifai.api.status.Status
	623,  // 626: clarifai.api.SingleWorkflowMetricsResponse.workflow_metrics:type_name -> clarifai.api.WorkflowMetrics
	529,  // 627: clarifai.api.SingleWorkflowNodeMetricsResponse.status:type_name -> clarifai.api.status.Status
	624,  // 628: clarifai.api.SingleWorkflowNodeMetricsResponse.node_metrics:type_name -> clarifai.api.EvalMetrics
	529,  // 629: clarifai.api.MultiWorkflowMetricsResponse.status:type_name -> clarifai.api.status.Status
	623,  // 630: clarifai.api.MultiWorkflowMetricsResponse.workflow_metrics:type_name -> clarifai.api.WorkflowMetrics
	531,  // 631: clarifai.api.PostAppDuplicationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	625,  // 632: clarifai.api.PostAppDuplicationsRequest.app_duplications:type_name -> clarifai.api.AppDuplication
	531,  // 633: clarifai.api.GetAppDuplicationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 634: clarifai.api.ListAppDuplicationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 635: clarifai.api.MultiAppDuplicationsResponse.status:type_name -> clarifai.api.status.Status
	625,  // 636: clarifai.api.MultiAppDuplicationsResponse.app_duplications:type_name -> clarifai.api.AppDuplication
	529,  // 637: clarifai.api.SingleAppDuplicationResponse.status:type_name -> clarifai.api.status.Status
	625,  // 638: clarifai.api.SingleAppDuplicationResponse.app_duplication:type_name -> clarifai.api.AppDuplication
	531,  // 639: clarifai.api.PostTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	626,  // 640: clarifai.api.PostTasksRequest.tasks:type_name -> clarifai.api.Task
	531,  // 641: clarifai.api.GetTaskRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 642: clarifai.api.ListTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 643: clarifai.api.PatchTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	626,  // 644: clarifai.api.PatchTasksRequest.tasks:type_name -> clarifai.api.Task
	531,  // 645: clarifai.api.DeleteTasksRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 646: clarifai.api.MultiTaskResponse.status:type_name -> clarifai.api.status.Status
	626,  // 647: clarifai.api.MultiTaskResponse.tasks:type_name -> clarifai.api.Task
	529,  // 648: clarifai.api.SingleTaskResponse.status:type_name -> clarifai.api.status.Status
	626,  // 649: clarifai.api.SingleTaskResponse.task:type_name -> clarifai.api.Task
	531,  // 650: clarifai.api.GetTaskCountRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 651: clarifai.api.SingleTaskCountResponse.status:type_name -> clarifai.api.status.Status
	627,  // 652: clarifai.api.SingleTaskCountResponse.counts:type_name -> clarifai.api.TaskStatusCountPerUser
	531,  // 653: clarifai.api.PatchAnnotationCountsRollupRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 654: clarifai.api.PostLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	628,  // 655: clarifai.api.PostLabelOrdersRequest.label_orders:type_name -> clarifai.api.LabelOrder
	531,  // 656: clarifai.api.GetLabelOrderRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 657: clarifai.api.ListLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 658: clarifai.api.PatchLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	628,  // 659: clarifai.api.PatchLabelOrdersRequest.label_orders:type_name -> clarifai.api.LabelOrder
	531,  // 660: clarifai.api.DeleteLabelOrdersRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 661: clarifai.api.MultiLabelOrderResponse.status:type_name -> clarifai.api.status.Status
	628,  // 662: clarifai.api.MultiLabelOrderResponse.label_orders:type_name -> clarifai.api.LabelOrder
	529,  // 663: clarifai.api.SingleLabelOrderResponse.status:type_name -> clarifai.api.status.Status
	628,  // 664: clarifai.api.SingleLabelOrderResponse.label_order:type_name -> clarifai.api.LabelOrder
	531,  // 665: clarifai.api.PostCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	629,  // 666: clarifai.api.PostCollectorsRequest.collectors:type_name -> clarifai.api.Collector
	531,  // 667: clarifai.api.PatchCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	629,  // 668: clarifai.api.PatchCollectorsRequest.collectors:type_name -> clarifai.api.Collector
	531,  // 669: clarifai.api.DeleteCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 670: clarifai.api.GetCollectorRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 671: clarifai.api.ListCollectorsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 672: clarifai.api.MultiCollectorResponse.status:type_name -> clarifai.api.status.Status
	629,  // 673: clarifai.api.MultiCollectorResponse.collectors:type_name -> clarifai.api.Collector
	529,  // 674: clarifai.api.SingleCollectorResponse.status:type_name -> clarifai.api.status.Status
	629,  // 675: clarifai.api.SingleCollectorResponse.collector:type_name -> clarifai.api.Collector
	531,  // 676: clarifai.api.PostStatValuesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	630,  // 677: clarifai.api.PostStatValuesRequest.stat_values:type_name -> clarifai.api.StatValue
	529,  // 678: clarifai.api.MultiStatValueResponse.status:type_name -> clarifai.api.status.Status
	630,  // 679: clarifai.api.MultiStatValueResponse.stat_values:type_name -> clarifai.api.StatValue
	531,  // 680: clarifai.api.PostStatValuesAggregateRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	631,  // 681: clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries:type_name -> clarifai.api.StatValueAggregateQuery
	529,  // 682: clarifai.api.MultiStatValueAggregateResponse.status:type_name -> clarifai.api.status.Status
	632,  // 683: clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results:type_name -> clarifai.api.StatValueAggregateResult
	633,  // 684: clarifai.api.PostAnalyticsRequest.device_info:type_name -> clarifai.api.DeviceInfo
	634,  // 685: clarifai.api.PostAnalyticsRequest.events_collection:type_name -> clarifai.api.SDKEventsCollection
	635,  // 686: clarifai.api.PostAnalyticsRequest.host_app_info:type_name -> clarifai.api.HostAppInfo
	636,  // 687: clarifai.api.PostAnalyticsRequest.operating_system:type_name -> clarifai.api.OperatingSystem
	637,  // 688: clarifai.api.PostAnalyticsRequest.state:type_name -> clarifai.api.State
	569,  // 689: clarifai.api.PostAnalyticsRequest.timestamp:type_name -> google.protobuf.Timestamp
	638,  // 690: clarifai.api.PostAnalyticsRequest.sdk:type_name -> clarifai.api.SDK
	529,  // 691: clarifai.api.PostAnalyticsResponse.status:type_name -> clarifai.api.status.Status
	633,  // 692: clarifai.api.PostSDKBillingRequest.device_info:type_name -> clarifai.api.DeviceInfo
	639,  // 693: clarifai.api.PostSDKBillingRequest.cycle:type_name -> clarifai.api.SDKBillingCycle
	635,  // 694: clarifai.api.PostSDKBillingRequest.host_app_info:type_name -> clarifai.api.HostAppInfo
	636,  // 695: clarifai.api.PostSDKBillingRequest.operating_system:type_name -> clarifai.api.OperatingSystem
	637,  // 696: clarifai.api.PostSDKBillingRequest.state:type_name -> clarifai.api.State
	638,  // 697: clarifai.api.PostSDKBillingRequest.sdk:type_name -> clarifai.api.SDK
	529,  // 698: clarifai.api.PostSDKBillingResponse.status:type_name -> clarifai.api.status.Status
	640,  // 699: clarifai.api.PostSDKBillingResponse.commands:type_name -> clarifai.commands.Commands
	529,  // 700: clarifai.api.MultiFindDuplicateAnnotationsJobResponse.status:type_name -> clarifai.api.status.Status
	641,  // 701: clarifai.api.MultiFindDuplicateAnnotationsJobResponse.find_duplicate_annotations_jobs:type_name -> clarifai.api.FindDuplicateAnnotationsJob
	529,  // 702: clarifai.api.SingleFindDuplicateAnnotationsJobResponse.status:type_name -> clarifai.api.status.Status
	641,  // 703: clarifai.api.SingleFindDuplicateAnnotationsJobResponse.find_duplicate_annotations_job:type_name -> clarifai.api.FindDuplicateAnnotationsJob
	531,  // 704: clarifai.api.PostFindDuplicateAnnotationsJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	641,  // 705: clarifai.api.PostFindDuplicateAnnotationsJobsRequest.find_duplicate_annotations_jobs:type_name -> clarifai.api.FindDuplicateAnnotationsJob
	531,  // 706: clarifai.api.GetFindDuplicateAnnotationsJobRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 707: clarifai.api.ListFindDuplicateAnnotationsJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 708: clarifai.api.DeleteFindDuplicateAnnotationsJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 709: clarifai.api.PostTrendingMetricsViewRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 710: clarifai.api.ListTrendingMetricsViewsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 711: clarifai.api.MultiTrendingMetricsViewResponse.status:type_name -> clarifai.api.status.Status
	642,  // 712: clarifai.api.MultiTrendingMetricsViewResponse.metrics:type_name -> clarifai.api.TrendingMetric
	643,  // 713: clarifai.api.PostIdValidationRequest.validations:type_name -> clarifai.api.Validation
	529,  // 714: clarifai.api.MultiIdValidationResponse.status:type_name -> clarifai.api.status.Status
	644,  // 715: clarifai.api.MultiIdValidationResponse.validation_results:type_name -> clarifai.api.ValidationResult
	529,  // 716: clarifai.api.MultiTagCategoryResponse.status:type_name -> clarifai.api.status.Status
	645,  // 717: clarifai.api.MultiTagCategoryResponse.categories:type_name -> clarifai.api.TagCategory
	531,  // 718: clarifai.api.PostModelStarsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	646,  // 719: clarifai.api.PostModelStarsRequest.model_stars:type_name -> clarifai.api.ModelStar
	529,  // 720: clarifai.api.MultiModelStarResponse.status:type_name -> clarifai.api.status.Status
	646,  // 721: clarifai.api.MultiModelStarResponse.model_stars:type_name -> clarifai.api.ModelStar
	531,  // 722: clarifai.api.DeleteModelStarsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 723: clarifai.api.DeleteModelStarsResponse.status:type_name -> clarifai.api.status.Status
	647,  // 724: clarifai.api.PostUserStarsRequest.user_stars:type_name -> clarifai.api.UserStar
	529,  // 725: clarifai.api.MultiUserStarResponse.status:type_name -> clarifai.api.status.Status
	647,  // 726: clarifai.api.MultiUserStarResponse.user_stars:type_name -> clarifai.api.UserStar
	529,  // 727: clarifai.api.DeleteUserStarsResponse.status:type_name -> clarifai.api.status.Status
	531,  // 728: clarifai.api.PostAppStarsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	648,  // 729: clarifai.api.PostAppStarsRequest.app_stars:type_name -> clarifai.api.AppStar
	529,  // 730: clarifai.api.MultiAppStarResponse.status:type_name -> clarifai.api.status.Status
	648,  // 731: clarifai.api.MultiAppStarResponse.app_stars:type_name -> clarifai.api.AppStar
	531,  // 732: clarifai.api.DeleteAppStarsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 733: clarifai.api.DeleteAppStarsResponse.status:type_name -> clarifai.api.status.Status
	531,  // 734: clarifai.api.PostWorkflowStarsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	649,  // 735: clarifai.api.PostWorkflowStarsRequest.workflow_stars:type_name -> clarifai.api.WorkflowStar
	529,  // 736: clarifai.api.MultiWorkflowStarResponse.status:type_name -> clarifai.api.status.Status
	649,  // 737: clarifai.api.MultiWorkflowStarResponse.workflow_stars:type_name -> clarifai.api.WorkflowStar
	531,  // 738: clarifai.api.DeleteWorkflowStarsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 739: clarifai.api.DeleteWorkflowStarsResponse.status:type_name -> clarifai.api.status.Status
	531,  // 740: clarifai.api.ListWebNotificationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 741: clarifai.api.GetWebNotificationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 742: clarifai.api.DeleteWebNotificationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 743: clarifai.api.PatchWebNotificationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	650,  // 744: clarifai.api.PatchWebNotificationsRequest.notifications:type_name -> clarifai.api.PatchWebNotification
	529,  // 745: clarifai.api.MultiWebNotificationResponse.status:type_name -> clarifai.api.status.Status
	651,  // 746: clarifai.api.MultiWebNotificationResponse.notifications:type_name -> clarifai.api.WebNotification
	529,  // 747: clarifai.api.SingleWebNotificationResponse.status:type_name -> clarifai.api.status.Status
	651,  // 748: clarifai.api.SingleWebNotificationResponse.notification:type_name -> clarifai.api.WebNotification
	531,  // 749: clarifai.api.GetModuleRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 750: clarifai.api.ListModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 751: clarifai.api.PostModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	652,  // 752: clarifai.api.PostModulesRequest.modules:type_name -> clarifai.api.Module
	531,  // 753: clarifai.api.PatchModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	652,  // 754: clarifai.api.PatchModulesRequest.modules:type_name -> clarifai.api.Module
	531,  // 755: clarifai.api.DeleteModulesRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 756: clarifai.api.SingleModuleResponse.status:type_name -> clarifai.api.status.Status
	652,  // 757: clarifai.api.SingleModuleResponse.module:type_name -> clarifai.api.Module
	529,  // 758: clarifai.api.MultiModuleResponse.status:type_name -> clarifai.api.status.Status
	652,  // 759: clarifai.api.MultiModuleResponse.modules:type_name -> clarifai.api.Module
	531,  // 760: clarifai.api.GetModuleVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 761: clarifai.api.ListModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 762: clarifai.api.PostModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	653,  // 763: clarifai.api.PostModuleVersionsRequest.module_versions:type_name -> clarifai.api.ModuleVersion
	531,  // 764: clarifai.api.DeleteModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 765: clarifai.api.SingleModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	653,  // 766: clarifai.api.SingleModuleVersionResponse.module_version:type_name -> clarifai.api.ModuleVersion
	529,  // 767: clarifai.api.MultiModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	653,  // 768: clarifai.api.MultiModuleVersionResponse.module_versions:type_name -> clarifai.api.ModuleVersion
	531,  // 769: clarifai.api.GetInstalledModuleVersionRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 770: clarifai.api.ListInstalledModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 771: clarifai.api.PostInstalledModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	654,  // 772: clarifai.api.PostInstalledModuleVersionsRequest.installed_module_versions:type_name -> clarifai.api.InstalledModuleVersion
	531,  // 773: clarifai.api.PostInstalledModuleVersionsKeyRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 774: clarifai.api.DeleteInstalledModuleVersionsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 775: clarifai.api.SingleInstalledModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	654,  // 776: clarifai.api.SingleInstalledModuleVersionResponse.installed_module_version:type_name -> clarifai.api.InstalledModuleVersion
	529,  // 777: clarifai.api.MultiInstalledModuleVersionResponse.status:type_name -> clarifai.api.status.Status
	654,  // 778: clarifai.api.MultiInstalledModuleVersionResponse.installed_module_versions:type_name -> clarifai.api.InstalledModuleVersion
	531,  // 779: clarifai.api.ListNextTaskAssignmentsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 780: clarifai.api.PostBulkOperationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	655,  // 781: clarifai.api.PostBulkOperationsRequest.bulk_operations:type_name -> clarifai.api.BulkOperation
	531,  // 782: clarifai.api.ListBulkOperationsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 783: clarifai.api.GetBulkOperationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 784: clarifai.api.CancelBulkOperationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 785: clarifai.api.DeleteBulkOperationRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 786: clarifai.api.SingleBulkOperationsResponse.status:type_name -> clarifai.api.status.Status
	655,  // 787: clarifai.api.SingleBulkOperationsResponse.bulk_operation:type_name -> clarifai.api.BulkOperation
	529,  // 788: clarifai.api.MultiBulkOperationsResponse.status:type_name -> clarifai.api.status.Status
	655,  // 789: clarifai.api.MultiBulkOperationsResponse.bulk_operation:type_name -> clarifai.api.BulkOperation
	531,  // 790: clarifai.api.PutTaskAssignmentsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	656,  // 791: clarifai.api.PostWaitlistEmailsRequest.waitlist_emails:type_name -> clarifai.api.WaitlistEmail
	529,  // 792: clarifai.api.MultiWaitlistEmailResponse.status:type_name -> clarifai.api.status.Status
	656,  // 793: clarifai.api.MultiWaitlistEmailResponse.waitlist_emails:type_name -> clarifai.api.WaitlistEmail
	531,  // 794: clarifai.api.GetSampledPredictMetricsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	569,  // 795: clarifai.api.GetSampledPredictMetricsRequest.start_date:type_name -> google.protobuf.Timestamp
	569,  // 796: clarifai.api.GetSampledPredictMetricsRequest.end_date:type_name -> google.protobuf.Timestamp
	2,    // 797: clarifai.api.GetSampledPredictMetricsRequest.pagination:type_name -> clarifai.api.Pagination
	529,  // 798: clarifai.api.MultiSampledPredictMetricsResponse.status:type_name -> clarifai.api.status.Status
	510,  // 799: clarifai.api.MultiSampledPredictMetricsResponse.metrics:type_name -> clarifai.api.SamplePredictMetric
	531,  // 800: clarifai.api.PostInputsAddJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	555,  // 801: clarifai.api.PostInputsAddJobsRequest.inputs_add_jobs:type_name -> clarifai.api.InputsAddJob
	531,  // 802: clarifai.api.ListInputsAddJobsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 803: clarifai.api.GetInputsAddJobRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 804: clarifai.api.CancelInputsAddJobRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 805: clarifai.api.MultiInputsAddJobResponse.status:type_name -> clarifai.api.status.Status
	555,  // 806: clarifai.api.MultiInputsAddJobResponse.inputs_add_jobs:type_name -> clarifai.api.InputsAddJob
	529,  // 807: clarifai.api.SingleInputsAddJobResponse.status:type_name -> clarifai.api.status.Status
	555,  // 808: clarifai.api.SingleInputsAddJobResponse.inputs_add_job:type_name -> clarifai.api.InputsAddJob
	531,  // 809: clarifai.api.PostUploadsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	657,  // 810: clarifai.api.PostUploadsRequest.uploads:type_name -> clarifai.api.Upload
	531,  // 811: clarifai.api.DeleteUploadsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 812: clarifai.api.ListUploadsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	531,  // 813: clarifai.api.GetUploadRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	529,  // 814: clarifai.api.SingleUploadResponse.status:type_name -> clarifai.api.status.Status
	657,  // 815: clarifai.api.SingleUploadResponse.upload:type_name -> clarifai.api.Upload
	529,  // 816: clarifai.api.MultiUploadResponse.status:type_name -> clarifai.api.status.Status
	657,  // 817: clarifai.api.MultiUploadResponse.uploads:type_name -> clarifai.api.Upload
	531,  // 818: clarifai.api.PutUploadContentPartsRequest.user_app_id:type_name -> clarifai.api.UserAppIDSet
	658,  // 819: clarifai.api.PutUploadContentPartsRequest.content_parts:type_name -> clarifai.api.UploadContentPart
	607,  // 820: clarifai.api.MultiUsersOrganizationsResponse.UserOrganization.organization:type_name -> clarifai.api.Organization
	615,  // 821: clarifai.api.MultiUsersOrganizationsResponse.UserOrganization.role:type_name -> clarifai.api.Role
	569,  // 822: clarifai.api.PostTeamsRequest.PostTeam.created_at:type_name -> google.protobuf.Timestamp
	569,  // 823: clarifai.api.PostTeamsRequest.PostTeam.modified_at:type_name -> google.protobuf.Timestamp
	352,  // 824: clarifai.api.MultiTeamAppsResponse.TeamApp.app:type_name -> clarifai.api.AppIdentity
	1,    // 825: clarifai.api.V2.Echo:input_type -> clarifai.api.TestMessage
	78,   // 826: clarifai.api.V2.ListConceptRelations:input_type -> clarifai.api.ListConceptRelationsRequest
	79,   // 827: clarifai.api.V2.PostConceptRelations:input_type -> clarifai.api.PostConceptRelationsRequest
	80,   // 828: clarifai.api.V2.DeleteConceptRelations:input_type -> clarifai.api.DeleteConceptRelationsRequest
	74,   // 829: clarifai.api.V2.GetConceptCounts:input_type -> clarifai.api.GetConceptCountsRequest
	68,   // 830: clarifai.api.V2.GetConcept:input_type -> clarifai.api.GetConceptRequest
	69,   // 831: clarifai.api.V2.ListConcepts:input_type -> clarifai.api.ListConceptsRequest
	70,   // 832: clarifai.api.V2.ListModelConcepts:input_type -> clarifai.api.ListModelConceptsRequest
	71,   // 833: clarifai.api.V2.PostConceptsSearches:input_type -> clarifai.api.PostConceptsSearchesRequest
	72,   // 834: clarifai.api.V2.PostConcepts:input_type -> clarifai.api.PostConceptsRequest
	73,   // 835: clarifai.api.V2.PatchConcepts:input_type -> clarifai.api.PatchConceptsRequest
	365,  // 836: clarifai.api.V2.GetVocab:input_type -> clarifai.api.GetVocabRequest
	366,  // 837: clarifai.api.V2.ListVocabs:input_type -> clarifai.api.ListVocabsRequest
	367,  // 838: clarifai.api.V2.PostVocabs:input_type -> clarifai.api.PostVocabsRequest
	368,  // 839: clarifai.api.V2.PatchVocabs:input_type -> clarifai.api.PatchVocabsRequest
	369,  // 840: clarifai.api.V2.DeleteVocab:input_type -> clarifai.api.DeleteVocabRequest
	370,  // 841: clarifai.api.V2.DeleteVocabs:input_type -> clarifai.api.DeleteVocabsRequest
	371,  // 842: clarifai.api.V2.ListVocabConcepts:input_type -> clarifai.api.ListVocabConceptsRequest
	372,  // 843: clarifai.api.V2.PostVocabConcepts:input_type -> clarifai.api.PostVocabConceptsRequest
	373,  // 844: clarifai.api.V2.DeleteVocabConcept:input_type -> clarifai.api.DeleteVocabConceptRequest
	374,  // 845: clarifai.api.V2.DeleteVocabConcepts:input_type -> clarifai.api.DeleteVocabConceptsRequest
	94,   // 846: clarifai.api.V2.GetConceptLanguage:input_type -> clarifai.api.GetConceptLanguageRequest
	95,   // 847: clarifai.api.V2.ListConceptLanguages:input_type -> clarifai.api.ListConceptLanguagesRequest
	97,   // 848: clarifai.api.V2.PostConceptLanguages:input_type -> clarifai.api.PostConceptLanguagesRequest
	96,   // 849: clarifai.api.V2.PatchConceptLanguages:input_type -> clarifai.api.PatchConceptLanguagesRequest
	100,  // 850: clarifai.api.V2.ListConceptReferences:input_type -> clarifai.api.ListConceptReferencesRequest
	81,   // 851: clarifai.api.V2.ListKnowledgeGraphs:input_type -> clarifai.api.ListKnowledgeGraphsRequest
	82,   // 852: clarifai.api.V2.PostKnowledgeGraphs:input_type -> clarifai.api.PostKnowledgeGraphsRequest
	85,   // 853: clarifai.api.V2.PostConceptMappingJobs:input_type -> clarifai.api.PostConceptMappingJobsRequest
	83,   // 854: clarifai.api.V2.ListConceptMappings:input_type -> clarifai.api.ListConceptMappingsRequest
	84,   // 855: clarifai.api.V2.PostConceptMappings:input_type -> clarifai.api.PostConceptMappingsRequest
	3,    // 856: clarifai.api.V2.GetAnnotation:input_type -> clarifai.api.GetAnnotationRequest
	4,    // 857: clarifai.api.V2.ListAnnotations:input_type -> clarifai.api.ListAnnotationsRequest
	5,    // 858: clarifai.api.V2.PostAnnotations:input_type -> clarifai.api.PostAnnotationsRequest
	6,    // 859: clarifai.api.V2.PatchAnnotations:input_type -> clarifai.api.PatchAnnotationsRequest
	7,    // 860: clarifai.api.V2.PatchAnnotationsStatus:input_type -> clarifai.api.PatchAnnotationsStatusRequest
	9,    // 861: clarifai.api.V2.DeleteAnnotation:input_type -> clarifai.api.DeleteAnnotationRequest
	10,   // 862: clarifai.api.V2.DeleteAnnotations:input_type -> clarifai.api.DeleteAnnotationsRequest
	232,  // 863: clarifai.api.V2.PatchAnnotationsSearches:input_type -> clarifai.api.PatchAnnotationsSearchesRequest
	237,  // 864: clarifai.api.V2.PostAnnotationsSearches:input_type -> clarifai.api.PostAnnotationsSearchesRequest
	121,  // 865: clarifai.api.V2.GetInputCount:input_type -> clarifai.api.GetInputCountRequest
	108,  // 866: clarifai.api.V2.StreamInputs:input_type -> clarifai.api.StreamInputsRequest
	106,  // 867: clarifai.api.V2.GetInputSamples:input_type -> clarifai.api.GetInputSamplesRequest
	105,  // 868: clarifai.api.V2.GetInput:input_type -> clarifai.api.GetInputRequest
	107,  // 869: clarifai.api.V2.ListInputs:input_type -> clarifai.api.ListInputsRequest
	109,  // 870: clarifai.api.V2.PostInputs:input_type -> clarifai.api.PostInputsRequest
	110,  // 871: clarifai.api.V2.PostInputsFile:input_type -> clarifai.api.PostInputsFileRequest
	111,  // 872: clarifai.api.V2.PostInputsNiFi:input_type -> clarifai.api.PostInputsNiFiRequest
	112,  // 873: clarifai.api.V2.PostInputsDocument:input_type -> clarifai.api.PostInputsDocumentRequest
	114,  // 874: clarifai.api.V2.PatchInputs:input_type -> clarifai.api.PatchInputsRequest
	115,  // 875: clarifai.api.V2.DeleteInput:input_type -> clarifai.api.DeleteInputRequest
	116,  // 876: clarifai.api.V2.DeleteInputs:input_type -> clarifai.api.DeleteInputsRequest
	231,  // 877: clarifai.api.V2.PatchInputsSearches:input_type -> clarifai.api.PatchInputsSearchesRequest
	239,  // 878: clarifai.api.V2.PostInputsSearches:input_type -> clarifai.api.PostInputsSearchesRequest
	149,  // 879: clarifai.api.V2.PostModelOutputs:input_type -> clarifai.api.PostModelOutputsRequest
	122,  // 880: clarifai.api.V2.ListDatasets:input_type -> clarifai.api.ListDatasetsRequest
	123,  // 881: clarifai.api.V2.GetDataset:input_type -> clarifai.api.GetDatasetRequest
	124,  // 882: clarifai.api.V2.PostDatasets:input_type -> clarifai.api.PostDatasetsRequest
	125,  // 883: clarifai.api.V2.PatchDatasets:input_type -> clarifai.api.PatchDatasetsRequest
	126,  // 884: clarifai.api.V2.PatchDatasetIds:input_type -> clarifai.api.PatchDatasetIdsRequest
	127,  // 885: clarifai.api.V2.DeleteDatasets:input_type -> clarifai.api.DeleteDatasetsRequest
	130,  // 886: clarifai.api.V2.ListDatasetInputs:input_type -> clarifai.api.ListDatasetInputsRequest
	131,  // 887: clarifai.api.V2.GetDatasetInput:input_type -> clarifai.api.GetDatasetInputRequest
	132,  // 888: clarifai.api.V2.PostDatasetInputs:input_type -> clarifai.api.PostDatasetInputsRequest
	133,  // 889: clarifai.api.V2.DeleteDatasetInputs:input_type -> clarifai.api.DeleteDatasetInputsRequest
	136,  // 890: clarifai.api.V2.ListDatasetVersions:input_type -> clarifai.api.ListDatasetVersionsRequest
	137,  // 891: clarifai.api.V2.GetDatasetVersion:input_type -> clarifai.api.GetDatasetVersionRequest
	138,  // 892: clarifai.api.V2.ListDatasetVersionMetricsGroups:input_type -> clarifai.api.ListDatasetVersionMetricsGroupsRequest
	139,  // 893: clarifai.api.V2.PostDatasetVersions:input_type -> clarifai.api.PostDatasetVersionsRequest
	140,  // 894: clarifai.api.V2.PatchDatasetVersions:input_type -> clarifai.api.PatchDatasetVersionsRequest
	141,  // 895: clarifai.api.V2.DeleteDatasetVersions:input_type -> clarifai.api.DeleteDatasetVersionsRequest
	142,  // 896: clarifai.api.V2.PutDatasetVersionExports:input_type -> clarifai.api.PutDatasetVersionExportsRequest
	203,  // 897: clarifai.api.V2.GetModelType:input_type -> clarifai.api.GetModelTypeRequest
	205,  // 898: clarifai.api.V2.ListOpenSourceLicenses:input_type -> clarifai.api.ListOpenSourceLicensesRequest
	204,  // 899: clarifai.api.V2.ListModelTypes:input_type -> clarifai.api.ListModelTypesRequest
	167,  // 900: clarifai.api.V2.GetModel:input_type -> clarifai.api.GetModelRequest
	167,  // 901: clarifai.api.V2.GetModelOutputInfo:input_type -> clarifai.api.GetModelRequest
	168,  // 902: clarifai.api.V2.ListModels:input_type -> clarifai.api.ListModelsRequest
	183,  // 903: clarifai.api.V2.PostModelsSearches:input_type -> clarifai.api.PostModelsSearchesRequest
	177,  // 904: clarifai.api.V2.PostModels:input_type -> clarifai.api.PostModelsRequest
	178,  // 905: clarifai.api.V2.PatchModels:input_type -> clarifai.api.PatchModelsRequest
	180,  // 906: clarifai.api.V2.PatchModelIds:input_type -> clarifai.api.PatchModelIdsRequest
	181,  // 907: clarifai.api.V2.DeleteModel:input_type -> clarifai.api.DeleteModelRequest
	182,  // 908: clarifai.api.V2.DeleteModels:input_type -> clarifai.api.DeleteModelsRequest
	170,  // 909: clarifai.api.V2.PatchModelCheckConsents:input_type -> clarifai.api.PatchModelCheckConsentsRequest
	169,  // 910: clarifai.api.V2.PatchModelToolkits:input_type -> clarifai.api.PatchModelToolkitsRequest
	171,  // 911: clarifai.api.V2.PatchModelUseCases:input_type -> clarifai.api.PatchModelUseCasesRequest
	172,  // 912: clarifai.api.V2.PatchModelLanguages:input_type -> clarifai.api.PatchModelLanguagesRequest
	150,  // 913: clarifai.api.V2.ListModelInputs:input_type -> clarifai.api.ListModelInputsRequest
	187,  // 914: clarifai.api.V2.GetModelVersion:input_type -> clarifai.api.GetModelVersionRequest
	188,  // 915: clarifai.api.V2.ListModelVersions:input_type -> clarifai.api.ListModelVersionsRequest
	193,  // 916: clarifai.api.V2.PostWorkflowVersionsUnPublish:input_type -> clarifai.api.PostWorkflowVersionsUnPublishRequest
	194,  // 917: clarifai.api.V2.PostWorkflowVersionsPublish:input_type -> clarifai.api.PostWorkflowVersionsPublishRequest
	198,  // 918: clarifai.api.V2.PostModelVersionsPublish:input_type -> clarifai.api.PostModelVersionsPublishRequest
	200,  // 919: clarifai.api.V2.PostModelVersionsUnPublish:input_type -> clarifai.api.PostModelVersionsUnPublishRequest
	192,  // 920: clarifai.api.V2.PostModelVersions:input_type -> clarifai.api.PostModelVersionsRequest
	186,  // 921: clarifai.api.V2.PatchModelVersions:input_type -> clarifai.api.PatchModelVersionsRequest
	189,  // 922: clarifai.api.V2.DeleteModelVersion:input_type -> clarifai.api.DeleteModelVersionRequest
	202,  // 923: clarifai.api.V2.GetModelVersionMetrics:input_type -> clarifai.api.GetModelVersionMetricsRequest
	201,  // 924: clarifai.api.V2.PostModelVersionMetrics:input_type -> clarifai.api.PostModelVersionMetricsRequest
	215,  // 925: clarifai.api.V2.ListModelReferences:input_type -> clarifai.api.ListModelReferencesRequest
	216,  // 926: clarifai.api.V2.PostModelReferences:input_type -> clarifai.api.PostModelReferencesRequest
	217,  // 927: clarifai.api.V2.DeleteModelReferences:input_type -> clarifai.api.DeleteModelReferencesRequest
	209,  // 928: clarifai.api.V2.GetModelVersionInputExample:input_type -> clarifai.api.GetModelVersionInputExampleRequest
	210,  // 929: clarifai.api.V2.ListModelVersionInputExamples:input_type -> clarifai.api.ListModelVersionInputExamplesRequest
	211,  // 930: clarifai.api.V2.PostModelVersionInputExamples:input_type -> clarifai.api.PostModelVersionInputExamplesRequest
	212,  // 931: clarifai.api.V2.DeleteModelVersionInputExamples:input_type -> clarifai.api.DeleteModelVersionInputExamplesRequest
	455,  // 932: clarifai.api.V2.PostModelStars:input_type -> clarifai.api.PostModelStarsRequest
	457,  // 933: clarifai.api.V2.DeleteModelStars:input_type -> clarifai.api.DeleteModelStarsRequest
	459,  // 934: clarifai.api.V2.PostUserStars:input_type -> clarifai.api.PostUserStarsRequest
	461,  // 935: clarifai.api.V2.DeleteUserStars:input_type -> clarifai.api.DeleteUserStarsRequest
	467,  // 936: clarifai.api.V2.PostWorkflowStars:input_type -> clarifai.api.PostWorkflowStarsRequest
	469,  // 937: clarifai.api.V2.DeleteWorkflowStars:input_type -> clarifai.api.DeleteWorkflowStarsRequest
	463,  // 938: clarifai.api.V2.PostAppStars:input_type -> clarifai.api.PostAppStarsRequest
	465,  // 939: clarifai.api.V2.DeleteAppStars:input_type -> clarifai.api.DeleteAppStarsRequest
	377,  // 940: clarifai.api.V2.GetWorkflow:input_type -> clarifai.api.GetWorkflowRequest
	378,  // 941: clarifai.api.V2.ListWorkflows:input_type -> clarifai.api.ListWorkflowsRequest
	379,  // 942: clarifai.api.V2.ListPublicWorkflows:input_type -> clarifai.api.ListPublicWorkflowsRequest
	380,  // 943: clarifai.api.V2.PostWorkflows:input_type -> clarifai.api.PostWorkflowsRequest
	381,  // 944: clarifai.api.V2.PatchWorkflows:input_type -> clarifai.api.PatchWorkflowsRequest
	382,  // 945: clarifai.api.V2.PatchWorkflowIds:input_type -> clarifai.api.PatchWorkflowIdsRequest
	383,  // 946: clarifai.api.V2.DeleteWorkflow:input_type -> clarifai.api.DeleteWorkflowRequest
	384,  // 947: clarifai.api.V2.DeleteWorkflows:input_type -> clarifai.api.DeleteWorkflowsRequest
	387,  // 948: clarifai.api.V2.PostWorkflowResults:input_type -> clarifai.api.PostWorkflowResultsRequest
	389,  // 949: clarifai.api.V2.PostWorkflowResultsSimilarity:input_type -> clarifai.api.PostWorkflowResultsSimilarityRequest
	391,  // 950: clarifai.api.V2.ListWorkflowVersions:input_type -> clarifai.api.ListWorkflowVersionsRequest
	392,  // 951: clarifai.api.V2.GetWorkflowVersion:input_type -> clarifai.api.GetWorkflowVersionRequest
	393,  // 952: clarifai.api.V2.DeleteWorkflowVersions:input_type -> clarifai.api.DeleteWorkflowVersionsRequest
	394,  // 953: clarifai.api.V2.PatchWorkflowVersions:input_type -> clarifai.api.PatchWorkflowVersionsRequest
	397,  // 954: clarifai.api.V2.PostWorkflowMetrics:input_type -> clarifai.api.PostWorkflowMetricsRequest
	398,  // 955: clarifai.api.V2.GetWorkflowMetrics:input_type -> clarifai.api.GetWorkflowMetricsRequest
	399,  // 956: clarifai.api.V2.GetWorkflowNodeMetrics:input_type -> clarifai.api.GetWorkflowNodeMetricsRequest
	400,  // 957: clarifai.api.V2.ListWorkflowMetrics:input_type -> clarifai.api.ListWorkflowMetricsRequest
	401,  // 958: clarifai.api.V2.DeleteWorkflowMetrics:input_type -> clarifai.api.DeleteWorkflowMetricsRequest
	151,  // 959: clarifai.api.V2.GetKey:input_type -> clarifai.api.GetKeyRequest
	152,  // 960: clarifai.api.V2.ListKeys:input_type -> clarifai.api.ListKeysRequest
	153,  // 961: clarifai.api.V2.ListAppKeys:input_type -> clarifai.api.ListAppKeysRequest
	155,  // 962: clarifai.api.V2.DeleteKey:input_type -> clarifai.api.DeleteKeyRequest
	154,  // 963: clarifai.api.V2.PostKeys:input_type -> clarifai.api.PostKeysRequest
	156,  // 964: clarifai.api.V2.PatchKeys:input_type -> clarifai.api.PatchKeysRequest
	221,  // 965: clarifai.api.V2.MyScopes:input_type -> clarifai.api.MyScopesRequest
	222,  // 966: clarifai.api.V2.MyScopesUser:input_type -> clarifai.api.MyScopesUserRequest
	223,  // 967: clarifai.api.V2.MyScopesRoot:input_type -> clarifai.api.MyScopesRootRequest
	220,  // 968: clarifai.api.V2.ListScopes:input_type -> clarifai.api.ListScopesRequest
	13,   // 969: clarifai.api.V2.GetApp:input_type -> clarifai.api.GetAppRequest
	14,   // 970: clarifai.api.V2.ListApps:input_type -> clarifai.api.ListAppsRequest
	16,   // 971: clarifai.api.V2.DeleteApp:input_type -> clarifai.api.DeleteAppRequest
	15,   // 972: clarifai.api.V2.PostApps:input_type -> clarifai.api.PostAppsRequest
	17,   // 973: clarifai.api.V2.PatchApps:input_type -> clarifai.api.PatchAppsRequest
	20,   // 974: clarifai.api.V2.PatchAppsIds:input_type -> clarifai.api.PatchAppsIdsRequest
	18,   // 975: clarifai.api.V2.PatchApp:input_type -> clarifai.api.PatchAppRequest
	19,   // 976: clarifai.api.V2.PatchAppOwner:input_type -> clarifai.api.PatchAppOwnerRequest
	21,   // 977: clarifai.api.V2.PostAppsSearches:input_type -> clarifai.api.PostAppsSearchesRequest
	285,  // 978: clarifai.api.V2.GetUser:input_type -> clarifai.api.GetUserRequest
	286,  // 979: clarifai.api.V2.ListUsers:input_type -> clarifai.api.ListUsersRequest
	287,  // 980: clarifai.api.V2.PostUserConsent:input_type -> clarifai.api.PostUserConsentRequest
	290,  // 981: clarifai.api.V2.PatchUser:input_type -> clarifai.api.PatchUserRequest
	291,  // 982: clarifai.api.V2.PostUserAccess:input_type -> clarifai.api.PostUserAccessRequest
	292,  // 983: clarifai.api.V2.GetUserAccess:input_type -> clarifai.api.GetUserAccessRequest
	295,  // 984: clarifai.api.V2.PostEmails:input_type -> clarifai.api.PostEmailsRequest
	298,  // 985: clarifai.api.V2.ListEmails:input_type -> clarifai.api.ListEmailsRequest
	299,  // 986: clarifai.api.V2.PostResendVerifyEmail:input_type -> clarifai.api.PostResendVerifyRequest
	301,  // 987: clarifai.api.V2.DeleteEmail:input_type -> clarifai.api.DeleteEmailRequest
	302,  // 988: clarifai.api.V2.PostPrimaryEmail:input_type -> clarifai.api.PostPrimaryEmailRequest
	303,  // 989: clarifai.api.V2.PostValidatePassword:input_type -> clarifai.api.PostValidatePasswordRequest
	305,  // 990: clarifai.api.V2.ListGlobalPasswordPolicies:input_type -> clarifai.api.ListGlobalPasswordPoliciesRequest
	306,  // 991: clarifai.api.V2.ListPasswordPolicies:input_type -> clarifai.api.ListPasswordPoliciesRequest
	307,  // 992: clarifai.api.V2.PostPasswordPolicies:input_type -> clarifai.api.PostPasswordPoliciesRequest
	308,  // 993: clarifai.api.V2.PatchPasswordPolicies:input_type -> clarifai.api.PatchPasswordPoliciesRequest
	309,  // 994: clarifai.api.V2.DeletePasswordPolicies:input_type -> clarifai.api.DeletePasswordPoliciesRequest
	311,  // 995: clarifai.api.V2.GetUserFeatureConfig:input_type -> clarifai.api.UserFeatureConfigRequest
	313,  // 996: clarifai.api.V2.PostOrganizations:input_type -> clarifai.api.PostOrganizationsRequest
	315,  // 997: clarifai.api.V2.ListUsersOrganizations:input_type -> clarifai.api.ListUsersOrganizationsRequest
	314,  // 998: clarifai.api.V2.ListOrganizations:input_type -> clarifai.api.ListOrganizationsRequest
	319,  // 999: clarifai.api.V2.GetOrganization:input_type -> clarifai.api.GetOrganizationRequest
	320,  // 1000: clarifai.api.V2.PatchOrganization:input_type -> clarifai.api.PatchOrganizationRequest
	321,  // 1001: clarifai.api.V2.DeleteOrganization:input_type -> clarifai.api.DeleteOrganizationRequest
	326,  // 1002: clarifai.api.V2.ListOrganizationMembers:input_type -> clarifai.api.ListOrganizationMembersRequest
	325,  // 1003: clarifai.api.V2.ListOrganizationAppMembers:input_type -> clarifai.api.ListOrganizationAppMembersRequest
	335,  // 1004: clarifai.api.V2.PostOrganizationMember:input_type -> clarifai.api.PostOrganizationMemberRequest
	334,  // 1005: clarifai.api.V2.PatchOrganizationMember:input_type -> clarifai.api.PatchOrganizationMembersRequest
	336,  // 1006: clarifai.api.V2.DeleteOrganizationMember:input_type -> clarifai.api.DeleteOrganizationMemberRequest
	327,  // 1007: clarifai.api.V2.PostOrganizationInvitations:input_type -> clarifai.api.PostOrganizationInvitationsRequest
	328,  // 1008: clarifai.api.V2.PatchOrganizationInvitations:input_type -> clarifai.api.PatchOrganizationInvitationsRequest
	329,  // 1009: clarifai.api.V2.ListOrganizationInvitations:input_type -> clarifai.api.ListOrganizationInvitationsRequest
	330,  // 1010: clarifai.api.V2.GetOrganizationInvitation:input_type -> clarifai.api.GetOrganizationInvitationRequest
	318,  // 1011: clarifai.api.V2.PostDeclineOrganizationInvitation:input_type -> clarifai.api.PostDeclineOrganizationInvitationRequest
	317,  // 1012: clarifai.api.V2.PostAcceptOrganizationInvitation:input_type -> clarifai.api.PostAcceptOrganizationInvitationRequest
	331,  // 1013: clarifai.api.V2.GetOrganizationInvitationPublic:input_type -> clarifai.api.GetOrganizationInvitationPublicRequest
	316,  // 1014: clarifai.api.V2.DeleteRequestingUserFromOrganization:input_type -> clarifai.api.DeleteRequestingUserFromOrganizationRequest
	338,  // 1015: clarifai.api.V2.PostIdentityProviders:input_type -> clarifai.api.PostIdentityProvidersRequest
	339,  // 1016: clarifai.api.V2.ListIdentityProviders:input_type -> clarifai.api.ListIdentityProvidersRequest
	340,  // 1017: clarifai.api.V2.GetIdentityProvider:input_type -> clarifai.api.GetIdentityProviderRequest
	341,  // 1018: clarifai.api.V2.PatchIdentityProviders:input_type -> clarifai.api.PatchIdentityProvidersRequest
	342,  // 1019: clarifai.api.V2.DeleteIdentityProviders:input_type -> clarifai.api.DeleteIdentityProvidersRequest
	345,  // 1020: clarifai.api.V2.PostTeams:input_type -> clarifai.api.PostTeamsRequest
	346,  // 1021: clarifai.api.V2.ListTeams:input_type -> clarifai.api.ListTeamsRequest
	347,  // 1022: clarifai.api.V2.GetTeam:input_type -> clarifai.api.GetTeamRequest
	348,  // 1023: clarifai.api.V2.PatchTeams:input_type -> clarifai.api.PatchTeamsRequest
	349,  // 1024: clarifai.api.V2.DeleteTeams:input_type -> clarifai.api.DeleteTeamsRequest
	357,  // 1025: clarifai.api.V2.PostTeamUsers:input_type -> clarifai.api.PostTeamUsersRequest
	358,  // 1026: clarifai.api.V2.ListTeamUsers:input_type -> clarifai.api.ListTeamUsersRequest
	359,  // 1027: clarifai.api.V2.DeleteTeamUsers:input_type -> clarifai.api.DeleteTeamUsersRequest
	354,  // 1028: clarifai.api.V2.PostTeamApps:input_type -> clarifai.api.PostTeamAppsRequest
	353,  // 1029: clarifai.api.V2.ListTeamApps:input_type -> clarifai.api.ListTeamAppsRequest
	355,  // 1030: clarifai.api.V2.DeleteTeamApps:input_type -> clarifai.api.DeleteTeamAppsRequest
	361,  // 1031: clarifai.api.V2.ListRoles:input_type -> clarifai.api.ListRolesRequest
	362,  // 1032: clarifai.api.V2.GetRole:input_type -> clarifai.api.GetRoleRequest
	228,  // 1033: clarifai.api.V2.GetSearch:input_type -> clarifai.api.GetSearchRequest
	229,  // 1034: clarifai.api.V2.ListSearches:input_type -> clarifai.api.ListSearchesRequest
	233,  // 1035: clarifai.api.V2.PatchSearches:input_type -> clarifai.api.PatchSearchesRequest
	230,  // 1036: clarifai.api.V2.PostSearches:input_type -> clarifai.api.PostSearchesRequest
	234,  // 1037: clarifai.api.V2.PostSearchesByID:input_type -> clarifai.api.PostSearchesByIDRequest
	242,  // 1038: clarifai.api.V2.PostAnnotationSearchMetrics:input_type -> clarifai.api.PostAnnotationSearchMetricsRequest
	243,  // 1039: clarifai.api.V2.GetAnnotationSearchMetrics:input_type -> clarifai.api.GetAnnotationSearchMetricsRequest
	244,  // 1040: clarifai.api.V2.ListAnnotationSearchMetrics:input_type -> clarifai.api.ListAnnotationSearchMetricsRequest
	238,  // 1041: clarifai.api.V2.DeleteAnnotationSearchMetrics:input_type -> clarifai.api.DeleteAnnotationSearchMetricsRequest
	235,  // 1042: clarifai.api.V2.DeleteSearch:input_type -> clarifai.api.DeleteSearchRequest
	236,  // 1043: clarifai.api.V2.PostAttributeSearch:input_type -> clarifai.api.PostAttributeSearchRequest
	246,  // 1044: clarifai.api.V2.ListAnnotationFilters:input_type -> clarifai.api.ListAnnotationFiltersRequest
	247,  // 1045: clarifai.api.V2.GetAnnotationFilter:input_type -> clarifai.api.GetAnnotationFilterRequest
	248,  // 1046: clarifai.api.V2.PostAnnotationFilters:input_type -> clarifai.api.PostAnnotationFiltersRequest
	249,  // 1047: clarifai.api.V2.PatchAnnotationFilters:input_type -> clarifai.api.PatchAnnotationFiltersRequest
	250,  // 1048: clarifai.api.V2.DeleteAnnotationFilters:input_type -> clarifai.api.DeleteAnnotationFiltersRequest
	253,  // 1049: clarifai.api.V2.ListClusters:input_type -> clarifai.api.ListClustersRequest
	254,  // 1050: clarifai.api.V2.ListAnnotationsForCluster:input_type -> clarifai.api.ListAnnotationsForClusterRequest
	255,  // 1051: clarifai.api.V2.PostClustersSearches:input_type -> clarifai.api.PostClustersSearchesRequest
	31,   // 1052: clarifai.api.V2.PostVerifyEmail:input_type -> clarifai.api.PostVerifyEmailRequest
	54,   // 1053: clarifai.api.V2.PostRequestResetPassword:input_type -> clarifai.api.RequestResetPasswordRequest
	55,   // 1054: clarifai.api.V2.PostCompleteResetPassword:input_type -> clarifai.api.CompleteResetPasswordRequest
	56,   // 1055: clarifai.api.V2.PostLogin:input_type -> clarifai.api.PostLoginRequest
	57,   // 1056: clarifai.api.V2.PostSignup:input_type -> clarifai.api.PostSignupRequest
	60,   // 1057: clarifai.api.V2.PostLogout:input_type -> clarifai.api.PostLogoutRequest
	33,   // 1058: clarifai.api.V2.ListAuthMethods:input_type -> clarifai.api.ListAuthMethodsRequest
	33,   // 1059: clarifai.api.V2.ListOrgAuthMethods:input_type -> clarifai.api.ListAuthMethodsRequest
	38,   // 1060: clarifai.api.V2.PostIdLoginFinalizer:input_type -> clarifai.api.PostIdLoginFinalizerRequest
	34,   // 1061: clarifai.api.V2.PostLinkIdpUser:input_type -> clarifai.api.PostLinkIdpUserRequest
	35,   // 1062: clarifai.api.V2.GetLoginInfo:input_type -> clarifai.api.GetLoginInfoRequest
	41,   // 1063: clarifai.api.V2.ListAuth2FAMethods:input_type -> clarifai.api.List2FAMethodsRequest
	43,   // 1064: clarifai.api.V2.PostAuth2FATotpRegisterEnable:input_type -> clarifai.api.PostAuth2FATotpRegisterEnableRequest
	47,   // 1065: clarifai.api.V2.PostAuth2FATotpRegisterVerify:input_type -> clarifai.api.PostAuth2FATotpRegisterVerifyRequest
	45,   // 1066: clarifai.api.V2.PostAuth2FATotpDisable:input_type -> clarifai.api.PostAuth2FATotpDisableRequest
	49,   // 1067: clarifai.api.V2.PostAuth2FATotpLogin:input_type -> clarifai.api.PostAuth2FATotpLoginRequest
	50,   // 1068: clarifai.api.V2.PostAuth2FATotpRecover:input_type -> clarifai.api.PostAuth2FATotpRecoverRequest
	52,   // 1069: clarifai.api.V2.GetAuth2FATotpRecoverConfirm:input_type -> clarifai.api.GetAuth2FATotpRecoverConfirmRequest
	257,  // 1070: clarifai.api.V2.GetSubscription:input_type -> clarifai.api.GetSubscriptionRequest
	258,  // 1071: clarifai.api.V2.PostSubscription:input_type -> clarifai.api.PostSubscriptionRequest
	260,  // 1072: clarifai.api.V2.ListCreditCards:input_type -> clarifai.api.ListCreditCardsRequest
	262,  // 1073: clarifai.api.V2.PostCreditCard:input_type -> clarifai.api.PostCreditCardRequest
	264,  // 1074: clarifai.api.V2.DeleteCreditCard:input_type -> clarifai.api.DeleteCreditCardRequest
	265,  // 1075: clarifai.api.V2.PatchCreditCards:input_type -> clarifai.api.PatchCreditCardsRequest
	266,  // 1076: clarifai.api.V2.GetShippingAddress:input_type -> clarifai.api.GetShippingAddressRequest
	267,  // 1077: clarifai.api.V2.PutShippingAddress:input_type -> clarifai.api.PutShippingAddressRequest
	269,  // 1078: clarifai.api.V2.ListPlans:input_type -> clarifai.api.ListPlansRequest
	65,   // 1079: clarifai.api.V2.ListStatusCodes:input_type -> clarifai.api.ListStatusCodesRequest
	64,   // 1080: clarifai.api.V2.GetStatusCode:input_type -> clarifai.api.GetStatusCodeRequest
	103,  // 1081: clarifai.api.V2.GetHealthz:input_type -> clarifai.api.GetHealthzRequest
	279,  // 1082: clarifai.api.V2.ListUserBillingCycles:input_type -> clarifai.api.ListUserBillingCyclesRequest
	280,  // 1083: clarifai.api.V2.ListUserCycles:input_type -> clarifai.api.ListUserCyclesRequest
	62,   // 1084: clarifai.api.V2.GetBillingUsage:input_type -> clarifai.api.GetBillingUsageRequest
	273,  // 1085: clarifai.api.V2.PostHistoricalUsage:input_type -> clarifai.api.PostHistoricalUsageRequest
	271,  // 1086: clarifai.api.V2.GetHistoricalUsage:input_type -> clarifai.api.GetHistoricalUsageRequest
	277,  // 1087: clarifai.api.V2.ListUsageIntervals:input_type -> clarifai.api.ListUsageIntervalsRequest
	275,  // 1088: clarifai.api.V2.GetRealtimeUsage:input_type -> clarifai.api.GetRealtimeUsageRequest
	283,  // 1089: clarifai.api.V2.PostUsage:input_type -> clarifai.api.PostUsageRequest
	24,   // 1090: clarifai.api.V2.ListCollaborators:input_type -> clarifai.api.ListCollaboratorsRequest
	25,   // 1091: clarifai.api.V2.PostCollaborators:input_type -> clarifai.api.PostCollaboratorsRequest
	26,   // 1092: clarifai.api.V2.PatchCollaborators:input_type -> clarifai.api.PatchCollaboratorsRequest
	27,   // 1093: clarifai.api.V2.DeleteCollaborators:input_type -> clarifai.api.DeleteCollaboratorsRequest
	29,   // 1094: clarifai.api.V2.ListCollaborations:input_type -> clarifai.api.ListCollaborationsRequest
	159,  // 1095: clarifai.api.V2.FetchLicense:input_type -> clarifai.api.FetchLicenseRequest
	163,  // 1096: clarifai.api.V2.ListLicenses:input_type -> clarifai.api.ListLicensesRequest
	164,  // 1097: clarifai.api.V2.GetLicense:input_type -> clarifai.api.GetLicenseRequest
	161,  // 1098: clarifai.api.V2.ValidateLicense:input_type -> clarifai.api.ValidateLicenseRequest
	405,  // 1099: clarifai.api.V2.PostAppDuplications:input_type -> clarifai.api.PostAppDuplicationsRequest
	407,  // 1100: clarifai.api.V2.ListAppDuplications:input_type -> clarifai.api.ListAppDuplicationsRequest
	406,  // 1101: clarifai.api.V2.GetAppDuplication:input_type -> clarifai.api.GetAppDuplicationRequest
	410,  // 1102: clarifai.api.V2.PostTasks:input_type -> clarifai.api.PostTasksRequest
	417,  // 1103: clarifai.api.V2.GetTaskAnnotationCount:input_type -> clarifai.api.GetTaskCountRequest
	417,  // 1104: clarifai.api.V2.GetTaskInputCount:input_type -> clarifai.api.GetTaskCountRequest
	411,  // 1105: clarifai.api.V2.GetTask:input_type -> clarifai.api.GetTaskRequest
	412,  // 1106: clarifai.api.V2.ListTasks:input_type -> clarifai.api.ListTasksRequest
	413,  // 1107: clarifai.api.V2.PatchTasks:input_type -> clarifai.api.PatchTasksRequest
	414,  // 1108: clarifai.api.V2.DeleteTasks:input_type -> clarifai.api.DeleteTasksRequest
	419,  // 1109: clarifai.api.V2.PatchAnnotationCountsRollup:input_type -> clarifai.api.PatchAnnotationCountsRollupRequest
	420,  // 1110: clarifai.api.V2.PostLabelOrders:input_type -> clarifai.api.PostLabelOrdersRequest
	421,  // 1111: clarifai.api.V2.GetLabelOrder:input_type -> clarifai.api.GetLabelOrderRequest
	422,  // 1112: clarifai.api.V2.ListLabelOrders:input_type -> clarifai.api.ListLabelOrdersRequest
	423,  // 1113: clarifai.api.V2.PatchLabelOrders:input_type -> clarifai.api.PatchLabelOrdersRequest
	424,  // 1114: clarifai.api.V2.DeleteLabelOrders:input_type -> clarifai.api.DeleteLabelOrdersRequest
	427,  // 1115: clarifai.api.V2.PostCollectors:input_type -> clarifai.api.PostCollectorsRequest
	430,  // 1116: clarifai.api.V2.GetCollector:input_type -> clarifai.api.GetCollectorRequest
	431,  // 1117: clarifai.api.V2.ListCollectors:input_type -> clarifai.api.ListCollectorsRequest
	428,  // 1118: clarifai.api.V2.PatchCollectors:input_type -> clarifai.api.PatchCollectorsRequest
	429,  // 1119: clarifai.api.V2.DeleteCollectors:input_type -> clarifai.api.DeleteCollectorsRequest
	434,  // 1120: clarifai.api.V2.PostStatValues:input_type -> clarifai.api.PostStatValuesRequest
	436,  // 1121: clarifai.api.V2.PostStatValuesAggregate:input_type -> clarifai.api.PostStatValuesAggregateRequest
	438,  // 1122: clarifai.api.V2.PostAnalytics:input_type -> clarifai.api.PostAnalyticsRequest
	440,  // 1123: clarifai.api.V2.PostSDKBilling:input_type -> clarifai.api.PostSDKBillingRequest
	444,  // 1124: clarifai.api.V2.PostFindDuplicateAnnotationsJobs:input_type -> clarifai.api.PostFindDuplicateAnnotationsJobsRequest
	445,  // 1125: clarifai.api.V2.GetFindDuplicateAnnotationsJob:input_type -> clarifai.api.GetFindDuplicateAnnotationsJobRequest
	446,  // 1126: clarifai.api.V2.ListFindDuplicateAnnotationsJobs:input_type -> clarifai.api.ListFindDuplicateAnnotationsJobsRequest
	447,  // 1127: clarifai.api.V2.DeleteFindDuplicateAnnotationsJobs:input_type -> clarifai.api.DeleteFindDuplicateAnnotationsJobsRequest
	448,  // 1128: clarifai.api.V2.PostTrendingMetricsView:input_type -> clarifai.api.PostTrendingMetricsViewRequest
	449,  // 1129: clarifai.api.V2.ListTrendingMetricsViews:input_type -> clarifai.api.ListTrendingMetricsViewsRequest
	451,  // 1130: clarifai.api.V2.PostIdValidation:input_type -> clarifai.api.PostIdValidationRequest
	453,  // 1131: clarifai.api.V2.ListTagCategories:input_type -> clarifai.api.ListTagCategoriesRequest
	471,  // 1132: clarifai.api.V2.ListWebNotifications:input_type -> clarifai.api.ListWebNotificationsRequest
	472,  // 1133: clarifai.api.V2.GetWebNotification:input_type -> clarifai.api.GetWebNotificationRequest
	474,  // 1134: clarifai.api.V2.PatchWebNotifications:input_type -> clarifai.api.PatchWebNotificationsRequest
	473,  // 1135: clarifai.api.V2.DeleteWebNotifications:input_type -> clarifai.api.DeleteWebNotificationsRequest
	477,  // 1136: clarifai.api.V2.GetModule:input_type -> clarifai.api.GetModuleRequest
	478,  // 1137: clarifai.api.V2.ListModules:input_type -> clarifai.api.ListModulesRequest
	479,  // 1138: clarifai.api.V2.PostModules:input_type -> clarifai.api.PostModulesRequest
	480,  // 1139: clarifai.api.V2.PatchModules:input_type -> clarifai.api.PatchModulesRequest
	481,  // 1140: clarifai.api.V2.DeleteModules:input_type -> clarifai.api.DeleteModulesRequest
	484,  // 1141: clarifai.api.V2.GetModuleVersion:input_type -> clarifai.api.GetModuleVersionRequest
	485,  // 1142: clarifai.api.V2.ListModuleVersions:input_type -> clarifai.api.ListModuleVersionsRequest
	486,  // 1143: clarifai.api.V2.PostModuleVersions:input_type -> clarifai.api.PostModuleVersionsRequest
	487,  // 1144: clarifai.api.V2.DeleteModuleVersions:input_type -> clarifai.api.DeleteModuleVersionsRequest
	490,  // 1145: clarifai.api.V2.GetInstalledModuleVersion:input_type -> clarifai.api.GetInstalledModuleVersionRequest
	491,  // 1146: clarifai.api.V2.ListInstalledModuleVersions:input_type -> clarifai.api.ListInstalledModuleVersionsRequest
	492,  // 1147: clarifai.api.V2.PostInstalledModuleVersions:input_type -> clarifai.api.PostInstalledModuleVersionsRequest
	494,  // 1148: clarifai.api.V2.DeleteInstalledModuleVersions:input_type -> clarifai.api.DeleteInstalledModuleVersionsRequest
	493,  // 1149: clarifai.api.V2.PostInstalledModuleVersionsKey:input_type -> clarifai.api.PostInstalledModuleVersionsKeyRequest
	498,  // 1150: clarifai.api.V2.PostBulkOperations:input_type -> clarifai.api.PostBulkOperationsRequest
	499,  // 1151: clarifai.api.V2.ListBulkOperations:input_type -> clarifai.api.ListBulkOperationsRequest
	500,  // 1152: clarifai.api.V2.GetBulkOperation:input_type -> clarifai.api.GetBulkOperationRequest
	501,  // 1153: clarifai.api.V2.CancelBulkOperations:input_type -> clarifai.api.CancelBulkOperationRequest
	502,  // 1154: clarifai.api.V2.DeleteBulkOperations:input_type -> clarifai.api.DeleteBulkOperationRequest
	147,  // 1155: clarifai.api.V2.GetDatasetInputsSearchAddJob:input_type -> clarifai.api.GetDatasetInputsSearchAddJobRequest
	497,  // 1156: clarifai.api.V2.ListNextTaskAssignments:input_type -> clarifai.api.ListNextTaskAssignmentsRequest
	505,  // 1157: clarifai.api.V2.PutTaskAssignments:input_type -> clarifai.api.PutTaskAssignmentsRequest
	506,  // 1158: clarifai.api.V2.PostWaitlistEmails:input_type -> clarifai.api.PostWaitlistEmailsRequest
	508,  // 1159: clarifai.api.V2.GetSampledPredictMetrics:input_type -> clarifai.api.GetSampledPredictMetricsRequest
	511,  // 1160: clarifai.api.V2.PostInputsAddJobs:input_type -> clarifai.api.PostInputsAddJobsRequest
	512,  // 1161: clarifai.api.V2.ListInputsAddJobs:input_type -> clarifai.api.ListInputsAddJobsRequest
	513,  // 1162: clarifai.api.V2.GetInputsAddJob:input_type -> clarifai.api.GetInputsAddJobRequest
	514,  // 1163: clarifai.api.V2.CancelInputsAddJob:input_type -> clarifai.api.CancelInputsAddJobRequest
	517,  // 1164: clarifai.api.V2.PostUploads:input_type -> clarifai.api.PostUploadsRequest
	523,  // 1165: clarifai.api.V2.PutUploadContentParts:input_type -> clarifai.api.PutUploadContentPartsRequest
	520,  // 1166: clarifai.api.V2.GetUpload:input_type -> clarifai.api.GetUploadRequest
	519,  // 1167: clarifai.api.V2.ListUploads:input_type -> clarifai.api.ListUploadsRequest
	518,  // 1168: clarifai.api.V2.DeleteUploads:input_type -> clarifai.api.DeleteUploadsRequest
	1,    // 1169: clarifai.api.V2.Echo:output_type -> clarifai.api.TestMessage
	87,   // 1170: clarifai.api.V2.ListConceptRelations:output_type -> clarifai.api.MultiConceptRelationResponse
	87,   // 1171: clarifai.api.V2.PostConceptRelations:output_type -> clarifai.api.MultiConceptRelationResponse
	659,  // 1172: clarifai.api.V2.DeleteConceptRelations:output_type -> clarifai.api.status.BaseResponse
	77,   // 1173: clarifai.api.V2.GetConceptCounts:output_type -> clarifai.api.MultiConceptCountResponse
	75,   // 1174: clarifai.api.V2.GetConcept:output_type -> clarifai.api.SingleConceptResponse
	76,   // 1175: clarifai.api.V2.ListConcepts:output_type -> clarifai.api.MultiConceptResponse
	76,   // 1176: clarifai.api.V2.ListModelConcepts:output_type -> clarifai.api.MultiConceptResponse
	76,   // 1177: clarifai.api.V2.PostConceptsSearches:output_type -> clarifai.api.MultiConceptResponse
	76,   // 1178: clarifai.api.V2.PostConcepts:output_type -> clarifai.api.MultiConceptResponse
	76,   // 1179: clarifai.api.V2.PatchConcepts:output_type -> clarifai.api.MultiConceptResponse
	375,  // 1180: clarifai.api.V2.GetVocab:output_type -> clarifai.api.SingleVocabResponse
	376,  // 1181: clarifai.api.V2.ListVocabs:output_type -> clarifai.api.MultiVocabResponse
	376,  // 1182: clarifai.api.V2.PostVocabs:output_type -> clarifai.api.MultiVocabResponse
	376,  // 1183: clarifai.api.V2.PatchVocabs:output_type -> clarifai.api.MultiVocabResponse
	659,  // 1184: clarifai.api.V2.DeleteVocab:output_type -> clarifai.api.status.BaseResponse
	659,  // 1185: clarifai.api.V2.DeleteVocabs:output_type -> clarifai.api.status.BaseResponse
	76,   // 1186: clarifai.api.V2.ListVocabConcepts:output_type -> clarifai.api.MultiConceptResponse
	76,   // 1187: clarifai.api.V2.PostVocabConcepts:output_type -> clarifai.api.MultiConceptResponse
	659,  // 1188: clarifai.api.V2.DeleteVocabConcept:output_type -> clarifai.api.status.BaseResponse
	659,  // 1189: clarifai.api.V2.DeleteVocabConcepts:output_type -> clarifai.api.status.BaseResponse
	98,   // 1190: clarifai.api.V2.GetConceptLanguage:output_type -> clarifai.api.SingleConceptLanguageResponse
	99,   // 1191: clarifai.api.V2.ListConceptLanguages:output_type -> clarifai.api.MultiConceptLanguageResponse
	99,   // 1192: clarifai.api.V2.PostConceptLanguages:output_type -> clarifai.api.MultiConceptLanguageResponse
	99,   // 1193: clarifai.api.V2.PatchConceptLanguages:output_type -> clarifai.api.MultiConceptLanguageResponse
	102,  // 1194: clarifai.api.V2.ListConceptReferences:output_type -> clarifai.api.MultiConceptReferenceResponse
	89,   // 1195: clarifai.api.V2.ListKnowledgeGraphs:output_type -> clarifai.api.MultiKnowledgeGraphResponse
	89,   // 1196: clarifai.api.V2.PostKnowledgeGraphs:output_type -> clarifai.api.MultiKnowledgeGraphResponse
	93,   // 1197: clarifai.api.V2.PostConceptMappingJobs:output_type -> clarifai.api.MultiConceptMappingJobResponse
	91,   // 1198: clarifai.api.V2.ListConceptMappings:output_type -> clarifai.api.MultiConceptMappingResponse
	91,   // 1199: clarifai.api.V2.PostConceptMappings:output_type -> clarifai.api.MultiConceptMappingResponse
	11,   // 1200: clarifai.api.V2.GetAnnotation:output_type -> clarifai.api.SingleAnnotationResponse
	12,   // 1201: clarifai.api.V2.ListAnnotations:output_type -> clarifai.api.MultiAnnotationResponse
	12,   // 1202: clarifai.api.V2.PostAnnotations:output_type -> clarifai.api.MultiAnnotationResponse
	12,   // 1203: clarifai.api.V2.PatchAnnotations:output_type -> clarifai.api.MultiAnnotationResponse
	8,    // 1204: clarifai.api.V2.PatchAnnotationsStatus:output_type -> clarifai.api.PatchAnnotationsStatusResponse
	659,  // 1205: clarifai.api.V2.DeleteAnnotation:output_type -> clarifai.api.status.BaseResponse
	659,  // 1206: clarifai.api.V2.DeleteAnnotations:output_type -> clarifai.api.status.BaseResponse
	241,  // 1207: clarifai.api.V2.PatchAnnotationsSearches:output_type -> clarifai.api.MultiSearchResponse
	241,  // 1208: clarifai.api.V2.PostAnnotationsSearches:output_type -> clarifai.api.MultiSearchResponse
	120,  // 1209: clarifai.api.V2.GetInputCount:output_type -> clarifai.api.SingleInputCountResponse
	118,  // 1210: clarifai.api.V2.StreamInputs:output_type -> clarifai.api.MultiInputResponse
	119,  // 1211: clarifai.api.V2.GetInputSamples:output_type -> clarifai.api.MultiInputAnnotationResponse
	117,  // 1212: clarifai.api.V2.GetInput:output_type -> clarifai.api.SingleInputResponse
	118,  // 1213: clarifai.api.V2.ListInputs:output_type -> clarifai.api.MultiInputResponse
	118,  // 1214: clarifai.api.V2.PostInputs:output_type -> clarifai.api.MultiInputResponse
	118,  // 1215: clarifai.api.V2.PostInputsFile:output_type -> clarifai.api.MultiInputResponse
	118,  // 1216: clarifai.api.V2.PostInputsNiFi:output_type -> clarifai.api.MultiInputResponse
	118,  // 1217: clarifai.api.V2.PostInputsDocument:output_type -> clarifai.api.MultiInputResponse
	118,  // 1218: clarifai.api.V2.PatchInputs:output_type -> clarifai.api.MultiInputResponse
	659,  // 1219: clarifai.api.V2.DeleteInput:output_type -> clarifai.api.status.BaseResponse
	659,  // 1220: clarifai.api.V2.DeleteInputs:output_type -> clarifai.api.status.BaseResponse
	241,  // 1221: clarifai.api.V2.PatchInputsSearches:output_type -> clarifai.api.MultiSearchResponse
	241,  // 1222: clarifai.api.V2.PostInputsSearches:output_type -> clarifai.api.MultiSearchResponse
	219,  // 1223: clarifai.api.V2.PostModelOutputs:output_type -> clarifai.api.MultiOutputResponse
	128,  // 1224: clarifai.api.V2.ListDatasets:output_type -> clarifai.api.MultiDatasetResponse
	129,  // 1225: clarifai.api.V2.GetDataset:output_type -> clarifai.api.SingleDatasetResponse
	128,  // 1226: clarifai.api.V2.PostDatasets:output_type -> clarifai.api.MultiDatasetResponse
	128,  // 1227: clarifai.api.V2.PatchDatasets:output_type -> clarifai.api.MultiDatasetResponse
	128,  // 1228: clarifai.api.V2.PatchDatasetIds:output_type -> clarifai.api.MultiDatasetResponse
	659,  // 1229: clarifai.api.V2.DeleteDatasets:output_type -> clarifai.api.status.BaseResponse
	134,  // 1230: clarifai.api.V2.ListDatasetInputs:output_type -> clarifai.api.MultiDatasetInputResponse
	135,  // 1231: clarifai.api.V2.GetDatasetInput:output_type -> clarifai.api.SingleDatasetInputResponse
	134,  // 1232: clarifai.api.V2.PostDatasetInputs:output_type -> clarifai.api.MultiDatasetInputResponse
	659,  // 1233: clarifai.api.V2.DeleteDatasetInputs:output_type -> clarifai.api.status.BaseResponse
	143,  // 1234: clarifai.api.V2.ListDatasetVersions:output_type -> clarifai.api.MultiDatasetVersionResponse
	146,  // 1235: clarifai.api.V2.GetDatasetVersion:output_type -> clarifai.api.SingleDatasetVersionResponse
	145,  // 1236: clarifai.api.V2.ListDatasetVersionMetricsGroups:output_type -> clarifai.api.MultiDatasetVersionMetricsGroupResponse
	143,  // 1237: clarifai.api.V2.PostDatasetVersions:output_type -> clarifai.api.MultiDatasetVersionResponse
	143,  // 1238: clarifai.api.V2.PatchDatasetVersions:output_type -> clarifai.api.MultiDatasetVersionResponse
	659,  // 1239: clarifai.api.V2.DeleteDatasetVersions:output_type -> clarifai.api.status.BaseResponse
	144,  // 1240: clarifai.api.V2.PutDatasetVersionExports:output_type -> clarifai.api.MultiDatasetVersionExportResponse
	207,  // 1241: clarifai.api.V2.GetModelType:output_type -> clarifai.api.SingleModelTypeResponse
	206,  // 1242: clarifai.api.V2.ListOpenSourceLicenses:output_type -> clarifai.api.ListOpenSourceLicensesResponse
	208,  // 1243: clarifai.api.V2.ListModelTypes:output_type -> clarifai.api.MultiModelTypeResponse
	184,  // 1244: clarifai.api.V2.GetModel:output_type -> clarifai.api.SingleModelResponse
	184,  // 1245: clarifai.api.V2.GetModelOutputInfo:output_type -> clarifai.api.SingleModelResponse
	185,  // 1246: clarifai.api.V2.ListModels:output_type -> clarifai.api.MultiModelResponse
	185,  // 1247: clarifai.api.V2.PostModelsSearches:output_type -> clarifai.api.MultiModelResponse
	184,  // 1248: clarifai.api.V2.PostModels:output_type -> clarifai.api.SingleModelResponse
	185,  // 1249: clarifai.api.V2.PatchModels:output_type -> clarifai.api.MultiModelResponse
	185,  // 1250: clarifai.api.V2.PatchModelIds:output_type -> clarifai.api.MultiModelResponse
	659,  // 1251: clarifai.api.V2.DeleteModel:output_type -> clarifai.api.status.BaseResponse
	659,  // 1252: clarifai.api.V2.DeleteModels:output_type -> clarifai.api.status.BaseResponse
	174,  // 1253: clarifai.api.V2.PatchModelCheckConsents:output_type -> clarifai.api.MultiModelCheckConsentResponse
	173,  // 1254: clarifai.api.V2.PatchModelToolkits:output_type -> clarifai.api.MultiModelToolkitResponse
	175,  // 1255: clarifai.api.V2.PatchModelUseCases:output_type -> clarifai.api.MultiModelUseCaseResponse
	176,  // 1256: clarifai.api.V2.PatchModelLanguages:output_type -> clarifai.api.MultiModelLanguageResponse
	118,  // 1257: clarifai.api.V2.ListModelInputs:output_type -> clarifai.api.MultiInputResponse
	190,  // 1258: clarifai.api.V2.GetModelVersion:output_type -> clarifai.api.SingleModelVersionResponse
	191,  // 1259: clarifai.api.V2.ListModelVersions:output_type -> clarifai.api.MultiModelVersionResponse
	659,  // 1260: clarifai.api.V2.PostWorkflowVersionsUnPublish:output_type -> clarifai.api.status.BaseResponse
	659,  // 1261: clarifai.api.V2.PostWorkflowVersionsPublish:output_type -> clarifai.api.status.BaseResponse
	659,  // 1262: clarifai.api.V2.PostModelVersionsPublish:output_type -> clarifai.api.status.BaseResponse
	659,  // 1263: clarifai.api.V2.PostModelVersionsUnPublish:output_type -> clarifai.api.status.BaseResponse
	184,  // 1264: clarifai.api.V2.PostModelVersions:output_type -> clarifai.api.SingleModelResponse
	191,  // 1265: clarifai.api.V2.PatchModelVersions:output_type -> clarifai.api.MultiModelVersionResponse
	659,  // 1266: clarifai.api.V2.DeleteModelVersion:output_type -> clarifai.api.status.BaseResponse
	190,  // 1267: clarifai.api.V2.GetModelVersionMetrics:output_type -> clarifai.api.SingleModelVersionResponse
	190,  // 1268: clarifai.api.V2.PostModelVersionMetrics:output_type -> clarifai.api.SingleModelVersionResponse
	218,  // 1269: clarifai.api.V2.ListModelReferences:output_type -> clarifai.api.MultiModelReferenceResponse
	218,  // 1270: clarifai.api.V2.PostModelReferences:output_type -> clarifai.api.MultiModelReferenceResponse
	659,  // 1271: clarifai.api.V2.DeleteModelReferences:output_type -> clarifai.api.status.BaseResponse
	213,  // 1272: clarifai.api.V2.GetModelVersionInputExample:output_type -> clarifai.api.SingleModelVersionInputExampleResponse
	214,  // 1273: clarifai.api.V2.ListModelVersionInputExamples:output_type -> clarifai.api.MultiModelVersionInputExampleResponse
	214,  // 1274: clarifai.api.V2.PostModelVersionInputExamples:output_type -> clarifai.api.MultiModelVersionInputExampleResponse
	659,  // 1275: clarifai.api.V2.DeleteModelVersionInputExamples:output_type -> clarifai.api.status.BaseResponse
	456,  // 1276: clarifai.api.V2.PostModelStars:output_type -> clarifai.api.MultiModelStarResponse
	458,  // 1277: clarifai.api.V2.DeleteModelStars:output_type -> clarifai.api.DeleteModelStarsResponse
	460,  // 1278: clarifai.api.V2.PostUserStars:output_type -> clarifai.api.MultiUserStarResponse
	462,  // 1279: clarifai.api.V2.DeleteUserStars:output_type -> clarifai.api.DeleteUserStarsResponse
	468,  // 1280: clarifai.api.V2.PostWorkflowStars:output_type -> clarifai.api.MultiWorkflowStarResponse
	470,  // 1281: clarifai.api.V2.DeleteWorkflowStars:output_type -> clarifai.api.DeleteWorkflowStarsResponse
	464,  // 1282: clarifai.api.V2.PostAppStars:output_type -> clarifai.api.MultiAppStarResponse
	466,  // 1283: clarifai.api.V2.DeleteAppStars:output_type -> clarifai.api.DeleteAppStarsResponse
	385,  // 1284: clarifai.api.V2.GetWorkflow:output_type -> clarifai.api.SingleWorkflowResponse
	386,  // 1285: clarifai.api.V2.ListWorkflows:output_type -> clarifai.api.MultiWorkflowResponse
	386,  // 1286: clarifai.api.V2.ListPublicWorkflows:output_type -> clarifai.api.MultiWorkflowResponse
	386,  // 1287: clarifai.api.V2.PostWorkflows:output_type -> clarifai.api.MultiWorkflowResponse
	386,  // 1288: clarifai.api.V2.PatchWorkflows:output_type -> clarifai.api.MultiWorkflowResponse
	386,  // 1289: clarifai.api.V2.PatchWorkflowIds:output_type -> clarifai.api.MultiWorkflowResponse
	659,  // 1290: clarifai.api.V2.DeleteWorkflow:output_type -> clarifai.api.status.BaseResponse
	659,  // 1291: clarifai.api.V2.DeleteWorkflows:output_type -> clarifai.api.status.BaseResponse
	388,  // 1292: clarifai.api.V2.PostWorkflowResults:output_type -> clarifai.api.PostWorkflowResultsResponse
	390,  // 1293: clarifai.api.V2.PostWorkflowResultsSimilarity:output_type -> clarifai.api.PostWorkflowResultsSimilarityResponse
	395,  // 1294: clarifai.api.V2.ListWorkflowVersions:output_type -> clarifai.api.MultiWorkflowVersionResponse
	396,  // 1295: clarifai.api.V2.GetWorkflowVersion:output_type -> clarifai.api.SingleWorkflowVersionResponse
	659,  // 1296: clarifai.api.V2.DeleteWorkflowVersions:output_type -> clarifai.api.status.BaseResponse
	395,  // 1297: clarifai.api.V2.PatchWorkflowVersions:output_type -> clarifai.api.MultiWorkflowVersionResponse
	404,  // 1298: clarifai.api.V2.PostWorkflowMetrics:output_type -> clarifai.api.MultiWorkflowMetricsResponse
	402,  // 1299: clarifai.api.V2.GetWorkflowMetrics:output_type -> clarifai.api.SingleWorkflowMetricsResponse
	403,  // 1300: clarifai.api.V2.GetWorkflowNodeMetrics:output_type -> clarifai.api.SingleWorkflowNodeMetricsResponse
	404,  // 1301: clarifai.api.V2.ListWorkflowMetrics:output_type -> clarifai.api.MultiWorkflowMetricsResponse
	659,  // 1302: clarifai.api.V2.DeleteWorkflowMetrics:output_type -> clarifai.api.status.BaseResponse
	157,  // 1303: clarifai.api.V2.GetKey:output_type -> clarifai.api.SingleKeyResponse
	158,  // 1304: clarifai.api.V2.ListKeys:output_type -> clarifai.api.MultiKeyResponse
	158,  // 1305: clarifai.api.V2.ListAppKeys:output_type -> clarifai.api.MultiKeyResponse
	659,  // 1306: clarifai.api.V2.DeleteKey:output_type -> clarifai.api.status.BaseResponse
	158,  // 1307: clarifai.api.V2.PostKeys:output_type -> clarifai.api.MultiKeyResponse
	158,  // 1308: clarifai.api.V2.PatchKeys:output_type -> clarifai.api.MultiKeyResponse
	225,  // 1309: clarifai.api.V2.MyScopes:output_type -> clarifai.api.MultiScopeResponse
	226,  // 1310: clarifai.api.V2.MyScopesUser:output_type -> clarifai.api.MultiScopeUserResponse
	227,  // 1311: clarifai.api.V2.MyScopesRoot:output_type -> clarifai.api.MultiScopeRootResponse
	224,  // 1312: clarifai.api.V2.ListScopes:output_type -> clarifai.api.MultiScopeDepsResponse
	22,   // 1313: clarifai.api.V2.GetApp:output_type -> clarifai.api.SingleAppResponse
	23,   // 1314: clarifai.api.V2.ListApps:output_type -> clarifai.api.MultiAppResponse
	659,  // 1315: clarifai.api.V2.DeleteApp:output_type -> clarifai.api.status.BaseResponse
	23,   // 1316: clarifai.api.V2.PostApps:output_type -> clarifai.api.MultiAppResponse
	23,   // 1317: clarifai.api.V2.PatchApps:output_type -> clarifai.api.MultiAppResponse
	23,   // 1318: clarifai.api.V2.PatchAppsIds:output_type -> clarifai.api.MultiAppResponse
	22,   // 1319: clarifai.api.V2.PatchApp:output_type -> clarifai.api.SingleAppResponse
	659,  // 1320: clarifai.api.V2.PatchAppOwner:output_type -> clarifai.api.status.BaseResponse
	23,   // 1321: clarifai.api.V2.PostAppsSearches:output_type -> clarifai.api.MultiAppResponse
	288,  // 1322: clarifai.api.V2.GetUser:output_type -> clarifai.api.SingleUserResponse
	289,  // 1323: clarifai.api.V2.ListUsers:output_type -> clarifai.api.MultiUserResponse
	288,  // 1324: clarifai.api.V2.PostUserConsent:output_type -> clarifai.api.SingleUserResponse
	288,  // 1325: clarifai.api.V2.PatchUser:output_type -> clarifai.api.SingleUserResponse
	293,  // 1326: clarifai.api.V2.PostUserAccess:output_type -> clarifai.api.MultiUserAccessResponse
	294,  // 1327: clarifai.api.V2.GetUserAccess:output_type -> clarifai.api.SingleUserAccessResponse
	297,  // 1328: clarifai.api.V2.PostEmails:output_type -> clarifai.api.MultipleEmailResponse
	297,  // 1329: clarifai.api.V2.ListEmails:output_type -> clarifai.api.MultipleEmailResponse
	300,  // 1330: clarifai.api.V2.PostResendVerifyEmail:output_type -> clarifai.api.SingleResendVerifyResponse
	659,  // 1331: clarifai.api.V2.DeleteEmail:output_type -> clarifai.api.status.BaseResponse
	296,  // 1332: clarifai.api.V2.PostPrimaryEmail:output_type -> clarifai.api.SingleEmailResponse
	304,  // 1333: clarifai.api.V2.PostValidatePassword:output_type -> clarifai.api.SinglePasswordValidationResponse
	310,  // 1334: clarifai.api.V2.ListGlobalPasswordPolicies:output_type -> clarifai.api.MultiplePasswordPoliciesResponse
	310,  // 1335: clarifai.api.V2.ListPasswordPolicies:output_type -> clarifai.api.MultiplePasswordPoliciesResponse
	310,  // 1336: clarifai.api.V2.PostPasswordPolicies:output_type -> clarifai.api.MultiplePasswordPoliciesResponse
	310,  // 1337: clarifai.api.V2.PatchPasswordPolicies:output_type -> clarifai.api.MultiplePasswordPoliciesResponse
	659,  // 1338: clarifai.api.V2.DeletePasswordPolicies:output_type -> clarifai.api.status.BaseResponse
	312,  // 1339: clarifai.api.V2.GetUserFeatureConfig:output_type -> clarifai.api.SingleUserFeatureConfigResponse
	323,  // 1340: clarifai.api.V2.PostOrganizations:output_type -> clarifai.api.MultiOrganizationResponse
	324,  // 1341: clarifai.api.V2.ListUsersOrganizations:output_type -> clarifai.api.MultiUsersOrganizationsResponse
	323,  // 1342: clarifai.api.V2.ListOrganizations:output_type -> clarifai.api.MultiOrganizationResponse
	322,  // 1343: clarifai.api.V2.GetOrganization:output_type -> clarifai.api.SingleOrganizationResponse
	322,  // 1344: clarifai.api.V2.PatchOrganization:output_type -> clarifai.api.SingleOrganizationResponse
	659,  // 1345: clarifai.api.V2.DeleteOrganization:output_type -> clarifai.api.status.BaseResponse
	337,  // 1346: clarifai.api.V2.ListOrganizationMembers:output_type -> clarifai.api.MultiOrganizationMemberResponse
	337,  // 1347: clarifai.api.V2.ListOrganizationAppMembers:output_type -> clarifai.api.MultiOrganizationMemberResponse
	659,  // 1348: clarifai.api.V2.PostOrganizationMember:output_type -> clarifai.api.status.BaseResponse
	659,  // 1349: clarifai.api.V2.PatchOrganizationMember:output_type -> clarifai.api.status.BaseResponse
	659,  // 1350: clarifai.api.V2.DeleteOrganizationMember:output_type -> clarifai.api.status.BaseResponse
	333,  // 1351: clarifai.api.V2.PostOrganizationInvitations:output_type -> clarifai.api.MultiOrganizationInvitationResponse
	333,  // 1352: clarifai.api.V2.PatchOrganizationInvitations:output_type -> clarifai.api.MultiOrganizationInvitationResponse
	333,  // 1353: clarifai.api.V2.ListOrganizationInvitations:output_type -> clarifai.api.MultiOrganizationInvitationResponse
	332,  // 1354: clarifai.api.V2.GetOrganizationInvitation:output_type -> clarifai.api.SingleOrganizationInvitationResponse
	659,  // 1355: clarifai.api.V2.PostDeclineOrganizationInvitation:output_type -> clarifai.api.status.BaseResponse
	659,  // 1356: clarifai.api.V2.PostAcceptOrganizationInvitation:output_type -> clarifai.api.status.BaseResponse
	332,  // 1357: clarifai.api.V2.GetOrganizationInvitationPublic:output_type -> clarifai.api.SingleOrganizationInvitationResponse
	659,  // 1358: clarifai.api.V2.DeleteRequestingUserFromOrganization:output_type -> clarifai.api.status.BaseResponse
	344,  // 1359: clarifai.api.V2.PostIdentityProviders:output_type -> clarifai.api.MultiIdentityProviderResponse
	344,  // 1360: clarifai.api.V2.ListIdentityProviders:output_type -> clarifai.api.MultiIdentityProviderResponse
	343,  // 1361: clarifai.api.V2.GetIdentityProvider:output_type -> clarifai.api.SingleIdentityProviderResponse
	344,  // 1362: clarifai.api.V2.PatchIdentityProviders:output_type -> clarifai.api.MultiIdentityProviderResponse
	659,  // 1363: clarifai.api.V2.DeleteIdentityProviders:output_type -> clarifai.api.status.BaseResponse
	351,  // 1364: clarifai.api.V2.PostTeams:output_type -> clarifai.api.MultiTeamResponse
	351,  // 1365: clarifai.api.V2.ListTeams:output_type -> clarifai.api.MultiTeamResponse
	350,  // 1366: clarifai.api.V2.GetTeam:output_type -> clarifai.api.SingleTeamResponse
	351,  // 1367: clarifai.api.V2.PatchTeams:output_type -> clarifai.api.MultiTeamResponse
	659,  // 1368: clarifai.api.V2.DeleteTeams:output_type -> clarifai.api.status.BaseResponse
	360,  // 1369: clarifai.api.V2.PostTeamUsers:output_type -> clarifai.api.MultiTeamUserResponse
	360,  // 1370: clarifai.api.V2.ListTeamUsers:output_type -> clarifai.api.MultiTeamUserResponse
	659,  // 1371: clarifai.api.V2.DeleteTeamUsers:output_type -> clarifai.api.status.BaseResponse
	659,  // 1372: clarifai.api.V2.PostTeamApps:output_type -> clarifai.api.status.BaseResponse
	356,  // 1373: clarifai.api.V2.ListTeamApps:output_type -> clarifai.api.MultiTeamAppsResponse
	659,  // 1374: clarifai.api.V2.DeleteTeamApps:output_type -> clarifai.api.status.BaseResponse
	364,  // 1375: clarifai.api.V2.ListRoles:output_type -> clarifai.api.MultiRoleResponse
	363,  // 1376: clarifai.api.V2.GetRole:output_type -> clarifai.api.SingleRoleResponse
	240,  // 1377: clarifai.api.V2.GetSearch:output_type -> clarifai.api.SingleSearchResponse
	241,  // 1378: clarifai.api.V2.ListSearches:output_type -> clarifai.api.MultiSearchResponse
	241,  // 1379: clarifai.api.V2.PatchSearches:output_type -> clarifai.api.MultiSearchResponse
	241,  // 1380: clarifai.api.V2.PostSearches:output_type -> clarifai.api.MultiSearchResponse
	241,  // 1381: clarifai.api.V2.PostSearchesByID:output_type -> clarifai.api.MultiSearchResponse
	245,  // 1382: clarifai.api.V2.PostAnnotationSearchMetrics:output_type -> clarifai.api.MultiAnnotationSearchMetricsResponse
	245,  // 1383: clarifai.api.V2.GetAnnotationSearchMetrics:output_type -> clarifai.api.MultiAnnotationSearchMetricsResponse
	245,  // 1384: clarifai.api.V2.ListAnnotationSearchMetrics:output_type -> clarifai.api.MultiAnnotationSearchMetricsResponse
	659,  // 1385: clarifai.api.V2.DeleteAnnotationSearchMetrics:output_type -> clarifai.api.status.BaseResponse
	659,  // 1386: clarifai.api.V2.DeleteSearch:output_type -> clarifai.api.status.BaseResponse
	241,  // 1387: clarifai.api.V2.PostAttributeSearch:output_type -> clarifai.api.MultiSearchResponse
	251,  // 1388: clarifai.api.V2.ListAnnotationFilters:output_type -> clarifai.api.MultiAnnotationFilterResponse
	252,  // 1389: clarifai.api.V2.GetAnnotationFilter:output_type -> clarifai.api.SingleAnnotationFilterResponse
	251,  // 1390: clarifai.api.V2.PostAnnotationFilters:output_type -> clarifai.api.MultiAnnotationFilterResponse
	251,  // 1391: clarifai.api.V2.PatchAnnotationFilters:output_type -> clarifai.api.MultiAnnotationFilterResponse
	659,  // 1392: clarifai.api.V2.DeleteAnnotationFilters:output_type -> clarifai.api.status.BaseResponse
	256,  // 1393: clarifai.api.V2.ListClusters:output_type -> clarifai.api.MultiClusterResponse
	12,   // 1394: clarifai.api.V2.ListAnnotationsForCluster:output_type -> clarifai.api.MultiAnnotationResponse
	256,  // 1395: clarifai.api.V2.PostClustersSearches:output_type -> clarifai.api.MultiClusterResponse
	32,   // 1396: clarifai.api.V2.PostVerifyEmail:output_type -> clarifai.api.SingleVerifyEmailResponse
	659,  // 1397: clarifai.api.V2.PostRequestResetPassword:output_type -> clarifai.api.status.BaseResponse
	659,  // 1398: clarifai.api.V2.PostCompleteResetPassword:output_type -> clarifai.api.status.BaseResponse
	59,   // 1399: clarifai.api.V2.PostLogin:output_type -> clarifai.api.SingleLoginResponse
	59,   // 1400: clarifai.api.V2.PostSignup:output_type -> clarifai.api.SingleLoginResponse
	61,   // 1401: clarifai.api.V2.PostLogout:output_type -> clarifai.api.SingleLogoutResponse
	40,   // 1402: clarifai.api.V2.ListAuthMethods:output_type -> clarifai.api.ListAuthMethodsResponse
	40,   // 1403: clarifai.api.V2.ListOrgAuthMethods:output_type -> clarifai.api.ListAuthMethodsResponse
	39,   // 1404: clarifai.api.V2.PostIdLoginFinalizer:output_type -> clarifai.api.PostIdLoginFinalizerResponse
	37,   // 1405: clarifai.api.V2.PostLinkIdpUser:output_type -> clarifai.api.PostLinkIdpUserResponse
	36,   // 1406: clarifai.api.V2.GetLoginInfo:output_type -> clarifai.api.GetLoginInfoResponse
	42,   // 1407: clarifai.api.V2.ListAuth2FAMethods:output_type -> clarifai.api.List2FAMethodsResponse
	44,   // 1408: clarifai.api.V2.PostAuth2FATotpRegisterEnable:output_type -> clarifai.api.PostAuth2FATotpRegisterEnableResponse
	48,   // 1409: clarifai.api.V2.PostAuth2FATotpRegisterVerify:output_type -> clarifai.api.PostAuth2FATotpRegisterVerifyResponse
	46,   // 1410: clarifai.api.V2.PostAuth2FATotpDisable:output_type -> clarifai.api.PostAuth2FATotpDisableResponse
	59,   // 1411: clarifai.api.V2.PostAuth2FATotpLogin:output_type -> clarifai.api.SingleLoginResponse
	51,   // 1412: clarifai.api.V2.PostAuth2FATotpRecover:output_type -> clarifai.api.PostAuth2FATotpRecoverResponse
	53,   // 1413: clarifai.api.V2.GetAuth2FATotpRecoverConfirm:output_type -> clarifai.api.GetAuth2FATotpRecoverConfirmResponse
	259,  // 1414: clarifai.api.V2.GetSubscription:output_type -> clarifai.api.SingleSubscriptionResponse
	259,  // 1415: clarifai.api.V2.PostSubscription:output_type -> clarifai.api.SingleSubscriptionResponse
	261,  // 1416: clarifai.api.V2.ListCreditCards:output_type -> clarifai.api.MultipleCreditCardResponse
	263,  // 1417: clarifai.api.V2.PostCreditCard:output_type -> clarifai.api.SingleCreditCardResponse
	659,  // 1418: clarifai.api.V2.DeleteCreditCard:output_type -> clarifai.api.status.BaseResponse
	261,  // 1419: clarifai.api.V2.PatchCreditCards:output_type -> clarifai.api.MultipleCreditCardResponse
	268,  // 1420: clarifai.api.V2.GetShippingAddress:output_type -> clarifai.api.SingleShippingAddressResponse
	268,  // 1421: clarifai.api.V2.PutShippingAddress:output_type -> clarifai.api.SingleShippingAddressResponse
	270,  // 1422: clarifai.api.V2.ListPlans:output_type -> clarifai.api.MultiPlanResponse
	67,   // 1423: clarifai.api.V2.ListStatusCodes:output_type -> clarifai.api.MultiStatusCodeResponse
	66,   // 1424: clarifai.api.V2.GetStatusCode:output_type -> clarifai.api.SingleStatusCodeResponse
	104,  // 1425: clarifai.api.V2.GetHealthz:output_type -> clarifai.api.GetHealthzResponse
	281,  // 1426: clarifai.api.V2.ListUserBillingCycles:output_type -> clarifai.api.ListUserBillingCyclesResponse
	282,  // 1427: clarifai.api.V2.ListUserCycles:output_type -> clarifai.api.ListUserCyclesResponse
	63,   // 1428: clarifai.api.V2.GetBillingUsage:output_type -> clarifai.api.GetBillingUsageResponse
	274,  // 1429: clarifai.api.V2.PostHistoricalUsage:output_type -> clarifai.api.PostHistoricalUsageResponse
	272,  // 1430: clarifai.api.V2.GetHistoricalUsage:output_type -> clarifai.api.GetHistoricalUsageResponse
	278,  // 1431: clarifai.api.V2.ListUsageIntervals:output_type -> clarifai.api.ListUsageIntervalsResponse
	276,  // 1432: clarifai.api.V2.GetRealtimeUsage:output_type -> clarifai.api.GetRealtimeUsageResponse
	284,  // 1433: clarifai.api.V2.PostUsage:output_type -> clarifai.api.PostUsageResponse
	28,   // 1434: clarifai.api.V2.ListCollaborators:output_type -> clarifai.api.MultiCollaboratorsResponse
	28,   // 1435: clarifai.api.V2.PostCollaborators:output_type -> clarifai.api.MultiCollaboratorsResponse
	28,   // 1436: clarifai.api.V2.PatchCollaborators:output_type -> clarifai.api.MultiCollaboratorsResponse
	659,  // 1437: clarifai.api.V2.DeleteCollaborators:output_type -> clarifai.api.status.BaseResponse
	30,   // 1438: clarifai.api.V2.ListCollaborations:output_type -> clarifai.api.MultiCollaborationsResponse
	160,  // 1439: clarifai.api.V2.FetchLicense:output_type -> clarifai.api.FetchLicenseResponse
	166,  // 1440: clarifai.api.V2.ListLicenses:output_type -> clarifai.api.MultipleLicensesResponse
	165,  // 1441: clarifai.api.V2.GetLicense:output_type -> clarifai.api.SingleLicenseResponse
	162,  // 1442: clarifai.api.V2.ValidateLicense:output_type -> clarifai.api.ValidateLicenseResponse
	408,  // 1443: clarifai.api.V2.PostAppDuplications:output_type -> clarifai.api.MultiAppDuplicationsResponse
	408,  // 1444: clarifai.api.V2.ListAppDuplications:output_type -> clarifai.api.MultiAppDuplicationsResponse
	409,  // 1445: clarifai.api.V2.GetAppDuplication:output_type -> clarifai.api.SingleAppDuplicationResponse
	415,  // 1446: clarifai.api.V2.PostTasks:output_type -> clarifai.api.MultiTaskResponse
	418,  // 1447: clarifai.api.V2.GetTaskAnnotationCount:output_type -> clarifai.api.SingleTaskCountResponse
	418,  // 1448: clarifai.api.V2.GetTaskInputCount:output_type -> clarifai.api.SingleTaskCountResponse
	416,  // 1449: clarifai.api.V2.GetTask:output_type -> clarifai.api.SingleTaskResponse
	415,  // 1450: clarifai.api.V2.ListTasks:output_type -> clarifai.api.MultiTaskResponse
	415,  // 1451: clarifai.api.V2.PatchTasks:output_type -> clarifai.api.MultiTaskResponse
	659,  // 1452: clarifai.api.V2.DeleteTasks:output_type -> clarifai.api.status.BaseResponse
	659,  // 1453: clarifai.api.V2.PatchAnnotationCountsRollup:output_type -> clarifai.api.status.BaseResponse
	425,  // 1454: clarifai.api.V2.PostLabelOrders:output_type -> clarifai.api.MultiLabelOrderResponse
	426,  // 1455: clarifai.api.V2.GetLabelOrder:output_type -> clarifai.api.SingleLabelOrderResponse
	425,  // 1456: clarifai.api.V2.ListLabelOrders:output_type -> clarifai.api.MultiLabelOrderResponse
	425,  // 1457: clarifai.api.V2.PatchLabelOrders:output_type -> clarifai.api.MultiLabelOrderResponse
	659,  // 1458: clarifai.api.V2.DeleteLabelOrders:output_type -> clarifai.api.status.BaseResponse
	432,  // 1459: clarifai.api.V2.PostCollectors:output_type -> clarifai.api.MultiCollectorResponse
	433,  // 1460: clarifai.api.V2.GetCollector:output_type -> clarifai.api.SingleCollectorResponse
	432,  // 1461: clarifai.api.V2.ListCollectors:output_type -> clarifai.api.MultiCollectorResponse
	432,  // 1462: clarifai.api.V2.PatchCollectors:output_type -> clarifai.api.MultiCollectorResponse
	659,  // 1463: clarifai.api.V2.DeleteCollectors:output_type -> clarifai.api.status.BaseResponse
	435,  // 1464: clarifai.api.V2.PostStatValues:output_type -> clarifai.api.MultiStatValueResponse
	437,  // 1465: clarifai.api.V2.PostStatValuesAggregate:output_type -> clarifai.api.MultiStatValueAggregateResponse
	439,  // 1466: clarifai.api.V2.PostAnalytics:output_type -> clarifai.api.PostAnalyticsResponse
	441,  // 1467: clarifai.api.V2.PostSDKBilling:output_type -> clarifai.api.PostSDKBillingResponse
	442,  // 1468: clarifai.api.V2.PostFindDuplicateAnnotationsJobs:output_type -> clarifai.api.MultiFindDuplicateAnnotationsJobResponse
	443,  // 1469: clarifai.api.V2.GetFindDuplicateAnnotationsJob:output_type -> clarifai.api.SingleFindDuplicateAnnotationsJobResponse
	442,  // 1470: clarifai.api.V2.ListFindDuplicateAnnotationsJobs:output_type -> clarifai.api.MultiFindDuplicateAnnotationsJobResponse
	659,  // 1471: clarifai.api.V2.DeleteFindDuplicateAnnotationsJobs:output_type -> clarifai.api.status.BaseResponse
	659,  // 1472: clarifai.api.V2.PostTrendingMetricsView:output_type -> clarifai.api.status.BaseResponse
	450,  // 1473: clarifai.api.V2.ListTrendingMetricsViews:output_type -> clarifai.api.MultiTrendingMetricsViewResponse
	452,  // 1474: clarifai.api.V2.PostIdValidation:output_type -> clarifai.api.MultiIdValidationResponse
	454,  // 1475: clarifai.api.V2.ListTagCategories:output_type -> clarifai.api.MultiTagCategoryResponse
	475,  // 1476: clarifai.api.V2.ListWebNotifications:output_type -> clarifai.api.MultiWebNotificationResponse
	476,  // 1477: clarifai.api.V2.GetWebNotification:output_type -> clarifai.api.SingleWebNotificationResponse
	475,  // 1478: clarifai.api.V2.PatchWebNotifications:output_type -> clarifai.api.MultiWebNotificationResponse
	659,  // 1479: clarifai.api.V2.DeleteWebNotifications:output_type -> clarifai.api.status.BaseResponse
	482,  // 1480: clarifai.api.V2.GetModule:output_type -> clarifai.api.SingleModuleResponse
	483,  // 1481: clarifai.api.V2.ListModules:output_type -> clarifai.api.MultiModuleResponse
	483,  // 1482: clarifai.api.V2.PostModules:output_type -> clarifai.api.MultiModuleResponse
	483,  // 1483: clarifai.api.V2.PatchModules:output_type -> clarifai.api.MultiModuleResponse
	659,  // 1484: clarifai.api.V2.DeleteModules:output_type -> clarifai.api.status.BaseResponse
	488,  // 1485: clarifai.api.V2.GetModuleVersion:output_type -> clarifai.api.SingleModuleVersionResponse
	489,  // 1486: clarifai.api.V2.ListModuleVersions:output_type -> clarifai.api.MultiModuleVersionResponse
	489,  // 1487: clarifai.api.V2.PostModuleVersions:output_type -> clarifai.api.MultiModuleVersionResponse
	659,  // 1488: clarifai.api.V2.DeleteModuleVersions:output_type -> clarifai.api.status.BaseResponse
	495,  // 1489: clarifai.api.V2.GetInstalledModuleVersion:output_type -> clarifai.api.SingleInstalledModuleVersionResponse
	496,  // 1490: clarifai.api.V2.ListInstalledModuleVersions:output_type -> clarifai.api.MultiInstalledModuleVersionResponse
	496,  // 1491: clarifai.api.V2.PostInstalledModuleVersions:output_type -> clarifai.api.MultiInstalledModuleVersionResponse
	659,  // 1492: clarifai.api.V2.DeleteInstalledModuleVersions:output_type -> clarifai.api.status.BaseResponse
	157,  // 1493: clarifai.api.V2.PostInstalledModuleVersionsKey:output_type -> clarifai.api.SingleKeyResponse
	504,  // 1494: clarifai.api.V2.PostBulkOperations:output_type -> clarifai.api.MultiBulkOperationsResponse
	504,  // 1495: clarifai.api.V2.ListBulkOperations:output_type -> clarifai.api.MultiBulkOperationsResponse
	503,  // 1496: clarifai.api.V2.GetBulkOperation:output_type -> clarifai.api.SingleBulkOperationsResponse
	504,  // 1497: clarifai.api.V2.CancelBulkOperations:output_type -> clarifai.api.MultiBulkOperationsResponse
	659,  // 1498: clarifai.api.V2.DeleteBulkOperations:output_type -> clarifai.api.status.BaseResponse
	148,  // 1499: clarifai.api.V2.GetDatasetInputsSearchAddJob:output_type -> clarifai.api.SingleDatasetInputsSearchAddJobResponse
	118,  // 1500: clarifai.api.V2.ListNextTaskAssignments:output_type -> clarifai.api.MultiInputResponse
	659,  // 1501: clarifai.api.V2.PutTaskAssignments:output_type -> clarifai.api.status.BaseResponse
	507,  // 1502: clarifai.api.V2.PostWaitlistEmails:output_type -> clarifai.api.MultiWaitlistEmailResponse
	509,  // 1503: clarifai.api.V2.GetSampledPredictMetrics:output_type -> clarifai.api.MultiSampledPredictMetricsResponse
	515,  // 1504: clarifai.api.V2.PostInputsAddJobs:output_type -> clarifai.api.MultiInputsAddJobResponse
	515,  // 1505: clarifai.api.V2.ListInputsAddJobs:output_type -> clarifai.api.MultiInputsAddJobResponse
	516,  // 1506: clarifai.api.V2.GetInputsAddJob:output_type -> clarifai.api.SingleInputsAddJobResponse
	516,  // 1507: clarifai.api.V2.CancelInputsAddJob:output_type -> clarifai.api.SingleInputsAddJobResponse
	522,  // 1508: clarifai.api.V2.PostUploads:output_type -> clarifai.api.MultiUploadResponse
	521,  // 1509: clarifai.api.V2.PutUploadContentParts:output_type -> clarifai.api.SingleUploadResponse
	521,  // 1510: clarifai.api.V2.GetUpload:output_type -> clarifai.api.SingleUploadResponse
	522,  // 1511: clarifai.api.V2.ListUploads:output_type -> clarifai.api.MultiUploadResponse
	659,  // 1512: clarifai.api.V2.DeleteUploads:output_type -> clarifai.api.status.BaseResponse
	1169, // [1169:1513] is the sub-list for method output_type
	825,  // [825:1169] is the sub-list for method input_type
	825,  // [825:825] is the sub-list for extension type_name
	825,  // [825:825] is the sub-list for extension extendee
	0,    // [0:825] is the sub-list for field type_name
}

func init() { file_proto_clarifai_api_service_proto_init() }
func file_proto_clarifai_api_service_proto_init() {
	if File_proto_clarifai_api_service_proto != nil {
		return
	}
	file_proto_clarifai_api_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_clarifai_api_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAppOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAppsIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollaboratorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCollaboratorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollaborationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCollaborationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVerifyEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleVerifyEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthMethodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLinkIdpUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLinkIdpUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostIdLoginFinalizerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostIdLoginFinalizerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthMethodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List2FAMethodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List2FAMethodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpRegisterEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpRegisterEnableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpDisableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpDisableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpRegisterVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpRegisterVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpRecoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAuth2FATotpRecoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuth2FATotpRecoverConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuth2FATotpRecoverConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSignupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleLogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleStatusCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiStatusCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConceptRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKnowledgeGraphsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostKnowledgeGraphsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptMappingJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleKnowledgeGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiKnowledgeGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptMappingJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptMappingJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchConceptLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostConceptLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptLanguageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptLanguageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConceptReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConceptReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiConceptReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputSamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsNiFiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsDocumentRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInputAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInputCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDatasetIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostDatasetInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetVersionMetricsGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDatasetVersionExportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetVersionExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDatasetVersionMetricsGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetInputsSearchAddJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetInputsSearchAddJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelToolkitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelCheckConsentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelUseCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelToolkitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelCheckConsentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelUseCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelLanguageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdUpdateSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowVersionsUnPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowVersionsPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowVersionPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowVersionUnPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionUnpublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionsUnPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpenSourceLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpenSourceLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionInputExampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelVersionInputExamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelVersionInputExamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersionInputExamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModelVersionInputExampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelVersionInputExampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyScopesUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyScopesRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeDepsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiScopeRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchInputsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSearchesByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAttributeSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationSearchMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnnotationSearchMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnnotationFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnnotationFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAnnotationFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationsForClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostClustersSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCreditCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleCreditCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCreditCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleCreditCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCreditCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCreditCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShippingAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutShippingAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleShippingAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostHistoricalUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostHistoricalUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRealtimeUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRealtimeUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsageIntervalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsageIntervalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserBillingCyclesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCyclesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserBillingCyclesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserCyclesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUserConsentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUserAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUserAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUserAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostEmailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEmailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostResendVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleResendVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPrimaryEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostValidatePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinglePasswordValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGlobalPasswordPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPasswordPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPasswordPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchPasswordPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePasswordPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiplePasswordPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFeatureConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUserFeatureConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrganizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersOrganizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequestingUserFromOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAcceptOrganizationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostDeclineOrganizationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUsersOrganizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationAppMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrganizationInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationInvitationPublicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleOrganizationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiOrganizationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrganizationMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiOrganizationMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostIdentityProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIdentityProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentityProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchIdentityProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdentityProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleIdentityProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiIdentityProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTeamAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeamAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTeamAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTeamUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeamUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTeamUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVocabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVocabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVocabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchVocabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVocabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVocabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVocabConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVocabConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVocabConceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVocabConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleVocabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiVocabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchWorkflowIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsSimilarityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowResultsSimilarityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchWorkflowVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWorkflowVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWorkflowVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowNodeMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWorkflowMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWorkflowNodeMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWorkflowMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppDuplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppDuplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppDuplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAppDuplicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAppDuplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTaskCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAnnotationCountsRollupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLabelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleLabelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCollectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleCollectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStatValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiStatValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStatValuesAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiStatValueAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSDKBillingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSDKBillingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiFindDuplicateAnnotationsJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleFindDuplicateAnnotationsJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostFindDuplicateAnnotationsJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFindDuplicateAnnotationsJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFindDuplicateAnnotationsJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFindDuplicateAnnotationsJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTrendingMetricsViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrendingMetricsViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTrendingMetricsViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostIdValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiIdValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTagCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTagCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModelStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModelStarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelStarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUserStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUserStarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserStarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAppStarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppStarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkflowStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWorkflowStarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowStarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowStarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchWebNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWebNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWebNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstalledModuleVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstalledModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInstalledModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInstalledModuleVersionsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstalledModuleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInstalledModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInstalledModuleVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNextTaskAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostBulkOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBulkOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBulkOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBulkOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleBulkOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiBulkOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWaitlistEmailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWaitlistEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampledPredictMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSampledPredictMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplePredictMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostInputsAddJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInputsAddJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputsAddJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInputsAddJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiInputsAddJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleInputsAddJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUploadContentPartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUsersOrganizationsResponse_UserOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationMembersRequest_PatchOrganizationMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTeamsRequest_PostTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTeamAppsRequest_TeamApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_service_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTeamAppsResponse_TeamApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_clarifai_api_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ListAppsRequest_SortByName)(nil),
		(*ListAppsRequest_SortByModifiedAt)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[167].OneofWrappers = []interface{}{
		(*ListModelsRequest_SortByName)(nil),
		(*ListModelsRequest_SortByNumInputs)(nil),
		(*ListModelsRequest_SortByModifiedAt)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[285].OneofWrappers = []interface{}{
		(*ListUsersRequest_SortById)(nil),
		(*ListUsersRequest_SortByFirstName)(nil),
		(*ListUsersRequest_SortByLastName)(nil),
		(*ListUsersRequest_SortByCreatedAt)(nil),
	}
	file_proto_clarifai_api_service_proto_msgTypes[377].OneofWrappers = []interface{}{
		(*ListWorkflowsRequest_SortById)(nil),
		(*ListWorkflowsRequest_SortByModifiedAt)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_clarifai_api_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   528,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_clarifai_api_service_proto_goTypes,
		DependencyIndexes: file_proto_clarifai_api_service_proto_depIdxs,
		EnumInfos:         file_proto_clarifai_api_service_proto_enumTypes,
		MessageInfos:      file_proto_clarifai_api_service_proto_msgTypes,
	}.Build()
	File_proto_clarifai_api_service_proto = out.File
	file_proto_clarifai_api_service_proto_rawDesc = nil
	file_proto_clarifai_api_service_proto_goTypes = nil
	file_proto_clarifai_api_service_proto_depIdxs = nil
}
