// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: proto/clarifai/api/resources.proto

package api

import (
	status "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/status"
	_ "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/utils"
	_ "github.com/Clarifai/clarifai-go-grpc/proto/clarifai/auth/util"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ExpirationAction int32

const (
	ExpirationAction_EXPIRATION_ACTION_NOT_SET ExpirationAction = 0
	ExpirationAction_DELAY                     ExpirationAction = 1 // Progressively delay the execution of operations
	ExpirationAction_EXPIRY                    ExpirationAction = 2 // Cease functioning
)

// Enum value maps for ExpirationAction.
var (
	ExpirationAction_name = map[int32]string{
		0: "EXPIRATION_ACTION_NOT_SET",
		1: "DELAY",
		2: "EXPIRY",
	}
	ExpirationAction_value = map[string]int32{
		"EXPIRATION_ACTION_NOT_SET": 0,
		"DELAY":                     1,
		"EXPIRY":                    2,
	}
)

func (x ExpirationAction) Enum() *ExpirationAction {
	p := new(ExpirationAction)
	*p = x
	return p
}

func (x ExpirationAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpirationAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[0].Descriptor()
}

func (ExpirationAction) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[0]
}

func (x ExpirationAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpirationAction.Descriptor instead.
func (ExpirationAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{0}
}

type LicenseScope int32

const (
	LicenseScope_LICENSE_SCOPE_NOT_SET LicenseScope = 0
	LicenseScope_PREDICT               LicenseScope = 1
	LicenseScope_TRAIN                 LicenseScope = 2
	LicenseScope_SEARCH                LicenseScope = 3
)

// Enum value maps for LicenseScope.
var (
	LicenseScope_name = map[int32]string{
		0: "LICENSE_SCOPE_NOT_SET",
		1: "PREDICT",
		2: "TRAIN",
		3: "SEARCH",
	}
	LicenseScope_value = map[string]int32{
		"LICENSE_SCOPE_NOT_SET": 0,
		"PREDICT":               1,
		"TRAIN":                 2,
		"SEARCH":                3,
	}
)

func (x LicenseScope) Enum() *LicenseScope {
	p := new(LicenseScope)
	*p = x
	return p
}

func (x LicenseScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseScope) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[1].Descriptor()
}

func (LicenseScope) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[1]
}

func (x LicenseScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseScope.Descriptor instead.
func (LicenseScope) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{1}
}

type ValueComparator int32

const (
	ValueComparator_CONCEPT_THRESHOLD_NOT_SET ValueComparator = 0
	// input > value
	ValueComparator_GREATER_THAN ValueComparator = 1
	// input >= value
	ValueComparator_GREATER_THAN_OR_EQUAL ValueComparator = 2
	// input < value
	ValueComparator_LESS_THAN ValueComparator = 3
	// input <= value
	ValueComparator_LESS_THAN_OR_EQUAL ValueComparator = 4
	// input == value
	ValueComparator_EQUAL ValueComparator = 5
)

// Enum value maps for ValueComparator.
var (
	ValueComparator_name = map[int32]string{
		0: "CONCEPT_THRESHOLD_NOT_SET",
		1: "GREATER_THAN",
		2: "GREATER_THAN_OR_EQUAL",
		3: "LESS_THAN",
		4: "LESS_THAN_OR_EQUAL",
		5: "EQUAL",
	}
	ValueComparator_value = map[string]int32{
		"CONCEPT_THRESHOLD_NOT_SET": 0,
		"GREATER_THAN":              1,
		"GREATER_THAN_OR_EQUAL":     2,
		"LESS_THAN":                 3,
		"LESS_THAN_OR_EQUAL":        4,
		"EQUAL":                     5,
	}
)

func (x ValueComparator) Enum() *ValueComparator {
	p := new(ValueComparator)
	*p = x
	return p
}

func (x ValueComparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueComparator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[2].Descriptor()
}

func (ValueComparator) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[2]
}

func (x ValueComparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueComparator.Descriptor instead.
func (ValueComparator) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{2}
}

type EvaluationType int32

const (
	EvaluationType_Classification EvaluationType = 0 // default
	EvaluationType_Detection      EvaluationType = 1
)

// Enum value maps for EvaluationType.
var (
	EvaluationType_name = map[int32]string{
		0: "Classification",
		1: "Detection",
	}
	EvaluationType_value = map[string]int32{
		"Classification": 0,
		"Detection":      1,
	}
)

func (x EvaluationType) Enum() *EvaluationType {
	p := new(EvaluationType)
	*p = x
	return p
}

func (x EvaluationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvaluationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[3].Descriptor()
}

func (EvaluationType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[3]
}

func (x EvaluationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvaluationType.Descriptor instead.
func (EvaluationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{3}
}

type APIEventType int32

const (
	APIEventType_API_EVENT_TYPE_NOT_SET APIEventType = 0
	// On Prem event types
	APIEventType_ON_PREM_PREDICT APIEventType = 1
	APIEventType_ON_PREM_TRAIN   APIEventType = 2
	APIEventType_ON_PREM_SEARCH  APIEventType = 3
)

// Enum value maps for APIEventType.
var (
	APIEventType_name = map[int32]string{
		0: "API_EVENT_TYPE_NOT_SET",
		1: "ON_PREM_PREDICT",
		2: "ON_PREM_TRAIN",
		3: "ON_PREM_SEARCH",
	}
	APIEventType_value = map[string]int32{
		"API_EVENT_TYPE_NOT_SET": 0,
		"ON_PREM_PREDICT":        1,
		"ON_PREM_TRAIN":          2,
		"ON_PREM_SEARCH":         3,
	}
)

func (x APIEventType) Enum() *APIEventType {
	p := new(APIEventType)
	*p = x
	return p
}

func (x APIEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[4].Descriptor()
}

func (APIEventType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[4]
}

func (x APIEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APIEventType.Descriptor instead.
func (APIEventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{4}
}

type UsageIntervalType int32

const (
	// undef UsageIntervalType is so that the interval field can be forced to be included
	UsageIntervalType_undef UsageIntervalType = 0
	UsageIntervalType_day   UsageIntervalType = 1
	UsageIntervalType_month UsageIntervalType = 2
	UsageIntervalType_year  UsageIntervalType = 3
)

// Enum value maps for UsageIntervalType.
var (
	UsageIntervalType_name = map[int32]string{
		0: "undef",
		1: "day",
		2: "month",
		3: "year",
	}
	UsageIntervalType_value = map[string]int32{
		"undef": 0,
		"day":   1,
		"month": 2,
		"year":  3,
	}
)

func (x UsageIntervalType) Enum() *UsageIntervalType {
	p := new(UsageIntervalType)
	*p = x
	return p
}

func (x UsageIntervalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageIntervalType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[5].Descriptor()
}

func (UsageIntervalType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[5]
}

func (x UsageIntervalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageIntervalType.Descriptor instead.
func (UsageIntervalType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{5}
}

type RoleType int32

const (
	RoleType_TEAM RoleType = 0
	RoleType_ORG  RoleType = 1
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "TEAM",
		1: "ORG",
	}
	RoleType_value = map[string]int32{
		"TEAM": 0,
		"ORG":  1,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[6].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[6]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{6}
}

type StatValueAggType int32

const (
	StatValueAggType_SUM StatValueAggType = 0
	StatValueAggType_AVG StatValueAggType = 1
)

// Enum value maps for StatValueAggType.
var (
	StatValueAggType_name = map[int32]string{
		0: "SUM",
		1: "AVG",
	}
	StatValueAggType_value = map[string]int32{
		"SUM": 0,
		"AVG": 1,
	}
)

func (x StatValueAggType) Enum() *StatValueAggType {
	p := new(StatValueAggType)
	*p = x
	return p
}

func (x StatValueAggType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatValueAggType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[7].Descriptor()
}

func (StatValueAggType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[7]
}

func (x StatValueAggType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatValueAggType.Descriptor instead.
func (StatValueAggType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{7}
}

type StatTimeAggType int32

const (
	StatTimeAggType_NO_TIME_AGG StatTimeAggType = 0
	StatTimeAggType_YEAR        StatTimeAggType = 1
	StatTimeAggType_MONTH       StatTimeAggType = 2
	StatTimeAggType_WEEK        StatTimeAggType = 3
	StatTimeAggType_DAY         StatTimeAggType = 4
	StatTimeAggType_HOUR        StatTimeAggType = 5
	StatTimeAggType_MINUTE      StatTimeAggType = 6
)

// Enum value maps for StatTimeAggType.
var (
	StatTimeAggType_name = map[int32]string{
		0: "NO_TIME_AGG",
		1: "YEAR",
		2: "MONTH",
		3: "WEEK",
		4: "DAY",
		5: "HOUR",
		6: "MINUTE",
	}
	StatTimeAggType_value = map[string]int32{
		"NO_TIME_AGG": 0,
		"YEAR":        1,
		"MONTH":       2,
		"WEEK":        3,
		"DAY":         4,
		"HOUR":        5,
		"MINUTE":      6,
	}
)

func (x StatTimeAggType) Enum() *StatTimeAggType {
	p := new(StatTimeAggType)
	*p = x
	return p
}

func (x StatTimeAggType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatTimeAggType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[8].Descriptor()
}

func (StatTimeAggType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[8]
}

func (x StatTimeAggType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatTimeAggType.Descriptor instead.
func (StatTimeAggType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{8}
}

type ValidationErrorType int32

const (
	ValidationErrorType_VALIDATION_ERROR_TYPE_NOT_SET ValidationErrorType = 0
	ValidationErrorType_RESTRICTED                    ValidationErrorType = 1
	ValidationErrorType_DATABASE                      ValidationErrorType = 2
	ValidationErrorType_FORMAT                        ValidationErrorType = 3
)

// Enum value maps for ValidationErrorType.
var (
	ValidationErrorType_name = map[int32]string{
		0: "VALIDATION_ERROR_TYPE_NOT_SET",
		1: "RESTRICTED",
		2: "DATABASE",
		3: "FORMAT",
	}
	ValidationErrorType_value = map[string]int32{
		"VALIDATION_ERROR_TYPE_NOT_SET": 0,
		"RESTRICTED":                    1,
		"DATABASE":                      2,
		"FORMAT":                        3,
	}
)

func (x ValidationErrorType) Enum() *ValidationErrorType {
	p := new(ValidationErrorType)
	*p = x
	return p
}

func (x ValidationErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[9].Descriptor()
}

func (ValidationErrorType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[9]
}

func (x ValidationErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationErrorType.Descriptor instead.
func (ValidationErrorType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{9}
}

type TagCategoryName int32

const (
	TagCategoryName_uncategorized TagCategoryName = 0
	TagCategoryName_use_case      TagCategoryName = 1 // ex. tags: "faces", "food", "misc"
	TagCategoryName_language      TagCategoryName = 2 // ex. tags: "en", "ar", "fi"
	TagCategoryName_licence       TagCategoryName = 3 // ex. tags: "MIT", "Apache-2.0", "OSL"
	TagCategoryName_toolkit       TagCategoryName = 4 // ex. tags: “HuggingFace”, "Detectron2", "OpenMMLab"
)

// Enum value maps for TagCategoryName.
var (
	TagCategoryName_name = map[int32]string{
		0: "uncategorized",
		1: "use_case",
		2: "language",
		3: "licence",
		4: "toolkit",
	}
	TagCategoryName_value = map[string]int32{
		"uncategorized": 0,
		"use_case":      1,
		"language":      2,
		"licence":       3,
		"toolkit":       4,
	}
)

func (x TagCategoryName) Enum() *TagCategoryName {
	p := new(TagCategoryName)
	*p = x
	return p
}

func (x TagCategoryName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagCategoryName) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[10].Descriptor()
}

func (TagCategoryName) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[10]
}

func (x TagCategoryName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagCategoryName.Descriptor instead.
func (TagCategoryName) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{10}
}

// These are various types of fields that we have UIs for.
type ModelTypeField_ModelTypeFieldType int32

const (
	ModelTypeField_INVALID_MODEL_TYPE_FIELD_TYPE ModelTypeField_ModelTypeFieldType = 0
	ModelTypeField_BOOLEAN                       ModelTypeField_ModelTypeFieldType = 1
	ModelTypeField_STRING                        ModelTypeField_ModelTypeFieldType = 2
	ModelTypeField_NUMBER                        ModelTypeField_ModelTypeFieldType = 3
	// For auto-completing to concepts in the app. This goes into an data.concepts field.
	ModelTypeField_ARRAY_OF_CONCEPTS ModelTypeField_ModelTypeFieldType = 4
	// For auto-completing to concepts in the app. This goes into an data.concepts field.
	ModelTypeField_ARRAY_OF_CONCEPTS_WITH_THRESHOLD ModelTypeField_ModelTypeFieldType = 5
	// A range for a float value.
	ModelTypeField_RANGE ModelTypeField_ModelTypeFieldType = 7
	// If ENUM is used then the "enum_options" field should also be filled in which allows for
	// additional ModelTypeFields too depending on the enum choice.
	ModelTypeField_ENUM ModelTypeField_ModelTypeFieldType = 8
	// For listing collaborators of the app. The field is a string of the collaborator's user_id.
	ModelTypeField_COLLABORATORS ModelTypeField_ModelTypeFieldType = 9
	// For arbitrary json object: "{...}"
	ModelTypeField_JSON ModelTypeField_ModelTypeFieldType = 10
	// Such as [1.0, 2.0, 3.5]
	ModelTypeField_ARRAY_OF_NUMBERS ModelTypeField_ModelTypeFieldType = 11
	// For selecting the embed_model_version_id for context based models.
	// This is a string type in the API request.
	ModelTypeField_WORKFLOW_EMBED_MODELS ModelTypeField_ModelTypeFieldType = 12
	// Such as ['a', 'b', 'cantaloupe']
	ModelTypeField_ARRAY_OF_STRINGS ModelTypeField_ModelTypeFieldType = 13
)

// Enum value maps for ModelTypeField_ModelTypeFieldType.
var (
	ModelTypeField_ModelTypeFieldType_name = map[int32]string{
		0:  "INVALID_MODEL_TYPE_FIELD_TYPE",
		1:  "BOOLEAN",
		2:  "STRING",
		3:  "NUMBER",
		4:  "ARRAY_OF_CONCEPTS",
		5:  "ARRAY_OF_CONCEPTS_WITH_THRESHOLD",
		7:  "RANGE",
		8:  "ENUM",
		9:  "COLLABORATORS",
		10: "JSON",
		11: "ARRAY_OF_NUMBERS",
		12: "WORKFLOW_EMBED_MODELS",
		13: "ARRAY_OF_STRINGS",
	}
	ModelTypeField_ModelTypeFieldType_value = map[string]int32{
		"INVALID_MODEL_TYPE_FIELD_TYPE":    0,
		"BOOLEAN":                          1,
		"STRING":                           2,
		"NUMBER":                           3,
		"ARRAY_OF_CONCEPTS":                4,
		"ARRAY_OF_CONCEPTS_WITH_THRESHOLD": 5,
		"RANGE":                            7,
		"ENUM":                             8,
		"COLLABORATORS":                    9,
		"JSON":                             10,
		"ARRAY_OF_NUMBERS":                 11,
		"WORKFLOW_EMBED_MODELS":            12,
		"ARRAY_OF_STRINGS":                 13,
	}
)

func (x ModelTypeField_ModelTypeFieldType) Enum() *ModelTypeField_ModelTypeFieldType {
	p := new(ModelTypeField_ModelTypeFieldType)
	*p = x
	return p
}

func (x ModelTypeField_ModelTypeFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelTypeField_ModelTypeFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[11].Descriptor()
}

func (ModelTypeField_ModelTypeFieldType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[11]
}

func (x ModelTypeField_ModelTypeFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelTypeField_ModelTypeFieldType.Descriptor instead.
func (ModelTypeField_ModelTypeFieldType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{49, 0}
}

type Task_TaskType int32

const (
	Task_TYPE_NOT_SET Task_TaskType = 0
	// Concepts classification tasks annotate concepts for the overall image, frame of video or section of text.
	Task_CONCEPTS_CLASSIFICATION Task_TaskType = 1
	// Bounding box detection tasks annotate rectangular bounding box regions around each concept in an image, frame of video or section of text.
	Task_BOUNDING_BOX_DETECTION Task_TaskType = 2
	// Polygon detection tasks annotate free-form regions around concepts in an image, frame of video or section of text.
	Task_POLYGON_DETECTION Task_TaskType = 3
)

// Enum value maps for Task_TaskType.
var (
	Task_TaskType_name = map[int32]string{
		0: "TYPE_NOT_SET",
		1: "CONCEPTS_CLASSIFICATION",
		2: "BOUNDING_BOX_DETECTION",
		3: "POLYGON_DETECTION",
	}
	Task_TaskType_value = map[string]int32{
		"TYPE_NOT_SET":            0,
		"CONCEPTS_CLASSIFICATION": 1,
		"BOUNDING_BOX_DETECTION":  2,
		"POLYGON_DETECTION":       3,
	}
)

func (x Task_TaskType) Enum() *Task_TaskType {
	p := new(Task_TaskType)
	*p = x
	return p
}

func (x Task_TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[12].Descriptor()
}

func (Task_TaskType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[12]
}

func (x Task_TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_TaskType.Descriptor instead.
func (Task_TaskType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{98, 0}
}

type TaskWorker_TaskWorkerStrategy int32

const (
	TaskWorker_WORKER_STRATEGY_NOT_SET TaskWorker_TaskWorkerStrategy = 0
	// The inputs will be partitioned in several partitions.
	// Each worker will label one or more input partitions.
	TaskWorker_PARTITIONED TaskWorker_TaskWorkerStrategy = 2
	// Each worker will label all inputs from input source.
	TaskWorker_FULL TaskWorker_TaskWorkerStrategy = 3
)

// Enum value maps for TaskWorker_TaskWorkerStrategy.
var (
	TaskWorker_TaskWorkerStrategy_name = map[int32]string{
		0: "WORKER_STRATEGY_NOT_SET",
		2: "PARTITIONED",
		3: "FULL",
	}
	TaskWorker_TaskWorkerStrategy_value = map[string]int32{
		"WORKER_STRATEGY_NOT_SET": 0,
		"PARTITIONED":             2,
		"FULL":                    3,
	}
)

func (x TaskWorker_TaskWorkerStrategy) Enum() *TaskWorker_TaskWorkerStrategy {
	p := new(TaskWorker_TaskWorkerStrategy)
	*p = x
	return p
}

func (x TaskWorker_TaskWorkerStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskWorker_TaskWorkerStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[13].Descriptor()
}

func (TaskWorker_TaskWorkerStrategy) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[13]
}

func (x TaskWorker_TaskWorkerStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskWorker_TaskWorkerStrategy.Descriptor instead.
func (TaskWorker_TaskWorkerStrategy) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{100, 0}
}

type TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy int32

const (
	TaskWorkerPartitionedStrategyInfo_PARTITIONED_WORKER_STRATEGY_NOT_SET TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy = 0
	// Each worker will label (approximately) the same number of inputs.
	TaskWorkerPartitionedStrategyInfo_EVENLY TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy = 1
	// Each worker will have an assigned weight.
	// See weights field for more details.
	TaskWorkerPartitionedStrategyInfo_WEIGHTED TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy = 2
)

// Enum value maps for TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy.
var (
	TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_name = map[int32]string{
		0: "PARTITIONED_WORKER_STRATEGY_NOT_SET",
		1: "EVENLY",
		2: "WEIGHTED",
	}
	TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_value = map[string]int32{
		"PARTITIONED_WORKER_STRATEGY_NOT_SET": 0,
		"EVENLY":                              1,
		"WEIGHTED":                            2,
	}
)

func (x TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy) Enum() *TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy {
	p := new(TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy)
	*p = x
	return p
}

func (x TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[14].Descriptor()
}

func (TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[14]
}

func (x TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy.Descriptor instead.
func (TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{101, 0}
}

type TaskInputSource_TaskInputSourceType int32

const (
	TaskInputSource_INPUT_SOURCE_TYPE_NOT_SET TaskInputSource_TaskInputSourceType = 0
	// Use all inputs in the app.
	TaskInputSource_ALL_INPUTS TaskInputSource_TaskInputSourceType = 1
	// Use the inputs from a saved search.
	TaskInputSource_SAVED_SEARCH TaskInputSource_TaskInputSourceType = 2
)

// Enum value maps for TaskInputSource_TaskInputSourceType.
var (
	TaskInputSource_TaskInputSourceType_name = map[int32]string{
		0: "INPUT_SOURCE_TYPE_NOT_SET",
		1: "ALL_INPUTS",
		2: "SAVED_SEARCH",
	}
	TaskInputSource_TaskInputSourceType_value = map[string]int32{
		"INPUT_SOURCE_TYPE_NOT_SET": 0,
		"ALL_INPUTS":                1,
		"SAVED_SEARCH":              2,
	}
)

func (x TaskInputSource_TaskInputSourceType) Enum() *TaskInputSource_TaskInputSourceType {
	p := new(TaskInputSource_TaskInputSourceType)
	*p = x
	return p
}

func (x TaskInputSource_TaskInputSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskInputSource_TaskInputSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[15].Descriptor()
}

func (TaskInputSource_TaskInputSourceType) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[15]
}

func (x TaskInputSource_TaskInputSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskInputSource_TaskInputSourceType.Descriptor instead.
func (TaskInputSource_TaskInputSourceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{102, 0}
}

type TaskReview_TaskReviewStrategy int32

const (
	TaskReview_TASK_REVIEW_STRATEGY_NOT_SET TaskReview_TaskReviewStrategy = 0
	// No review is needed.
	TaskReview_NONE TaskReview_TaskReviewStrategy = 1
	// Manual review strategy.
	TaskReview_MANUAL TaskReview_TaskReviewStrategy = 2
	// Consensus review strategy.
	TaskReview_CONSENSUS TaskReview_TaskReviewStrategy = 3
)

// Enum value maps for TaskReview_TaskReviewStrategy.
var (
	TaskReview_TaskReviewStrategy_name = map[int32]string{
		0: "TASK_REVIEW_STRATEGY_NOT_SET",
		1: "NONE",
		2: "MANUAL",
		3: "CONSENSUS",
	}
	TaskReview_TaskReviewStrategy_value = map[string]int32{
		"TASK_REVIEW_STRATEGY_NOT_SET": 0,
		"NONE":                         1,
		"MANUAL":                       2,
		"CONSENSUS":                    3,
	}
)

func (x TaskReview_TaskReviewStrategy) Enum() *TaskReview_TaskReviewStrategy {
	p := new(TaskReview_TaskReviewStrategy)
	*p = x
	return p
}

func (x TaskReview_TaskReviewStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskReview_TaskReviewStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[16].Descriptor()
}

func (TaskReview_TaskReviewStrategy) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[16]
}

func (x TaskReview_TaskReviewStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskReview_TaskReviewStrategy.Descriptor instead.
func (TaskReview_TaskReviewStrategy) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{103, 0}
}

// Gettable defined the level of access for GET operations for this resource.
type Visibility_Gettable int32

const (
	// Default value not allowed.
	Visibility_UNKNOWN_VISIBILITY Visibility_Gettable = 0
	// PRIVATE requires collaborator or team permissions in order to GET this resource.
	Visibility_PRIVATE Visibility_Gettable = 10
	// ORG requires you to be in the same org in order to GET this resource, but don't have to be a
	// teammate or collaborator.
	Visibility_ORG Visibility_Gettable = 30
	// PUBLIC opens up GET access to the resource to any user on the platform even if they are not
	// a teammate or collaborator.
	Visibility_PUBLIC Visibility_Gettable = 50
)

// Enum value maps for Visibility_Gettable.
var (
	Visibility_Gettable_name = map[int32]string{
		0:  "UNKNOWN_VISIBILITY",
		10: "PRIVATE",
		30: "ORG",
		50: "PUBLIC",
	}
	Visibility_Gettable_value = map[string]int32{
		"UNKNOWN_VISIBILITY": 0,
		"PRIVATE":            10,
		"ORG":                30,
		"PUBLIC":             50,
	}
)

func (x Visibility_Gettable) Enum() *Visibility_Gettable {
	p := new(Visibility_Gettable)
	*p = x
	return p
}

func (x Visibility_Gettable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility_Gettable) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clarifai_api_resources_proto_enumTypes[17].Descriptor()
}

func (Visibility_Gettable) Type() protoreflect.EnumType {
	return &file_proto_clarifai_api_resources_proto_enumTypes[17]
}

func (x Visibility_Gettable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Visibility_Gettable.Descriptor instead.
func (Visibility_Gettable) EnumDescriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{115, 0}
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/annotation.proto
////////////////////////////////////////////////////////////////////////////////
type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID for the annotation
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the input this annotation is tied to
	InputId string `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	// The data passed along in this annotation.
	Data *Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// task_id is deprecated in annotation_info. Use task_id
	AnnotationInfo *_struct.Struct `protobuf:"bytes,13,opt,name=annotation_info,json=annotationInfo,proto3" json:"annotation_info,omitempty"`
	// ID of the user this annotation is created by
	UserId string `protobuf:"bytes,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// ID of the model version this annotation is created by
	ModelVersionId string `protobuf:"bytes,16,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// DEPRECATED.
	//
	// Deprecated: Do not use.
	EmbedModelVersionId string `protobuf:"bytes,14,opt,name=embed_model_version_id,json=embedModelVersionId,proto3" json:"embed_model_version_id,omitempty"`
	// Annotation Status
	Status *status.Status `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// When the annotation was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When the annotation was modified.
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Whether or not this annotation is trusted
	// Will be deprecated
	//
	// Deprecated: Do not use.
	Trusted bool `protobuf:"varint,10,opt,name=trusted,proto3" json:"trusted,omitempty"`
	// Is this the input level annotation.
	InputLevel bool `protobuf:"varint,17,opt,name=input_level,json=inputLevel,proto3" json:"input_level,omitempty"`
	// Consensus review related information, e.g.
	// * annotation group
	// * id of annotation parent, in case the annotation was split from another annotation
	ConsensusInfo *_struct.Struct `protobuf:"bytes,18,opt,name=consensus_info,json=consensusInfo,proto3" json:"consensus_info,omitempty"`
	// The id of the task annotation belongs to
	TaskId string `protobuf:"bytes,19,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{0}
}

func (x *Annotation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Annotation) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *Annotation) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Annotation) GetAnnotationInfo() *_struct.Struct {
	if x != nil {
		return x.AnnotationInfo
	}
	return nil
}

func (x *Annotation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Annotation) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

// Deprecated: Do not use.
func (x *Annotation) GetEmbedModelVersionId() string {
	if x != nil {
		return x.EmbedModelVersionId
	}
	return ""
}

func (x *Annotation) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Annotation) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Annotation) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// Deprecated: Do not use.
func (x *Annotation) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

func (x *Annotation) GetInputLevel() bool {
	if x != nil {
		return x.InputLevel
	}
	return false
}

func (x *Annotation) GetConsensusInfo() *_struct.Struct {
	if x != nil {
		return x.ConsensusInfo
	}
	return nil
}

func (x *Annotation) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/app.proto
////////////////////////////////////////////////////////////////////////////////
type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DefaultLanguage   string `protobuf:"bytes,3,opt,name=default_language,json=defaultLanguage,proto3" json:"default_language,omitempty"`
	DefaultWorkflowId string `protobuf:"bytes,4,opt,name=default_workflow_id,json=defaultWorkflowId,proto3" json:"default_workflow_id,omitempty"`
	//why is user_id present here when this message type is used in PostApps but completely ignored there? PostApp already specifies the userid in path but doesn't even actually use neither of userids, it instead used the id from auth context.
	//This creates a lot of ambiguity, should always have different message types for Post/Get endpoints so that the minimum interface for each op can be described
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// When the app was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When the app was last modified
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// if user accept legal consent for face recognition
	LegalConsentStatus uint32 `protobuf:"varint,7,opt,name=legal_consent_status,json=legalConsentStatus,proto3" json:"legal_consent_status,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *_struct.Struct `protobuf:"bytes,13,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// short description about the app.
	Description string `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// Default value for model predictions on video: Sample delay for video predicting (1 frame per N milliseconds)
	SampleMs uint32 `protobuf:"varint,15,opt,name=sample_ms,json=sampleMs,proto3" json:"sample_ms,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,16,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// data tier id this app is using.
	DataTierId string `protobuf:"bytes,18,opt,name=data_tier_id,json=dataTierId,proto3" json:"data_tier_id,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{1}
}

func (x *App) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetDefaultLanguage() string {
	if x != nil {
		return x.DefaultLanguage
	}
	return ""
}

func (x *App) GetDefaultWorkflowId() string {
	if x != nil {
		return x.DefaultWorkflowId
	}
	return ""
}

func (x *App) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *App) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *App) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *App) GetLegalConsentStatus() uint32 {
	if x != nil {
		return x.LegalConsentStatus
	}
	return 0
}

func (x *App) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *App) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *App) GetSampleMs() uint32 {
	if x != nil {
		return x.SampleMs
	}
	return 0
}

func (x *App) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *App) GetDataTierId() string {
	if x != nil {
		return x.DataTierId
	}
	return ""
}

type AppQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query by application name. This supports wildcard queries like "gen*" to match "general" as an example.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AppQuery) Reset() {
	*x = AppQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppQuery) ProtoMessage() {}

func (x *AppQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppQuery.ProtoReflect.Descriptor instead.
func (*AppQuery) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{2}
}

func (x *AppQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/app_sharing.proto
////////////////////////////////////////////////////////////////////////////////
type Collaborator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//id of this collaborator
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//the app this collaborator has access to
	// FIXME(zeiler): this should be in the user_app_id.app_id already from the endpoint.
	App *App `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	//who is this collaborator
	User *User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	//the permission this collaborator
	Scopes    []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Endpoints []string `protobuf:"bytes,5,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// When the app was shared with. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When the collaborator was updated.
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// When the collaborator was removed from app.
	DeletedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Collaborator) Reset() {
	*x = Collaborator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collaborator) ProtoMessage() {}

func (x *Collaborator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collaborator.ProtoReflect.Descriptor instead.
func (*Collaborator) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{3}
}

func (x *Collaborator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collaborator) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Collaborator) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Collaborator) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Collaborator) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Collaborator) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Collaborator) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Collaborator) GetDeletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

//collaboration includes an app you're invited to work on.
type Collaboration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//the application
	App *App `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	//the app owner's info(including user_unique_id, first_name, last_name, primary_email)
	AppOwner *User `protobuf:"bytes,2,opt,name=app_owner,json=appOwner,proto3" json:"app_owner,omitempty"`
	//the low-level scope users are shared with for this collaboration
	Scopes []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	//the endpoint-level scopes users are shared with for this collaboration
	Endpoints []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	//when is the collaboration created
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Collaboration) Reset() {
	*x = Collaboration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collaboration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collaboration) ProtoMessage() {}

func (x *Collaboration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collaboration.ProtoReflect.Descriptor instead.
func (*Collaboration) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{4}
}

func (x *Collaboration) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Collaboration) GetAppOwner() *User {
	if x != nil {
		return x.AppOwner
	}
	return nil
}

func (x *Collaboration) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Collaboration) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Collaboration) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/audio.proto
////////////////////////////////////////////////////////////////////////////////
type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a URL to a publicly accessible image file. The platform will download this file server
	// side and then process.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The base64 field is using image file bytes directly in the request.
	// NOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence
	// the name here).
	// When using our grpc clients, you DO NOT need to base64 encode
	// it yourself since the clients know how to do this for you automatically and will avoid the
	// base64 encoding if they send a binary request.
	Base64 []byte `protobuf:"bytes,2,opt,name=base64,proto3" json:"base64,omitempty"`
	// If True then you will be allowed to have multiple urls.
	AllowDuplicateUrl bool `protobuf:"varint,4,opt,name=allow_duplicate_url,json=allowDuplicateUrl,proto3" json:"allow_duplicate_url,omitempty"`
	// The hosted field lists original audio hosted in Clarifai storage. This field is currently used
	// only in response.
	Hosted *HostedURL `protobuf:"bytes,5,opt,name=hosted,proto3" json:"hosted,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{5}
}

func (x *Audio) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Audio) GetBase64() []byte {
	if x != nil {
		return x.Base64
	}
	return nil
}

func (x *Audio) GetAllowDuplicateUrl() bool {
	if x != nil {
		return x.AllowDuplicateUrl
	}
	return false
}

func (x *Audio) GetHosted() *HostedURL {
	if x != nil {
		return x.Hosted
	}
	return nil
}

// Track proto encodes information of a track over a number of frames
type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// track id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This is a recursive definition which can contain all the concepts,
	// embeddings, etc. that are computed within this track.
	Data *Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The track information.
	TrackInfo *Track_TrackInfo `protobuf:"bytes,3,opt,name=track_info,json=trackInfo,proto3" json:"track_info,omitempty"`
	TimeInfo  *TimeInfo        `protobuf:"bytes,4,opt,name=time_info,json=timeInfo,proto3" json:"time_info,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{6}
}

func (x *Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Track) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Track) GetTrackInfo() *Track_TrackInfo {
	if x != nil {
		return x.TrackInfo
	}
	return nil
}

func (x *Track) GetTimeInfo() *TimeInfo {
	if x != nil {
		return x.TimeInfo
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/cluster.proto
////////////////////////////////////////////////////////////////////////////////
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Number of annotations tied to the cluster in the app
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The score assigned to this cluster
	Score float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	// Representative hits for cluster (for now we only return 1)
	Hits       []*Hit    `protobuf:"bytes,4,rep,name=hits,proto3" json:"hits,omitempty"`
	Projection []float32 `protobuf:"fixed32,5,rep,packed,name=projection,proto3" json:"projection,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{7}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Cluster) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Cluster) GetHits() []*Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *Cluster) GetProjection() []float32 {
	if x != nil {
		return x.Projection
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/color.proto
////////////////////////////////////////////////////////////////////////////////
type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawHex string  `protobuf:"bytes,1,opt,name=raw_hex,json=rawHex,proto3" json:"raw_hex,omitempty"`
	W3C    *W3C    `protobuf:"bytes,2,opt,name=w3c,proto3" json:"w3c,omitempty"`
	Value  float32 `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{8}
}

func (x *Color) GetRawHex() string {
	if x != nil {
		return x.RawHex
	}
	return ""
}

func (x *Color) GetW3C() *W3C {
	if x != nil {
		return x.W3C
	}
	return nil
}

func (x *Color) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type W3C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hex  string `protobuf:"bytes,1,opt,name=hex,proto3" json:"hex,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *W3C) Reset() {
	*x = W3C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *W3C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*W3C) ProtoMessage() {}

func (x *W3C) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use W3C.ProtoReflect.Descriptor instead.
func (*W3C) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{9}
}

func (x *W3C) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *W3C) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/common.proto
////////////////////////////////////////////////////////////////////////////////
// Common message to identify the app in a url endpoint.
type UserAppIDSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note user_id 'me' is reserved - it is the alias for the id of authorized user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppId  string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *UserAppIDSet) Reset() {
	*x = UserAppIDSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAppIDSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppIDSet) ProtoMessage() {}

func (x *UserAppIDSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppIDSet.ProtoReflect.Descriptor instead.
func (*UserAppIDSet) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{10}
}

func (x *UserAppIDSet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAppIDSet) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type PatchAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The operation to perform on the patched metadata given a path
	// For now only operations 'overwrite', 'delete, and 'merge' is supported
	Op string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// If the action is 'merge' and there is a conflict, how to resolve it.
	// The options are
	// 'overwrite_by_id', 'remove_by_id', 'merge_by_id','overwrite', 'append' and 'do_nothing'
	// Note that for conflict resolutions '*_by_id' to work on a list, the list should contain
	// objects with an 'id' field which will be used to uniquely identify each field. For example
	// Patching existing json
	// {
	//   "tag": [
	//     {
	//       "id": "1",
	//       "data": 1
	//     },
	//     {
	//       "id": "2",
	//       "data": 2
	//     }
	//   ]
	// }
	// with op 'merge' and merge_conflict_resolution 'overwrite_by_id'
	// {
	//   "tag": [
	//     {
	//       "id": "2",
	//       "data": 3
	//     }
	//   ]
	// }
	// would produce
	// {
	//   "tag": [
	//     {
	//       "id": "1",
	//       "data": 1
	//     },
	//     {
	//       "id": "2",
	//       "data": 3
	//     }
	//   ]
	// }
	// while with merge_conflict_resolution 'remove_by_id' it would produce
	// {
	//   "tag": [
	//     {
	//       "id": "1",
	//       "data": 1
	//     }
	//   ]
	// }
	//
	// Option 'append' will simply create a list on conflicts. For example in above example
	// the final result would be
	// {
	//   "tag": [
	//     {
	//       "id": "1",
	//       "data": 1
	//     },
	//     {
	//       "id": "2",
	//       "data": [2, 3]
	//     }
	//   ]
	// }
	MergeConflictResolution string `protobuf:"bytes,2,opt,name=merge_conflict_resolution,json=mergeConflictResolution,proto3" json:"merge_conflict_resolution,omitempty"`
	// Path for the change. For example 'tag[1].data' is a valid path in above example.
	// Default path is root level i.e. ''.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PatchAction) Reset() {
	*x = PatchAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAction) ProtoMessage() {}

func (x *PatchAction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAction.ProtoReflect.Descriptor instead.
func (*PatchAction) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{11}
}

func (x *PatchAction) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *PatchAction) GetMergeConflictResolution() string {
	if x != nil {
		return x.MergeConflictResolution
	}
	return ""
}

func (x *PatchAction) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/concept.proto
////////////////////////////////////////////////////////////////////////////////
type Concept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The concept's unique id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the concept in the given language.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Used to indicate presence (1.0) or not (0.0) of this concept when making a request.
	// This is also the prediction probability when returning predictions from our API.
	// For convenience we use the default of 1.0 when making requests so the concept you provide is
	// is treated as a positive (1.0) and not a negative (which would be value == 0.0).
	Value float32 `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	// When the concept was created. The format is https://www.ietf.org/rfc/rfc3339.txt .
	// Example: "2006-01-02T15:04:05.999999Z". This field is used only in a response.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The language in which the concept name is in. This is *ONLY* used in the response and setting
	// it in a request is ignored since the default language of your app is used when creating
	// or patching a Concept. To set other languages for your concept use the ConceptLanguage object
	// and its corresponding endpoints.
	Language string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	// The application id that this concept is within. This can be ignored by most users.
	AppId string `protobuf:"bytes,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The definition for the concept. Similar to name. This can be ignored by most users.
	Definition string `protobuf:"bytes,7,opt,name=definition,proto3" json:"definition,omitempty"`
	// The vocabulary that this concept belongs to. This is useful if you have different unique sets
	// of concepts that you can separate out based on this field. For example "age_appearance" vs
	// "gender_appearance" in a list of concept returned from the demographics model.
	VocabId string `protobuf:"bytes,8,opt,name=vocab_id,json=vocabId,proto3" json:"vocab_id,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,9,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The user the concept belongs to.
	UserId string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Concept) Reset() {
	*x = Concept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Concept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Concept) ProtoMessage() {}

func (x *Concept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Concept.ProtoReflect.Descriptor instead.
func (*Concept) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{12}
}

func (x *Concept) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Concept) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Concept) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Concept) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Concept) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Concept) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Concept) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Concept) GetVocabId() string {
	if x != nil {
		return x.VocabId
	}
	return ""
}

func (x *Concept) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *Concept) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ConceptCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The concept's unique id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the concept.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The total count for concepts labeled for all asset statues (processing, to_process, processed, error)
	ConceptTypeCount *ConceptTypeCount `protobuf:"bytes,3,opt,name=concept_type_count,json=conceptTypeCount,proto3" json:"concept_type_count,omitempty"`
	// The detail count for different assets status
	DetailConceptCount *DetailConceptCount `protobuf:"bytes,4,opt,name=detail_concept_count,json=detailConceptCount,proto3" json:"detail_concept_count,omitempty"`
}

func (x *ConceptCount) Reset() {
	*x = ConceptCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptCount) ProtoMessage() {}

func (x *ConceptCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptCount.ProtoReflect.Descriptor instead.
func (*ConceptCount) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{13}
}

func (x *ConceptCount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptCount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConceptCount) GetConceptTypeCount() *ConceptTypeCount {
	if x != nil {
		return x.ConceptTypeCount
	}
	return nil
}

func (x *ConceptCount) GetDetailConceptCount() *DetailConceptCount {
	if x != nil {
		return x.DetailConceptCount
	}
	return nil
}

type ConceptTypeCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of inputs that have a concept with a value of 1.0 (indicating presence of the
	// concept in an input).
	Positive uint32 `protobuf:"varint,1,opt,name=positive,proto3" json:"positive,omitempty"`
	// The number of inputs that have a concept with a value of 0.0 (indicating absence of the
	// concept in an input).
	Negative uint32 `protobuf:"varint,2,opt,name=negative,proto3" json:"negative,omitempty"`
}

func (x *ConceptTypeCount) Reset() {
	*x = ConceptTypeCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptTypeCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptTypeCount) ProtoMessage() {}

func (x *ConceptTypeCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptTypeCount.ProtoReflect.Descriptor instead.
func (*ConceptTypeCount) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{14}
}

func (x *ConceptTypeCount) GetPositive() uint32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *ConceptTypeCount) GetNegative() uint32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

type DetailConceptCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The concept count for processed assets
	Processed *ConceptTypeCount `protobuf:"bytes,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// The concept count for to process assets
	ToProcess *ConceptTypeCount `protobuf:"bytes,2,opt,name=to_process,json=toProcess,proto3" json:"to_process,omitempty"`
	// The concept count for assets with status error
	Errors *ConceptTypeCount `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
	// The concept count for processing assets
	Processing *ConceptTypeCount `protobuf:"bytes,4,opt,name=processing,proto3" json:"processing,omitempty"`
}

func (x *DetailConceptCount) Reset() {
	*x = DetailConceptCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailConceptCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailConceptCount) ProtoMessage() {}

func (x *DetailConceptCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailConceptCount.ProtoReflect.Descriptor instead.
func (*DetailConceptCount) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{15}
}

func (x *DetailConceptCount) GetProcessed() *ConceptTypeCount {
	if x != nil {
		return x.Processed
	}
	return nil
}

func (x *DetailConceptCount) GetToProcess() *ConceptTypeCount {
	if x != nil {
		return x.ToProcess
	}
	return nil
}

func (x *DetailConceptCount) GetErrors() *ConceptTypeCount {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *DetailConceptCount) GetProcessing() *ConceptTypeCount {
	if x != nil {
		return x.Processing
	}
	return nil
}

type ConceptQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the concept to search.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (optional) The language of the concept name in a search. Defaults to English.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// (optional) The id of workflow. If no id is provided, then application base workflow is used.
	WorkflowId string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *ConceptQuery) Reset() {
	*x = ConceptQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptQuery) ProtoMessage() {}

func (x *ConceptQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptQuery.ProtoReflect.Descriptor instead.
func (*ConceptQuery) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{16}
}

func (x *ConceptQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConceptQuery) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ConceptQuery) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/concept_graph.proto
////////////////////////////////////////////////////////////////////////////////
// This represents a relation (i.e. edge) between the subject concept and the object concept
type ConceptRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the concept relation
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The subject concept (i.e. source) of the concept relation
	SubjectConcept *Concept `protobuf:"bytes,2,opt,name=subject_concept,json=subjectConcept,proto3" json:"subject_concept,omitempty"`
	// The subject concept (i.e. destination) of the concept relation
	ObjectConcept *Concept `protobuf:"bytes,3,opt,name=object_concept,json=objectConcept,proto3" json:"object_concept,omitempty"`
	// The predicate (i.e. edge) linking the subject and the object
	// Both subject_concept and object_concept are concepts.
	// The predicate is the type of relationship.
	// That predicate acts on the subject.
	//
	// There are three current types of predicates:
	// 1) "hyponym"
	// 2) "hypernym"
	// 3) "synonym"
	//
	// 1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
	// the following relationship:
	// 'honey' (subject), 'hyponym' (predicate), 'food' (object)
	// Can more easily be read as:
	// 'honey' 'is a kind of' 'food'
	//
	//
	// 2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
	// relationships the opposite will automatically appear for you in queries.
	//
	// The 'hypernym' can be read as 'is a parent of' so:
	// 'food' (subject), 'hypernym' (predicate), 'honey' (object)
	// Can more easily be read as:
	// 'food' is a parent of 'honey'
	//
	// 3) The 'synonym' relation defines two concepts that essential mean the same thing. This
	// is more like a "is" relationship. So for example a 'synonym' relationship could be:
	// "puppy" is "pup"
	// The reverse is also true once the former is added so:
	// "pup" is "puppy"
	// will appear in queries as well.
	Predicate string `protobuf:"bytes,4,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// The knowledge graph id that this edge belongs to. If using the app's global knowledge graph
	// and not a specific one then this should be the empty string "".
	KnowledgeGraphId string `protobuf:"bytes,5,opt,name=knowledge_graph_id,json=knowledgeGraphId,proto3" json:"knowledge_graph_id,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,6,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *ConceptRelation) Reset() {
	*x = ConceptRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptRelation) ProtoMessage() {}

func (x *ConceptRelation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptRelation.ProtoReflect.Descriptor instead.
func (*ConceptRelation) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{17}
}

func (x *ConceptRelation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptRelation) GetSubjectConcept() *Concept {
	if x != nil {
		return x.SubjectConcept
	}
	return nil
}

func (x *ConceptRelation) GetObjectConcept() *Concept {
	if x != nil {
		return x.ObjectConcept
	}
	return nil
}

func (x *ConceptRelation) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *ConceptRelation) GetKnowledgeGraphId() string {
	if x != nil {
		return x.KnowledgeGraphId
	}
	return ""
}

func (x *ConceptRelation) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

// A Knowledge Graph is a logical subsets of edges in the overall Concept Graph
type KnowledgeGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the knowledge graph
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the knowledge graph
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable description of the knowledge graph
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The app that contains the images that correspond to the concepts in the knowledge graph
	ExamplesAppId string `protobuf:"bytes,4,opt,name=examples_app_id,json=examplesAppId,proto3" json:"examples_app_id,omitempty"`
	// The app that contains the sample images that we want to show the customer for the concepts in the knowledge graph
	SampledExamplesAppId string `protobuf:"bytes,5,opt,name=sampled_examples_app_id,json=sampledExamplesAppId,proto3" json:"sampled_examples_app_id,omitempty"`
}

func (x *KnowledgeGraph) Reset() {
	*x = KnowledgeGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeGraph) ProtoMessage() {}

func (x *KnowledgeGraph) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeGraph.ProtoReflect.Descriptor instead.
func (*KnowledgeGraph) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{18}
}

func (x *KnowledgeGraph) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KnowledgeGraph) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KnowledgeGraph) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeGraph) GetExamplesAppId() string {
	if x != nil {
		return x.ExamplesAppId
	}
	return ""
}

func (x *KnowledgeGraph) GetSampledExamplesAppId() string {
	if x != nil {
		return x.SampledExamplesAppId
	}
	return ""
}

type ConceptMappingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the knowledge graph being used for this concept mapping job
	KnowledgeGraphId string `protobuf:"bytes,1,opt,name=knowledge_graph_id,json=knowledgeGraphId,proto3" json:"knowledge_graph_id,omitempty"`
	// The ids of the concepts being mapped
	ConceptIds []string `protobuf:"bytes,2,rep,name=concept_ids,json=conceptIds,proto3" json:"concept_ids,omitempty"`
}

func (x *ConceptMappingJob) Reset() {
	*x = ConceptMappingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMappingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMappingJob) ProtoMessage() {}

func (x *ConceptMappingJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMappingJob.ProtoReflect.Descriptor instead.
func (*ConceptMappingJob) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{19}
}

func (x *ConceptMappingJob) GetKnowledgeGraphId() string {
	if x != nil {
		return x.KnowledgeGraphId
	}
	return ""
}

func (x *ConceptMappingJob) GetConceptIds() []string {
	if x != nil {
		return x.ConceptIds
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/concept_language.proto
////////////////////////////////////////////////////////////////////////////////
// This represents a link to an outside source for the given concept.
// The values from here are sticked into Concept message into the name and definition fields when
// returning from the API in your default language. The "id" field here becomes the "language"
// field of the Concept message which is a little weird.
type ConceptLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the language code for the language such as "en".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of the outside source.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The ID that is referenced in the source.
	Definition string `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *ConceptLanguage) Reset() {
	*x = ConceptLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptLanguage) ProtoMessage() {}

func (x *ConceptLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptLanguage.ProtoReflect.Descriptor instead.
func (*ConceptLanguage) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{20}
}

func (x *ConceptLanguage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptLanguage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConceptLanguage) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/data.proto
////////////////////////////////////////////////////////////////////////////////
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input and output images.
	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Input and output videos.
	Video *Video `protobuf:"bytes,2,opt,name=video,proto3" json:"video,omitempty"`
	// A list of concepts.
	Concepts []*Concept `protobuf:"bytes,3,rep,name=concepts,proto3" json:"concepts,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *_struct.Struct `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Geography information.
	Geo *Geo `protobuf:"bytes,6,opt,name=geo,proto3" json:"geo,omitempty"`
	// The dominant colors within an image.
	Colors []*Color `protobuf:"bytes,7,rep,name=colors,proto3" json:"colors,omitempty"`
	// Clustering centroids for inputs.
	Clusters []*Cluster `protobuf:"bytes,8,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// Embedding vectors representing each input.
	Embeddings []*Embedding `protobuf:"bytes,9,rep,name=embeddings,proto3" json:"embeddings,omitempty"`
	// For recursing into localized regions of an input.
	Regions []*Region `protobuf:"bytes,11,rep,name=regions,proto3" json:"regions,omitempty"`
	// For temporal content like video.
	Frames []*Frame `protobuf:"bytes,12,rep,name=frames,proto3" json:"frames,omitempty"`
	// Input and output text.
	Text *Text `protobuf:"bytes,13,opt,name=text,proto3" json:"text,omitempty"`
	// Input and output audio.
	Audio *Audio `protobuf:"bytes,14,opt,name=audio,proto3" json:"audio,omitempty"`
	// Track information.
	Tracks []*Track `protobuf:"bytes,15,rep,name=tracks,proto3" json:"tracks,omitempty"`
	// Time segments information.
	TimeSegments []*TimeSegment `protobuf:"bytes,16,rep,name=time_segments,json=timeSegments,proto3" json:"time_segments,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{21}
}

func (x *Data) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Data) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Data) GetConcepts() []*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *Data) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Data) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *Data) GetColors() []*Color {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *Data) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *Data) GetEmbeddings() []*Embedding {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

func (x *Data) GetRegions() []*Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Data) GetFrames() []*Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *Data) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Data) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Data) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *Data) GetTimeSegments() []*TimeSegment {
	if x != nil {
		return x.TimeSegments
	}
	return nil
}

// A region within the data.
type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique id for the region.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The details about the location of the region.
	RegionInfo *RegionInfo `protobuf:"bytes,2,opt,name=region_info,json=regionInfo,proto3" json:"region_info,omitempty"`
	// A recursive definition of the data within the Region. For example, this will contain
	// data.concepts if the region also has annotations or predictions of concepts within it.
	Data *Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// This is the confidence score of the overall Region.
	Value float32 `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
	// For tracking algorithsm and annotations we tie regions together with this track id.
	TrackId string `protobuf:"bytes,5,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{22}
}

func (x *Region) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Region) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *Region) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Region) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Region) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

// The information of the location of the Region.
type RegionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the region's rectangular bounding box.
	BoundingBox *BoundingBox `protobuf:"bytes,1,opt,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
	// Details of the region's segmentation mask.
	Mask *Mask `protobuf:"bytes,4,opt,name=mask,proto3" json:"mask,omitempty"`
	// A polygon of points.
	Polygon *Polygon `protobuf:"bytes,5,opt,name=polygon,proto3" json:"polygon,omitempty"`
	// A landmark point location.
	Point *Point `protobuf:"bytes,6,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *RegionInfo) Reset() {
	*x = RegionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionInfo) ProtoMessage() {}

func (x *RegionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionInfo.ProtoReflect.Descriptor instead.
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{23}
}

func (x *RegionInfo) GetBoundingBox() *BoundingBox {
	if x != nil {
		return x.BoundingBox
	}
	return nil
}

func (x *RegionInfo) GetMask() *Mask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *RegionInfo) GetPolygon() *Polygon {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *RegionInfo) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

// Rectangular bounding box for a region.
type BoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The top left of the bounding box normalized to the data dimension to be within [0-1.0]
	TopRow float32 `protobuf:"fixed32,1,opt,name=top_row,json=topRow,proto3" json:"top_row,omitempty"`
	// The left column of the bounding box normalized to the data dimension to be within [0-1.0]
	LeftCol float32 `protobuf:"fixed32,2,opt,name=left_col,json=leftCol,proto3" json:"left_col,omitempty"`
	// The bottom row of the bounding box normalized to the data dimension to be within [0-1.0]
	BottomRow float32 `protobuf:"fixed32,3,opt,name=bottom_row,json=bottomRow,proto3" json:"bottom_row,omitempty"`
	// The right col of the bounding box normalized to the data dimension to be within [0-1.0]
	RightCol float32 `protobuf:"fixed32,4,opt,name=right_col,json=rightCol,proto3" json:"right_col,omitempty"`
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{24}
}

func (x *BoundingBox) GetTopRow() float32 {
	if x != nil {
		return x.TopRow
	}
	return 0
}

func (x *BoundingBox) GetLeftCol() float32 {
	if x != nil {
		return x.LeftCol
	}
	return 0
}

func (x *BoundingBox) GetBottomRow() float32 {
	if x != nil {
		return x.BottomRow
	}
	return 0
}

func (x *BoundingBox) GetRightCol() float32 {
	if x != nil {
		return x.RightCol
	}
	return 0
}

// The information of the location of the Frame.
type FrameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the frame. Keep in mind that this depends on the sampling rate used during
	// processing.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// time in the video in milliseconds. This is independent of the sampling rates used during
	// processing.
	Time uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *FrameInfo) Reset() {
	*x = FrameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameInfo) ProtoMessage() {}

func (x *FrameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameInfo.ProtoReflect.Descriptor instead.
func (*FrameInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{25}
}

func (x *FrameInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FrameInfo) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

// A Frame of time-series Data such as a Video.
type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information aboue frame such as number and time.
	FrameInfo *FrameInfo `protobuf:"bytes,1,opt,name=frame_info,json=frameInfo,proto3" json:"frame_info,omitempty"`
	// A recursive definition of the data within the Frame. For example, this will contain
	// data.concepts if the Frame also has annotations or predictions of concepts within it.
	// This can also have data.regions for annotation or predictions of detection regions, which can
	// then recursively have their data field filled in as well.
	Data *Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// An ID for the frame.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{26}
}

func (x *Frame) GetFrameInfo() *FrameInfo {
	if x != nil {
		return x.FrameInfo
	}
	return nil
}

func (x *Frame) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Frame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Segmentation mask.
type Mask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image of the mask in a non-raster format.
	Image *Image `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Mask) Reset() {
	*x = Mask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mask) ProtoMessage() {}

func (x *Mask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mask.ProtoReflect.Descriptor instead.
func (*Mask) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{27}
}

func (x *Mask) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of points connected together to form the polygon.
	Points []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{28}
}

func (x *Polygon) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The row location of the point. This has a [0.0-1.0] range with 0.0 being top row and 1.0
	// being the bottom row.
	Row float32 `protobuf:"fixed32,1,opt,name=row,proto3" json:"row,omitempty"`
	// The column location of the point. This has a [0.0-1.0] range with 0.0 being left col and 1.0
	// being the right col.
	Col float32 `protobuf:"fixed32,2,opt,name=col,proto3" json:"col,omitempty"`
	// Depth if applicable for the point.
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{29}
}

func (x *Point) GetRow() float32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *Point) GetCol() float32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *Point) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/embedding.proto
////////////////////////////////////////////////////////////////////////////////
type Embedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector        []float32 `protobuf:"fixed32,1,rep,packed,name=vector,proto3" json:"vector,omitempty"`
	NumDimensions uint32    `protobuf:"varint,2,opt,name=num_dimensions,json=numDimensions,proto3" json:"num_dimensions,omitempty"`
}

func (x *Embedding) Reset() {
	*x = Embedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embedding) ProtoMessage() {}

func (x *Embedding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embedding.ProtoReflect.Descriptor instead.
func (*Embedding) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{30}
}

func (x *Embedding) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *Embedding) GetNumDimensions() uint32 {
	if x != nil {
		return x.NumDimensions
	}
	return 0
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/geo.proto
////////////////////////////////////////////////////////////////////////////////
type GeoPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float32 `protobuf:"fixed32,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude  float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{31}
}

func (x *GeoPoint) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoPoint) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type GeoLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GeoLimit) Reset() {
	*x = GeoLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLimit) ProtoMessage() {}

func (x *GeoLimit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLimit.ProtoReflect.Descriptor instead.
func (*GeoLimit) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{32}
}

func (x *GeoLimit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GeoLimit) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GeoBoxedPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoPoint *GeoPoint `protobuf:"bytes,1,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
}

func (x *GeoBoxedPoint) Reset() {
	*x = GeoBoxedPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoxedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoxedPoint) ProtoMessage() {}

func (x *GeoBoxedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoxedPoint.ProtoReflect.Descriptor instead.
func (*GeoBoxedPoint) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{33}
}

func (x *GeoBoxedPoint) GetGeoPoint() *GeoPoint {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

type Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoPoint *GeoPoint `protobuf:"bytes,1,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	GeoLimit *GeoLimit `protobuf:"bytes,2,opt,name=geo_limit,json=geoLimit,proto3" json:"geo_limit,omitempty"`
	// NOTE: inconsistency: should have been geo_boxed_points
	GeoBox []*GeoBoxedPoint `protobuf:"bytes,3,rep,name=geo_box,json=geoBox,proto3" json:"geo_box,omitempty"`
}

func (x *Geo) Reset() {
	*x = Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geo) ProtoMessage() {}

func (x *Geo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geo.ProtoReflect.Descriptor instead.
func (*Geo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{34}
}

func (x *Geo) GetGeoPoint() *GeoPoint {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *Geo) GetGeoLimit() *GeoLimit {
	if x != nil {
		return x.GeoLimit
	}
	return nil
}

func (x *Geo) GetGeoBox() []*GeoBoxedPoint {
	if x != nil {
		return x.GeoBox
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/image.proto
////////////////////////////////////////////////////////////////////////////////
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a URL to a publicly accessible image file. The platform will download this file server
	// side and then process.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The base64 field is using image file bytes directly in the request.
	// NOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence
	// the name here).
	// When using our grpc clients, you DO NOT need to base64 encode
	// it yourself since the clients know how to do this for you automatically and will avoid the
	// base64 encoding if they send a binary request.
	Base64            []byte `protobuf:"bytes,2,opt,name=base64,proto3" json:"base64,omitempty"`
	AllowDuplicateUrl bool   `protobuf:"varint,4,opt,name=allow_duplicate_url,json=allowDuplicateUrl,proto3" json:"allow_duplicate_url,omitempty"`
	// The hosted field lists images in different sizes hosted in Clarifai storage.
	Hosted *HostedURL `protobuf:"bytes,5,opt,name=hosted,proto3" json:"hosted,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{35}
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Image) GetBase64() []byte {
	if x != nil {
		return x.Base64
	}
	return nil
}

func (x *Image) GetAllowDuplicateUrl() bool {
	if x != nil {
		return x.AllowDuplicateUrl
	}
	return false
}

func (x *Image) GetHosted() *HostedURL {
	if x != nil {
		return x.Hosted
	}
	return nil
}

type HostedURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prefix of the URL of every hosted image.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Suffix of an image stored in different sizes.
	Suffix string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// The sizes field lists which images of the different sizes are hosted in our storage. The URL
	// of each hosted image can be obtained by joining the prefix, one of the sizes and suffix.
	Sizes []string `protobuf:"bytes,3,rep,name=sizes,proto3" json:"sizes,omitempty"`
	// The crossorigin property of html media tag
	// For Secure Data Hosting this needs to be set to 'use-credentials'
	Crossorigin string `protobuf:"bytes,4,opt,name=crossorigin,proto3" json:"crossorigin,omitempty"`
}

func (x *HostedURL) Reset() {
	*x = HostedURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostedURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostedURL) ProtoMessage() {}

func (x *HostedURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostedURL.ProtoReflect.Descriptor instead.
func (*HostedURL) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{36}
}

func (x *HostedURL) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *HostedURL) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *HostedURL) GetSizes() []string {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *HostedURL) GetCrossorigin() string {
	if x != nil {
		return x.Crossorigin
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/input.proto
////////////////////////////////////////////////////////////////////////////////
type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID for the input
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The data passed along in this input.
	Data *Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// When the input was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When the input was modified.
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the status at a per Input level which allows for
	// partial failures.
	Status *status.Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{37}
}

func (x *Input) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Input) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Input) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Input) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Input) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// NOTE: inconsistency: this is weird mix of plural and singular words.
type InputCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processed     uint32 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	ToProcess     uint32 `protobuf:"varint,2,opt,name=to_process,json=toProcess,proto3" json:"to_process,omitempty"`
	Errors        uint32 `protobuf:"varint,3,opt,name=errors,proto3" json:"errors,omitempty"`
	Processing    uint32 `protobuf:"varint,4,opt,name=processing,proto3" json:"processing,omitempty"`
	Reindexed     uint32 `protobuf:"varint,5,opt,name=reindexed,proto3" json:"reindexed,omitempty"`
	ToReindex     uint32 `protobuf:"varint,6,opt,name=to_reindex,json=toReindex,proto3" json:"to_reindex,omitempty"`
	ReindexErrors uint32 `protobuf:"varint,7,opt,name=reindex_errors,json=reindexErrors,proto3" json:"reindex_errors,omitempty"`
	Reindexing    uint32 `protobuf:"varint,8,opt,name=reindexing,proto3" json:"reindexing,omitempty"`
}

func (x *InputCount) Reset() {
	*x = InputCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCount) ProtoMessage() {}

func (x *InputCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCount.ProtoReflect.Descriptor instead.
func (*InputCount) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{38}
}

func (x *InputCount) GetProcessed() uint32 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *InputCount) GetToProcess() uint32 {
	if x != nil {
		return x.ToProcess
	}
	return 0
}

func (x *InputCount) GetErrors() uint32 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *InputCount) GetProcessing() uint32 {
	if x != nil {
		return x.Processing
	}
	return 0
}

func (x *InputCount) GetReindexed() uint32 {
	if x != nil {
		return x.Reindexed
	}
	return 0
}

func (x *InputCount) GetToReindex() uint32 {
	if x != nil {
		return x.ToReindex
	}
	return 0
}

func (x *InputCount) GetReindexErrors() uint32 {
	if x != nil {
		return x.ReindexErrors
	}
	return 0
}

func (x *InputCount) GetReindexing() uint32 {
	if x != nil {
		return x.Reindexing
	}
	return 0
}

type WorkflowResultsSimilarity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input with the specific data compare against all pool results
	ProbeInput  *Input `protobuf:"bytes,1,opt,name=probe_input,json=probeInput,proto3" json:"probe_input,omitempty"`
	PoolResults []*Hit `protobuf:"bytes,2,rep,name=pool_results,json=poolResults,proto3" json:"pool_results,omitempty"`
}

func (x *WorkflowResultsSimilarity) Reset() {
	*x = WorkflowResultsSimilarity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowResultsSimilarity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowResultsSimilarity) ProtoMessage() {}

func (x *WorkflowResultsSimilarity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowResultsSimilarity.ProtoReflect.Descriptor instead.
func (*WorkflowResultsSimilarity) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{39}
}

func (x *WorkflowResultsSimilarity) GetProbeInput() *Input {
	if x != nil {
		return x.ProbeInput
	}
	return nil
}

func (x *WorkflowResultsSimilarity) GetPoolResults() []*Hit {
	if x != nil {
		return x.PoolResults
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/key.proto
////////////////////////////////////////////////////////////////////////////////
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of this key, it is used for authorization.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of key, it can be api_key or personal_access_token, the default value is api_key
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// The description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The low-level scopes this key has
	Scopes []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// The endpoint-level scopes this key has
	Endpoints []string `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// The apps that this key give you access to, it is empty if this key is personal_access_token
	// API key can only give you access to a single app.
	Apps []*App `protobuf:"bytes,4,rep,name=apps,proto3" json:"apps,omitempty"`
	// When the key was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When does the key expires, the key won't expire if this is empty
	ExpiresAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// list of idp ids at which key is currently authorized
	AuthorizedIdpIds []string `protobuf:"bytes,9,rep,name=authorized_idp_ids,json=authorizedIdpIds,proto3" json:"authorized_idp_ids,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{40}
}

func (x *Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Key) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Key) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Key) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Key) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Key) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *Key) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Key) GetExpiresAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Key) GetAuthorizedIdpIds() []string {
	if x != nil {
		return x.AuthorizedIdpIds
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/model.proto
////////////////////////////////////////////////////////////////////////////////
// This is the Model object which represents a created model in the platform.
// Each model has a particular type denoted by the model_type_id.
// When creating a Model with PostModels the following happens:
//  - if the ModelType is trainable, then a new ModelVersion is created that is
//    - UNTRAINED status by default
//    - TRAINED status if a ModelVersion was included with PretrainedModelConfig in PostModels
//  - if the ModelType is not trainable, then a new ModelVersion is created with TRAINED status.
// To modify config settings like OutputInfo for the Model you an use PatchModels. This will
// also create a new ModelVersion, potentially UNTRAINED following the same rules as above.
// The fields that are patchable include Model.name, Model.display_name and Model.output_info
// (except the Model.output_info.type and Model.output_info.type_ext).
//
//
type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The model's ID. Must be unique within a particular app and URL-friendly.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A nicer-to-read name for the model. Can have spaces and special characters.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// When the model was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	//  the following from the API:
	//  "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When was the most recent model version created at
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,19,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The app the model belongs to.
	AppId string `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Info about the model's output and configuration.
	OutputInfo *OutputInfo `protobuf:"bytes,5,opt,name=output_info,json=outputInfo,proto3" json:"output_info,omitempty"`
	// A particular version of the model, e.g., to specify the version when creating a workflow.
	ModelVersion *ModelVersion `protobuf:"bytes,6,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	// An even nicer-to-read name for public Clarifai models where we're not happy with the name but
	// need a temporary workaround while we check what depends on these names.
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The user id that the model belongs to.
	UserId string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Info about the models' input and configuration of them.
	InputInfo *InputInfo `protobuf:"bytes,12,opt,name=input_info,json=inputInfo,proto3" json:"input_info,omitempty"`
	// Configuration for the training process of this model.
	TrainInfo *TrainInfo `protobuf:"bytes,13,opt,name=train_info,json=trainInfo,proto3" json:"train_info,omitempty"`
	// The ModelType.Id that is used for this model. This is used for all versions and you cannot
	// change model_type_id between versions of the same model.
	ModelTypeId string `protobuf:"bytes,14,opt,name=model_type_id,json=modelTypeId,proto3" json:"model_type_id,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,15,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// Short description about this model
	Description string `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *_struct.Struct `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Notes about a model (should support markdown)
	// This field should be used for in-depth notes about
	// about a model and supports up to 64Kbs.
	Notes string `protobuf:"bytes,18,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{41}
}

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Model) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Model) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Model) GetOutputInfo() *OutputInfo {
	if x != nil {
		return x.OutputInfo
	}
	return nil
}

func (x *Model) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

func (x *Model) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Model) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Model) GetInputInfo() *InputInfo {
	if x != nil {
		return x.InputInfo
	}
	return nil
}

func (x *Model) GetTrainInfo() *TrainInfo {
	if x != nil {
		return x.TrainInfo
	}
	return nil
}

func (x *Model) GetModelTypeId() string {
	if x != nil {
		return x.ModelTypeId
	}
	return ""
}

func (x *Model) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *Model) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Model) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Model) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// A link to a html/markdown/text file that stores reference material
// tied to a model.
type ModelReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the reference
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the model this Model reference is tied to.
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// address of resource
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// name of link
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// To handle arbitrary json metadata:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *_struct.Struct `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ModelReference) Reset() {
	*x = ModelReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelReference) ProtoMessage() {}

func (x *ModelReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelReference.ProtoReflect.Descriptor instead.
func (*ModelReference) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{42}
}

func (x *ModelReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelReference) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ModelReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ModelReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelReference) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ModelVersionInputExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user unique id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// external id of model
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// external id of model version
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// data to store as example input for model
	Data *Data `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// name of link for display
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// description of link contents
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ModelVersionInputExample) Reset() {
	*x = ModelVersionInputExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionInputExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionInputExample) ProtoMessage() {}

func (x *ModelVersionInputExample) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionInputExample.ProtoReflect.Descriptor instead.
func (*ModelVersionInputExample) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{43}
}

func (x *ModelVersionInputExample) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelVersionInputExample) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ModelVersionInputExample) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *ModelVersionInputExample) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ModelVersionInputExample) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelVersionInputExample) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// OutputInfo defines some of the settings for each model version that PatchModels can effect. These
// parameters control some of the training or inference operations that this model can do.
// As the number of parameters continued to grow when we launched more ModelTypes we decided to move
// to using the OutputInfo.params field which is a Struct (or JSON object if you're using
// our JSON REST APIs). This allows each ModelType to define the set of fields, their default values
// and description of each field so that we can display those in Portal and make the creation of
// Model's very extensible. The OutputConfig object will eventually go away in favor of
// infer_params struct.
type OutputInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of concepts or other output related data for the model.
	Data *Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Model configuration...going away in favor of infer_params and train_params over time.
	// TO BE DEPRECATED
	OutputConfig *OutputConfig `protobuf:"bytes,2,opt,name=output_config,json=outputConfig,proto3" json:"output_config,omitempty"`
	// For returning where to look for the Output info if not returning it.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// To help clients know what type of Data to expect out of the model.
	// TO BE DEPRECATED
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Extra metadata about the Type data.
	// TO BE DEPRECATED
	TypeExt string `protobuf:"bytes,5,opt,name=type_ext,json=typeExt,proto3" json:"type_ext,omitempty"`
	// Map from the api.Data field names to the underlying model graph's outputs. When using a
	// PretrainedModelConfig the values in this map need to match the Triton config.pbtxt output names.
	FieldsMap *_struct.Struct `protobuf:"bytes,6,opt,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty"`
	// For predicting with the various ModelType's we accept a Struct (JSON object) worth of args
	// that the ModelTypeField defines. During inference, the settings contained within are sent
	// to the model predictor to alter predictions from this Model.
	Params *_struct.Struct `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *OutputInfo) Reset() {
	*x = OutputInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputInfo) ProtoMessage() {}

func (x *OutputInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputInfo.ProtoReflect.Descriptor instead.
func (*OutputInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{44}
}

func (x *OutputInfo) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *OutputInfo) GetOutputConfig() *OutputConfig {
	if x != nil {
		return x.OutputConfig
	}
	return nil
}

func (x *OutputInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OutputInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OutputInfo) GetTypeExt() string {
	if x != nil {
		return x.TypeExt
	}
	return ""
}

func (x *OutputInfo) GetFieldsMap() *_struct.Struct {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

func (x *OutputInfo) GetParams() *_struct.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

type InputInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map from the api.Data field names to the underlying model graph's inputs. When using a
	// PretrainedModelConfig the values in this map need to match the Triton config.pbtxt input names.
	FieldsMap *_struct.Struct `protobuf:"bytes,1,opt,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty"`
	// To control the inputs to the given model we allow a list of parameters
	// defined for each ModelType as a Struct (JSON object) here. During training or inference, the
	// settings contained within are sent to the training processor to alter the training process.
	Params *_struct.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *InputInfo) Reset() {
	*x = InputInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputInfo) ProtoMessage() {}

func (x *InputInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputInfo.ProtoReflect.Descriptor instead.
func (*InputInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{45}
}

func (x *InputInfo) GetFieldsMap() *_struct.Struct {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

func (x *InputInfo) GetParams() *_struct.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

type TrainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// To control the training process when PostModelVersions is used we allow a list of parameters
	// defined for each ModelType as a Struct (JSON object) here. During training, the settings
	// contained within are sent to the training processor to alter the training process.
	Params *_struct.Struct `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *TrainInfo) Reset() {
	*x = TrainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainInfo) ProtoMessage() {}

func (x *TrainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainInfo.ProtoReflect.Descriptor instead.
func (*TrainInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{46}
}

func (x *TrainInfo) GetParams() *_struct.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

// OutputConfig is a collection of parameters controlling either inference or training settings for
// the given Model. This message will be deprecated over time in favor or infer_params and
// train_params in OutputInfo which are cleaner and more extensible for many ModelTypes.
type OutputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For custom concept model training: whether the concept predictions must sum to 1.
	ConceptsMutuallyExclusive bool `protobuf:"varint,1,opt,name=concepts_mutually_exclusive,json=conceptsMutuallyExclusive,proto3" json:"concepts_mutually_exclusive,omitempty"`
	// For custom concept model training: Whether negatives should only be sampled from within the app during
	// training, for custom models.
	ClosedEnvironment bool `protobuf:"varint,2,opt,name=closed_environment,json=closedEnvironment,proto3" json:"closed_environment,omitempty"`
	// DEPRECATED: For custom models, this is the base model to use for image embeddings.
	// Default is general model.
	//
	// Deprecated: Do not use.
	ExistingModelId string `protobuf:"bytes,3,opt,name=existing_model_id,json=existingModelId,proto3" json:"existing_model_id,omitempty"`
	// For concept model predictions: Overrides the default_language for the app in a predict call.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// DEPRECATED: Hyper-parameters for custom training.
	// Use new hyper_params field instead.
	//
	// Deprecated: Do not use.
	HyperParameters string `protobuf:"bytes,5,opt,name=hyper_parameters,json=hyperParameters,proto3" json:"hyper_parameters,omitempty"`
	// For concept model predictions:  Maximum number of concepts in result. Defaults to 0 which under
	// the hood will return default of 20. We do a server side default in order to control this
	// feature in the future.
	MaxConcepts uint32 `protobuf:"varint,6,opt,name=max_concepts,json=maxConcepts,proto3" json:"max_concepts,omitempty"`
	// For concept model predictions: Minimum value of concept's probability score in result.
	// Defaults to 0.0 which means we won't do any thresholding as all probabilities will
	// likely be > 0.0.
	MinValue float32 `protobuf:"fixed32,7,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// For concept model predictions: Select concepts in result by name or by id
	SelectConcepts []*Concept `protobuf:"bytes,8,rep,name=select_concepts,json=selectConcepts,proto3" json:"select_concepts,omitempty"`
	// For custom concept model training: Training timeout of the model (in seconds)
	TrainingTimeout uint32 `protobuf:"varint,9,opt,name=training_timeout,json=trainingTimeout,proto3" json:"training_timeout,omitempty"`
	// For model predictions on video: Sample delay for video predicting (1 frame per N milliseconds)
	SampleMs uint32 `protobuf:"varint,10,opt,name=sample_ms,json=sampleMs,proto3" json:"sample_ms,omitempty"`
	// For custom model training: Hyperparameters for custom training
	HyperParams *_struct.Struct `protobuf:"bytes,13,opt,name=hyper_params,json=hyperParams,proto3" json:"hyper_params,omitempty"`
	// For custom model training: this is the base model version to use for image embeddings.
	// This has to be one of the embed models in the app workflow.
	EmbedModelVersionId string `protobuf:"bytes,14,opt,name=embed_model_version_id,json=embedModelVersionId,proto3" json:"embed_model_version_id,omitempty"`
	// For custom model training: Use this flag to fail on missing positive examples
	// By default we fill in the missing with random examples
	FailOnMissingPositiveExamples bool `protobuf:"varint,15,opt,name=fail_on_missing_positive_examples,json=failOnMissingPositiveExamples,proto3" json:"fail_on_missing_positive_examples,omitempty"`
	// For custom model training: This is any additional metadata as a JSON object that we want
	// want to persist in the model's output config. This is a useful quick way to set fields for
	// introducing fields for new model types so we don't have to add a new proto field and DB field
	// each time. Please refer to the documentation or model implementation internally for more
	// details on what fields are supported for which models.
	// TODO(zeiler): remove this field after Portal is updated.
	//
	// Deprecated: Do not use.
	ModelMetadata *_struct.Struct `protobuf:"bytes,17,opt,name=model_metadata,json=modelMetadata,proto3" json:"model_metadata,omitempty"`
}

func (x *OutputConfig) Reset() {
	*x = OutputConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputConfig) ProtoMessage() {}

func (x *OutputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputConfig.ProtoReflect.Descriptor instead.
func (*OutputConfig) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{47}
}

func (x *OutputConfig) GetConceptsMutuallyExclusive() bool {
	if x != nil {
		return x.ConceptsMutuallyExclusive
	}
	return false
}

func (x *OutputConfig) GetClosedEnvironment() bool {
	if x != nil {
		return x.ClosedEnvironment
	}
	return false
}

// Deprecated: Do not use.
func (x *OutputConfig) GetExistingModelId() string {
	if x != nil {
		return x.ExistingModelId
	}
	return ""
}

func (x *OutputConfig) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Deprecated: Do not use.
func (x *OutputConfig) GetHyperParameters() string {
	if x != nil {
		return x.HyperParameters
	}
	return ""
}

func (x *OutputConfig) GetMaxConcepts() uint32 {
	if x != nil {
		return x.MaxConcepts
	}
	return 0
}

func (x *OutputConfig) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *OutputConfig) GetSelectConcepts() []*Concept {
	if x != nil {
		return x.SelectConcepts
	}
	return nil
}

func (x *OutputConfig) GetTrainingTimeout() uint32 {
	if x != nil {
		return x.TrainingTimeout
	}
	return 0
}

func (x *OutputConfig) GetSampleMs() uint32 {
	if x != nil {
		return x.SampleMs
	}
	return 0
}

func (x *OutputConfig) GetHyperParams() *_struct.Struct {
	if x != nil {
		return x.HyperParams
	}
	return nil
}

func (x *OutputConfig) GetEmbedModelVersionId() string {
	if x != nil {
		return x.EmbedModelVersionId
	}
	return ""
}

func (x *OutputConfig) GetFailOnMissingPositiveExamples() bool {
	if x != nil {
		return x.FailOnMissingPositiveExamples
	}
	return false
}

// Deprecated: Do not use.
func (x *OutputConfig) GetModelMetadata() *_struct.Struct {
	if x != nil {
		return x.ModelMetadata
	}
	return nil
}

// ModelSpec is a definition of a Model type. This is used in model mode of portal
// to list out the possible models that can be created and can be used to understand more about
// the possible models in our platform.
type ModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifies for this model type. This is differnt than the 'type' field below because
	// the 'type' can be re-used for differnet input and output combinations whereas 'id' is always
	// unique.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// title for this model in model gallery
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Description of this model type.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The type of the model to create. This is currently stored in output_info.type.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The list of input fields that this model accepts. These are the keys of the Model's
	// InputInfo.fields_map
	InputFields []string `protobuf:"bytes,5,rep,name=input_fields,json=inputFields,proto3" json:"input_fields,omitempty"`
	// The list of output fields that this model accepts. These are the keys of the Model's
	// OutputInfo.fields_map
	OutputFields []string `protobuf:"bytes,6,rep,name=output_fields,json=outputFields,proto3" json:"output_fields,omitempty"`
	// Is this model trainable in our platform.
	Trainable bool `protobuf:"varint,8,opt,name=trainable,proto3" json:"trainable,omitempty"`
	// Is this model creatable. We have some pre-trained model types that users cannot create yet in
	// model mode.
	Creatable bool `protobuf:"varint,9,opt,name=creatable,proto3" json:"creatable,omitempty"`
	// Is this model type only for internal users at this time.
	InternalOnly bool `protobuf:"varint,10,opt,name=internal_only,json=internalOnly,proto3" json:"internal_only,omitempty"`
	// The remaining fields are definitions of the configurable fields that exist.
	// Each field has path into the Model object such as "name" as a top level or "output_info.data"
	// if it's the Data object within the OutputInfo object. We decided to not break these up
	// into input_info, train_info and output_info related parameters and instead use the path
	// so that they are most flexible.
	ModelTypeFields []*ModelTypeField `protobuf:"bytes,11,rep,name=model_type_fields,json=modelTypeFields,proto3" json:"model_type_fields,omitempty"`
	// For sequence models we need to know when processing that they require temporal time frames
	// in sequential order. This will be true for model types like trackers as an example.
	RequiresSequentialFrames bool `protobuf:"varint,12,opt,name=requires_sequential_frames,json=requiresSequentialFrames,proto3" json:"requires_sequential_frames,omitempty"`
	// Can this model be evaluated?
	Evaluable bool `protobuf:"varint,13,opt,name=evaluable,proto3" json:"evaluable,omitempty"`
	// Maps input_fields to the more granular data fields needed to parse a triton models inputs
	ExpectedPretrainedInputFields *_struct.Struct `protobuf:"bytes,14,opt,name=expected_pretrained_input_fields,json=expectedPretrainedInputFields,proto3" json:"expected_pretrained_input_fields,omitempty"`
	// Maps output_fields to the more granular data fields needed to parse a triton models outputs
	ExpectedPretrainedOutputFields *_struct.Struct `protobuf:"bytes,15,opt,name=expected_pretrained_output_fields,json=expectedPretrainedOutputFields,proto3" json:"expected_pretrained_output_fields,omitempty"`
}

func (x *ModelType) Reset() {
	*x = ModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelType) ProtoMessage() {}

func (x *ModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelType.ProtoReflect.Descriptor instead.
func (*ModelType) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{48}
}

func (x *ModelType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelType) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ModelType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModelType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ModelType) GetInputFields() []string {
	if x != nil {
		return x.InputFields
	}
	return nil
}

func (x *ModelType) GetOutputFields() []string {
	if x != nil {
		return x.OutputFields
	}
	return nil
}

func (x *ModelType) GetTrainable() bool {
	if x != nil {
		return x.Trainable
	}
	return false
}

func (x *ModelType) GetCreatable() bool {
	if x != nil {
		return x.Creatable
	}
	return false
}

func (x *ModelType) GetInternalOnly() bool {
	if x != nil {
		return x.InternalOnly
	}
	return false
}

func (x *ModelType) GetModelTypeFields() []*ModelTypeField {
	if x != nil {
		return x.ModelTypeFields
	}
	return nil
}

func (x *ModelType) GetRequiresSequentialFrames() bool {
	if x != nil {
		return x.RequiresSequentialFrames
	}
	return false
}

func (x *ModelType) GetEvaluable() bool {
	if x != nil {
		return x.Evaluable
	}
	return false
}

func (x *ModelType) GetExpectedPretrainedInputFields() *_struct.Struct {
	if x != nil {
		return x.ExpectedPretrainedInputFields
	}
	return nil
}

func (x *ModelType) GetExpectedPretrainedOutputFields() *_struct.Struct {
	if x != nil {
		return x.ExpectedPretrainedOutputFields
	}
	return nil
}

// ModelTypeField stores a field value of a configurable type.
type ModelTypeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path where the value of the field will be stored.
	// Example:
	// "output_info.data" would be the Data message in the OutputInfo message.
	// "output_info.output_config.language" is in the OutputConfig message within OutputInfo
	// "input_info.params" is in the params struct within InputInfo.
	// "output_info.params" is in the params struct within OutputInfo.
	// "train_info.params" is in the params struct within TrainInfo.
	// and so on.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The field for this field.
	FieldType ModelTypeField_ModelTypeFieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=clarifai.api.ModelTypeField_ModelTypeFieldType" json:"field_type,omitempty"`
	// A default value. We use the Value field because we want to have structured data (just like
	// google.protobuf.Struct but this is just a single value).
	DefaultValue *_struct.Value `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Description for this field.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Placeholder text for the UI element.
	Placeholder string `protobuf:"bytes,5,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	// List of options of the ENUM type and potentially additional fields they bring with them.
	ModelTypeEnumOptions []*ModelTypeEnumOption `protobuf:"bytes,6,rep,name=model_type_enum_options,json=modelTypeEnumOptions,proto3" json:"model_type_enum_options,omitempty"`
	// If this field should appear for internal users only.
	InternalOnly bool `protobuf:"varint,7,opt,name=internal_only,json=internalOnly,proto3" json:"internal_only,omitempty"`
	// If this field is a required field. If True then during validation you won't be able to create
	// a model of this type with providing a value for this field. When False, the ModelType's
	// default_value will be used for this field.
	Required bool `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	// If the field_type is RANGE, this must be filled in.
	ModelTypeRangeInfo *ModelTypeRangeInfo `protobuf:"bytes,9,opt,name=model_type_range_info,json=modelTypeRangeInfo,proto3" json:"model_type_range_info,omitempty"`
}

func (x *ModelTypeField) Reset() {
	*x = ModelTypeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTypeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTypeField) ProtoMessage() {}

func (x *ModelTypeField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTypeField.ProtoReflect.Descriptor instead.
func (*ModelTypeField) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{49}
}

func (x *ModelTypeField) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ModelTypeField) GetFieldType() ModelTypeField_ModelTypeFieldType {
	if x != nil {
		return x.FieldType
	}
	return ModelTypeField_INVALID_MODEL_TYPE_FIELD_TYPE
}

func (x *ModelTypeField) GetDefaultValue() *_struct.Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ModelTypeField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModelTypeField) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *ModelTypeField) GetModelTypeEnumOptions() []*ModelTypeEnumOption {
	if x != nil {
		return x.ModelTypeEnumOptions
	}
	return nil
}

func (x *ModelTypeField) GetInternalOnly() bool {
	if x != nil {
		return x.InternalOnly
	}
	return false
}

func (x *ModelTypeField) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ModelTypeField) GetModelTypeRangeInfo() *ModelTypeRangeInfo {
	if x != nil {
		return x.ModelTypeRangeInfo
	}
	return nil
}

type ModelTypeRangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start of the range as a float.
	Min float32 `protobuf:"fixed32,1,opt,name=min,proto3" json:"min,omitempty"`
	// The end of the range as a float.
	Max float32 `protobuf:"fixed32,2,opt,name=max,proto3" json:"max,omitempty"`
	// An optional step size for the range. If provided then only values at that step size will be
	// rounded to. For example if step is 0.02 then 0.0245 will round to 0.02.
	Step float32 `protobuf:"fixed32,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *ModelTypeRangeInfo) Reset() {
	*x = ModelTypeRangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTypeRangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTypeRangeInfo) ProtoMessage() {}

func (x *ModelTypeRangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTypeRangeInfo.ProtoReflect.Descriptor instead.
func (*ModelTypeRangeInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{50}
}

func (x *ModelTypeRangeInfo) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ModelTypeRangeInfo) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ModelTypeRangeInfo) GetStep() float32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type ModelTypeEnumOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique value of the enum option.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional description for this enum option.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// These are additional fields that are specific to this enum choice. This allows
	// us to use enums to control configuration settings as well.
	ModelTypeFields []*ModelTypeField `protobuf:"bytes,3,rep,name=model_type_fields,json=modelTypeFields,proto3" json:"model_type_fields,omitempty"`
	// If this enum option should be internal only.
	InternalOnly bool `protobuf:"varint,4,opt,name=internal_only,json=internalOnly,proto3" json:"internal_only,omitempty"`
}

func (x *ModelTypeEnumOption) Reset() {
	*x = ModelTypeEnumOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTypeEnumOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTypeEnumOption) ProtoMessage() {}

func (x *ModelTypeEnumOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTypeEnumOption.ProtoReflect.Descriptor instead.
func (*ModelTypeEnumOption) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{51}
}

func (x *ModelTypeEnumOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelTypeEnumOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModelTypeEnumOption) GetModelTypeFields() []*ModelTypeField {
	if x != nil {
		return x.ModelTypeFields
	}
	return nil
}

func (x *ModelTypeEnumOption) GetInternalOnly() bool {
	if x != nil {
		return x.InternalOnly
	}
	return false
}

type ModelQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name ofthe field. This supports wilcard queries like "gen*" to match "general" as an example.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This is the legacy model type. Do not use, only kept for support in old API clients.
	//
	// Deprecated: Do not use.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
	// supported.
	ModelTypeId string `protobuf:"bytes,3,opt,name=model_type_id,json=modelTypeId,proto3" json:"model_type_id,omitempty"`
}

func (x *ModelQuery) Reset() {
	*x = ModelQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelQuery) ProtoMessage() {}

func (x *ModelQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelQuery.ProtoReflect.Descriptor instead.
func (*ModelQuery) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{52}
}

func (x *ModelQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *ModelQuery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ModelQuery) GetModelTypeId() string {
	if x != nil {
		return x.ModelTypeId
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/model_version.proto
////////////////////////////////////////////////////////////////////////////////
type ModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// When the version was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The status of the version (whether it's untrained, training, trained, etc.).
	Status             *status.Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ActiveConceptCount uint32         `protobuf:"varint,4,opt,name=active_concept_count,json=activeConceptCount,proto3" json:"active_concept_count,omitempty"`
	Metrics            *EvalMetrics   `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// number of inputs in the model version
	TotalInputCount uint32 `protobuf:"varint,6,opt,name=total_input_count,json=totalInputCount,proto3" json:"total_input_count,omitempty"`
	// When training of this version was completed.
	CompletedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// Description about this version
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,12,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The app the model version belongs to.
	AppId string `protobuf:"bytes,13,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The user the model version belongs to.
	UserId string `protobuf:"bytes,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// When this model version was last modified
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *_struct.Struct `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`
	License  string          `protobuf:"bytes,17,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *ModelVersion) Reset() {
	*x = ModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersion) ProtoMessage() {}

func (x *ModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersion.ProtoReflect.Descriptor instead.
func (*ModelVersion) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{53}
}

func (x *ModelVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelVersion) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ModelVersion) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ModelVersion) GetActiveConceptCount() uint32 {
	if x != nil {
		return x.ActiveConceptCount
	}
	return 0
}

func (x *ModelVersion) GetMetrics() *EvalMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ModelVersion) GetTotalInputCount() uint32 {
	if x != nil {
		return x.TotalInputCount
	}
	return 0
}

func (x *ModelVersion) GetCompletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ModelVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModelVersion) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *ModelVersion) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ModelVersion) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ModelVersion) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *ModelVersion) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ModelVersion) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type PretrainedModelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the internal id of the pretrained model.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This is the internal type of the pretrained model.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Map from the api.Data field names to the Triton config.pbtxt input.
	InputFieldsMap *_struct.Struct `protobuf:"bytes,3,opt,name=input_fields_map,json=inputFieldsMap,proto3" json:"input_fields_map,omitempty"`
	// Map from the api.Data field names to the Triton config.pbtxt output.
	OutputFieldsMap *_struct.Struct `protobuf:"bytes,4,opt,name=output_fields_map,json=outputFieldsMap,proto3" json:"output_fields_map,omitempty"`
	// Preprocessing steps for the model as a json string
	DataProviderParams string `protobuf:"bytes,5,opt,name=data_provider_params,json=dataProviderParams,proto3" json:"data_provider_params,omitempty"`
	// Url to a zipped up model in triton format with only version 1
	ModelZipUrl string `protobuf:"bytes,6,opt,name=model_zip_url,json=modelZipUrl,proto3" json:"model_zip_url,omitempty"`
	// Whether to overwrite the model for the existing internal id
	Overwrite bool `protobuf:"varint,7,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *PretrainedModelConfig) Reset() {
	*x = PretrainedModelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PretrainedModelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PretrainedModelConfig) ProtoMessage() {}

func (x *PretrainedModelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PretrainedModelConfig.ProtoReflect.Descriptor instead.
func (*PretrainedModelConfig) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{54}
}

func (x *PretrainedModelConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PretrainedModelConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PretrainedModelConfig) GetInputFieldsMap() *_struct.Struct {
	if x != nil {
		return x.InputFieldsMap
	}
	return nil
}

func (x *PretrainedModelConfig) GetOutputFieldsMap() *_struct.Struct {
	if x != nil {
		return x.OutputFieldsMap
	}
	return nil
}

func (x *PretrainedModelConfig) GetDataProviderParams() string {
	if x != nil {
		return x.DataProviderParams
	}
	return ""
}

func (x *PretrainedModelConfig) GetModelZipUrl() string {
	if x != nil {
		return x.ModelZipUrl
	}
	return ""
}

func (x *PretrainedModelConfig) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

type TrainStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LossCurve []*LossCurveEntry `protobuf:"bytes,1,rep,name=loss_curve,json=lossCurve,proto3" json:"loss_curve,omitempty"`
}

func (x *TrainStats) Reset() {
	*x = TrainStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainStats) ProtoMessage() {}

func (x *TrainStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainStats.ProtoReflect.Descriptor instead.
func (*TrainStats) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{55}
}

func (x *TrainStats) GetLossCurve() []*LossCurveEntry {
	if x != nil {
		return x.LossCurve
	}
	return nil
}

type LossCurveEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current epoch
	Epoch uint32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// current global step
	GlobalStep uint32 `protobuf:"varint,2,opt,name=global_step,json=globalStep,proto3" json:"global_step,omitempty"`
	// current cost
	// FIXME(rigel): this should be loss instead of cost.
	Cost float32 `protobuf:"fixed32,3,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *LossCurveEntry) Reset() {
	*x = LossCurveEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossCurveEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossCurveEntry) ProtoMessage() {}

func (x *LossCurveEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LossCurveEntry.ProtoReflect.Descriptor instead.
func (*LossCurveEntry) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{56}
}

func (x *LossCurveEntry) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *LossCurveEntry) GetGlobalStep() uint32 {
	if x != nil {
		return x.GlobalStep
	}
	return 0
}

func (x *LossCurveEntry) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type LabelCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FIXME: should move to Concept object and return the whole thing (including name and id)
	// otherwise if two concepts have same name then you won't tell them apart in confusion matrix.
	ConceptName string `protobuf:"bytes,1,opt,name=concept_name,json=conceptName,proto3" json:"concept_name,omitempty"`
	Count       uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LabelCount) Reset() {
	*x = LabelCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelCount) ProtoMessage() {}

func (x *LabelCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelCount.ProtoReflect.Descriptor instead.
func (*LabelCount) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{57}
}

func (x *LabelCount) GetConceptName() string {
	if x != nil {
		return x.ConceptName
	}
	return ""
}

func (x *LabelCount) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LabelDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositiveLabelCounts []*LabelCount `protobuf:"bytes,1,rep,name=positive_label_counts,json=positiveLabelCounts,proto3" json:"positive_label_counts,omitempty"`
}

func (x *LabelDistribution) Reset() {
	*x = LabelDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelDistribution) ProtoMessage() {}

func (x *LabelDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelDistribution.ProtoReflect.Descriptor instead.
func (*LabelDistribution) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{58}
}

func (x *LabelDistribution) GetPositiveLabelCounts() []*LabelCount {
	if x != nil {
		return x.PositiveLabelCounts
	}
	return nil
}

// NOTE: this is inefficient, should just have the order of the rows/cols
type CooccurrenceMatrixEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// concept_id for the row
	Row string `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
	// concept_id for the col
	Col   string `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
	Count uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CooccurrenceMatrixEntry) Reset() {
	*x = CooccurrenceMatrixEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CooccurrenceMatrixEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CooccurrenceMatrixEntry) ProtoMessage() {}

func (x *CooccurrenceMatrixEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CooccurrenceMatrixEntry.ProtoReflect.Descriptor instead.
func (*CooccurrenceMatrixEntry) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{59}
}

func (x *CooccurrenceMatrixEntry) GetRow() string {
	if x != nil {
		return x.Row
	}
	return ""
}

func (x *CooccurrenceMatrixEntry) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

func (x *CooccurrenceMatrixEntry) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CooccurrenceMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix []*CooccurrenceMatrixEntry `protobuf:"bytes,1,rep,name=matrix,proto3" json:"matrix,omitempty"`
	// These concept_ids are ordered by the strength of the diagonal in the ConfusionMatrix.
	ConceptIds []string `protobuf:"bytes,2,rep,name=concept_ids,json=conceptIds,proto3" json:"concept_ids,omitempty"`
}

func (x *CooccurrenceMatrix) Reset() {
	*x = CooccurrenceMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CooccurrenceMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CooccurrenceMatrix) ProtoMessage() {}

func (x *CooccurrenceMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CooccurrenceMatrix.ProtoReflect.Descriptor instead.
func (*CooccurrenceMatrix) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{60}
}

func (x *CooccurrenceMatrix) GetMatrix() []*CooccurrenceMatrixEntry {
	if x != nil {
		return x.Matrix
	}
	return nil
}

func (x *CooccurrenceMatrix) GetConceptIds() []string {
	if x != nil {
		return x.ConceptIds
	}
	return nil
}

type ConfusionMatrixEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicted string  `protobuf:"bytes,1,opt,name=predicted,proto3" json:"predicted,omitempty"`
	Actual    string  `protobuf:"bytes,2,opt,name=actual,proto3" json:"actual,omitempty"`
	Value     float32 `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfusionMatrixEntry) Reset() {
	*x = ConfusionMatrixEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfusionMatrixEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfusionMatrixEntry) ProtoMessage() {}

func (x *ConfusionMatrixEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfusionMatrixEntry.ProtoReflect.Descriptor instead.
func (*ConfusionMatrixEntry) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{61}
}

func (x *ConfusionMatrixEntry) GetPredicted() string {
	if x != nil {
		return x.Predicted
	}
	return ""
}

func (x *ConfusionMatrixEntry) GetActual() string {
	if x != nil {
		return x.Actual
	}
	return ""
}

func (x *ConfusionMatrixEntry) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ConfusionMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix []*ConfusionMatrixEntry `protobuf:"bytes,1,rep,name=matrix,proto3" json:"matrix,omitempty"`
	// These concept_ids are ordered by the strength of the diagonal in the ConfusionMatrix.
	ConceptIds []string `protobuf:"bytes,2,rep,name=concept_ids,json=conceptIds,proto3" json:"concept_ids,omitempty"`
}

func (x *ConfusionMatrix) Reset() {
	*x = ConfusionMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfusionMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfusionMatrix) ProtoMessage() {}

func (x *ConfusionMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfusionMatrix.ProtoReflect.Descriptor instead.
func (*ConfusionMatrix) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{62}
}

func (x *ConfusionMatrix) GetMatrix() []*ConfusionMatrixEntry {
	if x != nil {
		return x.Matrix
	}
	return nil
}

func (x *ConfusionMatrix) GetConceptIds() []string {
	if x != nil {
		return x.ConceptIds
	}
	return nil
}

type ROC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fpr          []float32 `protobuf:"fixed32,1,rep,packed,name=fpr,proto3" json:"fpr,omitempty"`
	Tpr          []float32 `protobuf:"fixed32,2,rep,packed,name=tpr,proto3" json:"tpr,omitempty"`
	Thresholds   []float32 `protobuf:"fixed32,3,rep,packed,name=thresholds,proto3" json:"thresholds,omitempty"`
	FprPerImage  []float32 `protobuf:"fixed32,4,rep,packed,name=fpr_per_image,json=fprPerImage,proto3" json:"fpr_per_image,omitempty"`
	FprPerObject []float32 `protobuf:"fixed32,5,rep,packed,name=fpr_per_object,json=fprPerObject,proto3" json:"fpr_per_object,omitempty"`
}

func (x *ROC) Reset() {
	*x = ROC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROC) ProtoMessage() {}

func (x *ROC) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROC.ProtoReflect.Descriptor instead.
func (*ROC) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{63}
}

func (x *ROC) GetFpr() []float32 {
	if x != nil {
		return x.Fpr
	}
	return nil
}

func (x *ROC) GetTpr() []float32 {
	if x != nil {
		return x.Tpr
	}
	return nil
}

func (x *ROC) GetThresholds() []float32 {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

func (x *ROC) GetFprPerImage() []float32 {
	if x != nil {
		return x.FprPerImage
	}
	return nil
}

func (x *ROC) GetFprPerObject() []float32 {
	if x != nil {
		return x.FprPerObject
	}
	return nil
}

type PrecisionRecallCurve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recall     []float32 `protobuf:"fixed32,1,rep,packed,name=recall,proto3" json:"recall,omitempty"`
	Precision  []float32 `protobuf:"fixed32,2,rep,packed,name=precision,proto3" json:"precision,omitempty"`
	Thresholds []float32 `protobuf:"fixed32,3,rep,packed,name=thresholds,proto3" json:"thresholds,omitempty"`
}

func (x *PrecisionRecallCurve) Reset() {
	*x = PrecisionRecallCurve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrecisionRecallCurve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrecisionRecallCurve) ProtoMessage() {}

func (x *PrecisionRecallCurve) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrecisionRecallCurve.ProtoReflect.Descriptor instead.
func (*PrecisionRecallCurve) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{64}
}

func (x *PrecisionRecallCurve) GetRecall() []float32 {
	if x != nil {
		return x.Recall
	}
	return nil
}

func (x *PrecisionRecallCurve) GetPrecision() []float32 {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *PrecisionRecallCurve) GetThresholds() []float32 {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

type BinaryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumPos               uint32                `protobuf:"varint,1,opt,name=num_pos,json=numPos,proto3" json:"num_pos,omitempty"`
	NumNeg               uint32                `protobuf:"varint,2,opt,name=num_neg,json=numNeg,proto3" json:"num_neg,omitempty"`
	NumTot               uint32                `protobuf:"varint,3,opt,name=num_tot,json=numTot,proto3" json:"num_tot,omitempty"`
	RocAuc               float32               `protobuf:"fixed32,4,opt,name=roc_auc,json=rocAuc,proto3" json:"roc_auc,omitempty"`
	F1                   float32               `protobuf:"fixed32,5,opt,name=f1,proto3" json:"f1,omitempty"`
	Concept              *Concept              `protobuf:"bytes,6,opt,name=concept,proto3" json:"concept,omitempty"`
	RocCurve             *ROC                  `protobuf:"bytes,7,opt,name=roc_curve,json=rocCurve,proto3" json:"roc_curve,omitempty"`
	PrecisionRecallCurve *PrecisionRecallCurve `protobuf:"bytes,8,opt,name=precision_recall_curve,json=precisionRecallCurve,proto3" json:"precision_recall_curve,omitempty"`
	AvgPrecision         float32               `protobuf:"fixed32,9,opt,name=avg_precision,json=avgPrecision,proto3" json:"avg_precision,omitempty"`
	AreaName             string                `protobuf:"bytes,10,opt,name=area_name,json=areaName,proto3" json:"area_name,omitempty"`
	AreaMin              float64               `protobuf:"fixed64,11,opt,name=area_min,json=areaMin,proto3" json:"area_min,omitempty"`
	AreaMax              float64               `protobuf:"fixed64,12,opt,name=area_max,json=areaMax,proto3" json:"area_max,omitempty"`
	Iou                  float32               `protobuf:"fixed32,13,opt,name=iou,proto3" json:"iou,omitempty"`
}

func (x *BinaryMetrics) Reset() {
	*x = BinaryMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryMetrics) ProtoMessage() {}

func (x *BinaryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryMetrics.ProtoReflect.Descriptor instead.
func (*BinaryMetrics) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{65}
}

func (x *BinaryMetrics) GetNumPos() uint32 {
	if x != nil {
		return x.NumPos
	}
	return 0
}

func (x *BinaryMetrics) GetNumNeg() uint32 {
	if x != nil {
		return x.NumNeg
	}
	return 0
}

func (x *BinaryMetrics) GetNumTot() uint32 {
	if x != nil {
		return x.NumTot
	}
	return 0
}

func (x *BinaryMetrics) GetRocAuc() float32 {
	if x != nil {
		return x.RocAuc
	}
	return 0
}

func (x *BinaryMetrics) GetF1() float32 {
	if x != nil {
		return x.F1
	}
	return 0
}

func (x *BinaryMetrics) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *BinaryMetrics) GetRocCurve() *ROC {
	if x != nil {
		return x.RocCurve
	}
	return nil
}

func (x *BinaryMetrics) GetPrecisionRecallCurve() *PrecisionRecallCurve {
	if x != nil {
		return x.PrecisionRecallCurve
	}
	return nil
}

func (x *BinaryMetrics) GetAvgPrecision() float32 {
	if x != nil {
		return x.AvgPrecision
	}
	return 0
}

func (x *BinaryMetrics) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *BinaryMetrics) GetAreaMin() float64 {
	if x != nil {
		return x.AreaMin
	}
	return 0
}

func (x *BinaryMetrics) GetAreaMax() float64 {
	if x != nil {
		return x.AreaMax
	}
	return 0
}

func (x *BinaryMetrics) GetIou() float32 {
	if x != nil {
		return x.Iou
	}
	return 0
}

type TrackerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multiple object tracking accuracy
	MotMota float32 `protobuf:"fixed32,1,opt,name=mot_mota,json=motMota,proto3" json:"mot_mota,omitempty"`
	// Number of switches between tracks
	MotNumSwitches int32 `protobuf:"varint,2,opt,name=mot_num_switches,json=motNumSwitches,proto3" json:"mot_num_switches,omitempty"`
	// MORSE fragmentation rate (a.k.a unique switch rate, only calculated in public sector)
	MorseFrag float32 `protobuf:"fixed32,3,opt,name=morse_frag,json=morseFrag,proto3" json:"morse_frag,omitempty"`
	// Average precision calculated from all processed frames
	AvgPrecision float32 `protobuf:"fixed32,4,opt,name=avg_precision,json=avgPrecision,proto3" json:"avg_precision,omitempty"`
	// The concept that we are evaluating the tracker
	Aiid string `protobuf:"bytes,5,opt,name=aiid,proto3" json:"aiid,omitempty"`
	// Same as morse_frag but calculated using MOT mapping/metrics
	UniqueSwitchRate float32 `protobuf:"fixed32,6,opt,name=unique_switch_rate,json=uniqueSwitchRate,proto3" json:"unique_switch_rate,omitempty"`
}

func (x *TrackerMetrics) Reset() {
	*x = TrackerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackerMetrics) ProtoMessage() {}

func (x *TrackerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackerMetrics.ProtoReflect.Descriptor instead.
func (*TrackerMetrics) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{66}
}

func (x *TrackerMetrics) GetMotMota() float32 {
	if x != nil {
		return x.MotMota
	}
	return 0
}

func (x *TrackerMetrics) GetMotNumSwitches() int32 {
	if x != nil {
		return x.MotNumSwitches
	}
	return 0
}

func (x *TrackerMetrics) GetMorseFrag() float32 {
	if x != nil {
		return x.MorseFrag
	}
	return 0
}

func (x *TrackerMetrics) GetAvgPrecision() float32 {
	if x != nil {
		return x.AvgPrecision
	}
	return 0
}

func (x *TrackerMetrics) GetAiid() string {
	if x != nil {
		return x.Aiid
	}
	return ""
}

func (x *TrackerMetrics) GetUniqueSwitchRate() float32 {
	if x != nil {
		return x.UniqueSwitchRate
	}
	return 0
}

type EvalTestSetEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input CFID
	//
	// Deprecated: Do not use.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Deprecated: Do not use.
	Url               string     `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Input             *Input     `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"` // the input information
	PredictedConcepts []*Concept `protobuf:"bytes,3,rep,name=predicted_concepts,json=predictedConcepts,proto3" json:"predicted_concepts,omitempty"`
	// All the ground truth concepts will be show on the top level
	GroundTruthConcepts []*Concept `protobuf:"bytes,4,rep,name=ground_truth_concepts,json=groundTruthConcepts,proto3" json:"ground_truth_concepts,omitempty"`
	// Only region-based/frame-based app contains this annotation
	// Each annotation only contains one region
	// And the concepts is in ground_truth_concepts instead of this annotation
	Annotation *Annotation `protobuf:"bytes,5,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *EvalTestSetEntry) Reset() {
	*x = EvalTestSetEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalTestSetEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalTestSetEntry) ProtoMessage() {}

func (x *EvalTestSetEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalTestSetEntry.ProtoReflect.Descriptor instead.
func (*EvalTestSetEntry) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{67}
}

// Deprecated: Do not use.
func (x *EvalTestSetEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Deprecated: Do not use.
func (x *EvalTestSetEntry) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EvalTestSetEntry) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EvalTestSetEntry) GetPredictedConcepts() []*Concept {
	if x != nil {
		return x.PredictedConcepts
	}
	return nil
}

func (x *EvalTestSetEntry) GetGroundTruthConcepts() []*Concept {
	if x != nil {
		return x.GroundTruthConcepts
	}
	return nil
}

func (x *EvalTestSetEntry) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

// NOTE(Janvier): We copy this from proto/utils/lopq_service.proto instead of importing it because
// we should not import internal protos in public protos.
type LOPQEvalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rank k for which all metrics are reported.
	K int32 `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
	// Recall @ k assuming the brute force search is the ground truth.
	RecallVsBruteForce float32 `protobuf:"fixed32,2,opt,name=recall_vs_brute_force,json=recallVsBruteForce,proto3" json:"recall_vs_brute_force,omitempty"`
	// Kendall's tau correlation @ k assuming the brute force search is the ground truth.
	KendallTauVsBruteForce float32 `protobuf:"fixed32,3,opt,name=kendall_tau_vs_brute_force,json=kendallTauVsBruteForce,proto3" json:"kendall_tau_vs_brute_force,omitempty"`
	// The percentage of the most frequent code in the indexed part of evaluation data.
	MostFrequentCodePercent float32 `protobuf:"fixed32,4,opt,name=most_frequent_code_percent,json=mostFrequentCodePercent,proto3" json:"most_frequent_code_percent,omitempty"`
	// Normalized Discounted Cumulative Gain (NDCG) @ k with a ground truth inferred from annotations
	// and/or prediction for this evaluation LOPQ model.
	// NDCG uses individual relevance scores of each returned image to evaluate the usefulness, or
	// gain, of a document based on its position in the result list. The premise of DCG is that
	// highly relevant documents appearing lower in a search result list should be penalized as the
	// graded relevance value is reduced logarithmically proportional to the position of the result.
	// See: https://en.wikipedia.org/wiki/Information_retrieval#Discounted_cumulative_gain
	//
	// To compute the relevance score between two images we consider two cases:
	// 1) Only one label for each image
	// An image is relevant to an image query iff they are labeled the same (score 1), and
	// not relevant otherwise (score 0)
	// 2) Multiple labels for each image
	// Here an image relevancy with respect to a single image query is measured by f-beta score
	// assuming the query image list of labels as ground truth and comparing them with that of
	// the search result. These labels can come from image annotations or if substitute_annotation_misses
	// is set, predictions of base classifier where any prediction with prob < prob_threshold are
	// discarded. To quantify the relevancy score of a single search result we opt to compute precision
	// and recall @ k for simplicity, and combine them with f-beta score to obtain a single number.
	LopqNdcg float32 `protobuf:"fixed32,5,opt,name=lopq_ndcg,json=lopqNdcg,proto3" json:"lopq_ndcg,omitempty"`
	// Brute force NDCG which gives a baseline to compare to and is a measure of how good
	// the embeddings are.
	BruteForceNdcg float32 `protobuf:"fixed32,6,opt,name=brute_force_ndcg,json=bruteForceNdcg,proto3" json:"brute_force_ndcg,omitempty"`
}

func (x *LOPQEvalResult) Reset() {
	*x = LOPQEvalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LOPQEvalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LOPQEvalResult) ProtoMessage() {}

func (x *LOPQEvalResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LOPQEvalResult.ProtoReflect.Descriptor instead.
func (*LOPQEvalResult) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{68}
}

func (x *LOPQEvalResult) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *LOPQEvalResult) GetRecallVsBruteForce() float32 {
	if x != nil {
		return x.RecallVsBruteForce
	}
	return 0
}

func (x *LOPQEvalResult) GetKendallTauVsBruteForce() float32 {
	if x != nil {
		return x.KendallTauVsBruteForce
	}
	return 0
}

func (x *LOPQEvalResult) GetMostFrequentCodePercent() float32 {
	if x != nil {
		return x.MostFrequentCodePercent
	}
	return 0
}

func (x *LOPQEvalResult) GetLopqNdcg() float32 {
	if x != nil {
		return x.LopqNdcg
	}
	return 0
}

func (x *LOPQEvalResult) GetBruteForceNdcg() float32 {
	if x != nil {
		return x.BruteForceNdcg
	}
	return 0
}

// FIXME: copy this into an internal proto since it is stored in DB and field names can't change.
type MetricsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Top1Accuracy float32 `protobuf:"fixed32,1,opt,name=top1_accuracy,json=top1Accuracy,proto3" json:"top1_accuracy,omitempty"`
	// Deprecated: Do not use.
	Top5Accuracy             float32           `protobuf:"fixed32,2,opt,name=top5_accuracy,json=top5Accuracy,proto3" json:"top5_accuracy,omitempty"`
	MacroAvgRocAuc           float32           `protobuf:"fixed32,3,opt,name=macro_avg_roc_auc,json=macroAvgRocAuc,proto3" json:"macro_avg_roc_auc,omitempty"`
	MacroStdRocAuc           float32           `protobuf:"fixed32,4,opt,name=macro_std_roc_auc,json=macroStdRocAuc,proto3" json:"macro_std_roc_auc,omitempty"`
	MacroAvgF1Score          float32           `protobuf:"fixed32,5,opt,name=macro_avg_f1_score,json=macroAvgF1Score,proto3" json:"macro_avg_f1_score,omitempty"`
	MacroStdF1Score          float32           `protobuf:"fixed32,6,opt,name=macro_std_f1_score,json=macroStdF1Score,proto3" json:"macro_std_f1_score,omitempty"`
	MacroAvgPrecision        float32           `protobuf:"fixed32,7,opt,name=macro_avg_precision,json=macroAvgPrecision,proto3" json:"macro_avg_precision,omitempty"`
	MacroAvgRecall           float32           `protobuf:"fixed32,8,opt,name=macro_avg_recall,json=macroAvgRecall,proto3" json:"macro_avg_recall,omitempty"`
	MeanAvgPrecisionIou_50   float32           `protobuf:"fixed32,10,opt,name=mean_avg_precision_iou_50,json=meanAvgPrecisionIou50,proto3" json:"mean_avg_precision_iou_50,omitempty"`
	MeanAvgPrecisionIouRange float32           `protobuf:"fixed32,11,opt,name=mean_avg_precision_iou_range,json=meanAvgPrecisionIouRange,proto3" json:"mean_avg_precision_iou_range,omitempty"`
	LopqMetrics              []*LOPQEvalResult `protobuf:"bytes,9,rep,name=lopq_metrics,json=lopqMetrics,proto3" json:"lopq_metrics,omitempty"`
}

func (x *MetricsSummary) Reset() {
	*x = MetricsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSummary) ProtoMessage() {}

func (x *MetricsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsSummary.ProtoReflect.Descriptor instead.
func (*MetricsSummary) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{69}
}

// Deprecated: Do not use.
func (x *MetricsSummary) GetTop1Accuracy() float32 {
	if x != nil {
		return x.Top1Accuracy
	}
	return 0
}

// Deprecated: Do not use.
func (x *MetricsSummary) GetTop5Accuracy() float32 {
	if x != nil {
		return x.Top5Accuracy
	}
	return 0
}

func (x *MetricsSummary) GetMacroAvgRocAuc() float32 {
	if x != nil {
		return x.MacroAvgRocAuc
	}
	return 0
}

func (x *MetricsSummary) GetMacroStdRocAuc() float32 {
	if x != nil {
		return x.MacroStdRocAuc
	}
	return 0
}

func (x *MetricsSummary) GetMacroAvgF1Score() float32 {
	if x != nil {
		return x.MacroAvgF1Score
	}
	return 0
}

func (x *MetricsSummary) GetMacroStdF1Score() float32 {
	if x != nil {
		return x.MacroStdF1Score
	}
	return 0
}

func (x *MetricsSummary) GetMacroAvgPrecision() float32 {
	if x != nil {
		return x.MacroAvgPrecision
	}
	return 0
}

func (x *MetricsSummary) GetMacroAvgRecall() float32 {
	if x != nil {
		return x.MacroAvgRecall
	}
	return 0
}

func (x *MetricsSummary) GetMeanAvgPrecisionIou_50() float32 {
	if x != nil {
		return x.MeanAvgPrecisionIou_50
	}
	return 0
}

func (x *MetricsSummary) GetMeanAvgPrecisionIouRange() float32 {
	if x != nil {
		return x.MeanAvgPrecisionIouRange
	}
	return 0
}

func (x *MetricsSummary) GetLopqMetrics() []*LOPQEvalResult {
	if x != nil {
		return x.LopqMetrics
	}
	return nil
}

type EvalMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *status.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Id                 string              `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Summary            *MetricsSummary     `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	ConfusionMatrix    *ConfusionMatrix    `protobuf:"bytes,3,opt,name=confusion_matrix,json=confusionMatrix,proto3" json:"confusion_matrix,omitempty"`
	CooccurrenceMatrix *CooccurrenceMatrix `protobuf:"bytes,4,opt,name=cooccurrence_matrix,json=cooccurrenceMatrix,proto3" json:"cooccurrence_matrix,omitempty"`
	LabelCounts        *LabelDistribution  `protobuf:"bytes,5,opt,name=label_counts,json=labelCounts,proto3" json:"label_counts,omitempty"`
	BinaryMetrics      []*BinaryMetrics    `protobuf:"bytes,6,rep,name=binary_metrics,json=binaryMetrics,proto3" json:"binary_metrics,omitempty"`
	TestSet            []*EvalTestSetEntry `protobuf:"bytes,7,rep,name=test_set,json=testSet,proto3" json:"test_set,omitempty"`
	MetricsByArea      []*BinaryMetrics    `protobuf:"bytes,8,rep,name=metrics_by_area,json=metricsByArea,proto3" json:"metrics_by_area,omitempty"`
	MetricsByClass     []*BinaryMetrics    `protobuf:"bytes,9,rep,name=metrics_by_class,json=metricsByClass,proto3" json:"metrics_by_class,omitempty"`
	TrackerMetrics     []*TrackerMetrics   `protobuf:"bytes,11,rep,name=tracker_metrics,json=trackerMetrics,proto3" json:"tracker_metrics,omitempty"`
}

func (x *EvalMetrics) Reset() {
	*x = EvalMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalMetrics) ProtoMessage() {}

func (x *EvalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalMetrics.ProtoReflect.Descriptor instead.
func (*EvalMetrics) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{70}
}

func (x *EvalMetrics) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EvalMetrics) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvalMetrics) GetSummary() *MetricsSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *EvalMetrics) GetConfusionMatrix() *ConfusionMatrix {
	if x != nil {
		return x.ConfusionMatrix
	}
	return nil
}

func (x *EvalMetrics) GetCooccurrenceMatrix() *CooccurrenceMatrix {
	if x != nil {
		return x.CooccurrenceMatrix
	}
	return nil
}

func (x *EvalMetrics) GetLabelCounts() *LabelDistribution {
	if x != nil {
		return x.LabelCounts
	}
	return nil
}

func (x *EvalMetrics) GetBinaryMetrics() []*BinaryMetrics {
	if x != nil {
		return x.BinaryMetrics
	}
	return nil
}

func (x *EvalMetrics) GetTestSet() []*EvalTestSetEntry {
	if x != nil {
		return x.TestSet
	}
	return nil
}

func (x *EvalMetrics) GetMetricsByArea() []*BinaryMetrics {
	if x != nil {
		return x.MetricsByArea
	}
	return nil
}

func (x *EvalMetrics) GetMetricsByClass() []*BinaryMetrics {
	if x != nil {
		return x.MetricsByClass
	}
	return nil
}

func (x *EvalMetrics) GetTrackerMetrics() []*TrackerMetrics {
	if x != nil {
		return x.TrackerMetrics
	}
	return nil
}

type FieldsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfusionMatrix    bool `protobuf:"varint,1,opt,name=confusion_matrix,json=confusionMatrix,proto3" json:"confusion_matrix,omitempty"`
	CooccurrenceMatrix bool `protobuf:"varint,2,opt,name=cooccurrence_matrix,json=cooccurrenceMatrix,proto3" json:"cooccurrence_matrix,omitempty"`
	LabelCounts        bool `protobuf:"varint,3,opt,name=label_counts,json=labelCounts,proto3" json:"label_counts,omitempty"`
	BinaryMetrics      bool `protobuf:"varint,4,opt,name=binary_metrics,json=binaryMetrics,proto3" json:"binary_metrics,omitempty"`
	TestSet            bool `protobuf:"varint,5,opt,name=test_set,json=testSet,proto3" json:"test_set,omitempty"`
	MetricsByArea      bool `protobuf:"varint,6,opt,name=metrics_by_area,json=metricsByArea,proto3" json:"metrics_by_area,omitempty"`
	MetricsByClass     bool `protobuf:"varint,7,opt,name=metrics_by_class,json=metricsByClass,proto3" json:"metrics_by_class,omitempty"`
}

func (x *FieldsValue) Reset() {
	*x = FieldsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldsValue) ProtoMessage() {}

func (x *FieldsValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldsValue.ProtoReflect.Descriptor instead.
func (*FieldsValue) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{71}
}

func (x *FieldsValue) GetConfusionMatrix() bool {
	if x != nil {
		return x.ConfusionMatrix
	}
	return false
}

func (x *FieldsValue) GetCooccurrenceMatrix() bool {
	if x != nil {
		return x.CooccurrenceMatrix
	}
	return false
}

func (x *FieldsValue) GetLabelCounts() bool {
	if x != nil {
		return x.LabelCounts
	}
	return false
}

func (x *FieldsValue) GetBinaryMetrics() bool {
	if x != nil {
		return x.BinaryMetrics
	}
	return false
}

func (x *FieldsValue) GetTestSet() bool {
	if x != nil {
		return x.TestSet
	}
	return false
}

func (x *FieldsValue) GetMetricsByArea() bool {
	if x != nil {
		return x.MetricsByArea
	}
	return false
}

func (x *FieldsValue) GetMetricsByClass() bool {
	if x != nil {
		return x.MetricsByClass
	}
	return false
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/output.proto
////////////////////////////////////////////////////////////////////////////////
type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of these outputs per Input
	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// When the object was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The model that created this Output.
	Model *Model `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// The input that was passed to the model to create this Output. For example if we have an image
	// model then it will take as input here an Input object with Image filled in.
	Input *Input `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// The output data for this Output. For example if we have a concept model then the predicted
	// concepts will appear here.
	Data *Data `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{72}
}

func (x *Output) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Output) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Output) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Output) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *Output) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Output) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/scope.proto
////////////////////////////////////////////////////////////////////////////////
type ScopeDeps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// Other scopes that are required.
	DependingScopes []string `protobuf:"bytes,2,rep,name=depending_scopes,json=dependingScopes,proto3" json:"depending_scopes,omitempty"`
}

func (x *ScopeDeps) Reset() {
	*x = ScopeDeps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeDeps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeDeps) ProtoMessage() {}

func (x *ScopeDeps) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeDeps.ProtoReflect.Descriptor instead.
func (*ScopeDeps) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{73}
}

func (x *ScopeDeps) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ScopeDeps) GetDependingScopes() []string {
	if x != nil {
		return x.DependingScopes
	}
	return nil
}

type EndpointDeps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified endpoint to
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Other scopes that are required.
	DependingScopes []string `protobuf:"bytes,2,rep,name=depending_scopes,json=dependingScopes,proto3" json:"depending_scopes,omitempty"`
}

func (x *EndpointDeps) Reset() {
	*x = EndpointDeps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointDeps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointDeps) ProtoMessage() {}

func (x *EndpointDeps) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointDeps.ProtoReflect.Descriptor instead.
func (*EndpointDeps) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{74}
}

func (x *EndpointDeps) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *EndpointDeps) GetDependingScopes() []string {
	if x != nil {
		return x.DependingScopes
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/search.proto
////////////////////////////////////////////////////////////////////////////////
type Hit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the score for the ranked Hit results of the search query. This score is a number
	// between 0.0 and 1.0 as it represents a confidence in the search Hit. For example, if you search
	// for "car" and get a close matching Hit, the score should be close to 1.0. If you get a score
	// of close to 0.0 that means it's very disimilar to your query, in this case NOT a "car". There
	// is a special intermediate score of 0.5 that means that the Hit is not really correlated with
	// your search query (ie. not similar or dissimlar to the query) which is a common occurrence
	// when using negate queries.
	// Note: some queries that are just filtering down your app of inputs may just return a score of
	// 1.0 for all Hits.
	Score float32 `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	// This is the matched input returned from the search query. This will contain information about
	// the Input such as the url, created_at time and trusted annotation information (for backwards
	// compatibility with apps that existed before Annotations were introduced.
	Input *Input `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// We also provide back the specific matched annotation for the above input. We do this in order
	// to support more complex Annotation queries in the And message below. For example if we match
	// the search results to a region in your input, or a frame in a video input, this annotation
	// field will be that matched annotation info and the input will be the image/video that the user
	// originally added which contains those regions / frames.
	Annotation *Annotation `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *Hit) Reset() {
	*x = Hit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hit) ProtoMessage() {}

func (x *Hit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hit.ProtoReflect.Descriptor instead.
func (*Hit) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{75}
}

func (x *Hit) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Hit) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Hit) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

// This is the common building block of a query which is a sequence of And messages ANDed together.
// Note that some fields are used too RANK results (affect the scores) and some are used to FILTER
// results (unordered subset of your app's contents). In general, FILTER operations are more
// efficient queries at scale and when combined with RANK operations can speed up search performance
// as you effectively operate on a smaller sub-set of your entire app.
type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FILTER by input.data... information.
	// This can include human provided concepts, geo location info, metadata, etc.
	// This is effectively searching over only the trusted annotation attached to an input in your
	// app. To search by more specific annotation fields use the Annotation object here.
	Input *Input `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// RANK based predicted outputs from models such as custom trained models, pre-trained models,
	// etc. This is also where you enter the image url for a visual search because what we're asking
	// the system to do is find output embedding most visually similar to the provided input (that
	// input being in And.output.input.data.image.url for example). This will return the Hits
	// sorted by visual similarity (1.0 being very similar or exact match and 0.0 being very
	// dissimlar). For a search by Output concept, this means we're asking the system to rank
	// the Hits by confidence of our model's predicted Outputs. So for example if the model
	// predicts an image is 0.95 likely there is a "dog" present, that should related directly
	// to the score returned if you search for Output concept "dog" in your query. This provides
	// a natural ranking to search results based on confidence of predictions from the models and
	// is used when ANDing multiple of these types of RANK by Output queries together as well.
	Output *Output `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	// If True then this will flip the meaning of this part of the
	// query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
	Negate bool `protobuf:"varint,3,opt,name=negate,proto3" json:"negate,omitempty"`
	// FILTER by annotation information. This is more flexible than just filtering by
	// Input information because in the general case each input can have several annotations.
	// Some example use cases for filtering by annotations:
	// 1) find all the inputs annotated "dog" by worker_id = "XYZ"
	// 2) find all the annotations associated with embed_model_version_id = "123"
	// 3) find all the annotations that are trusted, etc.
	//
	// Since all the annotations under the hood are joined to the embedding model's annotation
	// using worker_id's of other models like cluster models or concept models should be
	// combinable with queries like visual search (a query with Output filled in).
	Annotation *Annotation `protobuf:"bytes,4,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{76}
}

func (x *And) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *And) GetOutput() *Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *And) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *And) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

// This is the search query used in /searches, model training requests, bulk data exports, etc.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query syntax is simply a list of And operatiosn that will be ANDed together to fetch
	// results which are returned to the user as Hit messages.
	Ands []*And `protobuf:"bytes,1,rep,name=ands,proto3" json:"ands,omitempty"`
	// This allows the query to override any default language the app was setup in when doing Concept
	// based searches. This currently only affects public Models Output searches when those public
	// Models have translations for their Concepts.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// filters in this query
	// e.q. only fetch annotations that have certain metadata
	Filters []*Filter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// rankings in this query
	// e.g. visual search by a url
	Ranks []*Rank `protobuf:"bytes,4,rep,name=ranks,proto3" json:"ranks,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{77}
}

func (x *Query) GetAnds() []*And {
	if x != nil {
		return x.Ands
	}
	return nil
}

func (x *Query) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Query) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Query) GetRanks() []*Rank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

// This is the new Search object used in saved searches.
type Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search query.
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Customer facing, external ID for search to be saved. Provided by the user, e.g. "saved-search-1.
	// It is unique per application.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Application that owns this saved search.
	ApplicationId string `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// Human readable display name of the saved search.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// "As of" timestamp, indicating a time in the past as of which we want to
	// retrieve the annotations satisfying the query.
	AsOf *timestamp.Timestamp `protobuf:"bytes,5,opt,name=as_of,json=asOf,proto3" json:"as_of,omitempty"`
	// Git hash of the code that ran the filter.
	GitHash string `protobuf:"bytes,6,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	// When the saved search was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When the saved search was updated.
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The search algorithm to be used.
	// Options are are 'nearest_neighbor', 'brute_force', and 'avg_concept_brute_force'
	// The last two perform a brute force search visual search instead of a more scalable distributed
	// nearest neighbor search and should be used by advanced users only.
	// If not specified we default to nearest neighbor
	Algorithm string `protobuf:"bytes,9,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// If true, save this search, and exit without executing the search.
	// If false execute the query
	Save bool `protobuf:"varint,10,opt,name=save,proto3" json:"save,omitempty"`
	// Minimum value of confidence threshold score in result.
	// Defaults to 0.0 which means we won't do any thresholding as all probabilities will
	// likely be > 0.0.
	MinValue float32 `protobuf:"fixed32,11,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,12,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *Search) Reset() {
	*x = Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{78}
}

func (x *Search) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Search) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Search) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Search) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Search) GetAsOf() *timestamp.Timestamp {
	if x != nil {
		return x.AsOf
	}
	return nil
}

func (x *Search) GetGitHash() string {
	if x != nil {
		return x.GitHash
	}
	return ""
}

func (x *Search) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Search) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Search) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Search) GetSave() bool {
	if x != nil {
		return x.Save
	}
	return false
}

func (x *Search) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *Search) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If True then this will flip the meaning of this part of the
	// query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
	Negate bool `protobuf:"varint,3,opt,name=negate,proto3" json:"negate,omitempty"`
	// FILTER by annotation information.
	Annotation *Annotation `protobuf:"bytes,4,opt,name=annotation,proto3" json:"annotation,omitempty"`
	// FILTER by input information.
	// For example you can filter inputs by status,
	Input *Input `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Filter by annotation last updated time range.
	LastUpdatedTimeRange *TimeRange `protobuf:"bytes,6,opt,name=last_updated_time_range,json=lastUpdatedTimeRange,proto3" json:"last_updated_time_range,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{79}
}

func (x *Filter) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *Filter) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *Filter) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Filter) GetLastUpdatedTimeRange() *TimeRange {
	if x != nil {
		return x.LastUpdatedTimeRange
	}
	return nil
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // Begin of the time range, optional, inclusive.
	EndTime   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // End of the time range, optional, inclusive.
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{80}
}

func (x *TimeRange) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeRange) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If True then this will flip the meaning of this part of the
	// query. This allow for queries such as !dog
	Negate bool `protobuf:"varint,3,opt,name=negate,proto3" json:"negate,omitempty"`
	// RANK by annotation information.
	Annotation *Annotation `protobuf:"bytes,4,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *Rank) Reset() {
	*x = Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{81}
}

func (x *Rank) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *Rank) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type AnnotationSearchMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ground truth we are evaluating against
	GroundTruth *Search `protobuf:"bytes,1,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"`
	// The set we are evaluating
	SearchToEval *Search `protobuf:"bytes,2,opt,name=search_to_eval,json=searchToEval,proto3" json:"search_to_eval,omitempty"`
	// The metric result
	Metrics *EvalMetrics `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// data is filled out with the concepts used for this evaluation
	Data *Data `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// active_concept_count is the number of concepts for this evaluation
	ActiveConceptCount uint32 `protobuf:"varint,5,opt,name=active_concept_count,json=activeConceptCount,proto3" json:"active_concept_count,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,6,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *AnnotationSearchMetrics) Reset() {
	*x = AnnotationSearchMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationSearchMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationSearchMetrics) ProtoMessage() {}

func (x *AnnotationSearchMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationSearchMetrics.ProtoReflect.Descriptor instead.
func (*AnnotationSearchMetrics) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{82}
}

func (x *AnnotationSearchMetrics) GetGroundTruth() *Search {
	if x != nil {
		return x.GroundTruth
	}
	return nil
}

func (x *AnnotationSearchMetrics) GetSearchToEval() *Search {
	if x != nil {
		return x.SearchToEval
	}
	return nil
}

func (x *AnnotationSearchMetrics) GetMetrics() *EvalMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AnnotationSearchMetrics) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AnnotationSearchMetrics) GetActiveConceptCount() uint32 {
	if x != nil {
		return x.ActiveConceptCount
	}
	return 0
}

func (x *AnnotationSearchMetrics) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/text.proto
////////////////////////////////////////////////////////////////////////////////
type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a raw text string.
	Raw string `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	// Url to a text file
	Url               string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	AllowDuplicateUrl bool   `protobuf:"varint,3,opt,name=allow_duplicate_url,json=allowDuplicateUrl,proto3" json:"allow_duplicate_url,omitempty"`
	// The hosted field lists original text hosted in Clarifai storage. This field is currently used
	// only in response.
	Hosted *HostedURL `protobuf:"bytes,4,opt,name=hosted,proto3" json:"hosted,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{83}
}

func (x *Text) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Text) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Text) GetAllowDuplicateUrl() bool {
	if x != nil {
		return x.AllowDuplicateUrl
	}
	return false
}

func (x *Text) GetHosted() *HostedURL {
	if x != nil {
		return x.Hosted
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/user.proto
////////////////////////////////////////////////////////////////////////////////
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Deprecated: Do not use.
	PrimaryEmail string `protobuf:"bytes,2,opt,name=primary_email,json=primaryEmail,proto3" json:"primary_email,omitempty"`
	FirstName    string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName     string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	CompanyName  string `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	JobTitle     string `protobuf:"bytes,19,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	JobRole      string `protobuf:"bytes,20,opt,name=job_role,json=jobRole,proto3" json:"job_role,omitempty"`
	// Deprecated: Do not use.
	BillType string `protobuf:"bytes,7,opt,name=bill_type,json=billType,proto3" json:"bill_type,omitempty"`
	// When the user was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Deprecated: Do not use.
	DateGdprConsent *timestamp.Timestamp `protobuf:"bytes,8,opt,name=date_gdpr_consent,json=dateGdprConsent,proto3" json:"date_gdpr_consent,omitempty"`
	// Deprecated: Do not use.
	DateTosConsent *timestamp.Timestamp `protobuf:"bytes,9,opt,name=date_tos_consent,json=dateTosConsent,proto3" json:"date_tos_consent,omitempty"`
	// Deprecated: Do not use.
	DateMarketingConsent *timestamp.Timestamp `protobuf:"bytes,10,opt,name=date_marketing_consent,json=dateMarketingConsent,proto3" json:"date_marketing_consent,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	//
	// Deprecated: Do not use.
	Metadata *_struct.Struct `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Deprecated: Do not use.
	EmailAddresses []*EmailAddress `protobuf:"bytes,12,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	// Deprecated: Do not use.
	IsOrgAdmin bool `protobuf:"varint,14,opt,name=is_org_admin,json=isOrgAdmin,proto3" json:"is_org_admin,omitempty"`
	// Deprecated: Do not use.
	TwoFactorAuthEnabled bool `protobuf:"varint,15,opt,name=two_factor_auth_enabled,json=twoFactorAuthEnabled,proto3" json:"two_factor_auth_enabled,omitempty"`
	// Deprecated: Do not use.
	TeamsCount uint32 `protobuf:"varint,16,opt,name=teams_count,json=teamsCount,proto3" json:"teams_count,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,17,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// This is all the personal information of a user. GetUser/ListUsers will not return this
	// information unless the caller has the UserAccounts_Get scope on their key or is the user
	// themselves.
	UserDetail *UserDetail `protobuf:"bytes,18,opt,name=user_detail,json=userDetail,proto3" json:"user_detail,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{84}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Deprecated: Do not use.
func (x *User) GetPrimaryEmail() string {
	if x != nil {
		return x.PrimaryEmail
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *User) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *User) GetJobRole() string {
	if x != nil {
		return x.JobRole
	}
	return ""
}

// Deprecated: Do not use.
func (x *User) GetBillType() string {
	if x != nil {
		return x.BillType
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Deprecated: Do not use.
func (x *User) GetDateGdprConsent() *timestamp.Timestamp {
	if x != nil {
		return x.DateGdprConsent
	}
	return nil
}

// Deprecated: Do not use.
func (x *User) GetDateTosConsent() *timestamp.Timestamp {
	if x != nil {
		return x.DateTosConsent
	}
	return nil
}

// Deprecated: Do not use.
func (x *User) GetDateMarketingConsent() *timestamp.Timestamp {
	if x != nil {
		return x.DateMarketingConsent
	}
	return nil
}

// Deprecated: Do not use.
func (x *User) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Do not use.
func (x *User) GetEmailAddresses() []*EmailAddress {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

// Deprecated: Do not use.
func (x *User) GetIsOrgAdmin() bool {
	if x != nil {
		return x.IsOrgAdmin
	}
	return false
}

// Deprecated: Do not use.
func (x *User) GetTwoFactorAuthEnabled() bool {
	if x != nil {
		return x.TwoFactorAuthEnabled
	}
	return false
}

// Deprecated: Do not use.
func (x *User) GetTeamsCount() uint32 {
	if x != nil {
		return x.TeamsCount
	}
	return 0
}

func (x *User) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *User) GetUserDetail() *UserDetail {
	if x != nil {
		return x.UserDetail
	}
	return nil
}

// This message holds the confidential information from the User object that we don't want to expose
// to other users. It will be accessible only from /users/{user_id}/account and with the User scopes.
type UserDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryEmail         string               `protobuf:"bytes,1,opt,name=primary_email,json=primaryEmail,proto3" json:"primary_email,omitempty"`
	BillType             string               `protobuf:"bytes,2,opt,name=bill_type,json=billType,proto3" json:"bill_type,omitempty"`
	DateGdprConsent      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=date_gdpr_consent,json=dateGdprConsent,proto3" json:"date_gdpr_consent,omitempty"`
	DateTosConsent       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date_tos_consent,json=dateTosConsent,proto3" json:"date_tos_consent,omitempty"`
	DateMarketingConsent *timestamp.Timestamp `protobuf:"bytes,5,opt,name=date_marketing_consent,json=dateMarketingConsent,proto3" json:"date_marketing_consent,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata             *_struct.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	EmailAddresses       []*EmailAddress `protobuf:"bytes,7,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	IsOrgAdmin           bool            `protobuf:"varint,8,opt,name=is_org_admin,json=isOrgAdmin,proto3" json:"is_org_admin,omitempty"`
	TwoFactorAuthEnabled bool            `protobuf:"varint,9,opt,name=two_factor_auth_enabled,json=twoFactorAuthEnabled,proto3" json:"two_factor_auth_enabled,omitempty"`
	TeamsCount           uint32          `protobuf:"varint,10,opt,name=teams_count,json=teamsCount,proto3" json:"teams_count,omitempty"`
}

func (x *UserDetail) Reset() {
	*x = UserDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetail) ProtoMessage() {}

func (x *UserDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetail.ProtoReflect.Descriptor instead.
func (*UserDetail) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{85}
}

func (x *UserDetail) GetPrimaryEmail() string {
	if x != nil {
		return x.PrimaryEmail
	}
	return ""
}

func (x *UserDetail) GetBillType() string {
	if x != nil {
		return x.BillType
	}
	return ""
}

func (x *UserDetail) GetDateGdprConsent() *timestamp.Timestamp {
	if x != nil {
		return x.DateGdprConsent
	}
	return nil
}

func (x *UserDetail) GetDateTosConsent() *timestamp.Timestamp {
	if x != nil {
		return x.DateTosConsent
	}
	return nil
}

func (x *UserDetail) GetDateMarketingConsent() *timestamp.Timestamp {
	if x != nil {
		return x.DateMarketingConsent
	}
	return nil
}

func (x *UserDetail) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserDetail) GetEmailAddresses() []*EmailAddress {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

func (x *UserDetail) GetIsOrgAdmin() bool {
	if x != nil {
		return x.IsOrgAdmin
	}
	return false
}

func (x *UserDetail) GetTwoFactorAuthEnabled() bool {
	if x != nil {
		return x.TwoFactorAuthEnabled
	}
	return false
}

func (x *UserDetail) GetTeamsCount() uint32 {
	if x != nil {
		return x.TeamsCount
	}
	return 0
}

type EmailAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Primary  bool   `protobuf:"varint,2,opt,name=primary,proto3" json:"primary,omitempty"`
	Verified bool   `protobuf:"varint,3,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *EmailAddress) Reset() {
	*x = EmailAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAddress) ProtoMessage() {}

func (x *EmailAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAddress.ProtoReflect.Descriptor instead.
func (*EmailAddress) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{86}
}

func (x *EmailAddress) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EmailAddress) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *EmailAddress) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type Password struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(lawrence): merge this with message UserPassword above
	// unencrypted password string
	Plaintext string `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *Password) Reset() {
	*x = Password{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Password) ProtoMessage() {}

func (x *Password) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Password.ProtoReflect.Descriptor instead.
func (*Password) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{87}
}

func (x *Password) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

type PasswordViolations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when new password length is shorter than minimum length set
	MinimumLength bool `protobuf:"varint,1,opt,name=minimum_length,json=minimumLength,proto3" json:"minimum_length,omitempty"`
	// when new password length is longer than maximum length set
	MaximumLength bool `protobuf:"varint,2,opt,name=maximum_length,json=maximumLength,proto3" json:"maximum_length,omitempty"`
	// there is no upper case letter in the new password when there should be at least one
	UpperCaseNeeded bool `protobuf:"varint,3,opt,name=upper_case_needed,json=upperCaseNeeded,proto3" json:"upper_case_needed,omitempty"`
	// there is no lower case letter in the new password when there should be at least one
	LowerCaseNeeded bool `protobuf:"varint,4,opt,name=lower_case_needed,json=lowerCaseNeeded,proto3" json:"lower_case_needed,omitempty"`
	// there is no numerics in the new password when there should be at least one
	NumericNeeded bool `protobuf:"varint,5,opt,name=numeric_needed,json=numericNeeded,proto3" json:"numeric_needed,omitempty"`
	// there is no special character in the new password when there should be at least one
	NonAlphanumericNeeded bool `protobuf:"varint,6,opt,name=non_alphanumeric_needed,json=nonAlphanumericNeeded,proto3" json:"non_alphanumeric_needed,omitempty"`
	// when one of the N most recent old password is reused, N is specified by password_reuse_epoch in db.password_policies
	PasswordReuse bool `protobuf:"varint,7,opt,name=password_reuse,json=passwordReuse,proto3" json:"password_reuse,omitempty"`
	// when either user's first, middle or last name is used in the new password
	ExcludeNames bool `protobuf:"varint,8,opt,name=exclude_names,json=excludeNames,proto3" json:"exclude_names,omitempty"`
	// when first part of user's email (exact string or after removing special characters) is used in the new password
	ExcludeEmail bool `protobuf:"varint,9,opt,name=exclude_email,json=excludeEmail,proto3" json:"exclude_email,omitempty"`
	// when there are confusing letters in the new password, such as o (first character of 'omega') vs 0 (zero)
	NoConfusingLetters bool `protobuf:"varint,10,opt,name=no_confusing_letters,json=noConfusingLetters,proto3" json:"no_confusing_letters,omitempty"`
	// when there are simple password patterns used, such as 12345678 or aaaaaaa1
	NoSimplePasswords bool `protobuf:"varint,11,opt,name=no_simple_passwords,json=noSimplePasswords,proto3" json:"no_simple_passwords,omitempty"`
	// when there are common vocabs from the common vocab list used
	NoCommonVocabs bool `protobuf:"varint,12,opt,name=no_common_vocabs,json=noCommonVocabs,proto3" json:"no_common_vocabs,omitempty"`
	// when the current password is contained in the new password or vice versa
	NoOverlapWithOld bool `protobuf:"varint,13,opt,name=no_overlap_with_old,json=noOverlapWithOld,proto3" json:"no_overlap_with_old,omitempty"`
	// when password has to be changed becauase it's too old
	PasswordLifespan bool `protobuf:"varint,14,opt,name=password_lifespan,json=passwordLifespan,proto3" json:"password_lifespan,omitempty"`
}

func (x *PasswordViolations) Reset() {
	*x = PasswordViolations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordViolations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordViolations) ProtoMessage() {}

func (x *PasswordViolations) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordViolations.ProtoReflect.Descriptor instead.
func (*PasswordViolations) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{88}
}

func (x *PasswordViolations) GetMinimumLength() bool {
	if x != nil {
		return x.MinimumLength
	}
	return false
}

func (x *PasswordViolations) GetMaximumLength() bool {
	if x != nil {
		return x.MaximumLength
	}
	return false
}

func (x *PasswordViolations) GetUpperCaseNeeded() bool {
	if x != nil {
		return x.UpperCaseNeeded
	}
	return false
}

func (x *PasswordViolations) GetLowerCaseNeeded() bool {
	if x != nil {
		return x.LowerCaseNeeded
	}
	return false
}

func (x *PasswordViolations) GetNumericNeeded() bool {
	if x != nil {
		return x.NumericNeeded
	}
	return false
}

func (x *PasswordViolations) GetNonAlphanumericNeeded() bool {
	if x != nil {
		return x.NonAlphanumericNeeded
	}
	return false
}

func (x *PasswordViolations) GetPasswordReuse() bool {
	if x != nil {
		return x.PasswordReuse
	}
	return false
}

func (x *PasswordViolations) GetExcludeNames() bool {
	if x != nil {
		return x.ExcludeNames
	}
	return false
}

func (x *PasswordViolations) GetExcludeEmail() bool {
	if x != nil {
		return x.ExcludeEmail
	}
	return false
}

func (x *PasswordViolations) GetNoConfusingLetters() bool {
	if x != nil {
		return x.NoConfusingLetters
	}
	return false
}

func (x *PasswordViolations) GetNoSimplePasswords() bool {
	if x != nil {
		return x.NoSimplePasswords
	}
	return false
}

func (x *PasswordViolations) GetNoCommonVocabs() bool {
	if x != nil {
		return x.NoCommonVocabs
	}
	return false
}

func (x *PasswordViolations) GetNoOverlapWithOld() bool {
	if x != nil {
		return x.NoOverlapWithOld
	}
	return false
}

func (x *PasswordViolations) GetPasswordLifespan() bool {
	if x != nil {
		return x.PasswordLifespan
	}
	return false
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/video.proto
////////////////////////////////////////////////////////////////////////////////
type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a URL to a publicly accessible video file. The platform will download this file server
	// side and then process.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The base64 field is using video file bytes directly in the request.
	// NOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence
	// the name here).
	// When using our grpc clients, you DO NOT need to base64 encode
	// it yourself since the clients know how to do this for you automatically and will avoid the
	// base64 encoding if they send a binary request.
	Base64            []byte `protobuf:"bytes,2,opt,name=base64,proto3" json:"base64,omitempty"`
	AllowDuplicateUrl bool   `protobuf:"varint,4,opt,name=allow_duplicate_url,json=allowDuplicateUrl,proto3" json:"allow_duplicate_url,omitempty"`
	// URL of thumbnail image, which is currently frame at position of 1s. This field is currently
	// used only in response.
	ThumbnailUrl string `protobuf:"bytes,5,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// The hosted field lists original video hosted in Clarifai storage. This field is currently used
	// only in response.
	Hosted *HostedURL `protobuf:"bytes,6,opt,name=hosted,proto3" json:"hosted,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{89}
}

func (x *Video) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Video) GetBase64() []byte {
	if x != nil {
		return x.Base64
	}
	return nil
}

func (x *Video) GetAllowDuplicateUrl() bool {
	if x != nil {
		return x.AllowDuplicateUrl
	}
	return false
}

func (x *Video) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Video) GetHosted() *HostedURL {
	if x != nil {
		return x.Hosted
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// Messages from /proto/clarifai/api/workflow.proto
////////////////////////////////////////////////////////////////////////////////
type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workflows's unique id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The app the workflow belongs to
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// When the workflow was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The list of nodes retrieved from latest workflow version.
	// Each node can specify an input node that it connects to in order to define the graph.
	Nodes []*WorkflowNode `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *_struct.Struct `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,6,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The user the workflow belongs to
	UserId string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// When the workflow was last modified
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Info about the workflow version
	Version *WorkflowVersion `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{90}
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Workflow) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Workflow) GetNodes() []*WorkflowNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Workflow) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Workflow) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *Workflow) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Workflow) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Workflow) GetVersion() *WorkflowVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type WorkflowVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of this version.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Workflow id for this version.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// When the version was created.
	// The format is https://www.ietf.org/rfc/rfc3339.txt.
	// Example: "2006-01-02T15:04:05.999999Z".
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Most recent time when the version was updated.
	// The format is https://www.ietf.org/rfc/rfc3339.txt.
	// Example: "2006-01-02T15:04:05.999999Z".
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,5,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The list of nodes that make up the workflow version. Each node can specify an input node
	// that it connects to in order to define the graph.
	Nodes []*WorkflowNode `protobuf:"bytes,6,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// To handle arbitrary json metadata you can use a struct field:
	// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
	Metadata *_struct.Struct `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The app the workflow version belongs to.
	AppId string `protobuf:"bytes,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The user the workflow version belongs to.
	UserId string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *WorkflowVersion) Reset() {
	*x = WorkflowVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersion) ProtoMessage() {}

func (x *WorkflowVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersion.ProtoReflect.Descriptor instead.
func (*WorkflowVersion) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{91}
}

func (x *WorkflowVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowVersion) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowVersion) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkflowVersion) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *WorkflowVersion) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *WorkflowVersion) GetNodes() []*WorkflowNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *WorkflowVersion) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkflowVersion) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WorkflowVersion) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type WorkflowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for this node in the graph. This is used when connecting NodeInputs
	// together.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The model that will do the processing at this node. We only vlidate the model.id and
	// model.model_version.id fields.
	Model *Model `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Each WorkflowNode can connect to multiple input nodes so that we can handle multi-model data
	// and more complex workflow operations.
	NodeInputs []*NodeInput `protobuf:"bytes,3,rep,name=node_inputs,json=nodeInputs,proto3" json:"node_inputs,omitempty"`
	// suppress the output for workflow prediction
	SuppressOutput bool `protobuf:"varint,4,opt,name=suppress_output,json=suppressOutput,proto3" json:"suppress_output,omitempty"`
}

func (x *WorkflowNode) Reset() {
	*x = WorkflowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowNode) ProtoMessage() {}

func (x *WorkflowNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowNode.ProtoReflect.Descriptor instead.
func (*WorkflowNode) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{92}
}

func (x *WorkflowNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowNode) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *WorkflowNode) GetNodeInputs() []*NodeInput {
	if x != nil {
		return x.NodeInputs
	}
	return nil
}

func (x *WorkflowNode) GetSuppressOutput() bool {
	if x != nil {
		return x.SuppressOutput
	}
	return false
}

// NodeInput represents inputs to a node of the graph.
type NodeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id to a connected WorkflowNode which will be used as an input for current WorkflowNode.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *NodeInput) Reset() {
	*x = NodeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInput) ProtoMessage() {}

func (x *NodeInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInput.ProtoReflect.Descriptor instead.
func (*NodeInput) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{93}
}

func (x *NodeInput) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type WorkflowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// When the object was created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Model     *Model               `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Input     *Input               `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Outputs   []*Output            `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Indicate if the output of this model is suppressed.
	SuppressOutput bool `protobuf:"varint,7,opt,name=suppress_output,json=suppressOutput,proto3" json:"suppress_output,omitempty"`
}

func (x *WorkflowResult) Reset() {
	*x = WorkflowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowResult) ProtoMessage() {}

func (x *WorkflowResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowResult.ProtoReflect.Descriptor instead.
func (*WorkflowResult) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{94}
}

func (x *WorkflowResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowResult) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkflowResult) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkflowResult) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *WorkflowResult) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WorkflowResult) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *WorkflowResult) GetSuppressOutput() bool {
	if x != nil {
		return x.SuppressOutput
	}
	return false
}

type WorkflowState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID for the workflow state.
	// To start saving a state in a PostWorkflowResults request set this ID to "init"
	// and it will return a newly generated unique state id that you can then pass in subsequent
	// PostWorkflowResults calls. These state expire after 5 minutes between calls.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WorkflowState) Reset() {
	*x = WorkflowState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowState) ProtoMessage() {}

func (x *WorkflowState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowState.ProtoReflect.Descriptor instead.
func (*WorkflowState) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{95}
}

func (x *WorkflowState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AppDuplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//the id of app duplication
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//the id of new app
	NewAppId string `protobuf:"bytes,2,opt,name=new_app_id,json=newAppId,proto3" json:"new_app_id,omitempty"`
	//the name of new app
	NewAppName string `protobuf:"bytes,3,opt,name=new_app_name,json=newAppName,proto3" json:"new_app_name,omitempty"`
	//the status of app duplication
	Status *status.Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	//when is the app duplication triggered
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//The last time when is the status got updated
	LastModifiedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Only copy resources depending on the filters
	Filter *AppDuplicationFilters `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *AppDuplication) Reset() {
	*x = AppDuplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDuplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDuplication) ProtoMessage() {}

func (x *AppDuplication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDuplication.ProtoReflect.Descriptor instead.
func (*AppDuplication) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{96}
}

func (x *AppDuplication) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppDuplication) GetNewAppId() string {
	if x != nil {
		return x.NewAppId
	}
	return ""
}

func (x *AppDuplication) GetNewAppName() string {
	if x != nil {
		return x.NewAppName
	}
	return ""
}

func (x *AppDuplication) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AppDuplication) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AppDuplication) GetLastModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *AppDuplication) GetFilter() *AppDuplicationFilters {
	if x != nil {
		return x.Filter
	}
	return nil
}

type AppDuplicationFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Copy only inputs and default annotations
	CopyInputs bool `protobuf:"varint,1,opt,name=copy_inputs,json=copyInputs,proto3" json:"copy_inputs,omitempty"`
	// Copy only concepts
	CopyConcepts bool `protobuf:"varint,2,opt,name=copy_concepts,json=copyConcepts,proto3" json:"copy_concepts,omitempty"`
	// Copy annotations and what it depends on: inputs and concepts
	CopyAnnotations bool `protobuf:"varint,3,opt,name=copy_annotations,json=copyAnnotations,proto3" json:"copy_annotations,omitempty"`
	// Copy models and what it depends on: concepts
	CopyModels bool `protobuf:"varint,4,opt,name=copy_models,json=copyModels,proto3" json:"copy_models,omitempty"`
	// Copy workflows and what it depends on: models and concepts
	CopyWorkflows bool `protobuf:"varint,5,opt,name=copy_workflows,json=copyWorkflows,proto3" json:"copy_workflows,omitempty"`
}

func (x *AppDuplicationFilters) Reset() {
	*x = AppDuplicationFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDuplicationFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDuplicationFilters) ProtoMessage() {}

func (x *AppDuplicationFilters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDuplicationFilters.ProtoReflect.Descriptor instead.
func (*AppDuplicationFilters) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{97}
}

func (x *AppDuplicationFilters) GetCopyInputs() bool {
	if x != nil {
		return x.CopyInputs
	}
	return false
}

func (x *AppDuplicationFilters) GetCopyConcepts() bool {
	if x != nil {
		return x.CopyConcepts
	}
	return false
}

func (x *AppDuplicationFilters) GetCopyAnnotations() bool {
	if x != nil {
		return x.CopyAnnotations
	}
	return false
}

func (x *AppDuplicationFilters) GetCopyModels() bool {
	if x != nil {
		return x.CopyModels
	}
	return false
}

func (x *AppDuplicationFilters) GetCopyWorkflows() bool {
	if x != nil {
		return x.CopyWorkflows
	}
	return false
}

// Task is the work that needs to be done for labeling the inputs in an app.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for the task.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// When the task was created.
	// The format is https://www.ietf.org/rfc/rfc3339.txt.
	// Example: "2006-01-02T15:04:05.999999Z".
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Most recent time when the task was updated.
	// The format is https://www.ietf.org/rfc/rfc3339.txt.
	// Example: "2006-01-02T15:04:05.999999Z".
	ModifiedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Task type.
	Type Task_TaskType `protobuf:"varint,4,opt,name=type,proto3,enum=clarifai.api.Task_TaskType" json:"type,omitempty"`
	// Description of the task.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Worker details.
	Worker *TaskWorker `protobuf:"bytes,6,opt,name=worker,proto3" json:"worker,omitempty"`
	// List of concept ids used in the work of this task if label type is classification.
	ConceptIds []string `protobuf:"bytes,7,rep,name=concept_ids,json=conceptIds,proto3" json:"concept_ids,omitempty"`
	// List of inputs used in this task will be taken from this source.
	InputSource *TaskInputSource `protobuf:"bytes,8,opt,name=input_source,json=inputSource,proto3" json:"input_source,omitempty"`
	// For model predictions on video: Sample delay for video predicting (1 frame per N milliseconds)
	SampleMs uint32 `protobuf:"varint,9,opt,name=sample_ms,json=sampleMs,proto3" json:"sample_ms,omitempty"`
	// AI assistant details.
	AiAssistant *TaskAIAssistant `protobuf:"bytes,10,opt,name=ai_assistant,json=aiAssistant,proto3" json:"ai_assistant,omitempty"`
	// Review details.
	Review *TaskReview `protobuf:"bytes,11,opt,name=review,proto3" json:"review,omitempty"`
	// Status of this task.
	Status *status.Status `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Add a title for this task to quickly recognise it in a list of tasks.
	Name           string              `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	AiAssistParams *AiAssistParameters `protobuf:"bytes,14,opt,name=ai_assist_params,json=aiAssistParams,proto3" json:"ai_assist_params,omitempty"`
	// The visibility field represents whether this message is privately/publicly visible.
	// To be visible to the public the App that contains it AND the User that contains the App must
	// also be publicly visible.
	Visibility *Visibility `protobuf:"bytes,15,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The app the task belongs to.
	AppId string `protobuf:"bytes,16,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The user the task belongs to.
	UserId string `protobuf:"bytes,17,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{98}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetModifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Task) GetType() Task_TaskType {
	if x != nil {
		return x.Type
	}
	return Task_TYPE_NOT_SET
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetWorker() *TaskWorker {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *Task) GetConceptIds() []string {
	if x != nil {
		return x.ConceptIds
	}
	return nil
}

func (x *Task) GetInputSource() *TaskInputSource {
	if x != nil {
		return x.InputSource
	}
	return nil
}

func (x *Task) GetSampleMs() uint32 {
	if x != nil {
		return x.SampleMs
	}
	return 0
}

func (x *Task) GetAiAssistant() *TaskAIAssistant {
	if x != nil {
		return x.AiAssistant
	}
	return nil
}

func (x *Task) GetReview() *TaskReview {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *Task) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetAiAssistParams() *AiAssistParameters {
	if x != nil {
		return x.AiAssistParams
	}
	return nil
}

func (x *Task) GetVisibility() *Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *Task) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Task) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AiAssistParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Min and max threshold values for approving annotations by default based on prediction score
	MinThreshold float32 `protobuf:"fixed32,1,opt,name=min_threshold,json=minThreshold,proto3" json:"min_threshold,omitempty"`
	MaxThreshold float32 `protobuf:"fixed32,2,opt,name=max_threshold,json=maxThreshold,proto3" json:"max_threshold,omitempty"`
	// ids of concept relations. Used in AI assist workflow
	ConceptRelationIds []string `protobuf:"bytes,3,rep,name=concept_relation_ids,json=conceptRelationIds,proto3" json:"concept_relation_ids,omitempty"`
}

func (x *AiAssistParameters) Reset() {
	*x = AiAssistParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiAssistParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiAssistParameters) ProtoMessage() {}

func (x *AiAssistParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiAssistParameters.ProtoReflect.Descriptor instead.
func (*AiAssistParameters) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{99}
}

func (x *AiAssistParameters) GetMinThreshold() float32 {
	if x != nil {
		return x.MinThreshold
	}
	return 0
}

func (x *AiAssistParameters) GetMaxThreshold() float32 {
	if x != nil {
		return x.MaxThreshold
	}
	return 0
}

func (x *AiAssistParameters) GetConceptRelationIds() []string {
	if x != nil {
		return x.ConceptRelationIds
	}
	return nil
}

type TaskWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Worker strategy.
	Strategy TaskWorker_TaskWorkerStrategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=clarifai.api.TaskWorker_TaskWorkerStrategy" json:"strategy,omitempty"`
	// Who will work on this task.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Info based on the worker strategy,
	//
	// Types that are assignable to StrategyInfo:
	//	*TaskWorker_PartitionedStrategyInfo
	StrategyInfo isTaskWorker_StrategyInfo `protobuf_oneof:"strategy_info"`
}

func (x *TaskWorker) Reset() {
	*x = TaskWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorker) ProtoMessage() {}

func (x *TaskWorker) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorker.ProtoReflect.Descriptor instead.
func (*TaskWorker) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{100}
}

func (x *TaskWorker) GetStrategy() TaskWorker_TaskWorkerStrategy {
	if x != nil {
		return x.Strategy
	}
	return TaskWorker_WORKER_STRATEGY_NOT_SET
}

func (x *TaskWorker) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (m *TaskWorker) GetStrategyInfo() isTaskWorker_StrategyInfo {
	if m != nil {
		return m.StrategyInfo
	}
	return nil
}

func (x *TaskWorker) GetPartitionedStrategyInfo() *TaskWorkerPartitionedStrategyInfo {
	if x, ok := x.GetStrategyInfo().(*TaskWorker_PartitionedStrategyInfo); ok {
		return x.PartitionedStrategyInfo
	}
	return nil
}

type isTaskWorker_StrategyInfo interface {
	isTaskWorker_StrategyInfo()
}

type TaskWorker_PartitionedStrategyInfo struct {
	PartitionedStrategyInfo *TaskWorkerPartitionedStrategyInfo `protobuf:"bytes,3,opt,name=partitioned_strategy_info,json=partitionedStrategyInfo,proto3,oneof"`
}

func (*TaskWorker_PartitionedStrategyInfo) isTaskWorker_StrategyInfo() {}

type TaskWorkerPartitionedStrategyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define how the partitioning should work.
	Type TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy `protobuf:"varint,1,opt,name=type,proto3,enum=clarifai.api.TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy" json:"type,omitempty"`
	// How many workers will label each input.
	WorkersPerInput int32 `protobuf:"varint,2,opt,name=workers_per_input,json=workersPerInput,proto3" json:"workers_per_input,omitempty"`
	// In case of weighted partitioning, map user ids to weights.
	// Each labeler will be assigned work proportional to its own weight as compared to the sum of total weight.
	//
	// EXAMPLE:
	// If we have 3 workers, and weights = {1: 30, 2: 30, 3: 40},
	// then first worker will have assigned 30% of the work,
	// second worker will have assigned 30% of the work,
	// and third worker will have assigned 40% of the work.
	// You may use weights which add up to 100, but it's not necessary.
	// For example, weights {1: 30, 2: 30, 3: 40} are equivalent with {1: 3, 2: 3, 3: 4}
	// because they represent the same percentages: {1: 30%, 2: 30%, 3: 40%}.
	//
	// NOTE:
	// Note that no worker should be assigned a weight percentage greater than 1/workers_per_input.
	// It is mathematically impossible to partition the work in such a case.
	// Why? Say, we have 3 workers. And workers_per_input = 2, i.e. each input must be labeled by 2 workers.
	// Let's assign weights {1: 51%, 2: 25%, 3: 24%}.
	// Note that first worker has a weight percentage higher than 1/workers_per_input = 1/2 = 50%.
	// If we have 100 inputs, then a total of 100 * workers_per_input = 200 cumulative inputs will be labeled by these 3 workers.
	// Worker 1 should label 102 cumulative inputs, while worker 2 and worker 3 will label 98 cumulative inputs together.
	// No matter how we assign the 98 cumulative inputs, the 2 workers will be able to label up to 98 actual inputs.
	// This means the remaining 2 inputs will be labeled only by worker 1. This contradicts the worker_per_input = 2 requirement.
	Weights *_struct.Struct `protobuf:"bytes,3,opt,name=weights,proto3" json:"weights,omitempty"`
}

func (x *TaskWorkerPartitionedStrategyInfo) Reset() {
	*x = TaskWorkerPartitionedStrategyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkerPartitionedStrategyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkerPartitionedStrategyInfo) ProtoMessage() {}

func (x *TaskWorkerPartitionedStrategyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkerPartitionedStrategyInfo.ProtoReflect.Descriptor instead.
func (*TaskWorkerPartitionedStrategyInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{101}
}

func (x *TaskWorkerPartitionedStrategyInfo) GetType() TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy {
	if x != nil {
		return x.Type
	}
	return TaskWorkerPartitionedStrategyInfo_PARTITIONED_WORKER_STRATEGY_NOT_SET
}

func (x *TaskWorkerPartitionedStrategyInfo) GetWorkersPerInput() int32 {
	if x != nil {
		return x.WorkersPerInput
	}
	return 0
}

func (x *TaskWorkerPartitionedStrategyInfo) GetWeights() *_struct.Struct {
	if x != nil {
		return x.Weights
	}
	return nil
}

type TaskInputSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of input source.
	Type TaskInputSource_TaskInputSourceType `protobuf:"varint,1,opt,name=type,proto3,enum=clarifai.api.TaskInputSource_TaskInputSourceType" json:"type,omitempty"`
	// If type is SAVED_SEARCH, then this is the saved search id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskInputSource) Reset() {
	*x = TaskInputSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInputSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInputSource) ProtoMessage() {}

func (x *TaskInputSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInputSource.ProtoReflect.Descriptor instead.
func (*TaskInputSource) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{102}
}

func (x *TaskInputSource) GetType() TaskInputSource_TaskInputSourceType {
	if x != nil {
		return x.Type
	}
	return TaskInputSource_INPUT_SOURCE_TYPE_NOT_SET
}

func (x *TaskInputSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TaskReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task review strategy.
	Strategy TaskReview_TaskReviewStrategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=clarifai.api.TaskReview_TaskReviewStrategy" json:"strategy,omitempty"`
	// Who will review this task.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Info based on the review strategy,
	//
	// Types that are assignable to StrategyInfo:
	//	*TaskReview_ManualStrategyInfo
	//	*TaskReview_ConsensusStrategyInfo
	StrategyInfo isTaskReview_StrategyInfo `protobuf_oneof:"strategy_info"`
}

func (x *TaskReview) Reset() {
	*x = TaskReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReview) ProtoMessage() {}

func (x *TaskReview) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReview.ProtoReflect.Descriptor instead.
func (*TaskReview) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{103}
}

func (x *TaskReview) GetStrategy() TaskReview_TaskReviewStrategy {
	if x != nil {
		return x.Strategy
	}
	return TaskReview_TASK_REVIEW_STRATEGY_NOT_SET
}

func (x *TaskReview) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (m *TaskReview) GetStrategyInfo() isTaskReview_StrategyInfo {
	if m != nil {
		return m.StrategyInfo
	}
	return nil
}

func (x *TaskReview) GetManualStrategyInfo() *TaskReviewManualStrategyInfo {
	if x, ok := x.GetStrategyInfo().(*TaskReview_ManualStrategyInfo); ok {
		return x.ManualStrategyInfo
	}
	return nil
}

func (x *TaskReview) GetConsensusStrategyInfo() *TaskReviewConsensusStrategyInfo {
	if x, ok := x.GetStrategyInfo().(*TaskReview_ConsensusStrategyInfo); ok {
		return x.ConsensusStrategyInfo
	}
	return nil
}

type isTaskReview_StrategyInfo interface {
	isTaskReview_StrategyInfo()
}

type TaskReview_ManualStrategyInfo struct {
	ManualStrategyInfo *TaskReviewManualStrategyInfo `protobuf:"bytes,3,opt,name=manual_strategy_info,json=manualStrategyInfo,proto3,oneof"`
}

type TaskReview_ConsensusStrategyInfo struct {
	ConsensusStrategyInfo *TaskReviewConsensusStrategyInfo `protobuf:"bytes,4,opt,name=consensus_strategy_info,json=consensusStrategyInfo,proto3,oneof"`
}

func (*TaskReview_ManualStrategyInfo) isTaskReview_StrategyInfo() {}

func (*TaskReview_ConsensusStrategyInfo) isTaskReview_StrategyInfo() {}

type TaskReviewManualStrategyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field represents the percentage of inputs that will be reviewed by reviewers. It is a value between 0 and 1.
	SamplePercentage float32 `protobuf:"fixed32,1,opt,name=sample_percentage,json=samplePercentage,proto3" json:"sample_percentage,omitempty"`
}

func (x *TaskReviewManualStrategyInfo) Reset() {
	*x = TaskReviewManualStrategyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReviewManualStrategyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReviewManualStrategyInfo) ProtoMessage() {}

func (x *TaskReviewManualStrategyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReviewManualStrategyInfo.ProtoReflect.Descriptor instead.
func (*TaskReviewManualStrategyInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{104}
}

func (x *TaskReviewManualStrategyInfo) GetSamplePercentage() float32 {
	if x != nil {
		return x.SamplePercentage
	}
	return 0
}

type TaskReviewConsensusStrategyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of labelers that need to agree in order to automatically approve an annotation.
	ApprovalThreshold uint32 `protobuf:"varint,2,opt,name=approval_threshold,json=approvalThreshold,proto3" json:"approval_threshold,omitempty"`
}

func (x *TaskReviewConsensusStrategyInfo) Reset() {
	*x = TaskReviewConsensusStrategyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReviewConsensusStrategyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReviewConsensusStrategyInfo) ProtoMessage() {}

func (x *TaskReviewConsensusStrategyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReviewConsensusStrategyInfo.ProtoReflect.Descriptor instead.
func (*TaskReviewConsensusStrategyInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{105}
}

func (x *TaskReviewConsensusStrategyInfo) GetApprovalThreshold() uint32 {
	if x != nil {
		return x.ApprovalThreshold
	}
	return 0
}

type TaskAIAssistant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The worker is helped by an AI assistant.
	// This field is the workflow id which is used to assist the worker with predictions.
	// If empty, then AI assistant is disabled.
	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *TaskAIAssistant) Reset() {
	*x = TaskAIAssistant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAIAssistant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAIAssistant) ProtoMessage() {}

func (x *TaskAIAssistant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAIAssistant.ProtoReflect.Descriptor instead.
func (*TaskAIAssistant) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{106}
}

func (x *TaskAIAssistant) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type TaskStatusCountPerUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pending                 uint32 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	AwaitingReview          uint32 `protobuf:"varint,3,opt,name=awaiting_review,json=awaitingReview,proto3" json:"awaiting_review,omitempty"`
	Success                 uint32 `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ReviewDenied            uint32 `protobuf:"varint,5,opt,name=review_denied,json=reviewDenied,proto3" json:"review_denied,omitempty"`
	AwaitingConsensusReview uint32 `protobuf:"varint,6,opt,name=awaiting_consensus_review,json=awaitingConsensusReview,proto3" json:"awaiting_consensus_review,omitempty"`
}

func (x *TaskStatusCountPerUser) Reset() {
	*x = TaskStatusCountPerUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusCountPerUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusCountPerUser) ProtoMessage() {}

func (x *TaskStatusCountPerUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusCountPerUser.ProtoReflect.Descriptor instead.
func (*TaskStatusCountPerUser) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{107}
}

func (x *TaskStatusCountPerUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskStatusCountPerUser) GetPending() uint32 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *TaskStatusCountPerUser) GetAwaitingReview() uint32 {
	if x != nil {
		return x.AwaitingReview
	}
	return 0
}

func (x *TaskStatusCountPerUser) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *TaskStatusCountPerUser) GetReviewDenied() uint32 {
	if x != nil {
		return x.ReviewDenied
	}
	return 0
}

func (x *TaskStatusCountPerUser) GetAwaitingConsensusReview() uint32 {
	if x != nil {
		return x.AwaitingConsensusReview
	}
	return 0
}

// Collector is a data pathway from a CollectorSource to an app to collect data automatically.
// For example, a CollectorSource
type Collector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for the collector.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human readable description for the collector.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// When the collector is created. We follow the XXXX timestamp
	// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
	// "2006-01-02T15:04:05.999999Z" so you can expect results like
	// the following from the API:
	// "2017-04-11T21:50:50.223962Z"
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is a workflow to run inline in model predict calls. It should ONLY have very fast and
	// light-weight models in it as it will effect the speed of the predictions being made.
	// This workflow's purpose is to filter down the inputs to queue for the collector to process.
	// The input to this workflow is going to be the OUTPUT of the model, not the input to the model
	// since we want to encourage having fast workflows that can also take advantage of the model
	// outputs to make deciions (for example: thresholding based on concepts). If the workflow
	// output has any field that is non-empty then the input will be queued for the collector
	// to process with the post_queue_workflow_id.
	PreQueueWorkflowId string `protobuf:"bytes,4,opt,name=pre_queue_workflow_id,json=preQueueWorkflowId,proto3" json:"pre_queue_workflow_id,omitempty"`
	// A workflow to run to after the collector is processing the queued input. This workflow
	// uses the original input to the model as input to the workflow so that you can run additional
	// models as well on that input to decide whether to queue the model or not. If the workflow
	// output has any field that is non-empty then it will be passed on to POST /inputs to
	// the destination app.
	PostQueueWorkflowId string `protobuf:"bytes,5,opt,name=post_queue_workflow_id,json=postQueueWorkflowId,proto3" json:"post_queue_workflow_id,omitempty"`
	// The source of the collector to feed data into this app.
	// Note(zeiler): if we wanted more than one source per collector we could make this it's own
	// object and introduce /collectors/{collector_id}/sources
	// We will keep it simple for now and have just one source per collector since a user can make
	// more than one collector in the same app anyways.
	CollectorSource *CollectorSource `protobuf:"bytes,6,opt,name=collector_source,json=collectorSource,proto3" json:"collector_source,omitempty"`
	// Status for the collector. This allows you to pause a collector without having to delete it as
	// an example.
	Status *status.Status `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Collector) Reset() {
	*x = Collector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collector) ProtoMessage() {}

func (x *Collector) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collector.ProtoReflect.Descriptor instead.
func (*Collector) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{108}
}

func (x *Collector) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Collector) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Collector) GetPreQueueWorkflowId() string {
	if x != nil {
		return x.PreQueueWorkflowId
	}
	return ""
}

func (x *Collector) GetPostQueueWorkflowId() string {
	if x != nil {
		return x.PostQueueWorkflowId
	}
	return ""
}

func (x *Collector) GetCollectorSource() *CollectorSource {
	if x != nil {
		return x.CollectorSource
	}
	return nil
}

func (x *Collector) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Configuration for the source to collect data from.
// Only one of the fields can be present at a time.
type CollectorSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collect from the inputs passed in for PostModelOutputs predictions of a specific model.
	// This does not apply to models used within workflows, only PostModelOutputs calls.
	ApiPostModelOutputsCollectorSource *APIPostModelOutputsCollectorSource `protobuf:"bytes,2,opt,name=api_post_model_outputs_collector_source,json=apiPostModelOutputsCollectorSource,proto3" json:"api_post_model_outputs_collector_source,omitempty"`
}

func (x *CollectorSource) Reset() {
	*x = CollectorSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorSource) ProtoMessage() {}

func (x *CollectorSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorSource.ProtoReflect.Descriptor instead.
func (*CollectorSource) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{109}
}

func (x *CollectorSource) GetApiPostModelOutputsCollectorSource() *APIPostModelOutputsCollectorSource {
	if x != nil {
		return x.ApiPostModelOutputsCollectorSource
	}
	return nil
}

// This is configuration for using the inputs send for model prediction in our API as
// as the source for data.
type APIPostModelOutputsCollectorSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// To define the model that we should collect from we need to specify the following 4 IDs:
	// The User ID of the model we want to collect from.
	// This is User B in the example.
	ModelUserId string `protobuf:"bytes,1,opt,name=model_user_id,json=modelUserId,proto3" json:"model_user_id,omitempty"`
	// The App ID of the model we want to collect from.
	ModelAppId string `protobuf:"bytes,2,opt,name=model_app_id,json=modelAppId,proto3" json:"model_app_id,omitempty"`
	// The Model ID of the model we want to collect from.
	ModelId string `protobuf:"bytes,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// The Version ID of the model we want to collect from.
	ModelVersionId string `protobuf:"bytes,4,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// This key is used to POST /inputs into your app by the collector. It can be an API key or a
	// PAT. This needs the permissions that are needed for POST /inputs for the app_id this
	// Collector is defined in.
	PostInputsKeyId string `protobuf:"bytes,5,opt,name=post_inputs_key_id,json=postInputsKeyId,proto3" json:"post_inputs_key_id,omitempty"`
}

func (x *APIPostModelOutputsCollectorSource) Reset() {
	*x = APIPostModelOutputsCollectorSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPostModelOutputsCollectorSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPostModelOutputsCollectorSource) ProtoMessage() {}

func (x *APIPostModelOutputsCollectorSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPostModelOutputsCollectorSource.ProtoReflect.Descriptor instead.
func (*APIPostModelOutputsCollectorSource) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{110}
}

func (x *APIPostModelOutputsCollectorSource) GetModelUserId() string {
	if x != nil {
		return x.ModelUserId
	}
	return ""
}

func (x *APIPostModelOutputsCollectorSource) GetModelAppId() string {
	if x != nil {
		return x.ModelAppId
	}
	return ""
}

func (x *APIPostModelOutputsCollectorSource) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *APIPostModelOutputsCollectorSource) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

func (x *APIPostModelOutputsCollectorSource) GetPostInputsKeyId() string {
	if x != nil {
		return x.PostInputsKeyId
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////
// Stats Collection Objects.
////////////////////////////////////////////////////////////////////////////////
type StatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time of the event. Defaults to now().
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// A value for the metric you're recording.
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	// List of tags to attach to this stat. Each should contain one colon so that the first part will
	// be used as a tag group while the second being the tag itself. For example: ["task_id:a",
	// "worker_id:1"]. These tag groups like "task_id" or "worker_id" are important for aggregating
	// values in the StatValueAggregateQuery.
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *StatValue) Reset() {
	*x = StatValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatValue) ProtoMessage() {}

func (x *StatValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatValue.ProtoReflect.Descriptor instead.
func (*StatValue) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{111}
}

func (x *StatValue) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StatValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StatValue) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StatValueAggregateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of repeated aggregate values and their counts.
	StatValueAggregates []*StatValueAggregate `protobuf:"bytes,1,rep,name=stat_value_aggregates,json=statValueAggregates,proto3" json:"stat_value_aggregates,omitempty"`
	// The query that created these results.
	StatValueAggregateQuery *StatValueAggregateQuery `protobuf:"bytes,2,opt,name=stat_value_aggregate_query,json=statValueAggregateQuery,proto3" json:"stat_value_aggregate_query,omitempty"`
}

func (x *StatValueAggregateResult) Reset() {
	*x = StatValueAggregateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatValueAggregateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatValueAggregateResult) ProtoMessage() {}

func (x *StatValueAggregateResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatValueAggregateResult.ProtoReflect.Descriptor instead.
func (*StatValueAggregateResult) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{112}
}

func (x *StatValueAggregateResult) GetStatValueAggregates() []*StatValueAggregate {
	if x != nil {
		return x.StatValueAggregates
	}
	return nil
}

func (x *StatValueAggregateResult) GetStatValueAggregateQuery() *StatValueAggregateQuery {
	if x != nil {
		return x.StatValueAggregateQuery
	}
	return nil
}

type StatValueAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time of the aggregation. For example, if you aggregate over "HOUR" buckets then you can
	// expect each hour that has atleast one value (matching the rest of your query fields) will have
	// a StatValueAggregate with the time filled into that hour.
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// The value aggregated according to the stat_value_agg_type
	AggregateValue float32 `protobuf:"fixed32,2,opt,name=aggregate_value,json=aggregateValue,proto3" json:"aggregate_value,omitempty"`
	// The count of the stat values that were used in this aggregation.
	Count uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// The tags for this aggregated_value and count. This will be filled in if tag groups were used in
	// the query to group aggregations.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *StatValueAggregate) Reset() {
	*x = StatValueAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatValueAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatValueAggregate) ProtoMessage() {}

func (x *StatValueAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatValueAggregate.ProtoReflect.Descriptor instead.
func (*StatValueAggregate) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{113}
}

func (x *StatValueAggregate) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StatValueAggregate) GetAggregateValue() float32 {
	if x != nil {
		return x.AggregateValue
	}
	return 0
}

func (x *StatValueAggregate) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StatValueAggregate) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StatValueAggregateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These tags are used to filter down the values before they are aggregated. For example,
	// if you want to aggregate values for "task_id:a" you could specify that as a tag here.
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	// These are tag groups to aggregate over. So for example if you added stat values with tags
	// "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
	// aggregation would return StatValueAggregate values for each task_id. If you provide more than
	// one tag_group the response will return all rolled up combinations of them. For example
	// ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
	// values then you'd get StatValueAggregate values back for:
	// task_id | something
	// a       | 1
	// a       | 2
	// b       | 1
	// b       | 1
	TagGroups []string `protobuf:"bytes,2,rep,name=tag_groups,json=tagGroups,proto3" json:"tag_groups,omitempty"`
	// Aggregation function to use over the values. Count(value) is also always returns.
	// Defaults to 'sum' if not provided.
	StatValueAggType StatValueAggType `protobuf:"varint,3,opt,name=stat_value_agg_type,json=statValueAggType,proto3,enum=clarifai.api.StatValueAggType" json:"stat_value_agg_type,omitempty"`
	// Aggregation bins for time where the values will be aggregated at this bin granualarity.
	// And the "time" field will be returned in StatValueAggregate object.
	// If not provided then bins are not used, and all time is aggregated over.
	StatTimeAggType StatTimeAggType `protobuf:"varint,4,opt,name=stat_time_agg_type,json=statTimeAggType,proto3,enum=clarifai.api.StatTimeAggType" json:"stat_time_agg_type,omitempty"`
	// If provided the time range over which values will be >= this time. If not provided then
	// all values will be used back to start of time.
	StartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// If provided the time range over which values will be <= this time. If not provided then all
	// values will be used up until now().
	EndTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *StatValueAggregateQuery) Reset() {
	*x = StatValueAggregateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatValueAggregateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatValueAggregateQuery) ProtoMessage() {}

func (x *StatValueAggregateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatValueAggregateQuery.ProtoReflect.Descriptor instead.
func (*StatValueAggregateQuery) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{114}
}

func (x *StatValueAggregateQuery) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *StatValueAggregateQuery) GetTagGroups() []string {
	if x != nil {
		return x.TagGroups
	}
	return nil
}

func (x *StatValueAggregateQuery) GetStatValueAggType() StatValueAggType {
	if x != nil {
		return x.StatValueAggType
	}
	return StatValueAggType_SUM
}

func (x *StatValueAggregateQuery) GetStatTimeAggType() StatTimeAggType {
	if x != nil {
		return x.StatTimeAggType
	}
	return StatTimeAggType_NO_TIME_AGG
}

func (x *StatValueAggregateQuery) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StatValueAggregateQuery) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

/////////////////////////////
// Visibilty of the resource.
/////////////////////////////
// Visibility represents how visible the given resource is to other users.
// When authenticating a request we can tell if a user is a collaborator or a teammate for the
// the app that contains the resource and set their allowed visibility. We use that to restrict
// what they are allowed to see:
// If AllowedVisibility is PRIVATE then we allow PRIVATE (10), ORG (30), PUBLIC (50)
// If AllowedVisibility is ORG then we allow ORG (30), PUBLIC (50)
// If AllowedVisibility is PUBLIC then we allow PUBLIC (50) only.
type Visibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gettable Visibility_Gettable `protobuf:"varint,1,opt,name=gettable,proto3,enum=clarifai.api.Visibility_Gettable" json:"gettable,omitempty"`
}

func (x *Visibility) Reset() {
	*x = Visibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Visibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Visibility) ProtoMessage() {}

func (x *Visibility) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Visibility.ProtoReflect.Descriptor instead.
func (*Visibility) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{115}
}

func (x *Visibility) GetGettable() Visibility_Gettable {
	if x != nil {
		return x.Gettable
	}
	return Visibility_UNKNOWN_VISIBILITY
}

type TrendingMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ObjectId  string `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ViewCount uint64 `protobuf:"varint,4,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
}

func (x *TrendingMetric) Reset() {
	*x = TrendingMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrendingMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrendingMetric) ProtoMessage() {}

func (x *TrendingMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrendingMetric.ProtoReflect.Descriptor instead.
func (*TrendingMetric) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{116}
}

func (x *TrendingMetric) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrendingMetric) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *TrendingMetric) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *TrendingMetric) GetViewCount() uint64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

type TimeSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *Data     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TimeInfo *TimeInfo `protobuf:"bytes,2,opt,name=time_info,json=timeInfo,proto3" json:"time_info,omitempty"`
}

func (x *TimeSegment) Reset() {
	*x = TimeSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSegment) ProtoMessage() {}

func (x *TimeSegment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSegment.ProtoReflect.Descriptor instead.
func (*TimeSegment) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{117}
}

func (x *TimeSegment) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TimeSegment) GetTimeInfo() *TimeInfo {
	if x != nil {
		return x.TimeInfo
	}
	return nil
}

type TimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of frames
	NumFrames uint32 `protobuf:"varint,1,opt,name=num_frames,json=numFrames,proto3" json:"num_frames,omitempty"`
	// Timestamp where track begins.
	BeginTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// Timestamp where track ends.
	EndTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *TimeInfo) Reset() {
	*x = TimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInfo) ProtoMessage() {}

func (x *TimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInfo.ProtoReflect.Descriptor instead.
func (*TimeInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{118}
}

func (x *TimeInfo) GetNumFrames() uint32 {
	if x != nil {
		return x.NumFrames
	}
	return 0
}

func (x *TimeInfo) GetBeginTime() *timestamp.Timestamp {
	if x != nil {
		return x.BeginTime
	}
	return nil
}

func (x *TimeInfo) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Here is where we store the track metadata.
type Track_TrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of frames
	NumFrames uint32 `protobuf:"varint,1,opt,name=num_frames,json=numFrames,proto3" json:"num_frames,omitempty"`
	// Timestamp where track begins.
	BeginTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// Timestamp where track ends.
	EndTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Quality of the track.
	Quality float32 `protobuf:"fixed32,4,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *Track_TrackInfo) Reset() {
	*x = Track_TrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clarifai_api_resources_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track_TrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track_TrackInfo) ProtoMessage() {}

func (x *Track_TrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clarifai_api_resources_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track_TrackInfo.ProtoReflect.Descriptor instead.
func (*Track_TrackInfo) Descriptor() ([]byte, []int) {
	return file_proto_clarifai_api_resources_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Track_TrackInfo) GetNumFrames() uint32 {
	if x != nil {
		return x.NumFrames
	}
	return 0
}

func (x *Track_TrackInfo) GetBeginTime() *timestamp.Timestamp {
	if x != nil {
		return x.BeginTime
	}
	return nil
}

func (x *Track_TrackInfo) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Track_TrackInfo) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

var File_proto_clarifai_api_resources_proto protoreflect.FileDescriptor

var file_proto_clarifai_api_resources_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80,
	0x05, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x40, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x16, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10,
	0x0d, 0x22, 0xa9, 0x04, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x12,
	0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x65, 0x72, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0x1e, 0x0a,
	0x08, 0x41, 0x70, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x02,
	0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x61, 0x70, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x92, 0x01,
	0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xb6, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x8c, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x61, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f,
	0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x48, 0x65,
	0x78, 0x12, 0x23, 0x0a, 0x03, 0x77, 0x33, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x33,
	0x43, 0x52, 0x03, 0x77, 0x33, 0x63, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x2b, 0x0a, 0x03, 0x57, 0x33, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3e, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0x6d, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x3a,
	0x0a, 0x19, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xcc,
	0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0b, 0xd5,
	0xb5, 0x18, 0x00, 0x00, 0x80, 0x3f, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd4, 0x01,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x52, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x89, 0x02, 0x0a,
	0x12, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x36, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3c, 0x0a,
	0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x2c,
	0x0a, 0x12, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x73, 0x22, 0x55, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x03, 0x67,
	0x65, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f,
	0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a,
	0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x22, 0xac, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x22, 0xda, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x78, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x26,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x07,
	0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x95,
	0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x1d,
	0x0a, 0x07, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x52, 0x6f, 0x77, 0x12, 0x1f, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x12, 0x23,
	0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x52, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x22, 0x41, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x18, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x05, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x37, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x07, 0x50,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x0c, 0x0a, 0x01,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x4e, 0x0a, 0x09, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x08, 0x47, 0x65,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x08,
	0x47, 0x65, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x65, 0x6f,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa5,
	0x01, 0x0a, 0x03, 0x47, 0x65, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x67,
	0x65, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x67, 0x65, 0x6f, 0x42, 0x6f, 0x78, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x55, 0x52, 0x4c, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x22, 0x73, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x69, 0x7a, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xb5, 0x02, 0x0a, 0x0a,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x09, 0x72, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0d,
	0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a,
	0x0a, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x69, 0x6e, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x74,
	0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xcc, 0x02,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x70, 0x49, 0x64, 0x73, 0x22, 0xc5, 0x05, 0x0a,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x36, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04,
	0x08, 0x0b, 0x10, 0x0c, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01,
	0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x02,
	0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x12, 0x36,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x74, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xef, 0x05, 0x0a, 0x0c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x1b,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x11, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x68, 0x79, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e,
	0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x66, 0x61, 0x69, 0x6c, 0x4f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10,
	0x0d, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x22, 0x82, 0x05,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x48, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x21, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x1e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0x80, 0x06, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x12, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x53, 0x10, 0x04,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e,
	0x43, 0x45, 0x50, 0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4f, 0x4c, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x09, 0x12, 0x08,
	0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x0b, 0x12, 0x19,
	0x0a, 0x15, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x53, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x0d, 0x22,
	0x04, 0x08, 0x06, 0x10, 0x06, 0x22, 0x4c, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x5c, 0x0a, 0x0a,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xfe, 0x04, 0x0a, 0x0c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0xb7, 0x02, 0x0a, 0x15,
	0x50, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x11,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x7a, 0x69, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5a, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x75, 0x72, 0x76, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x73, 0x43, 0x75, 0x72, 0x76, 0x65,
	0x22, 0x5b, 0x0a, 0x0e, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x75, 0x72, 0x76, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x45, 0x0a,
	0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x15, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x6f, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x12,
	0x43, 0x6f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x12, 0x3d, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x68, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12,
	0x3a, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x03, 0x52, 0x4f, 0x43, 0x12, 0x16, 0x0a, 0x03, 0x66, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x66, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x03,
	0x74, 0x70, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x03, 0x74, 0x70, 0x72, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0b, 0x66, 0x70, 0x72, 0x50, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x70, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x70, 0x72, 0x50, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x7e, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x22, 0xe6, 0x03, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x50, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x4e, 0x65, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x54, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x6f, 0x63, 0x5f, 0x61, 0x75, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x63, 0x41,
	0x75, 0x63, 0x12, 0x14, 0x0a, 0x02, 0x66, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x02, 0x66, 0x31, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x6f, 0x63,
	0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x4f, 0x43, 0x52,
	0x08, 0x72, 0x6f, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x75,
	0x72, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6f, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x69, 0x6f, 0x75, 0x22, 0xdb, 0x01,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x74, 0x5f, 0x6d, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6d, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x72, 0x73, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x6f, 0x72, 0x73, 0x65,
	0x46, 0x72, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x76, 0x67,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x69, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x69, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x10,
	0x45, 0x76, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xaf, 0x02, 0x0a, 0x0e, 0x4c, 0x4f, 0x50, 0x51, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x6b, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x73, 0x5f, 0x62,
	0x72, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x56, 0x73,
	0x42, 0x72, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1a, 0x6b, 0x65,
	0x6e, 0x64, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x75, 0x5f, 0x76, 0x73, 0x5f, 0x62, 0x72, 0x75,
	0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x16, 0x6b, 0x65, 0x6e, 0x64, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x75,
	0x56, 0x73, 0x42, 0x72, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1a,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x6d, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x70, 0x71, 0x5f, 0x6e, 0x64, 0x63, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x70, 0x71, 0x4e, 0x64,
	0x63, 0x67, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x72, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x64, 0x63, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x0e, 0x62, 0x72, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x64,
	0x63, 0x67, 0x22, 0xcb, 0x04, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x31, 0x5f, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x74, 0x6f, 0x70, 0x31, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x27,
	0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x35, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x35, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x72, 0x6f,
	0x5f, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x6f, 0x63, 0x5f, 0x61, 0x75, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x41,
	0x76, 0x67, 0x52, 0x6f, 0x63, 0x41, 0x75, 0x63, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x72,
	0x6f, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x72, 0x6f, 0x63, 0x5f, 0x61, 0x75, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x63, 0x72, 0x6f,
	0x53, 0x74, 0x64, 0x52, 0x6f, 0x63, 0x41, 0x75, 0x63, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x61, 0x63,
	0x72, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x66, 0x31, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x63,
	0x72, 0x6f, 0x41, 0x76, 0x67, 0x46, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x12,
	0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x66, 0x31, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f,
	0x6d, 0x61, 0x63, 0x72, 0x6f, 0x53, 0x74, 0x64, 0x46, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x34, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x41, 0x76, 0x67, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x61,
	0x76, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x41, 0x76, 0x67, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6f, 0x75, 0x5f,
	0x35, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x65, 0x61, 0x6e, 0x41, 0x76,
	0x67, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6f, 0x75, 0x35, 0x30, 0x12,
	0x3e, 0x0a, 0x1c, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6f, 0x75, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x6e, 0x41, 0x76, 0x67, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6f, 0x75, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x6c, 0x6f, 0x70, 0x71, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x4f, 0x50, 0x51, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x70, 0x71, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0xbd, 0x05, 0x0a, 0x0b, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x48, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x79, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x42, 0x79, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x09,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x0c, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x03, 0x48, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x03, 0x41,
	0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x64, 0x52, 0x04, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x22, 0xcb, 0x03, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x61, 0x73, 0x4f, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xd5, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x02, 0x0a, 0x17, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x37, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f,
	0x45, 0x76, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x8b, 0x01,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x55, 0x52, 0x4c, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x22, 0xa1, 0x07, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x62, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x4a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x10,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x17, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x74, 0x77, 0x6f, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22,
	0xa2, 0x04, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x46, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x47, 0x64, 0x70,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x50,
	0x0a, 0x16, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74,
	0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x22, 0x28, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf2, 0x04, 0x0a,
	0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x61, 0x73, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x6e, 0x6f, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x6f, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e,
	0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x56,
	0x6f, 0x63, 0x61, 0x62, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x55, 0x52, 0x4c, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x0f, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x24, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xbf, 0x02,
	0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x1f, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xd3, 0x02, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xf4, 0x06, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x40, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x69, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x61, 0x69, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x69, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x61, 0x69, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x53, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x4c,
	0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x22, 0x90, 0x01, 0x0a, 0x12, 0x41, 0x69, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x6d, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x57,
	0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x03, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x21, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x61, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x31, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x22, 0x62, 0x0a, 0x1d, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x45, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x56, 0x45, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69,
	0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x56, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x56, 0x45, 0x44,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x02, 0x22, 0xa7, 0x03, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x14,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x67, 0x0a, 0x17,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53,
	0x10, 0x03, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x1c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0x56, 0x0a, 0x1f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x32, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x49, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a,
	0x16, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x0f, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0e, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x19, 0x61, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x17, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xdf, 0x02, 0x0a,
	0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x99,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x27, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x22, 0x61, 0x70, 0x69, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x22, 0x41,
	0x50, 0x49, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0xd4, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x17,
	0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0xd9, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x4d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x08,
	0x67, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x08, 0x67, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x52, 0x47, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x32, 0x22, 0x7c, 0x0a, 0x0e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x6a, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x61, 0x72,
	0x69, 0x66, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75,
	0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x48, 0x0a, 0x10, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x59, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x10, 0x03, 0x2a, 0x8f, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50,
	0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f,
	0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x10, 0x05, 0x2a, 0x33, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x0c, 0x41, 0x50, 0x49,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0x03, 0x2a, 0x3c, 0x0a, 0x11, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x10, 0x03, 0x2a,
	0x1d, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x52, 0x47, 0x10, 0x01, 0x2a, 0x24,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x56, 0x47, 0x10, 0x01, 0x2a, 0x60, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49,
	0x4e, 0x55, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x62, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x03, 0x2a, 0x5a, 0x0a, 0x0f, 0x54, 0x61,
	0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x6b, 0x69, 0x74, 0x10, 0x04, 0x42, 0x5d, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2d,
	0x67, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x66, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02,
	0x04, 0x43, 0x41, 0x49, 0x50, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_clarifai_api_resources_proto_rawDescOnce sync.Once
	file_proto_clarifai_api_resources_proto_rawDescData = file_proto_clarifai_api_resources_proto_rawDesc
)

func file_proto_clarifai_api_resources_proto_rawDescGZIP() []byte {
	file_proto_clarifai_api_resources_proto_rawDescOnce.Do(func() {
		file_proto_clarifai_api_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_clarifai_api_resources_proto_rawDescData)
	})
	return file_proto_clarifai_api_resources_proto_rawDescData
}

var file_proto_clarifai_api_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_proto_clarifai_api_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 120)
var file_proto_clarifai_api_resources_proto_goTypes = []interface{}{
	(ExpirationAction)(0),                  // 0: clarifai.api.ExpirationAction
	(LicenseScope)(0),                      // 1: clarifai.api.LicenseScope
	(ValueComparator)(0),                   // 2: clarifai.api.ValueComparator
	(EvaluationType)(0),                    // 3: clarifai.api.EvaluationType
	(APIEventType)(0),                      // 4: clarifai.api.APIEventType
	(UsageIntervalType)(0),                 // 5: clarifai.api.UsageIntervalType
	(RoleType)(0),                          // 6: clarifai.api.RoleType
	(StatValueAggType)(0),                  // 7: clarifai.api.StatValueAggType
	(StatTimeAggType)(0),                   // 8: clarifai.api.StatTimeAggType
	(ValidationErrorType)(0),               // 9: clarifai.api.ValidationErrorType
	(TagCategoryName)(0),                   // 10: clarifai.api.TagCategoryName
	(ModelTypeField_ModelTypeFieldType)(0), // 11: clarifai.api.ModelTypeField.ModelTypeFieldType
	(Task_TaskType)(0),                     // 12: clarifai.api.Task.TaskType
	(TaskWorker_TaskWorkerStrategy)(0),     // 13: clarifai.api.TaskWorker.TaskWorkerStrategy
	(TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy)(0), // 14: clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy
	(TaskInputSource_TaskInputSourceType)(0),                             // 15: clarifai.api.TaskInputSource.TaskInputSourceType
	(TaskReview_TaskReviewStrategy)(0),                                   // 16: clarifai.api.TaskReview.TaskReviewStrategy
	(Visibility_Gettable)(0),                                             // 17: clarifai.api.Visibility.Gettable
	(*Annotation)(nil),                                                   // 18: clarifai.api.Annotation
	(*App)(nil),                                                          // 19: clarifai.api.App
	(*AppQuery)(nil),                                                     // 20: clarifai.api.AppQuery
	(*Collaborator)(nil),                                                 // 21: clarifai.api.Collaborator
	(*Collaboration)(nil),                                                // 22: clarifai.api.Collaboration
	(*Audio)(nil),                                                        // 23: clarifai.api.Audio
	(*Track)(nil),                                                        // 24: clarifai.api.Track
	(*Cluster)(nil),                                                      // 25: clarifai.api.Cluster
	(*Color)(nil),                                                        // 26: clarifai.api.Color
	(*W3C)(nil),                                                          // 27: clarifai.api.W3C
	(*UserAppIDSet)(nil),                                                 // 28: clarifai.api.UserAppIDSet
	(*PatchAction)(nil),                                                  // 29: clarifai.api.PatchAction
	(*Concept)(nil),                                                      // 30: clarifai.api.Concept
	(*ConceptCount)(nil),                                                 // 31: clarifai.api.ConceptCount
	(*ConceptTypeCount)(nil),                                             // 32: clarifai.api.ConceptTypeCount
	(*DetailConceptCount)(nil),                                           // 33: clarifai.api.DetailConceptCount
	(*ConceptQuery)(nil),                                                 // 34: clarifai.api.ConceptQuery
	(*ConceptRelation)(nil),                                              // 35: clarifai.api.ConceptRelation
	(*KnowledgeGraph)(nil),                                               // 36: clarifai.api.KnowledgeGraph
	(*ConceptMappingJob)(nil),                                            // 37: clarifai.api.ConceptMappingJob
	(*ConceptLanguage)(nil),                                              // 38: clarifai.api.ConceptLanguage
	(*Data)(nil),                                                         // 39: clarifai.api.Data
	(*Region)(nil),                                                       // 40: clarifai.api.Region
	(*RegionInfo)(nil),                                                   // 41: clarifai.api.RegionInfo
	(*BoundingBox)(nil),                                                  // 42: clarifai.api.BoundingBox
	(*FrameInfo)(nil),                                                    // 43: clarifai.api.FrameInfo
	(*Frame)(nil),                                                        // 44: clarifai.api.Frame
	(*Mask)(nil),                                                         // 45: clarifai.api.Mask
	(*Polygon)(nil),                                                      // 46: clarifai.api.Polygon
	(*Point)(nil),                                                        // 47: clarifai.api.Point
	(*Embedding)(nil),                                                    // 48: clarifai.api.Embedding
	(*GeoPoint)(nil),                                                     // 49: clarifai.api.GeoPoint
	(*GeoLimit)(nil),                                                     // 50: clarifai.api.GeoLimit
	(*GeoBoxedPoint)(nil),                                                // 51: clarifai.api.GeoBoxedPoint
	(*Geo)(nil),                                                          // 52: clarifai.api.Geo
	(*Image)(nil),                                                        // 53: clarifai.api.Image
	(*HostedURL)(nil),                                                    // 54: clarifai.api.HostedURL
	(*Input)(nil),                                                        // 55: clarifai.api.Input
	(*InputCount)(nil),                                                   // 56: clarifai.api.InputCount
	(*WorkflowResultsSimilarity)(nil),                                    // 57: clarifai.api.WorkflowResultsSimilarity
	(*Key)(nil),                                                          // 58: clarifai.api.Key
	(*Model)(nil),                                                        // 59: clarifai.api.Model
	(*ModelReference)(nil),                                               // 60: clarifai.api.ModelReference
	(*ModelVersionInputExample)(nil),                                     // 61: clarifai.api.ModelVersionInputExample
	(*OutputInfo)(nil),                                                   // 62: clarifai.api.OutputInfo
	(*InputInfo)(nil),                                                    // 63: clarifai.api.InputInfo
	(*TrainInfo)(nil),                                                    // 64: clarifai.api.TrainInfo
	(*OutputConfig)(nil),                                                 // 65: clarifai.api.OutputConfig
	(*ModelType)(nil),                                                    // 66: clarifai.api.ModelType
	(*ModelTypeField)(nil),                                               // 67: clarifai.api.ModelTypeField
	(*ModelTypeRangeInfo)(nil),                                           // 68: clarifai.api.ModelTypeRangeInfo
	(*ModelTypeEnumOption)(nil),                                          // 69: clarifai.api.ModelTypeEnumOption
	(*ModelQuery)(nil),                                                   // 70: clarifai.api.ModelQuery
	(*ModelVersion)(nil),                                                 // 71: clarifai.api.ModelVersion
	(*PretrainedModelConfig)(nil),                                        // 72: clarifai.api.PretrainedModelConfig
	(*TrainStats)(nil),                                                   // 73: clarifai.api.TrainStats
	(*LossCurveEntry)(nil),                                               // 74: clarifai.api.LossCurveEntry
	(*LabelCount)(nil),                                                   // 75: clarifai.api.LabelCount
	(*LabelDistribution)(nil),                                            // 76: clarifai.api.LabelDistribution
	(*CooccurrenceMatrixEntry)(nil),                                      // 77: clarifai.api.CooccurrenceMatrixEntry
	(*CooccurrenceMatrix)(nil),                                           // 78: clarifai.api.CooccurrenceMatrix
	(*ConfusionMatrixEntry)(nil),                                         // 79: clarifai.api.ConfusionMatrixEntry
	(*ConfusionMatrix)(nil),                                              // 80: clarifai.api.ConfusionMatrix
	(*ROC)(nil),                                                          // 81: clarifai.api.ROC
	(*PrecisionRecallCurve)(nil),                                         // 82: clarifai.api.PrecisionRecallCurve
	(*BinaryMetrics)(nil),                                                // 83: clarifai.api.BinaryMetrics
	(*TrackerMetrics)(nil),                                               // 84: clarifai.api.TrackerMetrics
	(*EvalTestSetEntry)(nil),                                             // 85: clarifai.api.EvalTestSetEntry
	(*LOPQEvalResult)(nil),                                               // 86: clarifai.api.LOPQEvalResult
	(*MetricsSummary)(nil),                                               // 87: clarifai.api.MetricsSummary
	(*EvalMetrics)(nil),                                                  // 88: clarifai.api.EvalMetrics
	(*FieldsValue)(nil),                                                  // 89: clarifai.api.FieldsValue
	(*Output)(nil),                                                       // 90: clarifai.api.Output
	(*ScopeDeps)(nil),                                                    // 91: clarifai.api.ScopeDeps
	(*EndpointDeps)(nil),                                                 // 92: clarifai.api.EndpointDeps
	(*Hit)(nil),                                                          // 93: clarifai.api.Hit
	(*And)(nil),                                                          // 94: clarifai.api.And
	(*Query)(nil),                                                        // 95: clarifai.api.Query
	(*Search)(nil),                                                       // 96: clarifai.api.Search
	(*Filter)(nil),                                                       // 97: clarifai.api.Filter
	(*TimeRange)(nil),                                                    // 98: clarifai.api.TimeRange
	(*Rank)(nil),                                                         // 99: clarifai.api.Rank
	(*AnnotationSearchMetrics)(nil),                                      // 100: clarifai.api.AnnotationSearchMetrics
	(*Text)(nil),                                                         // 101: clarifai.api.Text
	(*User)(nil),                                                         // 102: clarifai.api.User
	(*UserDetail)(nil),                                                   // 103: clarifai.api.UserDetail
	(*EmailAddress)(nil),                                                 // 104: clarifai.api.EmailAddress
	(*Password)(nil),                                                     // 105: clarifai.api.Password
	(*PasswordViolations)(nil),                                           // 106: clarifai.api.PasswordViolations
	(*Video)(nil),                                                        // 107: clarifai.api.Video
	(*Workflow)(nil),                                                     // 108: clarifai.api.Workflow
	(*WorkflowVersion)(nil),                                              // 109: clarifai.api.WorkflowVersion
	(*WorkflowNode)(nil),                                                 // 110: clarifai.api.WorkflowNode
	(*NodeInput)(nil),                                                    // 111: clarifai.api.NodeInput
	(*WorkflowResult)(nil),                                               // 112: clarifai.api.WorkflowResult
	(*WorkflowState)(nil),                                                // 113: clarifai.api.WorkflowState
	(*AppDuplication)(nil),                                               // 114: clarifai.api.AppDuplication
	(*AppDuplicationFilters)(nil),                                        // 115: clarifai.api.AppDuplicationFilters
	(*Task)(nil),                                                         // 116: clarifai.api.Task
	(*AiAssistParameters)(nil),                                           // 117: clarifai.api.AiAssistParameters
	(*TaskWorker)(nil),                                                   // 118: clarifai.api.TaskWorker
	(*TaskWorkerPartitionedStrategyInfo)(nil),                            // 119: clarifai.api.TaskWorkerPartitionedStrategyInfo
	(*TaskInputSource)(nil),                                              // 120: clarifai.api.TaskInputSource
	(*TaskReview)(nil),                                                   // 121: clarifai.api.TaskReview
	(*TaskReviewManualStrategyInfo)(nil),                                 // 122: clarifai.api.TaskReviewManualStrategyInfo
	(*TaskReviewConsensusStrategyInfo)(nil),                              // 123: clarifai.api.TaskReviewConsensusStrategyInfo
	(*TaskAIAssistant)(nil),                                              // 124: clarifai.api.TaskAIAssistant
	(*TaskStatusCountPerUser)(nil),                                       // 125: clarifai.api.TaskStatusCountPerUser
	(*Collector)(nil),                                                    // 126: clarifai.api.Collector
	(*CollectorSource)(nil),                                              // 127: clarifai.api.CollectorSource
	(*APIPostModelOutputsCollectorSource)(nil),                           // 128: clarifai.api.APIPostModelOutputsCollectorSource
	(*StatValue)(nil),                                                    // 129: clarifai.api.StatValue
	(*StatValueAggregateResult)(nil),                                     // 130: clarifai.api.StatValueAggregateResult
	(*StatValueAggregate)(nil),                                           // 131: clarifai.api.StatValueAggregate
	(*StatValueAggregateQuery)(nil),                                      // 132: clarifai.api.StatValueAggregateQuery
	(*Visibility)(nil),                                                   // 133: clarifai.api.Visibility
	(*TrendingMetric)(nil),                                               // 134: clarifai.api.TrendingMetric
	(*TimeSegment)(nil),                                                  // 135: clarifai.api.TimeSegment
	(*TimeInfo)(nil),                                                     // 136: clarifai.api.TimeInfo
	(*Track_TrackInfo)(nil),                                              // 137: clarifai.api.Track.TrackInfo
	(*_struct.Struct)(nil),                                               // 138: google.protobuf.Struct
	(*status.Status)(nil),                                                // 139: clarifai.api.status.Status
	(*timestamp.Timestamp)(nil),                                          // 140: google.protobuf.Timestamp
	(*_struct.Value)(nil),                                                // 141: google.protobuf.Value
}
var file_proto_clarifai_api_resources_proto_depIdxs = []int32{
	39,  // 0: clarifai.api.Annotation.data:type_name -> clarifai.api.Data
	138, // 1: clarifai.api.Annotation.annotation_info:type_name -> google.protobuf.Struct
	139, // 2: clarifai.api.Annotation.status:type_name -> clarifai.api.status.Status
	140, // 3: clarifai.api.Annotation.created_at:type_name -> google.protobuf.Timestamp
	140, // 4: clarifai.api.Annotation.modified_at:type_name -> google.protobuf.Timestamp
	138, // 5: clarifai.api.Annotation.consensus_info:type_name -> google.protobuf.Struct
	140, // 6: clarifai.api.App.created_at:type_name -> google.protobuf.Timestamp
	140, // 7: clarifai.api.App.modified_at:type_name -> google.protobuf.Timestamp
	138, // 8: clarifai.api.App.metadata:type_name -> google.protobuf.Struct
	133, // 9: clarifai.api.App.visibility:type_name -> clarifai.api.Visibility
	19,  // 10: clarifai.api.Collaborator.app:type_name -> clarifai.api.App
	102, // 11: clarifai.api.Collaborator.user:type_name -> clarifai.api.User
	140, // 12: clarifai.api.Collaborator.created_at:type_name -> google.protobuf.Timestamp
	140, // 13: clarifai.api.Collaborator.modified_at:type_name -> google.protobuf.Timestamp
	140, // 14: clarifai.api.Collaborator.deleted_at:type_name -> google.protobuf.Timestamp
	19,  // 15: clarifai.api.Collaboration.app:type_name -> clarifai.api.App
	102, // 16: clarifai.api.Collaboration.app_owner:type_name -> clarifai.api.User
	140, // 17: clarifai.api.Collaboration.created_at:type_name -> google.protobuf.Timestamp
	54,  // 18: clarifai.api.Audio.hosted:type_name -> clarifai.api.HostedURL
	39,  // 19: clarifai.api.Track.data:type_name -> clarifai.api.Data
	137, // 20: clarifai.api.Track.track_info:type_name -> clarifai.api.Track.TrackInfo
	136, // 21: clarifai.api.Track.time_info:type_name -> clarifai.api.TimeInfo
	93,  // 22: clarifai.api.Cluster.hits:type_name -> clarifai.api.Hit
	27,  // 23: clarifai.api.Color.w3c:type_name -> clarifai.api.W3C
	140, // 24: clarifai.api.Concept.created_at:type_name -> google.protobuf.Timestamp
	133, // 25: clarifai.api.Concept.visibility:type_name -> clarifai.api.Visibility
	32,  // 26: clarifai.api.ConceptCount.concept_type_count:type_name -> clarifai.api.ConceptTypeCount
	33,  // 27: clarifai.api.ConceptCount.detail_concept_count:type_name -> clarifai.api.DetailConceptCount
	32,  // 28: clarifai.api.DetailConceptCount.processed:type_name -> clarifai.api.ConceptTypeCount
	32,  // 29: clarifai.api.DetailConceptCount.to_process:type_name -> clarifai.api.ConceptTypeCount
	32,  // 30: clarifai.api.DetailConceptCount.errors:type_name -> clarifai.api.ConceptTypeCount
	32,  // 31: clarifai.api.DetailConceptCount.processing:type_name -> clarifai.api.ConceptTypeCount
	30,  // 32: clarifai.api.ConceptRelation.subject_concept:type_name -> clarifai.api.Concept
	30,  // 33: clarifai.api.ConceptRelation.object_concept:type_name -> clarifai.api.Concept
	133, // 34: clarifai.api.ConceptRelation.visibility:type_name -> clarifai.api.Visibility
	53,  // 35: clarifai.api.Data.image:type_name -> clarifai.api.Image
	107, // 36: clarifai.api.Data.video:type_name -> clarifai.api.Video
	30,  // 37: clarifai.api.Data.concepts:type_name -> clarifai.api.Concept
	138, // 38: clarifai.api.Data.metadata:type_name -> google.protobuf.Struct
	52,  // 39: clarifai.api.Data.geo:type_name -> clarifai.api.Geo
	26,  // 40: clarifai.api.Data.colors:type_name -> clarifai.api.Color
	25,  // 41: clarifai.api.Data.clusters:type_name -> clarifai.api.Cluster
	48,  // 42: clarifai.api.Data.embeddings:type_name -> clarifai.api.Embedding
	40,  // 43: clarifai.api.Data.regions:type_name -> clarifai.api.Region
	44,  // 44: clarifai.api.Data.frames:type_name -> clarifai.api.Frame
	101, // 45: clarifai.api.Data.text:type_name -> clarifai.api.Text
	23,  // 46: clarifai.api.Data.audio:type_name -> clarifai.api.Audio
	24,  // 47: clarifai.api.Data.tracks:type_name -> clarifai.api.Track
	135, // 48: clarifai.api.Data.time_segments:type_name -> clarifai.api.TimeSegment
	41,  // 49: clarifai.api.Region.region_info:type_name -> clarifai.api.RegionInfo
	39,  // 50: clarifai.api.Region.data:type_name -> clarifai.api.Data
	42,  // 51: clarifai.api.RegionInfo.bounding_box:type_name -> clarifai.api.BoundingBox
	45,  // 52: clarifai.api.RegionInfo.mask:type_name -> clarifai.api.Mask
	46,  // 53: clarifai.api.RegionInfo.polygon:type_name -> clarifai.api.Polygon
	47,  // 54: clarifai.api.RegionInfo.point:type_name -> clarifai.api.Point
	43,  // 55: clarifai.api.Frame.frame_info:type_name -> clarifai.api.FrameInfo
	39,  // 56: clarifai.api.Frame.data:type_name -> clarifai.api.Data
	53,  // 57: clarifai.api.Mask.image:type_name -> clarifai.api.Image
	47,  // 58: clarifai.api.Polygon.points:type_name -> clarifai.api.Point
	49,  // 59: clarifai.api.GeoBoxedPoint.geo_point:type_name -> clarifai.api.GeoPoint
	49,  // 60: clarifai.api.Geo.geo_point:type_name -> clarifai.api.GeoPoint
	50,  // 61: clarifai.api.Geo.geo_limit:type_name -> clarifai.api.GeoLimit
	51,  // 62: clarifai.api.Geo.geo_box:type_name -> clarifai.api.GeoBoxedPoint
	54,  // 63: clarifai.api.Image.hosted:type_name -> clarifai.api.HostedURL
	39,  // 64: clarifai.api.Input.data:type_name -> clarifai.api.Data
	140, // 65: clarifai.api.Input.created_at:type_name -> google.protobuf.Timestamp
	140, // 66: clarifai.api.Input.modified_at:type_name -> google.protobuf.Timestamp
	139, // 67: clarifai.api.Input.status:type_name -> clarifai.api.status.Status
	55,  // 68: clarifai.api.WorkflowResultsSimilarity.probe_input:type_name -> clarifai.api.Input
	93,  // 69: clarifai.api.WorkflowResultsSimilarity.pool_results:type_name -> clarifai.api.Hit
	19,  // 70: clarifai.api.Key.apps:type_name -> clarifai.api.App
	140, // 71: clarifai.api.Key.created_at:type_name -> google.protobuf.Timestamp
	140, // 72: clarifai.api.Key.expires_at:type_name -> google.protobuf.Timestamp
	140, // 73: clarifai.api.Model.created_at:type_name -> google.protobuf.Timestamp
	140, // 74: clarifai.api.Model.modified_at:type_name -> google.protobuf.Timestamp
	62,  // 75: clarifai.api.Model.output_info:type_name -> clarifai.api.OutputInfo
	71,  // 76: clarifai.api.Model.model_version:type_name -> clarifai.api.ModelVersion
	63,  // 77: clarifai.api.Model.input_info:type_name -> clarifai.api.InputInfo
	64,  // 78: clarifai.api.Model.train_info:type_name -> clarifai.api.TrainInfo
	133, // 79: clarifai.api.Model.visibility:type_name -> clarifai.api.Visibility
	138, // 80: clarifai.api.Model.metadata:type_name -> google.protobuf.Struct
	138, // 81: clarifai.api.ModelReference.metadata:type_name -> google.protobuf.Struct
	39,  // 82: clarifai.api.ModelVersionInputExample.data:type_name -> clarifai.api.Data
	39,  // 83: clarifai.api.OutputInfo.data:type_name -> clarifai.api.Data
	65,  // 84: clarifai.api.OutputInfo.output_config:type_name -> clarifai.api.OutputConfig
	138, // 85: clarifai.api.OutputInfo.fields_map:type_name -> google.protobuf.Struct
	138, // 86: clarifai.api.OutputInfo.params:type_name -> google.protobuf.Struct
	138, // 87: clarifai.api.InputInfo.fields_map:type_name -> google.protobuf.Struct
	138, // 88: clarifai.api.InputInfo.params:type_name -> google.protobuf.Struct
	138, // 89: clarifai.api.TrainInfo.params:type_name -> google.protobuf.Struct
	30,  // 90: clarifai.api.OutputConfig.select_concepts:type_name -> clarifai.api.Concept
	138, // 91: clarifai.api.OutputConfig.hyper_params:type_name -> google.protobuf.Struct
	138, // 92: clarifai.api.OutputConfig.model_metadata:type_name -> google.protobuf.Struct
	67,  // 93: clarifai.api.ModelType.model_type_fields:type_name -> clarifai.api.ModelTypeField
	138, // 94: clarifai.api.ModelType.expected_pretrained_input_fields:type_name -> google.protobuf.Struct
	138, // 95: clarifai.api.ModelType.expected_pretrained_output_fields:type_name -> google.protobuf.Struct
	11,  // 96: clarifai.api.ModelTypeField.field_type:type_name -> clarifai.api.ModelTypeField.ModelTypeFieldType
	141, // 97: clarifai.api.ModelTypeField.default_value:type_name -> google.protobuf.Value
	69,  // 98: clarifai.api.ModelTypeField.model_type_enum_options:type_name -> clarifai.api.ModelTypeEnumOption
	68,  // 99: clarifai.api.ModelTypeField.model_type_range_info:type_name -> clarifai.api.ModelTypeRangeInfo
	67,  // 100: clarifai.api.ModelTypeEnumOption.model_type_fields:type_name -> clarifai.api.ModelTypeField
	140, // 101: clarifai.api.ModelVersion.created_at:type_name -> google.protobuf.Timestamp
	139, // 102: clarifai.api.ModelVersion.status:type_name -> clarifai.api.status.Status
	88,  // 103: clarifai.api.ModelVersion.metrics:type_name -> clarifai.api.EvalMetrics
	140, // 104: clarifai.api.ModelVersion.completed_at:type_name -> google.protobuf.Timestamp
	133, // 105: clarifai.api.ModelVersion.visibility:type_name -> clarifai.api.Visibility
	140, // 106: clarifai.api.ModelVersion.modified_at:type_name -> google.protobuf.Timestamp
	138, // 107: clarifai.api.ModelVersion.metadata:type_name -> google.protobuf.Struct
	138, // 108: clarifai.api.PretrainedModelConfig.input_fields_map:type_name -> google.protobuf.Struct
	138, // 109: clarifai.api.PretrainedModelConfig.output_fields_map:type_name -> google.protobuf.Struct
	74,  // 110: clarifai.api.TrainStats.loss_curve:type_name -> clarifai.api.LossCurveEntry
	75,  // 111: clarifai.api.LabelDistribution.positive_label_counts:type_name -> clarifai.api.LabelCount
	77,  // 112: clarifai.api.CooccurrenceMatrix.matrix:type_name -> clarifai.api.CooccurrenceMatrixEntry
	79,  // 113: clarifai.api.ConfusionMatrix.matrix:type_name -> clarifai.api.ConfusionMatrixEntry
	30,  // 114: clarifai.api.BinaryMetrics.concept:type_name -> clarifai.api.Concept
	81,  // 115: clarifai.api.BinaryMetrics.roc_curve:type_name -> clarifai.api.ROC
	82,  // 116: clarifai.api.BinaryMetrics.precision_recall_curve:type_name -> clarifai.api.PrecisionRecallCurve
	55,  // 117: clarifai.api.EvalTestSetEntry.input:type_name -> clarifai.api.Input
	30,  // 118: clarifai.api.EvalTestSetEntry.predicted_concepts:type_name -> clarifai.api.Concept
	30,  // 119: clarifai.api.EvalTestSetEntry.ground_truth_concepts:type_name -> clarifai.api.Concept
	18,  // 120: clarifai.api.EvalTestSetEntry.annotation:type_name -> clarifai.api.Annotation
	86,  // 121: clarifai.api.MetricsSummary.lopq_metrics:type_name -> clarifai.api.LOPQEvalResult
	139, // 122: clarifai.api.EvalMetrics.status:type_name -> clarifai.api.status.Status
	87,  // 123: clarifai.api.EvalMetrics.summary:type_name -> clarifai.api.MetricsSummary
	80,  // 124: clarifai.api.EvalMetrics.confusion_matrix:type_name -> clarifai.api.ConfusionMatrix
	78,  // 125: clarifai.api.EvalMetrics.cooccurrence_matrix:type_name -> clarifai.api.CooccurrenceMatrix
	76,  // 126: clarifai.api.EvalMetrics.label_counts:type_name -> clarifai.api.LabelDistribution
	83,  // 127: clarifai.api.EvalMetrics.binary_metrics:type_name -> clarifai.api.BinaryMetrics
	85,  // 128: clarifai.api.EvalMetrics.test_set:type_name -> clarifai.api.EvalTestSetEntry
	83,  // 129: clarifai.api.EvalMetrics.metrics_by_area:type_name -> clarifai.api.BinaryMetrics
	83,  // 130: clarifai.api.EvalMetrics.metrics_by_class:type_name -> clarifai.api.BinaryMetrics
	84,  // 131: clarifai.api.EvalMetrics.tracker_metrics:type_name -> clarifai.api.TrackerMetrics
	139, // 132: clarifai.api.Output.status:type_name -> clarifai.api.status.Status
	140, // 133: clarifai.api.Output.created_at:type_name -> google.protobuf.Timestamp
	59,  // 134: clarifai.api.Output.model:type_name -> clarifai.api.Model
	55,  // 135: clarifai.api.Output.input:type_name -> clarifai.api.Input
	39,  // 136: clarifai.api.Output.data:type_name -> clarifai.api.Data
	55,  // 137: clarifai.api.Hit.input:type_name -> clarifai.api.Input
	18,  // 138: clarifai.api.Hit.annotation:type_name -> clarifai.api.Annotation
	55,  // 139: clarifai.api.And.input:type_name -> clarifai.api.Input
	90,  // 140: clarifai.api.And.output:type_name -> clarifai.api.Output
	18,  // 141: clarifai.api.And.annotation:type_name -> clarifai.api.Annotation
	94,  // 142: clarifai.api.Query.ands:type_name -> clarifai.api.And
	97,  // 143: clarifai.api.Query.filters:type_name -> clarifai.api.Filter
	99,  // 144: clarifai.api.Query.ranks:type_name -> clarifai.api.Rank
	95,  // 145: clarifai.api.Search.query:type_name -> clarifai.api.Query
	140, // 146: clarifai.api.Search.as_of:type_name -> google.protobuf.Timestamp
	140, // 147: clarifai.api.Search.created_at:type_name -> google.protobuf.Timestamp
	140, // 148: clarifai.api.Search.modified_at:type_name -> google.protobuf.Timestamp
	133, // 149: clarifai.api.Search.visibility:type_name -> clarifai.api.Visibility
	18,  // 150: clarifai.api.Filter.annotation:type_name -> clarifai.api.Annotation
	55,  // 151: clarifai.api.Filter.input:type_name -> clarifai.api.Input
	98,  // 152: clarifai.api.Filter.last_updated_time_range:type_name -> clarifai.api.TimeRange
	140, // 153: clarifai.api.TimeRange.start_time:type_name -> google.protobuf.Timestamp
	140, // 154: clarifai.api.TimeRange.end_time:type_name -> google.protobuf.Timestamp
	18,  // 155: clarifai.api.Rank.annotation:type_name -> clarifai.api.Annotation
	96,  // 156: clarifai.api.AnnotationSearchMetrics.ground_truth:type_name -> clarifai.api.Search
	96,  // 157: clarifai.api.AnnotationSearchMetrics.search_to_eval:type_name -> clarifai.api.Search
	88,  // 158: clarifai.api.AnnotationSearchMetrics.metrics:type_name -> clarifai.api.EvalMetrics
	39,  // 159: clarifai.api.AnnotationSearchMetrics.data:type_name -> clarifai.api.Data
	133, // 160: clarifai.api.AnnotationSearchMetrics.visibility:type_name -> clarifai.api.Visibility
	54,  // 161: clarifai.api.Text.hosted:type_name -> clarifai.api.HostedURL
	140, // 162: clarifai.api.User.created_at:type_name -> google.protobuf.Timestamp
	140, // 163: clarifai.api.User.date_gdpr_consent:type_name -> google.protobuf.Timestamp
	140, // 164: clarifai.api.User.date_tos_consent:type_name -> google.protobuf.Timestamp
	140, // 165: clarifai.api.User.date_marketing_consent:type_name -> google.protobuf.Timestamp
	138, // 166: clarifai.api.User.metadata:type_name -> google.protobuf.Struct
	104, // 167: clarifai.api.User.email_addresses:type_name -> clarifai.api.EmailAddress
	133, // 168: clarifai.api.User.visibility:type_name -> clarifai.api.Visibility
	103, // 169: clarifai.api.User.user_detail:type_name -> clarifai.api.UserDetail
	140, // 170: clarifai.api.UserDetail.date_gdpr_consent:type_name -> google.protobuf.Timestamp
	140, // 171: clarifai.api.UserDetail.date_tos_consent:type_name -> google.protobuf.Timestamp
	140, // 172: clarifai.api.UserDetail.date_marketing_consent:type_name -> google.protobuf.Timestamp
	138, // 173: clarifai.api.UserDetail.metadata:type_name -> google.protobuf.Struct
	104, // 174: clarifai.api.UserDetail.email_addresses:type_name -> clarifai.api.EmailAddress
	54,  // 175: clarifai.api.Video.hosted:type_name -> clarifai.api.HostedURL
	140, // 176: clarifai.api.Workflow.created_at:type_name -> google.protobuf.Timestamp
	110, // 177: clarifai.api.Workflow.nodes:type_name -> clarifai.api.WorkflowNode
	138, // 178: clarifai.api.Workflow.metadata:type_name -> google.protobuf.Struct
	133, // 179: clarifai.api.Workflow.visibility:type_name -> clarifai.api.Visibility
	140, // 180: clarifai.api.Workflow.modified_at:type_name -> google.protobuf.Timestamp
	109, // 181: clarifai.api.Workflow.version:type_name -> clarifai.api.WorkflowVersion
	140, // 182: clarifai.api.WorkflowVersion.created_at:type_name -> google.protobuf.Timestamp
	140, // 183: clarifai.api.WorkflowVersion.modified_at:type_name -> google.protobuf.Timestamp
	133, // 184: clarifai.api.WorkflowVersion.visibility:type_name -> clarifai.api.Visibility
	110, // 185: clarifai.api.WorkflowVersion.nodes:type_name -> clarifai.api.WorkflowNode
	138, // 186: clarifai.api.WorkflowVersion.metadata:type_name -> google.protobuf.Struct
	59,  // 187: clarifai.api.WorkflowNode.model:type_name -> clarifai.api.Model
	111, // 188: clarifai.api.WorkflowNode.node_inputs:type_name -> clarifai.api.NodeInput
	139, // 189: clarifai.api.WorkflowResult.status:type_name -> clarifai.api.status.Status
	140, // 190: clarifai.api.WorkflowResult.created_at:type_name -> google.protobuf.Timestamp
	59,  // 191: clarifai.api.WorkflowResult.model:type_name -> clarifai.api.Model
	55,  // 192: clarifai.api.WorkflowResult.input:type_name -> clarifai.api.Input
	90,  // 193: clarifai.api.WorkflowResult.outputs:type_name -> clarifai.api.Output
	139, // 194: clarifai.api.AppDuplication.status:type_name -> clarifai.api.status.Status
	140, // 195: clarifai.api.AppDuplication.created_at:type_name -> google.protobuf.Timestamp
	140, // 196: clarifai.api.AppDuplication.last_modified_at:type_name -> google.protobuf.Timestamp
	115, // 197: clarifai.api.AppDuplication.filter:type_name -> clarifai.api.AppDuplicationFilters
	140, // 198: clarifai.api.Task.created_at:type_name -> google.protobuf.Timestamp
	140, // 199: clarifai.api.Task.modified_at:type_name -> google.protobuf.Timestamp
	12,  // 200: clarifai.api.Task.type:type_name -> clarifai.api.Task.TaskType
	118, // 201: clarifai.api.Task.worker:type_name -> clarifai.api.TaskWorker
	120, // 202: clarifai.api.Task.input_source:type_name -> clarifai.api.TaskInputSource
	124, // 203: clarifai.api.Task.ai_assistant:type_name -> clarifai.api.TaskAIAssistant
	121, // 204: clarifai.api.Task.review:type_name -> clarifai.api.TaskReview
	139, // 205: clarifai.api.Task.status:type_name -> clarifai.api.status.Status
	117, // 206: clarifai.api.Task.ai_assist_params:type_name -> clarifai.api.AiAssistParameters
	133, // 207: clarifai.api.Task.visibility:type_name -> clarifai.api.Visibility
	13,  // 208: clarifai.api.TaskWorker.strategy:type_name -> clarifai.api.TaskWorker.TaskWorkerStrategy
	119, // 209: clarifai.api.TaskWorker.partitioned_strategy_info:type_name -> clarifai.api.TaskWorkerPartitionedStrategyInfo
	14,  // 210: clarifai.api.TaskWorkerPartitionedStrategyInfo.type:type_name -> clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy
	138, // 211: clarifai.api.TaskWorkerPartitionedStrategyInfo.weights:type_name -> google.protobuf.Struct
	15,  // 212: clarifai.api.TaskInputSource.type:type_name -> clarifai.api.TaskInputSource.TaskInputSourceType
	16,  // 213: clarifai.api.TaskReview.strategy:type_name -> clarifai.api.TaskReview.TaskReviewStrategy
	122, // 214: clarifai.api.TaskReview.manual_strategy_info:type_name -> clarifai.api.TaskReviewManualStrategyInfo
	123, // 215: clarifai.api.TaskReview.consensus_strategy_info:type_name -> clarifai.api.TaskReviewConsensusStrategyInfo
	140, // 216: clarifai.api.Collector.created_at:type_name -> google.protobuf.Timestamp
	127, // 217: clarifai.api.Collector.collector_source:type_name -> clarifai.api.CollectorSource
	139, // 218: clarifai.api.Collector.status:type_name -> clarifai.api.status.Status
	128, // 219: clarifai.api.CollectorSource.api_post_model_outputs_collector_source:type_name -> clarifai.api.APIPostModelOutputsCollectorSource
	140, // 220: clarifai.api.StatValue.time:type_name -> google.protobuf.Timestamp
	131, // 221: clarifai.api.StatValueAggregateResult.stat_value_aggregates:type_name -> clarifai.api.StatValueAggregate
	132, // 222: clarifai.api.StatValueAggregateResult.stat_value_aggregate_query:type_name -> clarifai.api.StatValueAggregateQuery
	140, // 223: clarifai.api.StatValueAggregate.time:type_name -> google.protobuf.Timestamp
	7,   // 224: clarifai.api.StatValueAggregateQuery.stat_value_agg_type:type_name -> clarifai.api.StatValueAggType
	8,   // 225: clarifai.api.StatValueAggregateQuery.stat_time_agg_type:type_name -> clarifai.api.StatTimeAggType
	140, // 226: clarifai.api.StatValueAggregateQuery.start_time:type_name -> google.protobuf.Timestamp
	140, // 227: clarifai.api.StatValueAggregateQuery.end_time:type_name -> google.protobuf.Timestamp
	17,  // 228: clarifai.api.Visibility.gettable:type_name -> clarifai.api.Visibility.Gettable
	39,  // 229: clarifai.api.TimeSegment.data:type_name -> clarifai.api.Data
	136, // 230: clarifai.api.TimeSegment.time_info:type_name -> clarifai.api.TimeInfo
	140, // 231: clarifai.api.TimeInfo.begin_time:type_name -> google.protobuf.Timestamp
	140, // 232: clarifai.api.TimeInfo.end_time:type_name -> google.protobuf.Timestamp
	140, // 233: clarifai.api.Track.TrackInfo.begin_time:type_name -> google.protobuf.Timestamp
	140, // 234: clarifai.api.Track.TrackInfo.end_time:type_name -> google.protobuf.Timestamp
	235, // [235:235] is the sub-list for method output_type
	235, // [235:235] is the sub-list for method input_type
	235, // [235:235] is the sub-list for extension type_name
	235, // [235:235] is the sub-list for extension extendee
	0,   // [0:235] is the sub-list for field type_name
}

func init() { file_proto_clarifai_api_resources_proto_init() }
func file_proto_clarifai_api_resources_proto_init() {
	if File_proto_clarifai_api_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_clarifai_api_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collaborator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collaboration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*W3C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAppIDSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Concept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptTypeCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailConceptCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnowledgeGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMappingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoBoxedPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostedURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowResultsSimilarity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionInputExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTypeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTypeRangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTypeEnumOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PretrainedModelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossCurveEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CooccurrenceMatrixEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CooccurrenceMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfusionMatrixEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfusionMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrecisionRecallCurve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalTestSetEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LOPQEvalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeDeps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointDeps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationSearchMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Password); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordViolations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDuplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDuplicationFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiAssistParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkerPartitionedStrategyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInputSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReviewManualStrategyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReviewConsensusStrategyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAIAssistant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusCountPerUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPostModelOutputsCollectorSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatValueAggregateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatValueAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatValueAggregateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Visibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrendingMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clarifai_api_resources_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track_TrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_clarifai_api_resources_proto_msgTypes[100].OneofWrappers = []interface{}{
		(*TaskWorker_PartitionedStrategyInfo)(nil),
	}
	file_proto_clarifai_api_resources_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*TaskReview_ManualStrategyInfo)(nil),
		(*TaskReview_ConsensusStrategyInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_clarifai_api_resources_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   120,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_clarifai_api_resources_proto_goTypes,
		DependencyIndexes: file_proto_clarifai_api_resources_proto_depIdxs,
		EnumInfos:         file_proto_clarifai_api_resources_proto_enumTypes,
		MessageInfos:      file_proto_clarifai_api_resources_proto_msgTypes,
	}.Build()
	File_proto_clarifai_api_resources_proto = out.File
	file_proto_clarifai_api_resources_proto_rawDesc = nil
	file_proto_clarifai_api_resources_proto_goTypes = nil
	file_proto_clarifai_api_resources_proto_depIdxs = nil
}
